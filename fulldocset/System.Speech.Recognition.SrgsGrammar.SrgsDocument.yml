### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  id: SrgsDocument
  children:
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)
  - System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase
  langs:
  - csharp
  name: SrgsDocument
  nameWithType: SrgsDocument
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  type: Class
  summary: "Определяет объект времени разработки, который используется для создания строго типизированных среды выполнения грамматик, которые соответствуют [спецификации грамматики распознавания речи (SRGS) версии 1.0](http://www.w3.org/TR/speech-grammar/)."
  remarks: "Вы можете создать пустой экземпляр SrgsDocument и построения Грамматика путем добавления экземпляров классов, представляющих SRGS элементы, такие как <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>,<xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag>и <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> </xref:System.Speech.Recognition.SrgsGrammar.SrgsSemanticInterpretationTag> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> </xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> </xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Можно также создать экземпляр SrgsDocument из существующего файла грамматики SRGS-совместимый XML, из экземпляра <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, или из экземпляра <xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>       После создания объекта SrgsDocument, могут быть загружены в <xref:System.Speech.Recognition.Grammar>объекта или его компиляция с <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler>, что позволяет ему считать <xref:System.Speech.Recognition.Grammar>объекта.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler> </xref:System.Speech.Recognition.Grammar>       В разделе [SrgsGrammar с помощью создания грамматик](http://msdn.microsoft.com/en-us/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906) в [системы речи руководство по программированию для .NET Framework 4.0](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043) Дополнительные сведения и примеры."
  syntax:
    content: public class SrgsDocument
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: SrgsDocument()
  nameWithType: SrgsDocument.SrgsDocument()
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Initializes a new instance of the <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref> class."
  remarks: "Этот конструктор создает пустой <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>экземпляра.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Для построения грамматики в пустой <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>экземпляра, добавьте экземпляры классов, представляющих SRGS элементы, такие как <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef>, <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf>и <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> </xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>"
  example:
  - "The following example creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> object and then creates a public rule named `winnerRule`. It then creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> that consists of the string \"A nation that has won the world cup is:\", and adds this item to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> property of the rule. The example then creates two more rules (`ruleEurope` and `ruleSAmerica`), each of which is an <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object that contains three <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> objects. After that, another <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object is created that contains <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> objects that refer to `ruleEurope` and `ruleSAmerica`. The new <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object is then added to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> property of `winnerRule`. After this, all three rules (`winnerRule`, `ruleEurope`, and `ruleSAmerica`) are added to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> property of <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Finally, the three rules are compiled into a binary representation of the grammar.  \n  \n```c#  \npublic void WorldSoccerWinners ()  \n{  \n  \n  // Create an SrgsDocument, create a new rule  \n  // and set its scope to public.  \n  SrgsDocument document = new SrgsDocument();  \n  SrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \n  winnerRule.Scope = SrgsRuleScope.Public;  \n  \n  // Add the introduction.  \n  winnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n  // Create the rule for the European nations.  \n  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"),   \n    new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \n  SrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n  // Create the rule for the South American nations.  \n  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"),   \n    new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \n  SrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n  // Add references to winnerRule for ruleEurope and ruleSAmerica.  \n  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   \n    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n  // Add all the rules to the document and make winnerRule   \n  // the root rule of the document.  \n  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \n  document.Root = winnerRule;  \n  \n  String fileName = Path.GetTempFileName();  \n  using (FileStream stream = new FileStream(fileName, FileMode.Create))   \n  {   \n  \n    // Compile the grammar to a binary format.  \n    SrgsGrammarCompiler.Compile(document, stream);   \n  }  \n}  \n```"
  syntax:
    content: public SrgsDocument ();
    parameters: []
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: SrgsDocument(GrammarBuilder)
  nameWithType: SrgsDocument.SrgsDocument(GrammarBuilder)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(GrammarBuilder)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса из <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> объекта."
  remarks: ''
  example:
  - "The following example builds a grammar in a <xref:System.Speech.Recognition.GrammarBuilder> instance using <xref:System.Speech.Recognition.Choices> objects. It then creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> from the <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \nGrammarBuilder builder = null;  \n  \n// Create new Choices objects and add countries, and create GrammarBuilder objects.  \nChoices choicesEurope = new Choices(new string[] { \"England\", \"France\", \"Germany\", \"Italy\" });  \nGrammarBuilder europe = new GrammarBuilder(choicesEurope);  \n  \nChoices choicesSAmerica = new Choices(new string[] { \"Argentina\", \"Brazil\", \"Uruguay\" });  \nGrammarBuilder sAmerica = new GrammarBuilder(choicesSAmerica);  \n  \nChoices worldCupWinnerChoices = new Choices(new GrammarBuilder[] {choicesEurope, choicesSAmerica});  \n  \n// Create new GrammarBuilder from a Choices object.  \nbuilder = new GrammarBuilder(worldCupWinnerChoices);  \n  \n// Create an SrgsDocument object from a GrammarBuilder object.  \nSrgsDocument document = new SrgsDocument(builder);  \n```"
  syntax:
    content: public SrgsDocument (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> Объект, используемый для создания <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>builder</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: SrgsDocument(SrgsRule)
  nameWithType: SrgsDocument.SrgsDocument(SrgsRule)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(SrgsRule)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса и указывает <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsRule&quot;> </xref> объект, который будет корневое правило грамматики."
  remarks: "Этот конструктор добавляет указанное правило для <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection>из <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>и устанавливает его как <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A>правило грамматики.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection>"
  example:
  - "The following example creates two rules (`chooseCities` and `destCities`) for choosing origin and destination cities for a flight. The example initializes the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance using the `chooseCities` rule as an argument. The example writes the contents  of the rules collection and the name of the root rule to the console.  \n  \n```c#  \n// Create a rule that contains a list of destination cities.  \nSrgsRule destCities = new SrgsRule(\"Destination\");  \nSrgsOneOf toCities = new SrgsOneOf(new string[] { \"New York\", \"Seattle\", \"Denver\" });  \ndestCities.Add(toCities);  \n  \n// Create a list of origin cities and supporting phrases.  \nSrgsOneOf fromCities = new SrgsOneOf(new SrgsItem[] {   \n  new SrgsItem(\"Dallas\"), new SrgsItem(\"Miami\"), new SrgsItem(\"Chicago\") });  \nSrgsItem intro = new SrgsItem(\"I want to fly from\");  \nSrgsItem to = new SrgsItem(\"to\");  \n  \n// Create the root rule of the grammar, and assemble the components.  \nSrgsRule chooseCities = new SrgsRule(\"Trip\");  \nchooseCities.Add(intro);  \nchooseCities.Add(fromCities);  \nchooseCities.Add(to);  \nchooseCities.Add(new SrgsRuleRef(destCities));  \n  \n// Create the SrgsDocument and specify the root rule to add.  \nSrgsDocument bookFlight = new SrgsDocument(chooseCities);  \n  \n// Add the rule for the destination cities to the document's rule collection.  \nbookFlight.Rules.Add(new SrgsRule[] { destCities });  \n  \n// Display the contents of the Rules collection and the name of the root rule.  \nforeach (SrgsRule rule in bookFlight.Rules)  \n{  \n  Console.WriteLine(\"Rule \" + rule.Id + \" is in the rules collection\");  \n}  \nConsole.WriteLine(\"Root Rule \" + bookFlight.Root.Id);  \n  \n// Create a Grammar object and load it to the recognizer.  \nGrammar g = new Grammar(bookFlight);  \ng.Name = (\"City Chooser\");  \nrecognizer.LoadGrammarAsync(g);  \n  \n```"
  syntax:
    content: public SrgsDocument (System.Speech.Recognition.SrgsGrammar.SrgsRule grammarRootRule);
    parameters:
    - id: grammarRootRule
      type: System.Speech.Recognition.SrgsGrammar.SrgsRule
      description: "The <xref uid=&quot;langword_csharp_root rule&quot; name=&quot;root rule&quot; href=&quot;&quot;></xref> in the <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref> object."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>grammarRootRule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: SrgsDocument(String)
  nameWithType: SrgsDocument.SrgsDocument(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> Указание расположения XML-документа, он используется для заполнения <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> from the file named \"srgsDocumentFile.xml\".  \n  \n```c#  \nstring srgsDocumentFile = Path.Combine(Path.GetTempPath(), \"srgsDocumentFile.xml\");  \nSrgsDocument document = null;  \n  \nif (File.Exists(srgsDocumentFile))  \n   document = new SrgsDocument(srgsDocumentFile);  \n```"
  syntax:
    content: public SrgsDocument (string path);
    parameters:
    - id: path
      type: System.String
      description: "Расположение SRGS XML-файла."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>является пустой строкой."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)
  id: '#ctor(System.Xml.XmlReader)'
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: SrgsDocument(XmlReader)
  nameWithType: SrgsDocument.SrgsDocument(XmlReader)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(XmlReader)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> от экземпляра класса <xref:System.Xml.XmlReader>, ссылается на файл грамматики XML-формате.</xref:System.Xml.XmlReader>"
  remarks: ''
  example:
  - "The following example creates a new instance of <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> from an instance of <xref:System.Xml.XmlReader> that references the file \"srgsDocumentFile.xml\".  \n  \n```c#  \nstring srgsDocumentFile = Path.Combine(Path.GetTempPath(), \"srgsDocumentFile.xml\");  \nSrgsDocument document = null;  \n  \nif (File.Exists(srgsDocumentFile))  \n{  \n  XmlReader reader = XmlReader.Create(srgsDocumentFile);  \n  document = new SrgsDocument(reader);  \n  reader.Close();  \n}  \n```"
  syntax:
    content: public SrgsDocument (System.Xml.XmlReader srgsGrammar);
    parameters:
    - id: srgsGrammar
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Объекта, созданного с помощью <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра XML.</xref:System.Xml.XmlReader>"
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srgsGrammar</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences
  id: AssemblyReferences
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: AssemblyReferences
  nameWithType: SrgsDocument.AssemblyReferences
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает сведения для ссылки на сборку <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  syntax:
    content: public System.Collections.ObjectModel.Collection<string> AssemblyReferences { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "Свойство AssemblyReferences возвращает коллекцию строк, содержащий список ссылок на сборки."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind
  id: CodeBehind
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: CodeBehind
  nameWithType: SrgsDocument.CodeBehind
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Получает сведения о программной <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  syntax:
    content: public System.Collections.ObjectModel.Collection<string> CodeBehind { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "Свойство фонового кода возвращает коллекцию строк, содержащий список документов кода."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture
  id: Culture
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Culture
  nameWithType: SrgsDocument.Culture
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает сведения о культуре для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  remarks: "Microsoft Windows и System.Speech API принять все допустимые коды страны языка. Чтобы выполнить распознавание речи на языке, указанном в свойстве языка и региональных параметров, должны устанавливаться распознавания речи, поддерживающий этот код страны языка. Распознавания речи, в состав Microsoft Windows 7 работать со следующими кодами языка страны.      -en-GB. Английский (Великобритания) - en US. Английский (США) - de-DE. Немецкий (Германия) - es-ES. Испанский (Испания) - fr-FR. Французский (Франция) - ja-JP. Японский (Япония) - zh-CN. Китайский (Китай) - zh-TW. Также допускаются китайского (Тайвань) двухбуквенный кодов языка, например «en», «fr» или «es»."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Объект <xref:System.Globalization.CultureInfo>, содержащий сведения о текущем языка и региональных параметров <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>.</xref:System.Globalization.CultureInfo>"
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Значение, назначаемое для языка и региональных параметров — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Значение, назначаемое для языка и региональных параметров является <xref:System.Globalization.CultureInfo.InvariantCulture*>.</xref:System.Globalization.CultureInfo.InvariantCulture*>"
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug
  id: Debug
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Debug
  nameWithType: SrgsDocument.Debug
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает номера строк, которые должны быть добавлены в встроенные сценарии."
  syntax:
    content: public bool Debug { get; set; }
    return:
      type: System.Boolean
      description: "Это свойство возвращает отладки <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Если номера строк, которые должны быть добавлены для отладки; в противном случае возвращает <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces
  id: ImportNamespaces
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: ImportNamespaces
  nameWithType: SrgsDocument.ImportNamespaces
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает связанные пространства имен текущего <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  syntax:
    content: public System.Collections.ObjectModel.Collection<string> ImportNamespaces { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "Свойство ImportNamespaces возвращает коллекцию строк, содержащую список связанных пространств имен в <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language
  id: Language
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Language
  nameWithType: SrgsDocument.Language
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает язык программирования, используемый для встроенного кода на <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  syntax:
    content: public string Language { get; set; }
    return:
      type: System.String
      description: "Свойство Language возвращает язык программирования, на который <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> установлено."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode
  id: Mode
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Mode
  nameWithType: SrgsDocument.Mode
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает режим для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: "Возвращает свойство режима член <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode>, определяющий тип ввода, <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>ожидает.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode> Двумя возможными значениями являются `Voice` речевого ввода и `Dtmf` для ввода тонов двумя тон (двухтональный), которые обычно связаны с телефона."
  syntax:
    content: public System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode Mode { get; set; }
    return:
      type: System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode
      description: "Режим распознавания <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace
  id: Namespace
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Namespace
  nameWithType: SrgsDocument.Namespace
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает пространство имен <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "Свойство пространства имен возвращает пространство имен для текущего <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet
  id: PhoneticAlphabet
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: PhoneticAlphabet
  nameWithType: SrgsDocument.PhoneticAlphabet
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает фонетического алфавита от <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: "Алфавитах фонетического состоят из телефонов, состоящих из букв, цифр и символов, иногда в сочетании. Каждый телефона описывает уникальный звук речи. Это отличается от латинского алфавита, для которого любую букву могут представлять несколько произноситься звуков. Попробуйте другой произношение буквы «c» в слова «candy» и «прекращение» или другой произношение комбинации буква «th» в слова «всего» и «те».       В System.Speech, можно использовать любой из трех алфавитах фонетического для указания пользовательского Произношение: международной Phone алфавита (IPA), набор универсальных Phone (ИБП) или SAPI phone набора. Указанному фонетическому алфавиту определяет, какой набор телефона будет использоваться для определения встроенной произношения <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>объектов.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> Телефоны, указанный в <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>должно соответствовать фонетического алфавита, указанный в PhoneticAlphabet.</xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A>       В разделе [словари и алфавитах фонетического](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) для получения дополнительной информации."
  syntax:
    content: public System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet PhoneticAlphabet { get; set; }
    return:
      type: System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet
      description: "Возвращает фонетического алфавита, который должен использоваться для указания пользовательского произношение в <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsToken&quot;> </xref> объекта."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root
  id: Root
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Root
  nameWithType: SrgsDocument.Root
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает корневое правило из <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: "<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>Объект уже должен находиться в документе <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection>Прежде чем его можно перевести **корневое правило**.</xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>       Можно также задать корневое правило <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>объекта с помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>объект в качестве аргумента для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>конструктор.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>"
  example:
  - "The following example creates a rule named `winnerRule`, and then creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> object named `document`. The example then calls the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> method to add the rule to the document. Finally, the example sets the document's Root property to `winnerRule`, thereby making it the `root rule` for the grammar defined by the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> object.  \n  \n```c#  \nSrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \nwinnerRule.Scope = SrgsRuleScope.Public;  \n  \nSrgsDocument document = new SrgsDocument();  \n  \ndocument.Rules.Add(winnerRule);  \ndocument.Root = winnerRule;   \n```"
  syntax:
    content: public System.Speech.Recognition.SrgsGrammar.SrgsRule Root { get; set; }
    return:
      type: System.Speech.Recognition.SrgsGrammar.SrgsRule
      description: "Возвращает правило, которое используется в качестве корневого правило <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules
  id: Rules
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Rules
  nameWithType: SrgsDocument.Rules
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Получает коллекцию правил, которые в настоящее время определены для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: "Можно добавить <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>объектов <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection>с помощью <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A>метод для свойства правила.</xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> Если инициализация <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>объекта и укажите <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>объект в качестве аргумента, <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule>автоматически добавляется <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection>для <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> </xref:System.Speech.Recognition.SrgsGrammar.SrgsRule> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>"
  example:
  - "The following example creates a grammar that recognizes the phrase \"A nation that has won the World Cup is\" followed by the name of a country that has won the World Cup. The example creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> object, and then creates a public rule named `winnerRule`. After adding a string to the rule `winnerRule`, the example creates two more rules (`ruleEurope` and `ruleSAmerica`), each containing a list of countries. Using the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection.Add%2A> method, the example adds all three rules (`winnerRule`, `ruleEurope`, and `ruleSAmerica`) to the Rules property of the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>.  \n  \n```c#  \npublic void WorldSoccerWinners ()  \n{  \n  \n  // Create an SrgsDocument, create a new rule  \n  // and set its scope to public.  \n  SrgsDocument document = new SrgsDocument();  \n  SrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \n  winnerRule.Scope = SrgsRuleScope.Public;  \n  \n  // Add the introduction.  \n  winnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n  // Create the rule for the European nations.  \n  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"),   \n    new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \n  SrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n  // Create the rule for the South American nations.  \n  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"),   \n    new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \n  SrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n  // Add references to winnerRule for ruleEurope and ruleSAmerica.  \n  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   \n    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n  // Add all the rules to the document and make winnerRule   \n  // the root rule of the document.  \n  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \n  document.Root = winnerRule;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection Rules { get; }
    return:
      type: System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection
      description: "Возвращает правилам, определенным для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> объекта."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script
  id: Script
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: Script
  nameWithType: SrgsDocument.Script
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает язык сценариев .NET для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: >-
    > [!NOTE]

    >  This property has been deprecated. Its use is no longer recommended.
  syntax:
    content: public string Script { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Script&quot; name=&quot;Script&quot; href=&quot;&quot;> </xref> Свойство возвращает текущий язык сценариев .NET для <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Попытка задать свойства скрипта значение null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Попытка задать свойство скрипта на пустую строку."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)
  id: WriteSrgs(System.Xml.XmlWriter)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: WriteSrgs(XmlWriter)
  nameWithType: SrgsDocument.WriteSrgs(XmlWriter)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(XmlWriter)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Записывает содержимое <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> объекта в файл грамматики XML-формате, который соответствует [спецификации грамматики распознавания речи (SRGS) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)."
  remarks: ''
  example:
  - "The following example creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> object, and then creates a public rule named `winnerRule`. It then creates an <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> that consists of the string \"A nation that has won the world cup is:\", and adds this item to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> property of the rule. The example then creates two more rules (`ruleEurope` and `ruleSAmerica`), each of which is an <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object that contains three <xref:System.Speech.Recognition.SrgsGrammar.SrgsItem> objects. After that, another <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object is created that contains <xref:System.Speech.Recognition.SrgsGrammar.SrgsRuleRef> objects that refer to `ruleEurope` and `ruleSAmerica`. The new <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> object is then added to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.Elements%2A> property of `winnerRule`. After this, all three rules (`winnerRule`, `ruleEurope`, and `ruleSAmerica`) are added to the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules%2A> property of the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>. Finally, the example creates an empty XML file and an instance of <xref:System.Xml.XmlWriter>.  The WriteSrgs method uses the <xref:System.Xml.XmlWriter> instance to write the contents of the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> to the XML file.  \n  \n```c#  \npublic void WorldSoccerWinners ()  \n{  \n  \n  // Create an SrgsDocument, create a new rule  \n  // and set its scope to public.  \n  SrgsDocument document = new SrgsDocument();  \n  SrgsRule winnerRule = new SrgsRule(\"WorldCupWinner\");  \n  winnerRule.Scope = SrgsRuleScope.Public;  \n  \n  // Add the introduction.  \n  winnerRule.Elements.Add(new SrgsItem(\"A nation that has won the world cup is: \"));  \n  \n  // Create the rule for the European nations.  \n  SrgsOneOf oneOfEurope = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"England\"),   \n    new SrgsItem(\"France\"), new SrgsItem(\"Germany\"), new SrgsItem(\"Italy\")});  \n  SrgsRule ruleEurope = (new SrgsRule(\"EuropeanNations\", new SrgsElement[] {oneOfEurope}));  \n  \n  // Create the rule for the South American nations.  \n  SrgsOneOf oneOfSAmerica = new SrgsOneOf(new SrgsItem[] {new SrgsItem(\"Argentina\"),   \n    new SrgsItem(\"Brazil\"), new SrgsItem(\"Uruguay\")});  \n  SrgsRule ruleSAmerica = (new SrgsRule(\"SouthAmericanNations\", new SrgsElement[] {oneOfSAmerica}));  \n  \n  // Add references to winnerRule for ruleEurope and ruleSAmerica.  \n  winnerRule.Elements.Add(new SrgsOneOf(new SrgsItem[] {(new SrgsItem   \n    (new SrgsRuleRef(ruleEurope))), new SrgsItem(new SrgsRuleRef(ruleSAmerica))}));  \n  \n  // Add all the rules to the document and make winnerRule   \n  // the root rule of the document.  \n  document.Rules.Add(new SrgsRule[] {winnerRule, ruleEurope, ruleSAmerica});  \n  document.Root = winnerRule;  \n  \n  // Create a string object with the path to the file to use.  \n  string srgsDocumentFile = Path.Combine(Path.GetTempPath(), \"srgsDocumentFile.xml\");  \n  \n  // Create an XmlWriter object and pass the file path.  \n  XmlWriter writer = XmlWriter.Create(srgsDocumentFile);  \n  \n  // Write the contents of the XmlWriter object to an SRGS-compatible XML file.  \n  document.WriteSrgs(writer);  \n  writer.Close();  \n}  \n```"
  syntax:
    content: public void WriteSrgs (System.Xml.XmlWriter srgsGrammar);
    parameters:
    - id: srgsGrammar
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>, Используемый для записи <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> экземпляра.</xref:System.Xml.XmlWriter>"
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srgsGrammar</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase
  id: XmlBase
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  langs:
  - csharp
  name: XmlBase
  nameWithType: SrgsDocument.XmlBase
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition.SrgsGrammar
  summary: "Возвращает или задает базовый URI <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref> класса."
  remarks: 'Свойство XmlBase возвращает значение, которое используется для разрешения относительных URI в <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>объекта.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> Предположим, что значение для XmlBase — «http://www.contoso.com/» и <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>содержит ссылку на относительный правило в другом документе, например `SrgsRuleRef(&quot;ExternalGrammar.grxml&quot;)`.</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> При этом создается следующий абсолютный путь для внешнего документа: `http://www.contoso.com/ExternalGrammar.grxml`.'
  syntax:
    content: public Uri XmlBase { get; set; }
    return:
      type: System.Uri
      description: "Текущий базовый URI <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>."
  overload: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument()
  nameWithType: SrgsDocument.SrgsDocument()
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument()
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument(GrammarBuilder)
  nameWithType: SrgsDocument.SrgsDocument(GrammarBuilder)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsRule)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument(SrgsRule)
  nameWithType: SrgsDocument.SrgsDocument(SrgsRule)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(SrgsRule)
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRule
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsRule
  nameWithType: SrgsRule
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRule
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.String)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument(String)
  nameWithType: SrgsDocument.SrgsDocument(String)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor(System.Xml.XmlReader)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument(XmlReader)
  nameWithType: SrgsDocument.SrgsDocument(XmlReader)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.SrgsDocument(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: AssemblyReferences
  nameWithType: SrgsDocument.AssemblyReferences
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences
- uid: System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: CodeBehind
  nameWithType: SrgsDocument.CodeBehind
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Culture
  nameWithType: SrgsDocument.Culture
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Debug
  nameWithType: SrgsDocument.Debug
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: ImportNamespaces
  nameWithType: SrgsDocument.ImportNamespaces
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Language
  nameWithType: SrgsDocument.Language
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Mode
  nameWithType: SrgsDocument.Mode
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode
- uid: System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsGrammarMode
  nameWithType: SrgsGrammarMode
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsGrammarMode
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Namespace
  nameWithType: SrgsDocument.Namespace
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: PhoneticAlphabet
  nameWithType: SrgsDocument.PhoneticAlphabet
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet
- uid: System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsPhoneticAlphabet
  nameWithType: SrgsPhoneticAlphabet
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsPhoneticAlphabet
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Root
  nameWithType: SrgsDocument.Root
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Rules
  nameWithType: SrgsDocument.Rules
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules
- uid: System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsRulesCollection
  nameWithType: SrgsRulesCollection
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsRulesCollection
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Script
  nameWithType: SrgsDocument.Script
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(System.Xml.XmlWriter)
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: WriteSrgs(XmlWriter)
  nameWithType: SrgsDocument.WriteSrgs(XmlWriter)
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: XmlBase
  nameWithType: SrgsDocument.XmlBase
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.#ctor*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: SrgsDocument
  nameWithType: SrgsDocument.SrgsDocument
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.AssemblyReferences*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: AssemblyReferences
  nameWithType: SrgsDocument.AssemblyReferences
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.CodeBehind*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: CodeBehind
  nameWithType: SrgsDocument.CodeBehind
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Culture*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Culture
  nameWithType: SrgsDocument.Culture
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Debug*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Debug
  nameWithType: SrgsDocument.Debug
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.ImportNamespaces*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: ImportNamespaces
  nameWithType: SrgsDocument.ImportNamespaces
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Language*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Language
  nameWithType: SrgsDocument.Language
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Mode*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Mode
  nameWithType: SrgsDocument.Mode
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Namespace*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Namespace
  nameWithType: SrgsDocument.Namespace
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: PhoneticAlphabet
  nameWithType: SrgsDocument.PhoneticAlphabet
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Root*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Root
  nameWithType: SrgsDocument.Root
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Rules*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Rules
  nameWithType: SrgsDocument.Rules
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.Script*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: Script
  nameWithType: SrgsDocument.Script
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.WriteSrgs*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: WriteSrgs
  nameWithType: SrgsDocument.WriteSrgs
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument.XmlBase*
  parent: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  isExternal: false
  name: XmlBase
  nameWithType: SrgsDocument.XmlBase
