### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PnrpPermission
  id: PnrpPermission
  children:
  - System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Net.PeerToPeer.PnrpPermission.Copy
  - System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  - System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  - System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  - System.Net.PeerToPeer.PnrpPermission.ToXml
  - System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: PnrpPermission
  nameWithType: PnrpPermission
  fullName: System.Net.PeerToPeer.PnrpPermission
  type: Class
  summary: "Задает значения, которые используются в <xref href=&quot;System.Net.PeerToPeer&quot;> </xref> объекта разрешения."
  remarks: "Разрешения по умолчанию позволяют всем локальным приложениям и приложениям зоны интрасети для доступа к службам протокола PNRP. Если разрешения по умолчанию не изменяются, всех локальных и локального сайта приложения имеют доступ к службам одноранговая сеть, но глобальные приложения (Интернет) не имеют доступа.       Экземпляры этого типа имеют два состояния разрешений: либо у них нет доступа к ресурсу, защищенному разрешением или они имеют неограниченный полный доступ к этим ресурсам."
  syntax:
    content: 'public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> класса с состоянием предоставленных начальных разрешений."
  remarks: "Экземпляры этого типа имеют два состояния разрешений: либо у них нет доступа к ресурсу, защищенному разрешением или они имеют неограниченный полный доступ к этим ресурсам.       Если `state` имеет неограниченный, передает экземпляр класса PnrpPermission отклоняет все запросы. Если `state` имеет любое другое значение, экземпляр класса PnrpPermission отклоняет отклоняет все запросы."
  syntax:
    content: public PnrpPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Одно из значений в <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> перечисления."
  overload: System.Net.PeerToPeer.PnrpPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  id: Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Создает и возвращает идентичную копию текущего <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  remarks: "Копия разрешения предоставляет такой же доступ к ресурсам, что само разрешение.       Экземпляры этого типа имеют два состояния разрешений: либо у них нет доступа к ресурсу, защищенному разрешением или они имеют неограниченный полный доступ к этим ресурсам."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Объект с интерфейсом IPermission, экземпляр которого содержит копию текущего экземпляра <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.Copy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-Параметр не является допустимым <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> элемента.      Номер версии параметр не поддерживается."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Параметр — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ссылки (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Восстанавливает объект безопасности с указанным состоянием из кодировки XML."
  remarks: "Представляет модель объектов XML для кодирования объектов безопасности. Этот класс не наследуется.       Этот класс должен быть облегченная реализация простой объектной модели XML для использования в системе безопасности, а не для использования в качестве общей объектной модели XML."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "Кодировка XML, используемая для восстановления разрешения."
  overload: System.Net.PeerToPeer.PnrpPermission.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-Параметр не является допустимым <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> элемента.      Номер версии параметр не поддерживается."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Параметр — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ссылки (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Создает и возвращает разрешение, представляющее собой пересечение текущего <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> и указанного разрешений."
  remarks: "Пересечение двух разрешений является разрешением, которое описывает набор операций, в обоих разрешениях. Только запрос, передающий оба исходных разрешения, передает их пересечение.       Следующие инструкции, обязательно `true` для всех реализаций метода Intersect. X и Y представляют <xref:System.Security.IPermission>ссылок на объекты, которые не являются `null` ссылкой (Nothing в Visual Basic).</xref:System.Security.IPermission>      -X.Intersect(X) возвращает значение X.      -X.Intersect(Y) возвращает то же значение, что Y.Intersect(X).      -X.Intersect(a `null` reference (`Nothing` in Visual Basic)) возвращает `null` ссылки (`Nothing` в Visual Basic)."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение Intersect, с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новое разрешение, представляющее собой пересечение текущего <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> и указанного разрешений. Это новое разрешение равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ссылки (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic), если пересечение является пустым."
  overload: System.Net.PeerToPeer.PnrpPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Конечный параметр не является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ссылки (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic) и не является экземпляром того же класса, что и текущее разрешение."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Определяет, является ли текущий <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> является подмножеством указанного разрешения."
  remarks: "The current <xref:System.Net.PeerToPeer.PnrpPermission> is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to \"*C:\\example.txt*\" is a subset of a permission that represents access to \"*C:\\\\*\". If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all implementations of the IsSubsetOf method. X, Y, and Z represent <xref:System.Security.IPermission> objects that are not a `null` reference (`Nothing` in Visual Basic).  \n  \n-   X.IsSubsetOf(X) returns `true`.  \n  \n-   X.IsSubsetOf(Y) returns the same value as Y.IsSubsetOf(X) if and only if X and Y represent the same set of permissions.  \n  \n-   If X.IsSubsetOf(Y) and Y.IsSubsetOf(Z) both return `true`, X.IsSubsetOf(Z) returns `true`.  \n  \n-  \n  \n If X represents an empty IPermission object with a permission state of *None* and Y represents an IPermission object that is a `null` reference (`Nothing` in Visual Basic), X.IsSubsetOf(Y) returns `true`. If Z is also an empty permission, the compound set operation X.Union(Z).IsSubsetOf(Y) also returns `true` because the <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> of two empty permissions is an empty permission."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение, для которого требуется проверить отношение подмножества. Это разрешение должно быть того же типа, что и текущее разрешение."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если текущий <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> является подмножеством указанного разрешения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Конечный параметр не является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> ссылки (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic) и не является экземпляром того же класса, что и текущее разрешение."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает значение, указывающее является ли текущий <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> не ограничено."
  remarks: "Неограниченное разрешение представляет доступ ко всем ресурсам, защищенным с помощью разрешений."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если текущее разрешение является неограниченным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  id: ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Создает кодировку XML для <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> и его текущего состояния."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Объект <xref href=&quot;System.Security.SecurityElement&quot;> </xref> , содержащий кодировку XML разрешения, включающая сведения о состоянии."
  overload: System.Net.PeerToPeer.PnrpPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Создает разрешение, представляющее собой объединение текущего <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> и указанного разрешений."
  remarks: "Разрешение, представляющее все операции, представленные как текущим является результатом вызова на объединение <xref:System.Net.PeerToPeer.PnrpPermission>и указанного разрешений.</xref:System.Net.PeerToPeer.PnrpPermission> Любой запрос, передающий любое разрешение, передает их объединение.       Следующие инструкции, обязательно `true` для всех реализаций метода Union. X и Y представляют <xref:System.Security.IPermission>объекты, не являющиеся `null` ссылки (`Nothing` в Visual Basic).</xref:System.Security.IPermission>      -X.Union(X) возвращает объект, имеющий то же значение, что X.      -X.Union(Y) возвращает объект, имеющий то же значение, что и объект, возвращаемый y.Union(x).      -X.Union(a `null` reference (`Nothing` in Visual Basic)) возвращает объект, имеющий то же значение, что X."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение для объединения с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новое разрешение, представляющее собой объединение текущего <xref href=&quot;System.Net.PeerToPeer.PnrpPermission&quot;> </xref> и указанного разрешений."
  overload: System.Net.PeerToPeer.PnrpPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>target</code>Недопустимый параметр."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission(PermissionState)
  nameWithType: PnrpPermission.PnrpPermission(PermissionState)
  fullName: System.Net.PeerToPeer.PnrpPermission.PnrpPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Net.PeerToPeer.PnrpPermission.Copy
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy()
  nameWithType: PnrpPermission.Copy()
  fullName: System.Net.PeerToPeer.PnrpPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PnrpPermission.FromXml(SecurityElement)
  fullName: System.Net.PeerToPeer.PnrpPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: PnrpPermission.Intersect(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Intersect(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: PnrpPermission.IsSubsetOf(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PnrpPermission.IsUnrestricted()
  fullName: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted()
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml()
  nameWithType: PnrpPermission.ToXml()
  fullName: System.Net.PeerToPeer.PnrpPermission.ToXml()
- uid: System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: PnrpPermission.Union(IPermission)
  fullName: System.Net.PeerToPeer.PnrpPermission.Union(IPermission)
- uid: System.Net.PeerToPeer.PnrpPermission.#ctor*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: PnrpPermission
  nameWithType: PnrpPermission.PnrpPermission
- uid: System.Net.PeerToPeer.PnrpPermission.Copy*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Copy
  nameWithType: PnrpPermission.Copy
- uid: System.Net.PeerToPeer.PnrpPermission.FromXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: FromXml
  nameWithType: PnrpPermission.FromXml
- uid: System.Net.PeerToPeer.PnrpPermission.Intersect*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Intersect
  nameWithType: PnrpPermission.Intersect
- uid: System.Net.PeerToPeer.PnrpPermission.IsSubsetOf*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: PnrpPermission.IsSubsetOf
- uid: System.Net.PeerToPeer.PnrpPermission.IsUnrestricted*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: PnrpPermission.IsUnrestricted
- uid: System.Net.PeerToPeer.PnrpPermission.ToXml*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: ToXml
  nameWithType: PnrpPermission.ToXml
- uid: System.Net.PeerToPeer.PnrpPermission.Union*
  parent: System.Net.PeerToPeer.PnrpPermission
  isExternal: false
  name: Union
  nameWithType: PnrpPermission.Union
