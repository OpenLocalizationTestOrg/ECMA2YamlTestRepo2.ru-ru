### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACRIPEMD160
  id: HMACRIPEMD160
  children:
  - System.Security.Cryptography.HMACRIPEMD160.#ctor
  - System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160
  fullName: System.Security.Cryptography.HMACRIPEMD160
  type: Class
  summary: "Вычисляет хэш-проверки подлинности сообщения код (HMAC) с помощью <xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;> </xref> хеш-функции."
  remarks: "HMACRIPEMD160 — это тип хэш-алгоритма, который создается из RIPEMD-160 хэш-функции и используется как хэш-проверки подлинности сообщения код (HMAC). Процесс HMAC смешивании секретного ключа с данными сообщения, вычислении результата хэш-функции, снова смешивании хэш-значения с секретным ключом и применяет хэш-функцию во второй раз. Выходные данные хэш-код является длиной 160 бит.       Код HMAC может использоваться для определения факта подделки сообщения, передаваемого по незащищенному каналу, при условии, что отправитель и получатель общий секретный ключ. Отправитель вычисляет хэш-значение для исходных данных и передает исходные данные и хэш-значения в одном сообщении. Получатель повторно вычисляет хэш-значение для полученного сообщения и проверяет, что совпадает передаваемых HMAC.       Любое изменение данных или значения хэша вызовет несовпадение, поскольку для изменения сообщения и повторного создания правильного кода HMAC требуется знание секретного ключа. Таким образом Если исходные и вычисляемый хэш-коды совпадают, сообщение проходит проверку подлинности.       HMACRIPEMD160 принимает ключи любого размера и создает хеш-последовательность, 160 бит длиннее.       Хэш-алгоритма RIPEMD и правопреемников были разработаны европейских ПОЛОСЫ проекта. Исходный алгоритм RIPEMD был предназначен для замены MD4 и MD5 и более поздней версии была усилить и переименовать RIPEMD-160. Хэш-алгоритма RIPEMD-160 формирует 160-разрядный хэш-значения. Разработчики алгоритма сделали его общедоступным."
  example:
  - "The following example shows how to sign a file by using the HMACRIPEMD160 object and then how to verify the file.  \n  \n [!code-vb[HMACRIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_102_1.vb)]\n [!code-cpp[HMACRIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_102_1.cpp)]\n [!code-cs[HMACRIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_102_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACRIPEMD160 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> класса случайный ключ 64 байт."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>— Это тип хэш-алгоритма, который создается из RIPEMD-160 хэш-функции и используется как хэш-проверки подлинности сообщения код (HMAC).</xref:System.Security.Cryptography.HMACRIPEMD160> Процесс HMAC смешивании секретного ключа с данными сообщения, вычислении результата хэш-функции, снова смешивании хэш-значения с секретным ключом и применяет хэш-функцию во второй раз. Выходного хэша составляет 160 байт.       Этот конструктор использует 64-байтовый случайный ключ."
  syntax:
    content: public HMACRIPEMD160 ();
    parameters: []
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACRIPEMD160
  langs:
  - csharp
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> класса с указанными данными ключа."
  remarks: "<xref:System.Security.Cryptography.HMACRIPEMD160>— Это тип хэш-алгоритма, который создается из RIPEMD-160 хэш-функции и используется как хэш-проверки подлинности сообщения код (HMAC).</xref:System.Security.Cryptography.HMACRIPEMD160> Процесс HMAC смешивании секретного ключа с данными сообщения, вычислении результата хэш-функции, снова смешивании хэш-значения с секретным ключом и применяет хэш-функцию во второй раз. Выходного хэша составляет 160 байт."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACRIPEMD160> class.
  syntax:
    content: public HMACRIPEMD160 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "Секретный ключ для <xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;> </xref> шифрования. Значением ключа может быть любой длины, но он не более 64 байт хэшируется (с использованием SHA-1) для получения 64-байтового ключа. Таким образом рекомендуемый размер секретного ключа — 64 байта."
  overload: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160()
  nameWithType: HMACRIPEMD160.HMACRIPEMD160()
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160()
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160(Byte[])
  nameWithType: HMACRIPEMD160.HMACRIPEMD160(Byte[])
  fullName: System.Security.Cryptography.HMACRIPEMD160.HMACRIPEMD160(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACRIPEMD160.#ctor*
  parent: System.Security.Cryptography.HMACRIPEMD160
  isExternal: false
  name: HMACRIPEMD160
  nameWithType: HMACRIPEMD160.HMACRIPEMD160
