### YamlMime:ManagedReference
items:
- uid: System.Configuration.Provider.ProviderBase
  id: ProviderBase
  children:
  - System.Configuration.Provider.ProviderBase.#ctor
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  langs:
  - csharp
  name: ProviderBase
  nameWithType: ProviderBase
  fullName: System.Configuration.Provider.ProviderBase
  type: Class
  summary: "Предоставляет базовую реализацию для расширяемой модели поставщика."
  remarks: "Модель поставщика предназначена для инкапсуляции всей или части функциональных возможностей нескольких функций ASP.NET, такие как членство, профили и защищенной конфигурации. Она позволяет разработчикам создавать вспомогательные классы, которые предоставляют несколько реализаций инкапсулированной функциональности. Кроме того разработчики могут создавать новые функции при помощи модели поставщика. Это может быть эффективным способом поддержки многих реализаций возможностей функций без дублирования кода функции или записи уровня приложения, если необходимо изменить метод реализации.       Класс ProviderBase является простой, содержащий несколько основные методы и свойства, которые являются общими для всех поставщиков. Специальных поставщиков (например, <xref:System.Web.Security.MembershipProvider>) наследуют от ProviderBase и устанавливать необходимые методы и свойства, которые должен поддерживать зависит от реализации поставщиков для этой функции.</xref:System.Web.Security.MembershipProvider> Зависит от реализации поставщиков (например, <xref:System.Web.Security.SqlMembershipProvider>) в свою очередь наследует от поставщика специальных (в данном случае <xref:System.Web.Security.MembershipProvider>).</xref:System.Web.Security.MembershipProvider> </xref:System.Web.Security.SqlMembershipProvider>       Наиболее важный аспект модели поставщика — что реализации (например, данные сохранены как текстовый файл или в базе данных) извлекается из кода приложения. Тип зависит от реализации поставщика для данной функции определен в файле конфигурации. Затем поставщик функциональным уровнем считывает в тип из файла конфигурации и действует как фабрика на код функции. Разработчик приложения затем можно использовать классы функции в коде приложения. Тип реализации можно выгрузить в файле конфигурации, устраняя необходимость повторного написания кода для подстройки различной методологии реализации.       Поставщики, включенные с ASP.NET, главным образом абстракциями реализаций данных для таких компонентов, как профилей или членства. Однако эта модель могут быть применены на любой вид функциональности, которая может абстрагированы и реализован несколькими способами."
  example:
  - For an example of how to use the ProviderBase class, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract class ProviderBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.#ctor
  id: '#ctor'
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Configuration.Provider.ProviderBase&quot;> </xref> класса."
  syntax:
    content: protected ProviderBase ();
    parameters: []
  overload: System.Configuration.Provider.ProviderBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Description
  id: Description
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Возвращает краткое, понятное описание, подходящее для отображения в инструментах администрирования или других пользовательских интерфейсах (UI)."
  remarks: "Если настроенный поставщик не предоставляет описание, значение <xref:System.Configuration.Provider.ProviderBase.Name%2A>свойство возвращается как значение по умолчанию.</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public virtual string Description { get; }
    return:
      type: System.String
      description: "Краткое, понятное описание удобному для отображения в инструментах администрирования или других пользовательских интерфейсах."
  overload: System.Configuration.Provider.ProviderBase.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Инициализирует поставщика."
  remarks: "Реализация базового класса внутренне отслеживает количество раз, поставщика `Initialize` был вызван метод. Если более одного раза, инициализации поставщика `InvalidOperationException` создается исключение о том, что поставщик уже инициализирован.       Поскольку большинство вызов функции поставщиков инициализируется перед выполнением инициализации поставщика, этот метод является центрального расположения для предотвращения двойные инициализации."
  example:
  - For an example of how to use Initialize, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "Понятное имя поставщика."
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "Коллекция пар имя значение, представляющих атрибуты поставщика, указанные в конфигурации для этого поставщика."
  overload: System.Configuration.Provider.ProviderBase.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Имя поставщика — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Имя поставщика имеет нулевую длину."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Попытка вызвать инициализацию в поставщике после поставщика уже инициализирован."
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Name
  id: Name
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "Возвращает понятное имя, используемое для ссылки на поставщика во время настройки."
  remarks: 'Рекомендуемый шаблон для этой строки: [*Создатель поставщика*] [*тип реализации*] [*функция*] поставщика. Несмотря на то что <xref:System.Configuration.Provider.ProviderBase.Description%2A>свойств также предоставляет понятное описание, используется свойство имени в качестве идентификатора для поставщика.</xref:System.Configuration.Provider.ProviderBase.Description%2A>'
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "Понятное имя, используемое для ссылки на поставщика во время настройки."
  overload: System.Configuration.Provider.ProviderBase.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Configuration.Provider.ProviderBase.#ctor
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
- uid: System.Configuration.Provider.ProviderBase.Description
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.Provider.ProviderBase.Name
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
- uid: System.Configuration.Provider.ProviderBase.#ctor*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase
  nameWithType: ProviderBase.ProviderBase
- uid: System.Configuration.Provider.ProviderBase.Description*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
- uid: System.Configuration.Provider.ProviderBase.Initialize*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize
  nameWithType: ProviderBase.Initialize
- uid: System.Configuration.Provider.ProviderBase.Name*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
