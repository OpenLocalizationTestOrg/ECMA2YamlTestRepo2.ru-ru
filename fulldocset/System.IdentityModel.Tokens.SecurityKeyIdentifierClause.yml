### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  id: SecurityKeyIdentifierClause
  children:
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
  - System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  langs:
  - csharp
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  type: Class
  summary: "Представляет абстрактный базовый класс для предложения идентификатора ключа."
  remarks: "Как правило SecurityKeyIdentifierClause не должны использоваться, отличный от при создании пользовательской службы маркеров безопасности. Когда служба маркеров безопасности возвращает маркер безопасности, выданный маркер безопасности содержит ссылки на прикрепленные и неприкрепленные маркеры безопасности. Прикрепленные ссылки указывают на маркеры безопасности, содержащиеся в заголовке безопасности сообщения SOAP, а неприкрепленные ссылки указывают на маркеры безопасности, не входящими в заголовок безопасности сообщения SOAP. Обычно эти ссылки подтверждают подлинность выданного маркера безопасности."
  syntax:
    content: public abstract class SecurityKeyIdentifierClause
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: SecurityKeyIdentifierClause(String)
  nameWithType: SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> класса, используя тип предложения идентификатора ключа."
  remarks: "При этом идентификатор ключа безопасности сериализуется в формат XML, `clauseType` сериализуется как `ValueType` атрибут `<SecurityTokenReference>` элемента."
  syntax:
    content: protected SecurityKeyIdentifierClause (string clauseType);
    parameters:
    - id: clauseType
      type: System.String
      description: "Тип конструкции идентификатора ключа. Задает значение <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*>Свойства.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*>"
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)
  id: '#ctor(System.String,System.Byte[],System.Int32)'
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: SecurityKeyIdentifierClause(String,Byte[],Int32)
  nameWithType: SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String,Byte[],Int32)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String,Byte[],Int32)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> класса, используя тип предложения идентификатора ключа, специальное слово и длину производного ключа."
  remarks: '[!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)]не поддерживает создание неявных идентификаторов производного ключа. Однако [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] обрабатывает входящие сообщения SOAP, содержащие неявный идентификатор ключа.'
  syntax:
    content: protected SecurityKeyIdentifierClause (string clauseType, byte[] nonce, int length);
    parameters:
    - id: clauseType
      type: System.String
      description: "Тип конструкции идентификатора ключа. Задает значение <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*>Свойства.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*>"
    - id: nonce
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий специальное слово, который использовался для создания производного ключа.</xref:System.Byte> Задает значение, которое возвращается <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*>метод.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*>"
    - id: length
      type: System.Int32
      description: "Размер производного ключа. Задает значение <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*>Свойства.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*>"
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
  id: CanCreateKey
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: CanCreateKey
  nameWithType: SecurityKeyIdentifierClause.CanCreateKey
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает значение, указывающее, можно ли создать ключ."
  remarks: "Если ключ можно создать с помощью параметров, передаваемых в конструктор, переопределите метод CanCreateKey для возврата `true` и реализовать <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey%2A>метод.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey%2A>"
  syntax:
    content: public virtual bool CanCreateKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если можно создать ключ; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
  id: ClauseType
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: ClauseType
  nameWithType: SecurityKeyIdentifierClause.ClauseType
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает тип предложения идентификатора ключа."
  syntax:
    content: public string ClauseType { get; }
    return:
      type: System.String
      description: "Тип конструкции идентификатора ключа."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey
  id: CreateKey
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: CreateKey()
  nameWithType: SecurityKeyIdentifierClause.CreateKey()
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Создает ключ на основе параметров, переданный в конструктор."
  remarks: "Если создать ключ с помощью параметров, передаваемых в конструктор, переопределите <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey%2A>метод для возврата `true` и реализуйте метод CreateKey.</xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey%2A>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityKey CreateKey ();
    parameters: []
    return:
      type: System.IdentityModel.Tokens.SecurityKey
      description: "Объект <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> , содержащий созданный ключ."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
  id: DerivationLength
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: DerivationLength
  nameWithType: SecurityKeyIdentifierClause.DerivationLength
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает размер производного ключа."
  remarks: '[!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)]не поддерживает создание неявных идентификаторов производного ключа. Однако [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] обрабатывает входящие сообщения SOAP, содержащие неявный идентификатор ключа.'
  syntax:
    content: public int DerivationLength { get; }
    return:
      type: System.Int32
      description: "Размер производного ключа."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce
  id: GetDerivationNonce
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: GetDerivationNonce()
  nameWithType: SecurityKeyIdentifierClause.GetDerivationNonce()
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает специальное слово, использованное для создания производного ключа."
  remarks: '[!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)]не поддерживает создание неявных идентификаторов производного ключа. Однако [!INCLUDE[vsindigo](~/add/includes/vsindigo-md.md)] обрабатывает входящие сообщения SOAP, содержащие неявный идентификатор ключа.'
  syntax:
    content: public byte[] GetDerivationNonce ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий специальное слово, использованное для создания производного ключа.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
  id: Id
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: Id
  nameWithType: SecurityKeyIdentifierClause.Id
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает или задает идентификатор предложения идентификатора ключа."
  remarks: "При этом идентификатор ключа безопасности сериализуется в формат XML, свойство идентификатора сериализуется как `Id` атрибут `<SecurityTokenReference>` элемента. Если свойство `null`, `Id` атрибут не включен в `<SecurityTokenReference>` элемент."
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "Идентификатор предложения идентификатора ключа. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  id: Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  langs:
  - csharp
  name: Matches(SecurityKeyIdentifierClause)
  nameWithType: SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Возвращает значение, указывающее, эквивалентен ли идентификатор ключа для этого экземпляра указанное предложение идентификатора ключа."
  syntax:
    content: public virtual bool Matches (System.IdentityModel.Tokens.SecurityKeyIdentifierClause keyIdentifierClause);
    parameters:
    - id: keyIdentifierClause
      type: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
      description: "Объект <xref href=&quot;System.IdentityModel.Tokens.SecurityKeyIdentifierClause&quot;> </xref> для сравнения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> keyIdentifierClause </code> является тем же экземпляром, что и текущий экземпляр; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyIdentifierClause</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String)
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: SecurityKeyIdentifierClause(String)
  nameWithType: SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor(System.String,System.Byte[],System.Int32)
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: SecurityKeyIdentifierClause(String,Byte[],Int32)
  nameWithType: SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String,Byte[],Int32)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.SecurityKeyIdentifierClause(String,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: CanCreateKey
  nameWithType: SecurityKeyIdentifierClause.CanCreateKey
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: ClauseType
  nameWithType: SecurityKeyIdentifierClause.ClauseType
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: CreateKey()
  nameWithType: SecurityKeyIdentifierClause.CreateKey()
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey()
- uid: System.IdentityModel.Tokens.SecurityKey
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: DerivationLength
  nameWithType: SecurityKeyIdentifierClause.DerivationLength
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: GetDerivationNonce()
  nameWithType: SecurityKeyIdentifierClause.GetDerivationNonce()
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce()
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: Id
  nameWithType: SecurityKeyIdentifierClause.Id
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: Matches(SecurityKeyIdentifierClause)
  nameWithType: SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.#ctor*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause.SecurityKeyIdentifierClause
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CanCreateKey*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: CanCreateKey
  nameWithType: SecurityKeyIdentifierClause.CanCreateKey
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.ClauseType*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: ClauseType
  nameWithType: SecurityKeyIdentifierClause.ClauseType
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.CreateKey*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: CreateKey
  nameWithType: SecurityKeyIdentifierClause.CreateKey
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.DerivationLength*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: DerivationLength
  nameWithType: SecurityKeyIdentifierClause.DerivationLength
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.GetDerivationNonce*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: GetDerivationNonce
  nameWithType: SecurityKeyIdentifierClause.GetDerivationNonce
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Id*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: Id
  nameWithType: SecurityKeyIdentifierClause.Id
- uid: System.IdentityModel.Tokens.SecurityKeyIdentifierClause.Matches*
  parent: System.IdentityModel.Tokens.SecurityKeyIdentifierClause
  isExternal: false
  name: Matches
  nameWithType: SecurityKeyIdentifierClause.Matches
