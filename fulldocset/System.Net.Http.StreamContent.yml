### YamlMime:ManagedReference
items:
- uid: System.Net.Http.StreamContent
  id: StreamContent
  children:
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  - System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  - System.Net.Http.StreamContent.CreateContentReadStreamAsync
  - System.Net.Http.StreamContent.Dispose(System.Boolean)
  - System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  langs:
  - csharp
  name: StreamContent
  nameWithType: StreamContent
  fullName: System.Net.Http.StreamContent
  type: Class
  summary: "Предоставляет содержимое HTTP на основе потока."
  syntax:
    content: 'public class StreamContent : System.Net.Http.HttpContent'
  inheritance:
  - System.Object
  - System.Net.Http.HttpContent
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)
  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)
  - System.Net.Http.HttpContent.Dispose
  - System.Net.Http.HttpContent.Headers
  - System.Net.Http.HttpContent.LoadIntoBufferAsync
  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)
  - System.Net.Http.HttpContent.ReadAsByteArrayAsync
  - System.Net.Http.HttpContent.ReadAsStreamAsync
  - System.Net.Http.HttpContent.ReadAsStringAsync
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Создает новый экземпляр <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> класса."
  syntax:
    content: public StreamContent (System.IO.Stream content);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "Содержимое, используемое для инициализации <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  id: '#ctor(System.IO.Stream,System.Int32)'
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Создает новый экземпляр <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> класса."
  syntax:
    content: public StreamContent (System.IO.Stream content, int bufferSize);
    parameters:
    - id: content
      type: System.IO.Stream
      description: "Содержимое, используемое для инициализации <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
    - id: bufferSize
      type: System.Int32
      description: "Размер в байтах буфера для <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref>."
  overload: System.Net.Http.StreamContent.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>content</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> bufferSize </code> Была меньше или равно нулю."
  platform:
  - net462
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  id: CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Записи в поток памяти поток содержимого HTTP в асинхронной операции."
  remarks: "Эта операция не будет блокирована. Возвращенный <xref:System.Threading.Tasks.Task%601>объекта завершит все содержимое, произошло после записи в поток памяти.</xref:System.Threading.Tasks.Task%601>       Метод CreateContentReadStreamAsync выполняет буферизацию содержимого в поток памяти. Это поведение можно переопределить в производных классах при наличии более эффективный способ получения содержимого, как поток. Например, массив байтов или строка может использовать более эффективный способ метода, такие как обтекания только для чтения <xref:System.IO.MemoryStream>вокруг байт или строку.)</xref:System.IO.MemoryStream>"
  syntax:
    content: protected override System.Threading.Tasks.Task<System.IO.Stream> CreateContentReadStreamAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "Объект задачи, представляющий асинхронную операцию."
  overload: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Net.Http.StreamContent&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые `Dispose()` метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> `Dispose()`вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A>вызывает `Dispose` с `disposing` значение `false`. При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Net.Http.StreamContent>ссылки.</xref:System.Net.Http.StreamContent></xref:System.Object.Finalize%2A> Этот метод вызывает `Dispose()` метод для каждого объекта, на который указывает ссылка."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Net.Http.StreamContent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Сериализация содержимого HTTP в поток в качестве асинхронной операции."
  remarks: "Эта операция не будет блокирована. Возвращенный <xref:System.Threading.Tasks.Task>объекта будет выполнена после сериализации все содержимое в целевой поток.</xref:System.Threading.Tasks.Task>"
  syntax:
    content: protected override System.Threading.Tasks.Task SerializeToStreamAsync (System.IO.Stream stream, System.Net.TransportContext context);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Целевой поток."
    - id: context
      type: System.Net.TransportContext
      description: "Сведения о транспорте (например, маркер привязки канала). Этот параметр может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Threading.Tasks.Task
      description: "Объект задачи, представляющий асинхронную операцию."
  overload: System.Net.Http.StreamContent.SerializeToStreamAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  id: TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  langs:
  - csharp
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "Определяет, имеет ли содержимое потока допустимую длину в байтах."
  remarks: "Метод TryComputeLength позволяет поток содержимого HTTP для вычисления длины содержимого. Это полезно для типов содержимого, которые поддерживают возможность легко вычислить длину содержимого. Если вычисление длину содержимого невозможно или ресурсоемкие (потребует системы для буферизации все содержимое, где бы требует много ресурсов или требуют выделения большого объема памяти системы сериализации), этот метод может возвращать `false`. Если этот метод возвращает `false`, это означает, что необходимости поблочное или содержимое должно получить буфер перед его отправкой на сервер."
  syntax:
    content: protected override bool TryComputeLength (out long length);
    parameters:
    - id: length
      type: System.Int64
      description: "Длина содержимого потока в байтах."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> length </code> является допустимой; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Http.StreamContent.TryComputeLength*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpContent
  isExternal: false
  name: System.Net.Http.HttpContent
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream)
  nameWithType: StreamContent.StreamContent(Stream)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Http.StreamContent.#ctor(System.IO.Stream,System.Int32)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent(Stream,Int32)
  nameWithType: StreamContent.StreamContent(Stream,Int32)
  fullName: System.Net.Http.StreamContent.StreamContent(Stream,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync()
  nameWithType: StreamContent.CreateContentReadStreamAsync()
  fullName: System.Net.Http.StreamContent.CreateContentReadStreamAsync()
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.StreamContent.Dispose(System.Boolean)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StreamContent.Dispose(Boolean)
  fullName: System.Net.Http.StreamContent.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync(Stream,TransportContext)
  nameWithType: StreamContent.SerializeToStreamAsync(Stream,TransportContext)
  fullName: System.Net.Http.StreamContent.SerializeToStreamAsync(Stream,TransportContext)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Http.StreamContent.TryComputeLength(System.Int64@)
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength(Int64)
  nameWithType: StreamContent.TryComputeLength(Int64)
  fullName: System.Net.Http.StreamContent.TryComputeLength(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.StreamContent.#ctor*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: StreamContent
  nameWithType: StreamContent.StreamContent
- uid: System.Net.Http.StreamContent.CreateContentReadStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: CreateContentReadStreamAsync
  nameWithType: StreamContent.CreateContentReadStreamAsync
- uid: System.Net.Http.StreamContent.Dispose*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: Dispose
  nameWithType: StreamContent.Dispose
- uid: System.Net.Http.StreamContent.SerializeToStreamAsync*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: SerializeToStreamAsync
  nameWithType: StreamContent.SerializeToStreamAsync
- uid: System.Net.Http.StreamContent.TryComputeLength*
  parent: System.Net.Http.StreamContent
  isExternal: false
  name: TryComputeLength
  nameWithType: StreamContent.TryComputeLength
