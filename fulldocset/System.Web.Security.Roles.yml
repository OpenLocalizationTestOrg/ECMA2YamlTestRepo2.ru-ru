### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  summary: "Управляет членством пользователя в ролях для проверки авторизации в приложении ASP.NET. Этот класс не наследуется."
  remarks: "Управление ролями ASP.NET позволяет управлять авторизацией на основе групп пользователей, называются ролями приложения. Назначение пользователям ролей, можно управлять доступ к различным частям или возможностям веб-приложения на основе роли вместо или в дополнение к указанию авторизации на основе имени пользователя. Например приложение сотрудников может иметь ролей, таких как диспетчеры, сотрудников, директоров и т. д., где указаны различные права для каждой роли.       Пользователи могут принадлежать к нескольким ролям. Например если узел является форумом, некоторые пользователи возможно роль членов и модераторов. Можно определить каждой роли, чтобы иметь разные привилегии на сайте, и пользователь, являющийся обе роли будет иметь оба набора привилегий.       Чтобы включить управление ролями для приложения ASP.NET, используйте элемент `system.web` раздел в файле Web.config для приложения, как показано в следующем примере.      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;&quot; />     </connectionStrings>        <system.web>       <authentication mode=&quot;Forms&quot; >         <forms loginUrl=&quot;login.aspx&quot;         name=&quot;.ASPXFORMSAUTH&quot; />       </authentication>        <roleManager defaultProvider=&quot;SqlProvider&quot;        enabled=&quot;true&quot;       cacheRolesInCookie=&quot;true&quot;       cookieName=&quot;.ASPROLES&quot;       cookieTimeout=&quot;30&quot;       cookiePath=&quot;/&quot;       cookieRequireSSL=&quot;false&quot;       cookieSlidingExpiration=&quot;true&quot;       cookieProtection=&quot;All&quot; >       <providers>         <add           name=&quot;SqlProvider&quot;           type=&quot;System.Web.Security.SqlRoleProvider&quot;           connectionStringName=&quot;SqlServices&quot;           applicationName=&quot;SampleApplication&quot; />         </providers>       </roleManager>     </system.web>   </configuration>   ```Можно указать правила авторизации в файле конфигурации для веб-приложения или программно в коде. Например следующий раздел из файла Web.config требует, чтобы пользователи могли входить (Запрет анонимных пользователей) и затем позволяет только пользователям в роли &quot;Администраторы&quot; должна иметь доступ.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Если вы используете `authorization` раздела в файле Web.config для указания авторизации на основе ролей, пользователи приложения должны предоставить удостоверение пользователя, прошедшего проверку подлинности. Можно проверять подлинность пользователей с использованием проверки подлинности Windows или форм. Анонимные пользователи не может назначить роли. Независимо от базы данных или в сочетании с ASP.NET, можно использовать роли <xref:System.Web.Security.Membership>классы.</xref:System.Web.Security.Membership>       Чтобы проверить членство в роли программными средствами, можно использовать класс ролей или <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>свойство с <xref:System.Web.Security.Roles.IsUserInRole%2A>метод, или же можно использовать <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>свойство с <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName>метод.</xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Web.Security.Roles.IsUserInRole%2A> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> Пример кода, программно проверяет членство в роли см.       Класс ролей позволяет создавать и удалять роли, а также добавлять и удалять пользователей из ролей.      Настроек [!NOTE] настроек при настройке приложения для использования <xref:System.Web.Security.WindowsTokenRoleProvider>класса, невозможно изменить роли или членства в роли.</xref:System.Web.Security.WindowsTokenRoleProvider> <xref:System.Web.Security.WindowsTokenRoleProvider>Только группами classverifies членства в системе безопасности Windows.</xref:System.Web.Security.WindowsTokenRoleProvider> В этом случае необходимо использовать управление учетными записями пользователей Windows, а не роли ASP.NET для создания и удаления групп и управлять членством в группах.       Можно хранить сведения о ролях в нескольких источниках данных.      -Можно использовать <xref:System.Web.Security.WindowsTokenRoleProvider>класса для извлечения сведений о роли на основе членства в группах Windows.</xref:System.Web.Security.WindowsTokenRoleProvider>      -Можно хранить сведения о роли в базе данных SQL Server с помощью <xref:System.Web.Security.SqlRoleProvider>класса.</xref:System.Web.Security.SqlRoleProvider>      -При наличии существующих сведений о роли или сохранить сведения о роли и извлекаться сведения о роли из источника данных, отличных от Windows, хранилища данных авторизации или SQL Server, можно реализовать пользовательского поставщика ролей, создав класс, наследующий от <xref:System.Web.Security.RoleProvider>абстрактного класса.</xref:System.Web.Security.RoleProvider> Дополнительные сведения см. в разделе [реализация поставщика ролей](~/add/includes/ajax-current-ext-md.md).       Если браузер пользователя поддерживает файлы cookie, можно сохранить сведения о роли для этого пользователя в файле cookie на компьютере пользователя. При каждом запросе страницы ASP.NET считывает сведения о роли для этого пользователя из файла cookie. Это может повысить производительность приложения путем сокращения связи с источником данных, необходимый для получения сведений о ролях. Если сведения о роли для пользователя слишком велик для хранения в файле cookie, ASP.NET сохраняет только последний использовавшийся сведения о роли в файле cookie и затем ищет сведения о ролях в источнике данных при необходимости. Если браузер пользователя не поддерживает файлы cookie или их использование отключено, сведения о роли в файле cookie не кэшируется.       Можно повысить надежность имена ролей, кэшированные в файле cookie, указав <xref:System.Web.Security.Roles.CookieProtectionValue%2A>свойства при настройке ролей ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> Значение по умолчанию <xref:System.Web.Security.Roles.CookieProtectionValue%2A>— `All`, который шифрует имена ролей в файле cookie и проверяет, что содержимое файла cookie не будут изменены.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>"
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Добавляет указанных пользователей в указанную роль."
  remarks: "Метод AddUsersToRole вызывает поставщика роли по умолчанию, чтобы связать указанные пользователи с указанной роли в источнике данных.       Если приложение использует <xref:System.Web.Security.SqlRoleProvider>класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>метод выполняются в рамках транзакции.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.      Настроек [!NOTE] настроек имена пользователей и роли не может содержать запятые."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.aspx)]"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Массив строк имен пользователей для добавления в указанную роль."
    - id: roleName
      type: System.String
      description: "Роль, чтобы добавить указанные имена пользователей."
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - один из элементов в <code>usernames</code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,).       - или - один из элементов в <code>usernames</code> является пустой строкой или содержит запятую (,).       - или - <code>usernames</code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Добавляет указанных пользователей в указанные роли."
  remarks: "Метод AddUsersToRoles вызывает поставщика роли по умолчанию, чтобы связать указанные пользователи с указанной роли в источнике данных.       Если приложение использует <xref:System.Web.Security.SqlRoleProvider>класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>метод выполняются в рамках транзакции.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.      Настроек [!NOTE] настроек имена пользователей и роли не может содержать запятые."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_21_1.aspx)]\n [!code-cs[System.Web.Security.Roles#1](~/add/codesnippet/csharp/m-system.web.security.ro_21_1.aspx)]"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Массив строк имен пользователей для добавления в указанные роли."
    - id: roleNames
      type: System.String[]
      description: "Массив строк имен ролей, чтобы добавить указанные имена пользователей."
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Одна из ролей в <code> roleNames </code> является пустой строкой или содержит запятую (,).       - или - один из пользователей в <code> usernames </code> является пустой строкой или содержит запятую (,).       - или - <code> roleNames </code> содержит повторяющийся элемент.       - или - <code> usernames </code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Добавляет указанного пользователя в указанную роль."
  remarks: "Метод AddUserToRole вызывает поставщика роли по умолчанию, чтобы связать указанный пользователь с указанной ролью в источнике данных.      Настроек [!NOTE] настроек имена пользователей и роли не может содержать запятые."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#2](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.aspx)]\n [!code-vb[System.Web.Security.Roles#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.aspx)]"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "Имя пользователя для добавления в указанную роль."
    - id: roleName
      type: System.String
      description: "Чтобы добавить имя указанного пользователя в роль."
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,).       - или - <code>username</code> является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено.       - или - уже назначен пользователь указанной роли."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Добавляет указанного пользователя в указанные роли."
  remarks: "Метод AddUserToRoles вызывает поставщика роли по умолчанию для присоединения к ним указанного пользователя в указанные роли в источнике данных.       Если приложение использует <xref:System.Web.Security.SqlRoleProvider>класса, в рамках транзакции выполняются обновления базы данных, которые выполняются во время вызова метода AddUserToRoles.</xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, который уже находится в указанной роли, транзакция откатывается и обновления не выполняются.      Настроек [!NOTE] настроек имена пользователей и роли не может содержать запятые."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_20_1.aspx)]\n [!code-cs[System.Web.Security.Roles#3](~/add/codesnippet/csharp/m-system.web.security.ro_20_1.aspx)]"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "Имя пользователя для добавления в указанные роли."
    - id: roleNames
      type: System.String[]
      description: "Массив строк ролей для указанного имени пользователя для добавления."
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Одна из ролей в <code> roleNames </code> является пустой строкой или содержит запятую (,).       - или - <code> username </code> является пустой строкой или содержит запятую (,).       - или - <code> roleNames </code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает или задает имя приложения, которые будут сохраняться и извлекаться сведения о роли."
  remarks: "Свойство ApplicationName используется <xref:System.Web.Security.Roles>класс, связанный с различными приложениями пользователям и ролям.</xref:System.Web.Security.Roles> Это позволяет нескольким приложениям использовать тот же источник данных для хранения без конфликтов между повторяющихся имен пользователей и повторяющимися именами ролей пользователя и сведения о роли. Несколько приложений ASP.NET могут использовать тот же источник данных, указав то же значение в свойство ApplicationName. Можно задать свойство ApplicationName программными средствами, или может быть задана декларативно в файле конфигурации для веб-приложения с помощью `applicationName` атрибута.       При использовании веб-приложения <xref:System.Web.Security.SqlRoleProvider>класса и значение не указано для `applicationName` атрибут в файле конфигурации <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>значение свойства для текущего <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>используется свойство.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> </xref:System.Web.Security.SqlRoleProvider>      Настроек [!CAUTION] настроек, так как экземпляр поставщика ролей по умолчанию один используется для всех запросов, обслуживаемых <xref:System.Web.HttpApplication>объекта может быть несколько запросов, параллельном выполнении и попытка задать значение свойства ApplicationName.</xref:System.Web.HttpApplication> Свойство ApplicationName не является потокобезопасным для нескольких операций записи и изменение значения свойства ApplicationName может привести к непредвиденному поведению для нескольких пользователей приложения. Следует избегать, написание кода, чтобы пользователи могли задать свойство ApplicationName, когда не требуется. Пример приложения, где может потребоваться задать свойство ApplicationName — административное приложение, управляющее данными ролей для нескольких приложений. Такое приложение должно быть Однопользовательское приложение и не веб-приложения."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: "Имя приложения, которые будут сохраняться и извлекаться сведения о роли."
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее кэшированы ли текущие роли пользователей в файле cookie."
  remarks: "Если значение свойства CacheRolesInCookie `true` в файле Web.config, сведения о роли для каждого пользователя хранится в файле cookie. Когда управление ролями проверяет, является ли пользователь в определенной роли, файла cookie ролей проверяются перед вызовом поставщика ролей для проверки списка ролей в источнике данных. Файл cookie обновляется динамически для кэширования последних проверенных имен ролей.       Можно повысить надежность имена ролей, кэшированные в файле cookie, указав <xref:System.Web.Security.Roles.CookieProtectionValue%2A>свойства при настройке ролей ASP.NET.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> Значение по умолчанию <xref:System.Web.Security.Roles.CookieProtectionValue%2A>— `All`, который шифрует имена ролей в файле cookie и проверяет, что содержимое файла cookie не будут изменены.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>      Настроек [!NOTE] настроек поскольку имена ролей могут кэшироваться отдельно от источника данных, существует вероятность, что изменения в управлении ролью в источнике данных не отражались в кэшированных значений. В этом случае пользователю необходимо закрыть и снова открыть браузер, чтобы очистить значение срок действия файла cookie."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если роли текущего пользователя хранятся в файлах cookie. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает имя файла cookie, в котором кэшированы имена ролей."
  remarks: "Можно указать имя файла cookie, в котором будут кэшировать роли для приложения, задав `cookieName` атрибут в файле Web.config для приложения ASP.NET. Это полезно, чтобы однозначно идентифицировать файл cookie для приложения или когда файл cookie является общим для нескольких приложений, таких как домена файла cookie."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: "Имя файла cookie, в котором кэшированы имена ролей. Значение по умолчанию —. ASPXROLES."
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Получает путь для cookie с именами ролей."
  remarks: "Можно указать путь файла cookie, в котором будут кэшировать роли для приложения, задав `cookiePath` атрибут в файле Web.config для приложения ASP.NET. Дополнительные сведения о путях к файлам cookie см. в разделе <xref:System.Web.HttpCookie.Path%2A>.</xref:System.Web.HttpCookie.Path%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: "Путь файла cookie, в котором кэшированы имена ролей. Значение по умолчанию — /."
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, каким образом защищены имена ролей, кэшированные в файле cookie."
  remarks: "Можно указать защиты файла cookie, в котором будут кэшировать роли для приложения, задав `cookieProtection` атрибут в файле Web.config для приложения ASP.NET. `cookieProtection` Атрибут принимает <xref:System.Web.Security.CookieProtection>проверяется значение перечисления, указывающее, шифруются ли имена ролей, оба или ни.</xref:System.Web.Security.CookieProtection>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: "Один из <xref href=&quot;System.Web.Security.CookieProtection&quot;> </xref> значений перечисления, указывающее, каким образом защищены имена ролей, кэшированные в файле cookie. Значение по умолчанию — <xref uid=&quot;langword_csharp_All&quot; name=&quot;All&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, требуется ли файлам cookie с именами ролей протокол SSL для возвращения на сервер."
  remarks: "Можно указать, требуется ли SSL (Secure Sockets Layer) для возврата cookie с именами ролей сервера в приложении установив `cookieRequireSSL` атрибут в файле Web.config для приложения ASP.NET. Дополнительные сведения см. в разделе <xref:System.Web.HttpCookie.Secure%2A>.</xref:System.Web.HttpCookie.Secure%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если протокол SSL необходим для возврата cookie с именами ролей сервера. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Указывает, является ли дата окончания срока действия файла cookie имена ролей и времени будет выполняться периодический сброс."
  remarks: "Можно задать срок действия файла cookie с именами ролей и времени будут сброшены с каждого ответа, полученного с помощью `cookieSlidingExpiration` атрибут в файле Web.config для приложения ASP.NET. Если `true`, срок действия файла cookie изначально устанавливается в текущую дату и время, а также <xref:System.Web.Security.Roles.CookieTimeout%2A>в минутах.</xref:System.Web.Security.Roles.CookieTimeout%2A> Хотя пользователь продолжает активно использовать приложения ASP.NET, срок действия и время куки-файл будет автоматически обновляться при наличии менее половины <xref:System.Web.Security.Roles.CookieTimeout%2A>оставшиеся.</xref:System.Web.Security.Roles.CookieTimeout%2A> Дополнительные сведения см. в разделе <xref:System.Web.HttpCookie.Expires%2A>свойство.</xref:System.Web.HttpCookie.Expires%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieSlidingExpiration property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если срок действия файла cookie имена ролей и времени будут выполняться периодический сброс; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает количество минут до истечения срока действия файла cookie ролей."
  remarks: "Свойство CookieTimeout используется при <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>свойство `true` и определяет время жизни в минутах для файла cookie ролей.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> Чтобы задать значение CookieTimeout, добавьте `cookieTimeout` атрибут к элементу в файле Web.config для приложения ASP.NET и укажите целочисленное значение.       Если <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>является `false`, это свойство игнорируется.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieTimeout property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: "Целое число, указывающее количество минут до файла cookie ролей истечения срока действия. Значение по умолчанию — 30 минут."
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, является ли файлы cookie с именами ролей определенного сеанса или являются постоянными."
  remarks: "Значение свойства CreatePersistentCookie задано в конфигурации для приложения ASP.NET с помощью `createPersistentCookie` атрибута элемента конфигурации.       Когда `false`, имена ролей куки-файл является файлом cookie сеанса, файл cookie является потеряны при закрытии. Когда `true`, файлы cookie с именами ролей является постоянным, доступный в нескольких сеансах обозревателя. Дата окончания срока действия постоянный файл cookie и время задаются текущую дату и время, а также <xref:System.Web.Security.Roles.CookieTimeout%2A>значение в минутах.</xref:System.Web.Security.Roles.CookieTimeout%2A>"
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если файлы cookie с именами ролей является постоянным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Добавляет новую роль к источнику данных."
  remarks: "Метод CreateRole добавляет имя роли в источнике данных. Вызовы CreateRole <xref:System.Web.Security.RoleProvider.CreateRole%2A>метод поставщика ролей по умолчанию для добавления в указанную роль к источнику данных.</xref:System.Web.Security.RoleProvider.CreateRole%2A>      Настроек [!NOTE] настроек имена ролей, не может содержать запятые."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_12_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_12_1.aspx)]"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Имя создаваемой роли."
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой.       - или - <code>roleName</code> содержит запятую."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет файл cookie, в котором кэшированы имена ролей."
  remarks: "Метод DeleteCookie очищает содержимое файла cookie, который используется для кэширования имен ролей. Дополнительные сведения о кэшировании имен ролей см. в разделе <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example calls the DeleteCookie method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.Roles#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_1_1.aspx)]\n [!code-cs[System.Web.Security.Roles#5](~/add/codesnippet/csharp/m-system.web.security.ro_1_1.aspx)]"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет роль из источника данных."
  remarks: "Метод DeleteRole удаляет имя роли в источнике данных. Вызовы DeleteRole <xref:System.Web.Security.RoleProvider.DeleteRole%2A>метод поставщика ролей по умолчанию, чтобы удалить указанную роль из источника данных.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Если роль идентифицировано `roleName` параметр имеет один или несколько элементов, то будет вызвано исключение и роль не будет удалена."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_9_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Имя роли, которую необходимо удалить."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> roleName </code> была удалена из источника данных; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>имеет один или несколько элементов.       - или - не включено управление ролями."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет роль из источника данных."
  remarks: "Метод DeleteRole удаляет имя роли в источнике данных. Вызовы DeleteRole <xref:System.Web.Security.RoleProvider.DeleteRole%2A>метод поставщика ролей по умолчанию, чтобы удалить указанную роль из источника данных.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Если `throwOnPopulatedRole` — `true`, затем будет создано исключение, и роль не будет удалена, если роль идентифицировано `roleName` параметр имеет один или несколько членов. Если `throwOnPopulatedRole` — `false`, то роль будет удален, является ли она пустой или нет."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "Имя роли, которую необходимо удалить."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "Если <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, вызывает исключение, если `roleName` имеет один или несколько элементов."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> roleName </code> были удалены из источника данных, в противном случае; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>имеет один или несколько элементов и <code>throwOnPopulatedRole</code> — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.       - или - не включено управление ролями."
  platform:
  - net462
- uid: System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение домена файла cookie с именами ролей."
  remarks: "Значение свойства домена задано в конфигурации для приложения ASP.NET с помощью `domain` атрибута элемента конфигурации.       Если значение не указано в конфигурации атрибут домена, возвращает свойства домена `null` и домен cookie имен ролей по умолчанию поведения <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>свойство.</xref:System.Web.HttpCookie.Domain%2A></xref:System.Web.HttpCookie>"
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: "<xref:System.Web.HttpCookie.Domain*>Файла cookie с именами ролей.</xref:System.Web.HttpCookie.Domain*>"
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает или задает значение, указывающее, включено ли управление ролями для текущего веб-приложения."
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если включено управление ролями; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает список пользователей в указанной роли, где имя пользователя содержит совпадают с именами указанного пользователя."
  remarks: "FindUsersInRole возвращает список пользователей в роли где имя пользователя содержит совпадения с предоставленным `usernameToMatch` для настроенного `applicationName`. Например если `usernameToMatch` параметр имеет значение «user», то пользователи «user1», «user2», «user3» и т. д возвращаются. Пользователи возвращаются в алфавитном порядке по имени пользователя.       <xref:System.Web.Security.SqlRoleProvider>Выполняет поиск с помощью предложения LIKE к `usernameToMatch` параметр.</xref:System.Web.Security.SqlRoleProvider> Все шаблоны, которые поддерживаются сервером SQL Server в, как можно использовать в предложениях `usernameToMatch` значение параметра."
  example:
  - "The following code example uses the FindUsersInRole method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/m-system.web.security.ro_16_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_16_1.aspx)]"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "Роль для поиска."
    - id: usernameToMatch
      type: System.String
      description: "Имя пользователя для поиска."
    return:
      type: System.String[]
      description: "Строковый массив, содержащий имена всех пользователей, имена которых совпадают с <code> usernameToMatch </code> и которые являются членами указанной роли."
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,).       - или - <code>usernameToMatch</code> — пустая строка."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает список всех ролей для приложения."
  remarks: "Вызовы метода GetAllRoles <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName>метод поставщика ролей по умолчанию, чтобы получить список всех ролей из источника данных для приложения.</xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A>извлекаются свойства.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetAllRoles method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_18_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_18_1.aspx)]"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "Массив строк, содержащий имена всех ролей, сохраненных в источнике данных для приложения."
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает список ролей, которые пользователь вошел в систему текущий."
  remarks: "Метод GetRolesForUser вызывает <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>метод поставщика ролей по умолчанию для получения из источника данных ролям, что пользователь вошел в систему текущий in.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> Пользователь вошел в систему текущий определяется <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>текущего элемента <xref:System.Web.HttpContext?displayProperty=fullName>, или <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>средах размещения отличные от HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Если пользователь не вошел в систему, будет вызвано исключение. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A>извлекаются свойства.</xref:System.Web.Security.Roles.ApplicationName%2A>       Если <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>является `true`, а затем результаты метода GetRolesForUser могут быть возвращены из кэша роли, а не указанного поставщика ролей.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the GetRolesForUser method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_14_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_14_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: "Массив строк, содержащий имена всех ролей, которые пользователь вошел в систему текущий."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Нет текущего вошедшего пользователя."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает список ролей, в которых состоит пользователь."
  remarks: "Метод GetRolesForUser вызывает <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>метод поставщика ролей по умолчанию для получения из источника данных, роли, что пользователь является in.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A>извлекаются свойства.</xref:System.Web.Security.Roles.ApplicationName%2A>       Если `username` равен текущего вошедшего пользователя и <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>— `true`, кэшировать результаты GetRolesForUser, метод может быть возвращено из роли вместо указанного <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_15_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_15_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "Для получения списка ролей для пользователя."
    return:
      type: System.String[]
      description: "Массив строк, содержащий имена всех ролей, в которых указанный пользователь."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает список пользователей в указанной роли."
  remarks: "Вызовы метода GetUsersInRole <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>метод поставщика ролей по умолчанию для извлечения имен пользователей, связанных с ролью из источника данных.</xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A>извлекаются свойства.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetUsersInRole method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_10_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_10_1.aspx)]"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Роли, чтобы получить список пользователей."
    return:
      type: System.String[]
      description: "Массив строк, содержащий имена всех пользователей, которые являются членами указанной роли."
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, выполняется ли в указанной роли пользователя, выполнившего вход. Интерфейс API предназначен только для вызова в контексте потока запросов ASP.NET и таком санкционированном использовании он является потокобезопасным."
  remarks: "Вызовы метода IsUserInRole <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName>метод поставщика ролей по умолчанию, чтобы определить, является ли пользователь вошел в систему текущий связанный с ролью из источника данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A>свойство.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> Пользователь вошел в систему текущий определяется <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>текущего элемента <xref:System.Web.HttpContext?displayProperty=fullName>, или <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>средах размещения отличные от HTTP.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Если пользователь не вошел в систему, будет вызвано исключение. Только для ролей для приложения, которое указано в <xref:System.Web.Security.Roles.ApplicationName%2A>извлекаются свойства.</xref:System.Web.Security.Roles.ApplicationName%2A>       Если <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>является `true`, затем `roleName` проверяться кэша роли, а не указанного поставщика ролей.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_2_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Имя роли для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если пользователь вошел в систему текущий находится в указанной роли; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - нет текущего вошедшего пользователя."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, является ли указанный пользователь в указанной роли. Интерфейс API предназначен только для вызова в контексте потока запросов ASP.NET и таком санкционированном использовании он является потокобезопасным."
  remarks: "Вызовы метода IsUserInRole <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>метод поставщика ролей по умолчанию для определения того, связан ли имя пользователя с ролью из источника данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A>свойство.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A>       Если `username` равен текущего вошедшего пользователя и <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>значение свойства `true`, `roleName` может проверяться на кэш роли, а не указанный <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_11_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_11_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "Имя пользователя для поиска."
    - id: roleName
      type: System.String
      description: "Имя роли для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный пользователь находится в указанной роли; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,).       - или - <code>username</code> содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает максимальное число имен ролей, которые необходимо кэшировать для пользователя."
  remarks: "Свойство MaxCachedResults задается с помощью `maxCachedResults` атрибута конфигурации. Значение `maxCachedResults` атрибут конфигурации должно быть присвоено целое значение больше нуля."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: "Максимальное число имен ролей, которые необходимо кэшировать для пользователя. Значение по умолчанию — 25."
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает поставщика роли по умолчанию для приложения."
  remarks: "Свойства поставщика позволяет напрямую ссылаться поставщика роли по умолчанию для приложения. Обычно это используется для доступа к пользовательским элементам поставщика роли, которые не являются частью <xref:System.Web.Security.RoleProvider>абстрактного класса.</xref:System.Web.Security.RoleProvider>       Например <xref:System.Web.Security.WindowsTokenRoleProvider>класс включает перегрузку <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>метод, который позволяет определить, является ли пользователь в стандартную роль Windows, с помощью <xref:System.Security.Principal.WindowsBuiltInRole>значение перечисления.</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> Ссылку на <xref:System.Web.Security.WindowsTokenRoleProvider>класса для приложения можно получить с помощью свойства поставщика и может быть приведен как <xref:System.Web.Security.WindowsTokenRoleProvider>для указания <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>перегрузить.</xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> </xref:System.Web.Security.WindowsTokenRoleProvider>       Если настроено несколько поставщиков ролей для приложения, можно получить доступ к различным поставщикам ролей с помощью <xref:System.Web.Security.Roles.Providers%2A>коллекции.</xref:System.Web.Security.Roles.Providers%2A>"
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n [!code-cs[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/csharp/p-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/visualbasic/p-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: "Поставщика ролей по умолчанию для приложения, который предоставляется как класс, наследующий от <xref:System.Web.Security.RoleProvider>абстрактного класса.</xref:System.Web.Security.RoleProvider>"
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает коллекцию поставщиков ролей для приложения ASP.NET."
  remarks: "Поставщики свойство ссылается на все поставщики роли, доступные для приложения, включая любые поставщики, добавленные в файле Web.config. Можно управлять поставщиками ролей, доступных для приложения с помощью `providers` элемент раздела в файле Web.config для приложения.       В следующем примере показан раздел, который удаляет все существующие службы (например, указанный в файле Machine.config) и добавляет <xref:System.Web.Security.SqlRoleProvider>экземпляр в качестве поставщика ролей для приложения.</xref:System.Web.Security.SqlRoleProvider>      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;&quot; />     </connectionStrings>        <system.web>       <roleManager defaultProvider=&quot;SqlProvider&quot;          enabled=&quot;true&quot;         cacheRolesInCookie=&quot;true&quot;         cookieName=&quot;.ASPROLES&quot;         cookieTimeout=&quot;30&quot;         cookiePath=&quot;/&quot;         cookieRequireSSL=&quot;false&quot;         cookieSlidingExpiration=&quot;true&quot;         cookieProtection=&quot;Encrypted&quot;>            <providers>           <clear/>           <add             name=&quot;SqlProvider&quot;             type=&quot;System.Web.Security.SqlRoleProvider&quot;             connectionStringName=&quot;SqlServices&quot;             applicationName=&quot;MyApplication&quot; />            </providers>          </roleManager>     </system.web>   </configuration>   ```Можно получить строго типизированную ссылку на поставщик из коллекции поставщиков индексирования поставщика ролей по имени и его привязки в качестве требуемого типа.       Можно получить ссылку на поставщик по умолчанию для приложения с помощью <xref:System.Web.Security.Roles.Provider%2A>свойство.</xref:System.Web.Security.Roles.Provider%2A>"
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n [!code-cs[System.Web.Security.Roles#7](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.Roles#7](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: "Объект <xref href=&quot;System.Web.Security.RoleProviderCollection&quot;> </xref> , содержащий поставщики ролей, настроенного для приложения ASP.NET."
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет указанного пользователя из указанной роли."
  remarks: "Метод RemoveUserFromRole вызывает поставщика роли по умолчанию для удаления указанного пользователя из указанной роли в источнике данных."
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_5_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "Пользователь, чтобы удалить из указанной роли."
    - id: roleName
      type: System.String
      description: "Удалить указанного пользователя из роли."
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,) <code>username</code> является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет указанного пользователя из указанных ролей."
  remarks: "Метод RemoveUserFromRoles вызывает поставщика роли по умолчанию для удаления указанного пользователя из указанных ролей в источнике данных.       Если приложение настроено для использования <xref:System.Web.Security.SqlRoleProvider>класса, в рамках транзакции выполняются обновления базы данных, которые выполняются во время вызова метода RemoveUserFromRoles.</xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются."
  example:
  - "The following code example uses the RemoveUserFromRoles method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.aspx)]\n [!code-cs[System.Web.Security.Roles#10](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "Пользователь, для удаления из указанных ролей."
    - id: roleNames
      type: System.String[]
      description: "Массив строк имен ролей для удаления из указанного пользователя."
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Одна из ролей в <code> roleNames </code> является пустой строкой или содержит запятую (,).       - или - <code> username </code> является пустой строкой или содержит запятую (,).       - или - <code> roleNames </code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет указанных пользователей из указанной роли."
  remarks: "Метод RemoveUsersFromRole вызывает поставщика роли по умолчанию для удаления указанных пользователей из указанной роли в источнике данных.       Если приложение использует <xref:System.Web.Security.SqlRoleProvider>класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>метод выполняются в рамках транзакции.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются."
  example:
  - "The following code example uses the RemoveUsersFromRole method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#9](~/add/codesnippet/csharp/m-system.web.security.ro_13_1.aspx)]\n [!code-vb[System.Web.Security.Roles#9](~/add/codesnippet/visualbasic/m-system.web.security.ro_13_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Массив строк имен пользователей для удаления из указанных ролей."
    - id: roleName
      type: System.String
      description: "Имя роли, которую необходимо удалить из указанных пользователей."
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - один пользователь имена в <code>usernames</code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,).       - или - один пользователь имена в <code>usernames</code> является пустой строкой или содержит запятую (,).       - или - <code>usernames</code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Удаляет указанные имена пользователей из указанных ролей."
  remarks: "Метод RemoveUsersFromRoles вызывает поставщика роли по умолчанию для удаления указанных пользователей из указанных ролей в источнике данных.       Если приложение использует <xref:System.Web.Security.SqlRoleProvider>класса обновления базы данных, которые выполняются при вызове <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>метод выполняются в рамках транзакции.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Если возникает ошибка, например имя пользователя, которого нет в указанной роли, транзакция откатывается и обновления не выполняются."
  example:
  - "The following code example uses the RemoveUsersFromRoles method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#8](~/add/codesnippet/csharp/6dafcb6b-2398-4825-9291-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#8](~/add/codesnippet/visualbasic/6dafcb6b-2398-4825-9291-_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Массив строк имен пользователей для удаления из указанных ролей."
    - id: roleNames
      type: System.String[]
      description: "Массив строк имен ролей для удаления указанных пользователей."
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Одной из ролей, указанных в <code> roleNames </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       - или - один из пользователей, указанных в <code> usernames </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Одной из ролей, указанных в <code> roleNames </code> является пустой строкой или содержит запятую (,).       - или - один из пользователей, указанных в <code> usernames </code> является пустой строкой или содержит запятую (,).       - или - <code> roleNames </code> содержит повторяющийся элемент.       - или - <code> usernames </code> содержит повторяющийся элемент."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
- uid: System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Возвращает значение, указывающее, является ли указанное имя роли уже существует в источнике данных роли."
  remarks: "Вызовы метода RoleExists `RoleExists` метод поставщика ролей по умолчанию, чтобы определить, существует ли имя роли в источнике данных для приложения, указанного в <xref:System.Web.Security.Roles.ApplicationName%2A>свойство.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the RoleExists method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "Имя роли для поиска в источнике данных."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если имя роли уже существует в источнике данных; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>является пустой строкой или содержит запятую (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Управление ролями не включено."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
