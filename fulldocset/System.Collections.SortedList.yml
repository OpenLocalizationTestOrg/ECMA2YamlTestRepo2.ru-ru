### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "Представляет коллекцию пар &quot;ключ значение&quot;, упорядоченных по ключам."
  remarks: "Универсальная версия этой коллекции. в разделе <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       Элемент SortedList может осуществляться по ключу, такие как элемент в любом <xref:System.Collections.IDictionary>реализацию, или по индексу, как и на любой элемент <xref:System.Collections.IList>реализации.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       Объект SortedList на внутреннем уровне поддерживает два массива для хранения элементов списка. то есть один массив для ключей, другой для них значения. Каждый элемент является парой ключ значение, можно обращаться как к <xref:System.Collections.DictionaryEntry>объекта.</xref:System.Collections.DictionaryEntry> Ключ не может быть `null`, но может быть значение.       Емкость объекта SortedList — количество элементов, которые может вместить SortedList. При добавлении элементов SortedList емкость автоматически увеличивается должным образом посредством перераспределения. Емкость может быть уменьшена путем вызова <xref:System.Collections.SortedList.TrimToSize%2A>или установив <xref:System.Collections.SortedList.Capacity%2A>свойство явно.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       Для очень больших объектов SortedList Максимальная емкость 2 миллиардов элементы в 64-разрядной системе можно повысить, указав `enabled` атрибута элемента конфигурации для `true` в среде выполнения.       Элементы объекта SortedList упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданную при создании SortedList или в соответствии с <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.IComparer> В любом случае SortedList не допускает повторяющиеся ключи.       Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в SortedList в правильный порядок сортировки и индексирование настраивается соответствующим образом. При удалении элемента индексация также настраивается соответствующим образом. Таким образом индекс пару определенных ключ значение может изменяться, добавлена или удалена из объекта SortedList элементов.       Операции в объекте SortedList, как правило, работать медленнее, чем операции над <xref:System.Collections.Hashtable>объект из-за сортировки.</xref:System.Collections.Hashtable> Однако SortedList предоставляет большую гибкость, разрешив доступ к значениям через связанные ключи или индексы.       Элементы в этой коллекции осуществляется с помощью целочисленного индекса.  Индексы в этой коллекции отсчитываются от нуля.       `foreach` Инструкции языка C# (`for each` в Visual Basic) возвращает объект типа элементов в коллекции. Поскольку каждый элемент объекта SortedList пару ключ значение, тип элемента не является типом ключа или тип значения. Вместо этого тип элемента — это <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Например: [!code-cpp [классический пример&2; SortedList](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[классический пример&2; SortedList](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[классический пример&2; SortedList](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] `foreach` инструкция является оболочкой перечислителя, допускающей только чтение из, но не запись в коллекции.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который является пустым, обладает начальной емкостью по умолчанию и порядком сортировки в соответствии с <xref:System.IComparable>интерфейс, реализуемый каждым ключом, добавленным к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.IComparable>"
  remarks: "Каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> Элементы сортируются в соответствии с <xref:System.IComparable>реализацию каждого ключа добавляемого <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией o(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который является пустым, обладает начальной емкостью по умолчанию и сортируется в соответствии с указанным <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer>"
  remarks: "Элементы сортируются в соответствии с указанным <xref:System.Collections.IComparer>реализации.</xref:System.Collections.IComparer> Если `comparer` параметр `null`, <xref:System.IComparable>реализацию каждого ключа используется; таким образом, каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией o(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> использовать <xref:System.IComparable>реализацию каждого ключа.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который содержит элементы, скопированные из указанного словаря имеет начальной емкостью, равной количеству скопированных элементов и отсортированные по <xref:System.IComparable>интерфейс, реализуемый каждым ключом.</xref:System.IComparable>"
  remarks: "Каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> Элементы сортируются в соответствии с <xref:System.IComparable>реализацию каждого ключа добавляемого <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Объект <xref:System.Collections.Hashtable>объект является примером <xref:System.Collections.IDictionary>реализации, который может быть передан в этот конструктор.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Новый <xref:System.Collections.SortedList>объект содержит копию ключей и значений, хранимых в <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Реализацию, чтобы скопировать в новый <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Один или несколько элементов в <code> d </code> не реализуют <xref:System.IComparable>интерфейса.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который является пустым, обладает указанной начальной емкостью и отсортированные по <xref:System.IComparable>интерфейс, реализуемый каждым ключом, добавленным к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.IComparable>"
  remarks: "Каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> Элементы сортируются в соответствии с <xref:System.IComparable>реализацию каждого ключа добавляемого <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией O (`n`) операции, где `n` — `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "Начальное количество элементов, <xref href=&quot;System.Collections.SortedList&quot;> </xref> может содержаться в объекте."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>меньше нуля."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Не хватает доступной памяти для создания <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект с указанным <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который является пустым, обладает указанной начальной емкостью и сортируется в соответствии с указанным <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer>"
  remarks: "Элементы сортируются в соответствии с указанным <xref:System.Collections.IComparer>реализации.</xref:System.Collections.IComparer> Если `comparer` параметр `null`, <xref:System.IComparable>реализацию каждого ключа используется; таким образом, каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> использовать <xref:System.IComparable>реализацию каждого ключа.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "Начальное количество элементов, <xref href=&quot;System.Collections.SortedList&quot;> </xref> может содержаться в объекте."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Не хватает доступной памяти для создания <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект с указанным <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.SortedList&quot;> </xref> класс, который содержит элементы, скопированные из указанного словаря имеет начальной емкостью, равной количеству скопированных элементов и упорядоченный в соответствии с указанным <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer>"
  remarks: "Элементы сортируются в соответствии с указанным <xref:System.Collections.IComparer>реализации.</xref:System.Collections.IComparer> Если `comparer` параметр `null`, <xref:System.IComparable>реализацию каждого ключа используется; таким образом, каждый ключ должен реализовывать <xref:System.IComparable>интерфейс, чтобы можно было сравнивать с любым другим ключом в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Объект <xref:System.Collections.Hashtable>объект является примером <xref:System.Collections.IDictionary>реализации, который может быть передан в этот конструктор.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Новый <xref:System.Collections.SortedList>объект содержит копию ключей и значений, хранимых в <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       Емкость <xref:System.Collections.SortedList>равен числу элементов, <xref:System.Collections.SortedList>поместятся.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> При добавлении элементов к <xref:System.Collections.SortedList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.SortedList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Реализацию, чтобы скопировать в новый <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> использовать <xref:System.IComparable>реализацию каждого ключа.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>и один или несколько элементов в <code>d</code> не реализуют <xref:System.IComparable> интерфейса."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Добавляет элемент с указанным ключом и значением в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Точка вставки определяется на основании выбранного явно или по умолчанию средства сравнения при <xref:System.Collections.SortedList>был создан объект.</xref:System.Collections.SortedList>       Если <xref:System.Collections.SortedList.Count%2A>уже равно <xref:System.Collections.SortedList.Capacity%2A>, емкости из <xref:System.Collections.SortedList>объекта увеличивается на автоматически перераспределения внутреннего массива и существующие элементы копируются в новый массив перед добавлением нового элемента.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       Можно также использовать <xref:System.Collections.SortedList.Item%2A>свойство для добавления новых элементов, задав значение ключа, который не существует в <xref:System.Collections.SortedList>объекта (например, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> Тем не менее если указанный ключ уже существует в <xref:System.Collections.SortedList>, параметр <xref:System.Collections.SortedList.Item%2A>свойство перезаписывает прежнее значение.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> Напротив метод Add не изменяет существующие элементы.       Элементы <xref:System.Collections.SortedList>объекта упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданный при <xref:System.Collections.SortedList>созданный или соответствии <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Ключ не может быть `null`, но может быть значение.       Этот метод является операцией O (`n`) операции данные не отсортированы, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Он является операцией O (журнала `n`) операции, если новый элемент добавляется в конец списка. Если при вставке происходит изменение размера, метод является операцией O (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ элемента, который требуется добавить."
    - id: value
      type: System.Object
      description: "Значение элемента, который требуется добавить. Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Элемент с указанным <code> key </code> уже существует в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> используется <xref:System.IComparable>интерфейс, и <code> key </code> не реализует <xref:System.IComparable>интерфейса.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Недостаточно памяти для добавления элемента нет <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Функция сравнения, которую создает исключение."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает емкость объекта <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Емкость — количество элементов, <xref:System.Collections.SortedList>объект может хранить.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>число элементов, фактически <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Count%2A>       Емкость всегда больше или равно <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Если <xref:System.Collections.SortedList.Count%2A>превышает емкость при добавлении элементов, емкость автоматически увеличивается за счет перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</xref:System.Collections.SortedList.Count%2A>       Емкость может быть уменьшена путем вызова <xref:System.Collections.SortedList.TrimToSize%2A>или явным образом задав свойство Capacity.</xref:System.Collections.SortedList.TrimToSize%2A> Если явно задано значение емкости, внутреннего массива также перераспределяется в соответствии с указанной емкостью.       Получение значения данного свойства является операцией o(1). Задание этого свойства является операцией O (`n`) операции, где `n` — новое значение емкости."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Число элементов, <xref href=&quot;System.Collections.SortedList&quot;> </xref> может содержаться в объекте."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Присвоенное значение меньше, чем текущее число элементов в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Не хватает памяти доступны в системе."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет все элементы из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "<xref:System.Collections.SortedList.Count%2A>равен нулю и ссылки на другие объекты из элементов коллекции также освобождаются.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>остается без изменений.</xref:System.Collections.SortedList.Capacity%2A> Чтобы сбросить емкость <xref:System.Collections.SortedList>, вызовите <xref:System.Collections.SortedList.TrimToSize%2A>или задать <xref:System.Collections.SortedList.Capacity%2A>свойство напрямую.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> Удаление пустой <xref:System.Collections.SortedList>Задает емкость объекта <xref:System.Collections.SortedList>емкость по умолчанию.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Создает неполную копию объекта <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Неполная копия коллекции копируются только элементы коллекции, но они являются ссылочными типами или типами, но не копирует объекты, которые ссылаются на. Ссылки в новой коллекции указывают на те же объекты, на которые указывают ссылки в исходной коллекции.       Напротив глубокую копию коллекции копирует элементы и все, что прямо или косвенно ссылаются элементы.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Неполная копия <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит указанный ключ."
  remarks: "Элементы <xref:System.Collections.SortedList>объекта упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданный при <xref:System.Collections.SortedList>созданный или соответствии <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Содержит реализует <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Он ведет себя точно так, как <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       Этот метод использует алгоритм двоичного поиска; Таким образом, этот метод является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ для поиска в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит элемент с указанным <code> key </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Функция сравнения, которую создает исключение."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит указанный ключ."
  remarks: "Элементы <xref:System.Collections.SortedList>объекта упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданный при <xref:System.Collections.SortedList>созданный или соответствии <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Этот метод работает точно так, как <xref:System.Collections.SortedList.Contains%2A>метод.</xref:System.Collections.SortedList.Contains%2A>       Этот метод использует алгоритм двоичного поиска; Таким образом, этот метод является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ для поиска в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит элемент с указанным <code> key </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Функция сравнения, которую создает исключение."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит определенное значение."
  remarks: "Значения элементов <xref:System.Collections.SortedList>объекта сравниваются с указанным значением с помощью <xref:System.Object.Equals%2A>метод.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Этот метод выполняет линейный поиск; Таким образом среднее время выполнения пропорционально <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Значение для поиска в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта. Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект содержит элемент с указанным <code> value </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует <xref href=&quot;System.Collections.SortedList&quot;> </xref> элементы в одномерном массиве <xref:System.Array>объект, начиная с указанного индекса в массиве.</xref:System.Array>"
  remarks: "Пары «ключ значение», копируются в <xref:System.Array>объекта в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.Array>       Чтобы скопировать только ключи в <xref:System.Collections.SortedList>, используйте `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       Копировать только значения в <xref:System.Collections.SortedList>, используйте `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>объект, являющийся назначением <xref:System.Collections.DictionaryEntry>объекты из <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект больше, чем свободное пространство от <code>arrayIndex</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.SortedList&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает количество элементов, содержащихся в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Каждый элемент является парой ключ значение, можно обращаться как к <xref:System.Collections.DictionaryEntry>объекта.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>число элементов, <xref:System.Collections.SortedList>объект может хранить.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Число — количество элементов, фактически <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       <xref:System.Collections.SortedList.Capacity%2A>всегда равно, больше или равно числу.</xref:System.Collections.SortedList.Capacity%2A> Если число превышает <xref:System.Collections.SortedList.Capacity%2A>при добавлении элементов, емкость автоматически увеличивается за счет перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</xref:System.Collections.SortedList.Capacity%2A>       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Число элементов, содержащихся в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение по указанному индексу <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом, индекс пару определенных ключ значение может изменяться добавлены или удалены из элементов <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс значения, которое необходимо получить."
    return:
      type: System.Object
      description: "Значение по указанному индексу из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IDictionaryEnumerator>объект, который осуществляет итерацию по <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A>  В этой позиции <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой.  Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления.  Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию.       Этот метод является операцией o(1)."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>Для объекта <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает ключ по указанному индексу <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом, индекс пару определенных ключ значение может изменяться добавлены или удалены из элементов <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс получаемого ключа."
    return:
      type: System.Object
      description: "Ключ по указанному индексу <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает ключи в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Возвращенный <xref:System.Collections.IList>доступен только для чтения представление ключей <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Изменения <xref:System.Collections.SortedList>немедленно отражаются в списке <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList> базовый       Элементы <xref:System.Collections.IList>сортируются в том же порядке, в котором ключи <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList> возвращаемый       Этот метод аналогичен <xref:System.Collections.SortedList.Keys%2A>свойство, но возвращает <xref:System.Collections.IList>объекта вместо <xref:System.Collections.ICollection>объекта.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Объект, содержащий ключи в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значения в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Возвращенный <xref:System.Collections.IList>доступен только для чтения представление значений <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Изменения <xref:System.Collections.SortedList>немедленно отражаются в списке <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList> базовый       Элементы <xref:System.Collections.IList>сортируются в том же порядке, как значения <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList> возвращаемый       Этот метод аналогичен <xref:System.Collections.SortedList.Values%2A>свойство, но возвращает <xref:System.Collections.IList>объекта вместо <xref:System.Collections.ICollection>объекта.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Объект, содержащий значения из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает отсчитываемый от нуля индекс с указанным ключом в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Элементы <xref:System.Collections.SortedList>объекта упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданный при <xref:System.Collections.SortedList>созданный или соответствии <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом индекс пару определенных ключ значение может изменяться добавлены или удалены из <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> элементов       Этот метод использует алгоритм двоичного поиска; Таким образом, этот метод является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ для поиска в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <code> key </code> параметр, если <code> key </code> находится в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта; в противном случае — значение -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Функция сравнения, которую создает исключение."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает отсчитываемый от нуля индекс первого вхождения указанного значения в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом, индекс пару определенных ключ значение может изменяться добавлены или удалены из элементов <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Значения элементов <xref:System.Collections.SortedList>сравниваются с указанным значением с помощью <xref:System.Object.Equals%2A>метод.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Этот метод использует линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Значение для поиска в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта. Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого вхождения <code> value </code> параметр, если <code> value </code> находится в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта; в противном случае — значение -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект имеет фиксированный размер."
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы коллекции создается, но позволяет изменять существующие элементы.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект доступен только для чтения."
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. Таким образом при внесении изменений в базовую коллекцию, доступную только для чтения коллекцию отражает эти изменения.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли доступ к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта является синхронизированным (потокобезопасным)."
  remarks: "Чтобы гарантировать потокобезопасность <xref:System.Collections.SortedList>объекта, все операции должны осуществляться через оболочки, возвращаемой методом <xref:System.Collections.SortedList.Synchronized%2A>метод.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает и задает значение, связанное с указанным ключом в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Свойство Item можно использовать для доступа к указанному элементу коллекции, указав следующий синтаксис: `myCollection[key]`.       Это свойство можно также использовать для добавления новых элементов, задав значение ключа, который не существует в <xref:System.Collections.SortedList>объекта (например, `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> Тем не менее если указанный ключ уже существует в <xref:System.Collections.SortedList>, задав свойство элемента перезаписывает прежнее значение.</xref:System.Collections.SortedList> Напротив <xref:System.Collections.SortedList.Add%2A>метод не изменяет существующие элементы.</xref:System.Collections.SortedList.Add%2A>       Ключ не может быть `null`, но может быть значение. Чтобы различать `null` , возвращается, поскольку указанный ключ не найден и `null` , возвращается значение заданного ключа является `null`, используйте <xref:System.Collections.SortedList.Contains%2A>метод или <xref:System.Collections.SortedList.ContainsKey%2A>метод, чтобы определить, существует ли ключ в списке.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       Элементы <xref:System.Collections.SortedList>упорядоченных по ключам зависимости от определенной <xref:System.Collections.IComparer>реализацию, заданный при <xref:System.Collections.SortedList>созданный или соответствии <xref:System.IComparable>реализацию, предоставляемую самих ключей.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Ключевое слово языка C# используется для определения индексаторов вместо реализации <xref:System.Collections.SortedList.Keys%2A>свойство.</xref:System.Collections.SortedList.Keys%2A> Visual Basic реализует элемент как свойство по умолчанию, который предоставляет те же возможности индексирования.       Получение значения данного свойства является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Задание этого свойства является операцией O (журнала `n`) операции, если ключ уже имеется в списке <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> Если ключа нет в списке, задание этого свойства является операцией O (`n`) операции без сортировки данных или O (журнала `n`) Если новый элемент добавляется в конец списка. Если при вставке происходит изменение размера, метод является операцией O (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "Ключ, связанный со значением, чтобы получить или задать."
    return:
      type: System.Object
      description: "Значение, связанное с <code> key </code> параметр в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта, если <code> key </code> найден; в противном случае — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Свойство имеет значение и <xref href=&quot;System.Collections.SortedList&quot;> </xref> объект доступен только для чтения.       - или - свойству, <code> key </code> не существует в коллекции и <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Недостаточно памяти для добавления элемента нет <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Функция сравнения, которую создает исключение."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает ключи в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "<xref:System.Collections.ICollection>Доступен только для чтения представление ключей <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Изменения <xref:System.Collections.SortedList>немедленно отражаются в списке <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList> базового       Элементы <xref:System.Collections.ICollection>сортируются в том же порядке, в котором ключи <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Это свойство аналогично <xref:System.Collections.SortedList.GetKeyList%2A>метода, но возвращает <xref:System.Collections.ICollection>объекта вместо <xref:System.Collections.IList>объекта.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Этот метод является операцией o(1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Объект, содержащий ключи в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет элемент с указанным ключом из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Если <xref:System.Collections.SortedList>объект не содержит элемент с указанным ключом, <xref:System.Collections.SortedList>остается неизменным.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Исключение не возникает.       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ удаляемого элемента."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет элемент по указанному индексу из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом, индекс пару определенных ключ значение может изменяться добавлены или удалены из элементов <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс удаляемого элемента."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Заменяет значение с указанным индексом в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Порядковый индекс основан на последовательности сортировки. При добавлении элемента, он автоматически вставляется в <xref:System.Collections.SortedList>в сортировке правильный порядок и индексирование настраивается соответствующим образом.</xref:System.Collections.SortedList> При удалении элемента индексация также настраивается соответствующим образом. Таким образом, индекс пару определенных ключ значение может изменяться добавлены или удалены из элементов <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому следует сохранить `value`."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для сохранения в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает оболочку синхронизированной (потокобезопасной) для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Чтобы гарантировать потокобезопасность <xref:System.Collections.SortedList>объекта, все операции должны осуществляться только через эту оболочку.</xref:System.Collections.SortedList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Объект для синхронизации."
    return:
      type: System.Collections.SortedList
      description: "Объект синхронизированным (потокобезопасным) оболочку для <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Чтобы создать синхронизированную версию <xref:System.Collections.SortedList>, используйте <xref:System.Collections.SortedList.Synchronized%2A>метод.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> Однако производные классы могут предоставлять собственную синхронизированную версию <xref:System.Collections.SortedList>используя свойство SyncRoot.</xref:System.Collections.SortedList> Синхронизированный код должен выполнять операции над элемент SyncRoot <xref:System.Collections.SortedList>, не непосредственно на <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности, это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IEnumerator>, который выполняет итерацию <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A> В этой позиции вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и при следующем вызове <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если коллекция изменяется в промежутке между <xref:System.Collections.IEnumerator.MoveNext%2A>и <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>возвращает элемент, для которого оно задано, даже если перечислитель уже недействителен.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       Этот метод является операцией o(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Устанавливает емкость равной фактическому числу элементов в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "Этот метод можно использовать для минимизации издержек коллекцией памяти, если новые элементы добавляются в коллекцию.       Чтобы сбросить <xref:System.Collections.SortedList>объект в исходное состояние, вызов <xref:System.Collections.SortedList.Clear%2A>метод перед вызовом TrimToSize.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> Удаление пустой <xref:System.Collections.SortedList>Задает емкость объекта <xref:System.Collections.SortedList>емкость по умолчанию.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;System.Collections.SortedList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значения в <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта."
  remarks: "<xref:System.Collections.ICollection>Доступен только для чтения представление значений <xref:System.Collections.SortedList>объекта.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Изменения <xref:System.Collections.SortedList>немедленно отражаются в списке <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList> базового       Элементы <xref:System.Collections.ICollection>сортируются в том же порядке, как значения <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Это свойство аналогично <xref:System.Collections.SortedList.GetValueList%2A>метода, но возвращает <xref:System.Collections.ICollection>объекта вместо <xref:System.Collections.IList>объекта.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Этот метод является операцией o(1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Объект, содержащий значения из <xref href=&quot;System.Collections.SortedList&quot;> </xref> объекта.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
