### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.MetadataImporter
  id: MetadataImporter
  children:
  - System.ServiceModel.Description.MetadataImporter.Errors
  - System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  - System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  - System.ServiceModel.Description.MetadataImporter.KnownContracts
  - System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  - System.ServiceModel.Description.MetadataImporter.State
  langs:
  - csharp
  name: MetadataImporter
  nameWithType: MetadataImporter
  fullName: System.ServiceModel.Description.MetadataImporter
  type: Class
  summary: "Импортирует метаданные в &lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt; объектов."
  remarks: "Используйте реализацию абстрактного класса MetadataImporter для импорта метаданных службы. Типы, производные от класса MetadataImporter реализуют поддержку для импорта форматов метаданных, которые используют преимущества WS-Policy логики импорта в [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)].       Реализация MetadataImporter собирает выражения политики, прикрепленные к метаданным службы в <xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=fullName>объекта.</xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=fullName> MetadataImporter обрабатывает политики как часть импорта метаданных путем вызова реализаций <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>интерфейс <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName>свойство.</xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>       Можно добавить поддержку для импорта новых утверждений политики для MetadataImporter путем добавления собственной реализации <xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>интерфейс <xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName>Свойства экземпляра MetadataImporter.</xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName> Кроме того можно зарегистрировать расширение импорта политики в файле конфигурации приложения.       <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>Тип является реализацией абстрактного класса MetadataImporter, входящий в состав [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)].</xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>Тип импортирует метаданные языка WSDL с прикрепленными политиками, объединенными в <xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName>объекта.</xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>       Можно добавить поддержку импорта расширений языка WSDL путем реализации <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>интерфейс и добавления реализации в <xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=fullName>свойство вашей <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>экземпляра.</xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName> <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>Может загружать реализации <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>интерфейс зарегистрирован в файле конфигурации приложения.</xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>      Настроек [!NOTE] настроек, так как конструктор MetadataImporter является внутренним, не может наследовать от MetadataImporter в этой версии."
  example:
  - "The following example shows the use of the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> derived class to import metadata using custom state, checking the <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> property, compiling imported metadata to managed types and saving the result to a code file.  \n  \n [!code-cs[C_CustomWSDLExtensions#8](~/add/codesnippet/csharp/c_customwsdlextensions.client/client.cs#8)]"
  syntax:
    content: public abstract class MetadataImporter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.Errors
  id: Errors
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: Errors
  nameWithType: MetadataImporter.Errors
  fullName: System.ServiceModel.Description.MetadataImporter.Errors
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Получает значение, указывающее наличие ошибок при импорте метаданных."
  remarks: "Всегда проверяйте свойство ошибки, после импорта метаданных и перед использованием метаданных."
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError> Errors { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.MetadataConversionError}
      description: "Коллекция <xref href=&quot;System.ServiceModel.Description.MetadataConversionError&quot;> </xref> объектов."
  overload: System.ServiceModel.Description.MetadataImporter.Errors*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  id: ImportAllContracts
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: ImportAllContracts()
  nameWithType: MetadataImporter.ImportAllContracts()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllContracts()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "При переопределении в производном классе возвращает коллекцию контрактов, импортированных из метаданных."
  syntax:
    content: public abstract System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription> ImportAllContracts ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ContractDescription}
      description: "Контракты, импортированные из метаданных."
  overload: System.ServiceModel.Description.MetadataImporter.ImportAllContracts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  id: ImportAllEndpoints
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: ImportAllEndpoints()
  nameWithType: MetadataImporter.ImportAllEndpoints()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "При переопределении в производном классе, возвращает все конечные точки в метаданных."
  remarks: "Реализуйте метод ImportAllEndpoints, чтобы вернуть все конечные точки в импортированных метаданных. Метаданные, импортированные как конечные точки службы не может использоваться для создания среды выполнения или экспорта метаданных, поскольку импортируемые конечные точки не содержат управляемый тип сведений. Чтобы использовать метаданные для создания среды выполнения службы или клиента или для создания метаданных, необходимо создать и компиляции кода из метаданных и использовать эту информацию типа для создания нового <xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName>объекта с помощью <xref:System.ServiceModel.Description.ContractDescription.GetContract%2A>.</xref:System.ServiceModel.Description.ContractDescription.GetContract%2A> </xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName>"
  syntax:
    content: public abstract System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints ();
    parameters: []
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "Коллекция &lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt; объектов, опубликованных службой."
  overload: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts
  id: KnownContracts
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
  fullName: System.ServiceModel.Description.MetadataImporter.KnownContracts
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Возвращает словарь контрактов по имени, о котором знает импорта."
  remarks: "Свойство KnownContracts используется для добавления или удаления описаний контракта и соответствующими именами XML, может ссылаться средство импорта."
  syntax:
    content: public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription> KnownContracts { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription}
      description: "Словарь контрактов, перечисленных по полному имени XML."
  overload: System.ServiceModel.Description.MetadataImporter.KnownContracts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  id: PolicyImportExtensions
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
  fullName: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Возвращает коллекцию средств импорта политик, которые средство импорта вызывает для обработки утверждений политики."
  remarks: "Используйте свойство PolicyImportExtensions, чтобы добавить или удалить средства импорта политики, которые будут вызываться для обработки утверждений политики в метаданных."
  syntax:
    content: public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension> PolicyImportExtensions { get; }
    return:
      type: System.Collections.Generic.KeyedByTypeCollection{System.ServiceModel.Description.IPolicyImportExtension}
      description: "Коллекция средств импорта политики, <xref href=&quot;System.ServiceModel.Description.MetadataImporter&quot;> </xref> использует для обработки утверждений политики."
  overload: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.State
  id: State
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: State
  nameWithType: MetadataImporter.State
  fullName: System.ServiceModel.Description.MetadataImporter.State
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Возвращает или задает коллекцию объектов, используемых при импорте метаданных."
  remarks: "Используйте `State` свойство для добавления или удаления объектов, используемых при импорте метаданных."
  example:
  - "The following example shows the use of the State property to add a custom <xref:System.Runtime.Serialization.XsdDataContractImporter?displayProperty=fullName> to import data structures in a particular way.  \n  \n [!code-cs[C_CustomWSDLExtensions#8](~/add/codesnippet/csharp/c_customwsdlextensions.client/client.cs#8)]"
  syntax:
    content: public System.Collections.Generic.Dictionary<object,object> State { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.Object,System.Object}
      description: "Словарь объектов, ключом которого является тип."
  overload: System.ServiceModel.Description.MetadataImporter.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Description.MetadataImporter.Errors
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: Errors
  nameWithType: MetadataImporter.Errors
  fullName: System.ServiceModel.Description.MetadataImporter.Errors
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.MetadataConversionError}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<MetadataConversionError>
  nameWithType: Collection<MetadataConversionError>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.MetadataConversionError>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.MetadataConversionError
    name: MetadataConversionError
    nameWithType: MetadataConversionError
    fullName: MetadataConversionError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllContracts()
  nameWithType: MetadataImporter.ImportAllContracts()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllContracts()
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ContractDescription>
  nameWithType: Collection<ContractDescription>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllEndpoints()
  nameWithType: MetadataImporter.ImportAllEndpoints()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints()
- uid: System.ServiceModel.Description.ServiceEndpointCollection
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceEndpointCollection
  nameWithType: ServiceEndpointCollection
  fullName: System.ServiceModel.Description.ServiceEndpointCollection
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
  fullName: System.ServiceModel.Description.MetadataImporter.KnownContracts
- uid: System.Collections.Generic.Dictionary{System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<XmlQualifiedName,ContractDescription>
  nameWithType: Dictionary<XmlQualifiedName,ContractDescription>
  fullName: System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlQualifiedName
    name: XmlQualifiedName
    nameWithType: XmlQualifiedName
    fullName: XmlQualifiedName
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
  fullName: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
- uid: System.Collections.Generic.KeyedByTypeCollection{System.ServiceModel.Description.IPolicyImportExtension}
  parent: System.Collections.Generic
  isExternal: false
  name: KeyedByTypeCollection<IPolicyImportExtension>
  nameWithType: KeyedByTypeCollection<IPolicyImportExtension>
  fullName: System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension>
  spec.csharp:
  - uid: System.Collections.Generic.KeyedByTypeCollection`1
    name: KeyedByTypeCollection
    nameWithType: KeyedByTypeCollection
    fullName: KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.IPolicyImportExtension
    name: IPolicyImportExtension
    nameWithType: IPolicyImportExtension
    fullName: IPolicyImportExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.State
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: State
  nameWithType: MetadataImporter.State
  fullName: System.ServiceModel.Description.MetadataImporter.State
- uid: System.Collections.Generic.Dictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<Object,Object>
  nameWithType: Dictionary<Object,Object>
  fullName: System.Collections.Generic.Dictionary<System.Object,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.Errors*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: Errors
  nameWithType: MetadataImporter.Errors
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllContracts
  nameWithType: MetadataImporter.ImportAllContracts
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllEndpoints
  nameWithType: MetadataImporter.ImportAllEndpoints
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
- uid: System.ServiceModel.Description.MetadataImporter.State*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: State
  nameWithType: MetadataImporter.State
