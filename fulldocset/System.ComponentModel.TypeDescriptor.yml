### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  - System.ComponentModel.TypeDescriptor.ComObjectType
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  name: TypeDescriptor
  nameWithType: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  summary: "Предоставляет сведения о характеристиках компонента, такие как атрибуты, свойства и события. Этот класс не наследуется."
  remarks: "Платформа .NET Framework предоставляет два способа доступа к метаданным для типа: отражение API в <xref:System.Reflection?displayProperty=fullName>пространство имен и дескриптор типа класса.</xref:System.Reflection?displayProperty=fullName> Отражение является общий механизм, доступный для всех типов, так как его основа реализована в <xref:System.Object.GetType%2A>метод корневого <xref:System.Object>класса.</xref:System.Object> </xref:System.Object.GetType%2A> Сведения, возвращаемые для типа не является расширяемым, в том, что оно не может быть изменено после компиляции типа целевого объекта. Дополнительные сведения см. в разделах в [отражения](~/add/includes/ajax-current-ext-md.md).       В отличие от этого дескриптора типа представляет собой механизм расширяемой проверки для компонентов: те, классы, реализующие <xref:System.ComponentModel.IComponent>интерфейса.</xref:System.ComponentModel.IComponent> В отличие от отражения он не контролирует методы. Дескриптор типа может быть динамически расширена путем несколько служб, доступных через целевого компонента <xref:System.ComponentModel.Component.Site%2A>.</xref:System.ComponentModel.Component.Site%2A> В следующей таблице показаны эти службы.      | Имя службы | Описание |   |------------------|-----------------|   | <xref:System.ComponentModel.IExtenderProvider>| Позволяет другому классу, например <xref:System.Windows.Forms.ToolTip>, для предоставления дополнительных свойств для компонента. |   | <xref:System.ComponentModel.Design.ITypeDescriptorFilterService>| Позволяет другому объекту, чтобы изменить стандартные метаданные, предоставленные компонентом. |   | <xref:System.ComponentModel.ICustomTypeDescriptor>| Позволяет классу полностью и динамически задать собственные метаданные, заменив механизм стандартной проверки дескриптора типа. |       Представление времени разработки компонента, чтобы отличаться от фактического во время выполнения представления, благодаря чему TypeDescriptor полезно для построения инфраструктуры разработки позволяет расширяемости, предоставляемый дескриптором типа.</xref:System.ComponentModel.ICustomTypeDescriptor> </xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.Windows.Forms.ToolTip> </xref:System.ComponentModel.IExtenderProvider>       Все методы в дескрипторе типа являются `static`. Невозможно создать экземпляр этого класса, и этот класс не наследуется.       Можно задать свойства и события значения двумя различными способами: указать их в классе компонента или изменить их во время разработки. Так как можно задать эти значения двумя способами, перегруженные методы дескриптора типа принимают два различных типа параметров: тип класса или экземпляра объекта.       Если вам требуется доступ к данным дескриптором типа, и у вас есть экземпляр объекта, используйте метод, который вызывает для компонента. Метод требует только в том случае, если у вас экземпляр объекта типа класса.       Свойства и события, кэшируются на дескриптор типа по скорости. Как правило они являются постоянными в течение времени существования объекта. Однако средства расширения и конструкторы можно изменить набор свойств для объекта. Если это так, то <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>метод должен вызываться для обновления кэша.</xref:System.ComponentModel.TypeDescriptor.Refresh%2A>"
  syntax:
    content: public sealed class TypeDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет атрибуты уровня класса к экземпляру целевого компонента."
  remarks: "Метод AddAttributes добавляет атрибуты уровня класса к указанному экземпляру компонента. Так как это является общим требованием приложений, использующих [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] конструктор Windows Forms и окно свойств, этот метод обеспечивает ярлык, создавая поставщик описания типа, объединяющего предоставленные атрибуты с атрибутами, которые уже существует в классе. Возвращает значение, поставщик описания типа, который был использован для добавления атрибутов. Этот поставщик позже может быть передан <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод при добавляемых атрибутов больше не нужны.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (object instance, Attribute[] attributes);
    parameters:
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
    - id: attributes
      type: System.Attribute[]
      description: "Массив <xref:System.Attribute>объектов, добавляемых в класс компонента.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Вновь созданный <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> , использованный для добавления указанных атрибутов."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет атрибуты уровня класса к типу целевого компонента."
  remarks: "Метод AddAttributes добавляет атрибуты уровня класса для указанного типа компонента. Так как это является общим требованием приложений, использующих [!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)] конструктор Windows Forms и окно свойств, этот метод обеспечивает ярлык, создавая поставщик описания типа, объединяющего предоставленные атрибуты с атрибутами, которые уже существует в классе. Возвращает значение, поставщик описания типа, который был использован для добавления атрибутов. Этот поставщик позже может быть передан <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод при добавляемых атрибутов больше не нужны.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (Type type, Attribute[] attributes);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Массив <xref:System.Attribute>объектов, добавляемых в класс компонента.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Вновь созданный <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> , использованный для добавления указанных атрибутов."
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет таблицу редактора для данного базового типа редактора."
  remarks: "Метод AddEditorTable добавляет таблицу редактора для данного базового типа редактора. Как правило редакторы задаются как метаданные компонента. Тем не менее, если отсутствуют метаданные для запрошенного редактора базового типа можно найти на компонент, связанный с ним <xref:System.ComponentModel.TypeDescriptor>выполняет поиск таблицы редактора для типа редактора, если она может быть найдена.</xref:System.ComponentModel.TypeDescriptor> После добавления таблицы редактора дескриптор типа нельзя удалить и владеет дескриптором типа. Дескриптор типа может свободно выполнять изменения в эту таблицу.       Формат таблицы редактора использует типы данных в качестве ключей и редакторы как значения. Значение в запись в таблице представляет собой экземпляр редактора. Он может иметь одно из трех значений. Если она содержит строку, дескриптор типа предполагается, что это полное имя типа и загружает тип для объекта. Если он содержит тип, экземпляр этого типа создается для получения редактора. Наконец часть значения может содержать экземпляр фактического редактора. Если дескриптор типа решает, что редактор в экземпляр, он будет хранить экземпляр обратно в таблицу для использования в будущем."
  syntax:
    content: public static void AddEditorTable (Type editorBaseType, System.Collections.Hashtable table);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "Базовый тип редактора для добавления таблицы редактора. Если таблица уже существует для этого типа, этот метод не выполняет никаких действий."
    - id: table
      type: System.Collections.Hashtable
      description: "The <xref href=&quot;System.Collections.Hashtable&quot;></xref> to add."
  overload: System.ComponentModel.TypeDescriptor.AddEditorTable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет поставщик описания типа для одного экземпляра компонента."
  remarks: "Метод AddProvider добавляет поставщик описания типа, что предоставляет сведения о типе для одного экземпляра компонента. Если поставщик добавляется с помощью данного метода, поставщик <xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>не будет вызван метод, так как экземпляр уже существует.</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>       Этот метод не поддерживает жесткую ссылку на компонент, поэтому он предотвращает завершение компонента.       Можно добавить несколько поставщиков описания типа для того же типа объекта. В этом случае первый обнаруженный поставщик описания типа, предоставляющий сведения о типе будет использоваться исключительно. Поскольку поставщики сведений о типе хранятся в стеке, последний добавленный поставщик будет первый запрос. Данное поведение позволяет AddProvider и <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>методы для использования в стек и восстановить поставщики Описание типов, необходимые для определенных сценариев.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Если успешно, этот метод вызывает метод <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>метод `instance` параметр.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>      Настроек [!NOTE] настроек две версии этого метода результаты с различными областями действия. <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>Метода, принимающего <xref:System.Object>параметр влияет только один экземпляр указанный компонент.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Напротив, другой перегрузку, которая принимает <xref:System.Type>параметра, влияет на все экземпляры компонента, описываемые этим типом.</xref:System.Type>       Используйте <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет поставщик описания типа для класса компонента."
  remarks: "Метод AddProvider добавляет поставщик описания типа, предоставляет сведения о типе для заданного класса, производные классы и все экземпляры этих типов.      Настроек [!NOTE] настроек `type` параметр может быть любого типа, включая интерфейс. Например, чтобы предоставить сведения об экземпляре для всех компонентов и пользовательского типа, необходимо указать `typeof(IComponent)`. Передача `typeof(object)` вызывает службу, чтобы предоставить сведения о типе для всех типов.       Этот метод не поддерживает жесткую ссылку к любому объекту, поэтому он не предотвращает завершение объектов.       Можно добавить несколько поставщиков описания типа для того же типа объекта. В этом случае первый обнаруженный поставщик описания типа, предоставляющий сведения о типе будет использоваться исключительно. Так как поставщики сведений о типе хранятся в стеке, последний добавленный поставщик будет первый запрос. Данное поведение позволяет AddProvider и <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>методы для использования в стек и восстановить поставщики Описание типов, необходимые для определенных сценариев.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       Если успешно, этот метод вызывает метод <xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>метод `type` параметр.</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>      Настроек [!NOTE] настроек две версии этого метода результаты с различными областями действия. <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>Метода, принимающего <xref:System.Object>параметр влияет только один экземпляр указанный компонент.</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Напротив, другой перегрузку, которая принимает <xref:System.Type>параметра, влияет на все экземпляры компонента, описываемые этим типом.</xref:System.Type>       Используйте <xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет поставщик описания типа для одного экземпляра компонента."
  remarks: "Этот метод может вызываться из частично доверенного кода. Если <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>будет определено, вызывающий объект может зарегистрировать поставщика для указанного экземпляра если его тип также имеет частичное доверие.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Используйте <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет поставщик описания типа для класса компонента."
  remarks: "Этот метод может вызываться из частично доверенного кода. Если <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>будет определено, вызывающий объект может Регистрация поставщика для указанного типа Если имеет частичное доверие.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Используйте <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  id: ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает или задает поставщик сведений о типе объекта модели компонентов (COM) для целевого компонента."
  remarks: "Свойство ComNativeDescriptorHandler и <xref:System.ComponentModel.IComNativeDescriptorHandler>интерфейса являются устаревшими.</xref:System.ComponentModel.IComNativeDescriptorHandler> Дополнительные сведения см. в разделе <xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>свойство.</xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>"
  syntax:
    content: public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get; set; }
    return:
      type: System.ComponentModel.IComNativeDescriptorHandler
      description: "<xref href=&quot;System.ComponentModel.IComNativeDescriptorHandler&quot;> </xref> Экземпляр, представляющий поставщик сведений о COM тип."
  overload: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  id: ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает тип объекта модели компонентов (COM) объекта, представленного целевого компонента."
  remarks: "Свойство ComObjectType возвращает тип, который может быть передан <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод для определения поставщика описаний типов для COM-типов.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>       Свойство ComObjectType и другие члены в этом классе заменить устаревшие функциональные возможности в устаревшие <xref:System.ComponentModel.IComNativeDescriptorHandler>интерфейса.</xref:System.ComponentModel.IComNativeDescriptorHandler> Для реализации уровень сопоставления между COM-объекта и <xref:System.ComponentModel.TypeDescriptor>, добавьте <xref:System.ComponentModel.TypeDescriptionProvider>для обработки типа ComObjectType.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static Type ComObjectType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>COM-объекта, представленного этим компонентом или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для не COM-объектов.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.ComObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает связь &quot;главный подчиненный&quot; между двумя объектами."
  remarks: "Метод CreateAssociation создает связь между основной и дополнительный объект. После создания связи конструктор или другой механизм фильтрации можно добавлять свойства, которые маршрутизацию к любому объекту в набор свойств основного объекта. При вызове свойства с основным объектом <xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>метод будет вызываться для устранения экземпляр фактического объекта, который связан с его параметр типа.</xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>       Объект <xref:System.WeakReference>используется для поддержки связи между основным и дополнительным объектами; таким образом, этот метод не запретить объект либо быть завершена, а удалять его сборщику мусора.</xref:System.WeakReference>"
  syntax:
    content: public static void CreateAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "Основной <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "Сервер-получатель <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.CreateAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>primary</code>равен <code>secondary</code>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает экземпляр конструктора, связанный с указанным компонентом и указанного типа конструктора."
  remarks: "Если этот метод не может найти допустимую <xref:System.ComponentModel.DesignerAttribute>, он ищет вверх по иерархии классов для конструктора.</xref:System.ComponentModel.DesignerAttribute> Если не удается найти конструктор в иерархии классов, она возвращает `null`."
  syntax:
    content: public static System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, Type designerBaseType);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> , Указывающий компонент для связывания с конструктором."
    - id: designerBaseType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип создаваемого конструктора.</xref:System.Type>"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "<xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref> , Являющийся экземпляром конструктора для компонента, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если конструктор не может быть найден."
  overload: System.ComponentModel.TypeDescriptor.CreateDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает новый дескриптор события, идентичный существующему дескриптору события, при передаче существующего <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "Тип компонента, для которого создается новое событие."
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
      description: "Сведения о существующем событии."
    - id: attributes
      type: System.Attribute[]
      description: "Новые атрибуты."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "Новый <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> который объединил указанные атрибуты метаданных с существующими атрибутами метаданных."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает новый дескриптор события, идентичный существующему дескриптору события динамически, связанного с типом для указанного события."
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "Тип события компонента, содержащего."
    - id: name
      type: System.String
      description: "Имя события."
    - id: type
      type: System.Type
      description: "Тип делегата, который обрабатывает событие."
    - id: attributes
      type: System.Attribute[]
      description: "Атрибуты для данного события."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> , Привязанный к типу."
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает объект, который можно заменить другой тип данных."
  remarks: "CreateInstance-метод выполняет поиск по <xref:System.ComponentModel.TypeDescriptionProvider>, связанный с указанным `objectType` тип данных.</xref:System.ComponentModel.TypeDescriptionProvider> Этот метод сначала пытается получить поставщик описания типа из `provider` параметра. Если это не удается, он выполняет свои собственные внутренние таблицы для поставщика (эти записи, созданные в предыдущих вызовов <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>).</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> Если поставщик найден, метод делегирует вызов создания этого объекта."
  syntax:
    content: public static object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "Поставщик услуг, предоставляющий <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> службы. Этот параметр может иметь <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: objectType
      type: System.Type
      description: "<xref:System.Type>Создаваемого объекта.</xref:System.Type>"
    - id: argTypes
      type: System.Type[]
      description: "Необязательный массив типов параметров должен быть передан в конструктор объекта. Этот параметр может иметь <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или массив нулевой длины."
    - id: args
      type: System.Object[]
      description: "Необязательный массив значений параметров для передачи в конструктор объекта. В противном случае <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, количество элементов должно быть таким же, как `argTypes`."
    return:
      type: System.Object
      description: "Экземпляр типа данных замены, если связанный с ним <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> найден; в противном случае — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeDescriptor.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or <code>args</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <code>argTypes</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argTypes</code>и <code>args</code> имеют разное число элементов."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает новый дескриптор свойства из существующего дескриптора свойства, с помощью указанного существующего <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> и массив атрибутов."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Компонента, членом которого является свойство.</xref:System.Type>"
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
      description: "Существующий дескриптор свойства."
    - id: attributes
      type: System.Attribute[]
      description: "Новые атрибуты для этого свойства."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Новый <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> с атрибутами, заданными метаданными объединяются с существующими атрибутами метаданных."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает и динамически связывает дескриптор свойства для типа, используя указанное имя свойства, тип и массив атрибутов."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Компонента, членом которого является свойство.</xref:System.Type>"
    - id: name
      type: System.String
      description: "Имя свойства."
    - id: type
      type: System.Type
      description: "<xref:System.Type>Свойства.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Новые атрибуты для этого свойства."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> , привязанный к указанному типу и имеющий атрибуты указанные метаданные, объединенные с существующими атрибутами метаданных."
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает экземпляр типа, связанный с заданным основным объектом."
  remarks: "Если было выполнено предыдущей связи `type` с помощью параметра <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>метода, а затем метод GetAssociation возвращает правильный объект получателя для вызова для запрошенного типа.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A> В противном случае GetAssociation ищет совместимый конструктор для `type` и возвращает конструктор, если таковое имеется. Этот метод никогда не возвращает `null`.       Объект <xref:System.WeakReference>используется для поддержки связи между основным и дополнительным объектами; таким образом, этот метод не запрещает основной или дополнительный объект будет завершена, а удалять его сборщику мусора.</xref:System.WeakReference>"
  syntax:
    content: public static object GetAssociation (Type type, object primary);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    - id: primary
      type: System.Object
      description: "Основной объект ассоциации."
    return:
      type: System.Object
      description: "Экземпляр дополнительного типа, который был связан с основным объектом, если связь существует; в противном случае <code> primary </code> Если не указан, существует связь."
  overload: System.ComponentModel.TypeDescriptor.GetAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию атрибутов для указанного компонента."
  remarks: "Атрибуты, возвращаемые <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>метод может быть изменена динамически из исходного компонента источника список по поставщиков расширений (<xref:System.ComponentModel.IExtenderProvider>), фильтрация служб (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) и атрибут фильтры.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       При определении настраиваемого атрибута с <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>значение `true`, необходимо переопределить <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство, чтобы сделать его уникальным.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Если все экземпляры атрибута уникальны, переопределите <xref:System.Attribute.TypeId%2A?displayProperty=fullName>для возврата объекта идентификатора атрибута.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Если только несколько экземпляров атрибута являются уникальными, возвращают значение из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>, возвращающий равенства в таких случаях.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Например некоторые атрибуты имеют параметр конструктора, который выступает в качестве уникального ключа. Для этих атрибутов, возвращают значение параметра конструктора из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      Настроек [!NOTE] настроек по умолчанию реализация <xref:System.Attribute.TypeId%2A?displayProperty=fullName>Возвращает удостоверение типа независимо от значения <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>свойство.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Для возврата нескольких экземпляров <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>атрибута из <xref:System.ComponentModel.AttributeCollection>, необходимо переопределить атрибут <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method.
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для которого требуется получить атрибуты."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> Содержащий атрибуты для компонента. Если <code> component </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, этот метод возвращает пустую коллекцию."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию атрибутов для указанного типа компонента."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Для атрибутов с <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>присвоено `true`, коллекция атрибутов удаляет повторяющиеся экземпляры.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Экземпляры, в котором <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство возвращает одинаковые значения.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>       При определении настраиваемого атрибута с <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>значение `true`, необходимо переопределить <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство, чтобы сделать его уникальным.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Если все экземпляры атрибута уникальны, переопределите <xref:System.Attribute.TypeId%2A?displayProperty=fullName>для возврата объекта идентификатора атрибута.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Если только несколько экземпляров атрибута являются уникальными, возвращают значение из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>, возвращающий равенства в таких случаях.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Например некоторые атрибуты имеют параметр конструктора, который выступает в качестве уникального ключа. Для этих атрибутов, возвращают значение параметра конструктора из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      Настроек [!NOTE] настроек по умолчанию реализация <xref:System.Attribute.TypeId%2A?displayProperty=fullName>Возвращает удостоверение типа независимо от значения <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>свойство.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Для возврата нескольких экземпляров <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>атрибута из <xref:System.ComponentModel.AttributeCollection>, необходимо переопределить атрибут <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> С атрибутами для типа компонента. Если компонент является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, этот метод возвращает пустую коллекцию."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию атрибутов для указанного компонента и логическое значение, указывающее, что был создан настраиваемый дескриптор типа."
  remarks: "Атрибуты, возвращаемые <xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>метод может быть изменена динамически из исходного источника компоненты список по поставщиков расширений (<xref:System.ComponentModel.IExtenderProvider>), фильтрация служб (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>) и атрибут фильтры.</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       При определении настраиваемого атрибута с <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>значение `true`, необходимо переопределить <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство, чтобы сделать его уникальным.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> Если все экземпляры атрибута уникальны, переопределите <xref:System.Attribute.TypeId%2A?displayProperty=fullName>для возврата объекта идентификатора атрибута.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Если только несколько экземпляров атрибута являются уникальными, возвращают значение из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>, возвращающий равенства в таких случаях.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> Например некоторые атрибуты имеют параметр конструктора, который выступает в качестве уникального ключа. Для этих атрибутов, возвращают значение параметра конструктора из <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      Настроек [!NOTE] настроек по умолчанию реализация <xref:System.Attribute.TypeId%2A?displayProperty=fullName>Возвращает удостоверение типа независимо от значения <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>свойство.</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> Для возврата нескольких экземпляров <xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>атрибута из <xref:System.ComponentModel.AttributeCollection>, необходимо переопределить атрибут <xref:System.Attribute.TypeId%2A?displayProperty=fullName>свойство.</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для которого требуется получить атрибуты."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы использовать базовый набор атрибутов из настраиваемого дескриптора типа, если `component` относится к типу <xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> С атрибутами для компонента. Если компонент является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, этот метод возвращает пустую коллекцию."
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает имя класса для указанного компонента, используя дескриптор типа по умолчанию."
  remarks: "Как правило, этот метод возвращает полное <xref:System.Type>имя `component` тип параметра.</xref:System.Type> Например имя класса для кнопки — «System.Windows.Forms.Button». Если `component` реализует <xref:System.ComponentModel.ICustomTypeDescriptor>, может возвращать альтернативное имя.</xref:System.ComponentModel.ICustomTypeDescriptor>       Этот метод эквивалентен методу перегруженных <xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>метода с использованием второго параметра `false`.</xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static string GetClassName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>Для которого требуется получить имя класса.</xref:System.Object>"
    return:
      type: System.String
      description: "Объект <xref:System.String>содержит имя класса для указанного компонента.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает имя класса для указанного типа."
  remarks: "Этот метод использует кэшированный настраиваемый дескриптор типа для заданного типа для обнаружения имя связанного класса."
  syntax:
    content: public static string GetClassName (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.String
      description: "Объект <xref:System.String>содержит имя класса для указанного типа компонента.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает имя класса для указанного компонента, используя пользовательский дескриптор типа."
  remarks: "Как правило, этот метод возвращает полное <xref:System.Type>имя `component` тип параметра.</xref:System.Type> Например имя класса для кнопки — «System.Windows.Forms.Button». Если `component` реализует параметр <xref:System.ComponentModel.ICustomTypeDescriptor>, может возвращать альтернативное имя.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetClassName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>Для которого требуется получить имя класса.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Объект <xref:System.String>содержит имя класса для указанного компонента.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает имя указанного компонента, используя дескриптор типа по умолчанию."
  remarks: "Как правило этот метод возвращает имя для узла компонента, если он существует. Например имя класса для кнопки — «System.Windows.Forms.Button».       Этот метод эквивалентен методу перегруженных <xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>метода с использованием второго параметра `false`.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>       Этот метод используется во время разработки для получения имени экземпляра компонента."
  syntax:
    content: public static string GetComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>Для которого требуется получить имя класса.</xref:System.Object>"
    return:
      type: System.String
      description: "Объект <xref:System.String>содержащее имя указанного компонента или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если имя компонента отсутствует.</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает имя указанного компонента, используя пользовательский дескриптор типа."
  remarks: "Этот метод используется во время разработки для получения имени экземпляра компонента. Как правило этот метод возвращает имя для узла компонента, если он существует. Например имя класса для кнопки — «System.Windows.Forms.Button». Если компонент реализует <xref:System.ComponentModel.ICustomTypeDescriptor>интерфейс, может возвращать альтернативное имя.</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetComponentName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>Для которого требуется получить имя класса.</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Имя класса для указанного компонента или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если имя компонента отсутствует."
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает преобразователь типов для типа указанного компонента."
  remarks: "Этот метод осуществляет поиск адекватный преобразователь типов, просматривая <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Если не удается найти <xref:System.ComponentModel.TypeConverterAttribute>, он проходит по иерархии класса пока не найдет типом-примитивом.</xref:System.ComponentModel.TypeConverterAttribute>       Этот метод эквивалентен методу перегруженных <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>метода с использованием второго параметра `false`.</xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для получения преобразователя."
    return:
      type: System.ComponentModel.TypeConverter
      description: "Объект <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> для указанного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает преобразователь типов для указанного типа."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Этот метод ищет соответствующий конвертер типа путем поиска <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Если не удается найти <xref:System.ComponentModel.TypeConverterAttribute>, он проходит по иерархии класса пока не найдет типом-примитивом.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeConverter
      description: "Объект <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> для указанного типа."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает преобразователь типов для типа указанного компонента с настраиваемым дескриптором типа."
  remarks: "Этот метод ищет соответствующий конвертер типа путем поиска <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Если не удается найти <xref:System.ComponentModel.TypeConverterAttribute>, он проходит по иерархии класса пока не найдет типом-примитивом.</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для получения преобразователя."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.TypeConverter
      description: "Объект <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> для указанного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает событие по умолчанию для указанного компонента."
  remarks: "Этот метод эквивалентен методу перегруженных <xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>метода с использованием второго параметра `false`.</xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, необходимо получить событие."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> С событием по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если события отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает событие по умолчанию для указанного типа компонента."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> С событием по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если события отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает событие по умолчанию для компонента с настраиваемым дескриптором типа."
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, необходимо получить событие."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> С событием по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если события отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает свойство по умолчанию для указанного компонента."
  remarks: "Если `component` параметр `null`, этот метод возвращает `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойство по умолчанию."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> со свойством по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает свойство по умолчанию для указанного типа компонента."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Если `componentType` параметр `null`, этот метод возвращает `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>, Представляющий класс, чтобы получить свойство for.</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> со свойством по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает свойство по умолчанию для указанного компонента с настраиваемым дескриптором типа."
  remarks: "Если `component` параметр `null`, этот метод возвращает `null`."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойство по умолчанию."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> со свойством по умолчанию или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Получает редактор с заданным базовым типом для указанного компонента."
  remarks: "Тип `editorBaseType` обычно <xref:System.Drawing.Design.UITypeEditor>, но можно также использовать другие типы (например, <xref:System.ComponentModel.ComponentEditor>и <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Можно определить несколько редакторов для свойства. Используйте этот метод для выбора редактора, который вы хотите использовать."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, чтобы получить редактор."
    - id: editorBaseType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий базовый тип редактора, который требуется найти.</xref:System.Type>"
    return:
      type: System.Object
      description: "Экземпляр редактора, который может быть приведен к указанному типу редактора, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если редактор запрошенного типа не может быть найден."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает редактор с заданным базовым типом для указанного типа."
  remarks: "Тип `editorBaseType` обычно <xref:System.Drawing.Design.UITypeEditor>, но можно также использовать другие типы (например <xref:System.ComponentModel.ComponentEditor>и <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Можно определить несколько редакторов для типа. Используйте этот метод, чтобы выбрать тот, который вы хотите использовать.       Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта."
  syntax:
    content: public static object GetEditor (Type type, Type editorBaseType);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    - id: editorBaseType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий базовый тип редактора, который вы пытаетесь найти.</xref:System.Type>"
    return:
      type: System.Object
      description: "Экземпляр объекта редактора, который может быть приведен к указанному базовому типу, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если редактор запрошенного типа не может быть найден."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает редактор с заданным базовым типом и настраиваемым дескриптором типа для указанного компонента."
  remarks: "Тип `editorBaseType` обычно <xref:System.Drawing.Design.UITypeEditor>, но можно также использовать другие типы (например <xref:System.ComponentModel.ComponentEditor>и <xref:System.ComponentModel.InstanceCreationEditor>).</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       Можно определить несколько редакторов для свойства. Используйте этот метод для выбора редактора, который вы хотите использовать."
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, чтобы получить редактор."
    - id: editorBaseType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий базовый тип редактора, который требуется найти.</xref:System.Type>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "Флаг, указывающий, следует ли учитывать сведения настраиваемого описания типа."
    return:
      type: System.Object
      description: "Экземпляр редактора, который может быть приведен к указанному типу редактора, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если редактор запрошенного типа не может быть найден."
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного компонента."
  remarks: "Возвращает коллекцию событий, заданного `component` экземпляром параметра. Эта коллекция может отличаться от набора событий, предоставляемых классом. Если `component` задан параметр, узел может добавлять или удалять дополнительные события.       Если `component` — `null`, то возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  example:
  - For an example of this method, see the <xref:System.ComponentModel.EventDescriptorCollection.Count%2A> property.
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Для получения событий для компонента."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного типа компонента."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Если `componentType` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра."
  remarks: "События для `component` параметра могут отличаться от событий класса, поскольку узел может добавлять или удалять свойства, если `component` задан параметр.       `attributes` Массив может включать в себя <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак; он соответствует любое событие, которое имеет <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если событие не имеет <xref:System.Attribute>того же класса, событие не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, события должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это событие по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в событии.</xref:System.Attribute> </xref:System.Attribute>       Если `component` — `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Для получения событий для компонента."
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>, можно использовать в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями, которые совпадают с указанными атрибутами для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного компонента с настраиваемым дескриптором типа."
  remarks: "Этот метод возвращает коллекцию событий, заданного `component` экземпляром параметра. Он может отличаться от набора событий, предоставляемых классом. Если `component` задан параметр, узел может добавлять или удалять дополнительные события.       Если `component` — `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Для получения событий для компонента."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       `attributes` Массив параметров может включать в себя <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак; он соответствует любое событие, которое имеет <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если событие не имеет <xref:System.Attribute>того же класса, событие не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, события должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это событие по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в событии.</xref:System.Attribute> </xref:System.Attribute>       Если `componentType` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>, можно использовать в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями, которые совпадают с указанными атрибутами для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию событий для указанного компонента, используя заданный массив атрибутов в качестве фильтра и используя пользовательский дескриптор типа."
  remarks: "События для `component` параметра могут отличаться от событий класса, поскольку узел может добавлять или удалять свойства, если `component` задан параметр.       `attributes` Массив параметров может включать в себя <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак; он соответствует любое событие, которое имеет <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если событие не имеет <xref:System.Attribute>того же класса, событие не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, события должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это событие по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в событии.</xref:System.Attribute> </xref:System.Attribute>       Если `component` — `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Для получения событий для компонента."
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref> С событиями, которые совпадают с указанными атрибутами для данного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает полное имя компонента."
  remarks: "Во многих случаях метод GetFullComponentName возвращает то же значение, что <xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>метод.</xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A> Тем не менее если компонент находится во вложенном контейнере или использует другую вложенную семантику, могут возвращать разные полное доменное имя."
  syntax:
    content: public static string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref href=&quot;System.ComponentModel.Component&quot;> </xref> Найти имя для."
    return:
      type: System.String
      description: "Полное имя указанного компонента или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если компонент не имеет имени."
  overload: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного компонента."
  remarks: "Свойств для компонента могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если компонент находится.       Если `component` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  example:
  - "The following code example demonstrates the use of the GetProperties method to access the properties of a control. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.ComponentDesigner> class.  \n  \n [!code-vb[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/visualbasic/m-system.componentmodel._38_1.vb)]\n [!code-cs[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/csharp/m-system.componentmodel._38_1.cs)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойства."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами для указанного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного типа компонента."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Если `componentType` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>, Представляющий компонент для получения свойства for.</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами для указанного типа компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра."
  remarks: "Свойства `component` параметра могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `component` задан параметр.       `attributes` Для фильтрации массива используется массив параметров. Фильтрация определяется следующими правилами: - Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, свойства должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это свойство по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>      -Если `attributes` имеет атрибут по умолчанию, GetProperties, метод соответствует так, если это свойство имеет атрибут применяется.       Если `component` — `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/0d160e65-8e23-4623-ad72-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/0d160e65-8e23-4623-ad72-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/0d160e65-8e23-4623-ad72-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойства."
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, которые совпадают с указанными атрибутами для заданного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного компонента, используя дескриптор типа по умолчанию."
  remarks: "Свойства `component` параметра могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `component` задан параметр.       Если `component` — `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойства."
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>не учитывать сведения настраиваемого описания типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами для указанного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного типа компонента, используя заданный массив атрибутов в качестве фильтра."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       `attributes` Для фильтрации массива используется массив параметров. Фильтрация определяется следующими правилами: - Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, свойства должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это свойство по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>      -Если `attributes` имеет атрибут по умолчанию, GetProperties, метод соответствует так, если это свойство имеет атрибут применяется.       Если `componentType` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/af245915-0d17-4307-99bf-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/af245915-0d17-4307-99bf-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/af245915-0d17-4307-99bf-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, которые совпадают с указанными атрибутами для данного типа компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для указанного компонента, используя заданный массив атрибутов в качестве фильтра и используя пользовательский дескриптор типа."
  remarks: "Свойства `component` могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `component` размещении.       `attributes` Для фильтрации массива используется массив параметров. Фильтрация определяется следующими правилами: - Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>класса, свойства должны точно совпадать, или он не включен в возвращаемый массив.</xref:System.Attribute>      -Если <xref:System.Attribute>указанный экземпляр и это свойство по умолчанию, он включен в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>      -Если `attributes` имеет атрибут по умолчанию, GetProperties, метод соответствует так, если это свойство имеет атрибут применяется.       Если `component` параметр `null`, возвращается пустая коллекция.       Порядок возвращенной коллекции не обязательно должно совпадать между вызовами, поэтому всегда следует упорядочивать перед использованием."
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для получения свойства."
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы учитывать сведения об описании пользовательского типа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> с событиями, которые совпадают с указанными атрибутами для заданного компонента."
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>представляет собой межпроцессный удаленный объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает поставщик описания типа для указанного компонента."
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>Метод всегда возвращает поставщик описания типа.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Даже по умолчанию <xref:System.ComponentModel.TypeDescriptor>реализация основана на <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Объект <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> связанный с указанным компонентом."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает поставщик описания типа для указанного типа."
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>Метод всегда возвращает поставщик описания типа.</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> Даже по умолчанию <xref:System.ComponentModel.TypeDescriptor>реализация основана на <xref:System.ComponentModel.TypeDescriptionProvider>.</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "Объект <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> связанный с указанным типом."
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref:System.Type>может использоваться для выполнения отражения, используя объект.</xref:System.Type>"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>Метод — это низкоуровневые версия <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>метод.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>обычно используется для выполнения стандартных отражение для объекта, когда дескриптор пользовательского типа не могут размещаться для него.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
    return:
      type: System.Type
      description: "Объект <xref:System.Type>для указанного объекта.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref:System.Type>может использоваться для выполнения отражения, используя тип класса.</xref:System.Type>"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>Метод — это низкоуровневые версия <xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>метод.</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>обычно используется для выполнения стандартных отражение для класса, когда дескриптор пользовательского типа не могут размещаться для него.</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
    return:
      type: System.Type
      description: "<xref:System.Type>Указанного класса.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает тип, представляющий поставщик описания типа для всех типов интерфейса."
  remarks: "Возвращает свойство InterfaceType <xref:System.Type>объект, который можно передать <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>методы для определения поставщик описания типа для типов интерфейса.</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> </xref:System.Type>"
  syntax:
    content: public static Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий настраиваемый поставщик описания типа для всех типов интерфейса.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.InterfaceType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет свойства и события для указанного компонента из кэша."
  remarks: "Свойства и события, кэшируются на <xref:System.ComponentModel.TypeDescriptor>для повышения быстродействия.</xref:System.ComponentModel.TypeDescriptor> Как правило они являются постоянными в течение времени существования объекта. Однако средства расширения и конструкторы можно изменить набор свойств для объекта. Если они есть, они должны вызывать этот метод, чтобы удалить дескрипторы свойств и событий объекта. Этот метод используется только во время разработки. Он не используется во время выполнения.       Этот метод также вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие при изменении свойства или события компонента.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Это событие вызывается только в том случае, если нет предыдущего вызова <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>или <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>метод, который кэшированные данные.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static void Refresh (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для которого были изменены свойства или события."
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет свойства и события для указанной сборки из кэша."
  remarks: "Свойства и события, кэшируются на <xref:System.ComponentModel.TypeDescriptor>для повышения быстродействия.</xref:System.ComponentModel.TypeDescriptor> Как правило они являются постоянными в течение времени существования объекта. Однако средства расширения и конструкторы можно изменить набор свойств для объекта. Если они есть, они могут вызывать этот метод, чтобы удалить дескрипторы свойств и событий объекта. Этот метод используется только во время разработки. Он не используется во время выполнения.       Перед внесением вызов <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>метод для очистки кэша, необходимо вызвать <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>метод для конкретной сборки сначала кэширования этих данных.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Этот метод также вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для уведомления все классы, которые хотите получать уведомления, когда свойство компонента изменяется.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "<xref:System.Reflection.Assembly>, Представляющий обновляемую сборку.</xref:System.Reflection.Assembly> Каждый <xref:System.Type>в этой сборке будет обновлен.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет свойства и события для указанного модуля из кэша."
  remarks: "Свойства и события, кэшируются на <xref:System.ComponentModel.TypeDescriptor>для повышения быстродействия.</xref:System.ComponentModel.TypeDescriptor> Как правило они являются постоянными в течение времени существования объекта. Однако средства расширения и конструкторы можно изменить набор свойств для объекта. Если они есть, они могут вызывать этот метод, чтобы удалить дескрипторы свойств и событий объекта. Этот метод используется только во время разработки. Он не используется во время выполнения.       Перед внесением вызов <xref:System.ComponentModel.TypeDescriptor.Refresh%2A>метод для очистки кэша, необходимо вызвать <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>метод для конкретного модуля, сначала кэширования этих данных.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       Этот метод также вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для уведомления все классы, которые хотите получать уведомления, когда свойство компонента изменяется.</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Module module);
    parameters:
    - id: module
      type: System.Reflection.Module
      description: "<xref:System.Reflection.Module>, Представляющий модуля, который нужно обновить.</xref:System.Reflection.Module> Каждый <xref:System.Type>в этом модуле будет обновлен.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет свойства и события для указанного типа компонента из кэша."
  remarks: "Вызов данной версии этот метод только в том случае, если у вас экземпляр объекта.       Свойства и события, кэшируются на <xref:System.ComponentModel.TypeDescriptor>для повышения быстродействия.</xref:System.ComponentModel.TypeDescriptor> Как правило они являются постоянными в течение времени существования объекта. Однако средства расширения и конструкторы можно изменить набор свойств для объекта. Если они есть, они могут вызывать этот метод, чтобы удалить дескрипторы свойств и событий объекта. Этот метод используется только во время разработки. Он не используется во время выполнения.       Этот метод также вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие при изменении свойства или события компонента.</xref:System.ComponentModel.TypeDescriptor.Refreshed> Это событие вызывается только в том случае, если нет предыдущего вызова <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>или <xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>метод, который кэшированные данные.</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public static void Refresh (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возникает при очистке кэша для компонента."
  remarks: 'Дополнительные сведения об обработке событий см. в разделе [NIB: Потребление событий](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).'
  example:
  - For an example of using this event, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static event System.ComponentModel.RefreshEventHandler Refreshed;
    return:
      type: System.ComponentModel.RefreshEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет ассоциативную связь между двумя объектами."
  remarks: "Метод RemoveAssociation Удаляет ассоциативную связь между двумя объектами, сформированный путем <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>метод.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       Объект <xref:System.WeakReference>используется для поддержки связи между основным и дополнительным объектами; таким образом, этот метод не оказывает влияния при любой объект завершен или удалять его сборщику мусора.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "Основной <xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "Сервер-получатель <xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет все ассоциации для основного объекта."
  remarks: "Метод RemoveAssociations удаляет все сопоставления между основного объекта и всех его подчиненных объектов, созданных вызовы <xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>метод.</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       Объект <xref:System.WeakReference>используется для поддержки связи между основным и дополнительным объектами; таким образом, этот метод не влияет на завершение основной подчиненных объектов и утилизацию при сборке мусора.</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociations (object primary);
    parameters:
    - id: primary
      type: System.Object
      description: "Основной <xref:System.Object>в ассоциации.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>primary</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом."
  remarks: "Этот метод удаляет с ранее добавленный поставщик описания типа <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> Удаление поставщика вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для связанного объекта.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Используйте <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> Для удаления."
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом."
  remarks: "Этот метод удаляет с ранее добавленный поставщик описания типа <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> Удаление поставщика вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для связанного типа.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Используйте <xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> Для удаления."
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет ранее добавленный поставщик описания типа, связанный с указанным объектом."
  remarks: "Этот метод удаляет с ранее добавленный поставщик описания типа <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> Удаление поставщика вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для связанного объекта.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Этот метод может вызываться из частично доверенного кода. Если <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>будет определено, вызывающий объект может зарегистрировать поставщика для указанного экземпляра если его тип также имеет частичное доверие.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Используйте <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> Для удаления."
    - id: instance
      type: System.Object
      description: "Экземпляр целевого компонента."
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Удаляет ранее добавленный поставщик описания типа, связанный с указанным типом."
  remarks: "Этот метод удаляет с ранее добавленный поставщик описания типа <xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод.</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> Удаление поставщика вызывает <xref:System.ComponentModel.TypeDescriptor.Refreshed>событие для связанного типа.</xref:System.ComponentModel.TypeDescriptor.Refreshed>       Этот метод может вызываться из частично доверенного кода. Если <xref:System.Security.Permissions.TypeDescriptorPermissionFlags>будет определено, вызывающего объекта можно отменить регистрацию поставщика для указанного типа Если имеет частичное доверие.</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       Используйте <xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>метод, если необходимо вызвать из частично доверенного кода.</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref> Для удаления."
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого компонента.</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба параметра, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Сортирует дескрипторы по имени дескриптора."
  syntax:
    content: public static void SortDescriptorArray (System.Collections.IList infos);
    parameters:
    - id: infos
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>, Содержащий дескрипторы для сортировки.</xref:System.Collections.IList>"
  overload: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>infos</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.IComNativeDescriptorHandler
  parent: System.ComponentModel
  isExternal: false
  name: IComNativeDescriptorHandler
  nameWithType: IComNativeDescriptorHandler
  fullName: System.ComponentModel.IComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  nameWithType: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.TypeDescriptor.AddAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes
  nameWithType: TypeDescriptor.AddAttributes
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable
  nameWithType: TypeDescriptor.AddEditorTable
- uid: System.ComponentModel.TypeDescriptor.AddProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider
  nameWithType: TypeDescriptor.AddProvider
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent
  nameWithType: TypeDescriptor.AddProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation
  nameWithType: TypeDescriptor.CreateAssociation
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner
  nameWithType: TypeDescriptor.CreateDesigner
- uid: System.ComponentModel.TypeDescriptor.CreateEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent
  nameWithType: TypeDescriptor.CreateEvent
- uid: System.ComponentModel.TypeDescriptor.CreateInstance*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptor.CreateInstance
- uid: System.ComponentModel.TypeDescriptor.CreateProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty
  nameWithType: TypeDescriptor.CreateProperty
- uid: System.ComponentModel.TypeDescriptor.GetAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation
  nameWithType: TypeDescriptor.GetAssociation
- uid: System.ComponentModel.TypeDescriptor.GetAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes
  nameWithType: TypeDescriptor.GetAttributes
- uid: System.ComponentModel.TypeDescriptor.GetClassName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName
  nameWithType: TypeDescriptor.GetClassName
- uid: System.ComponentModel.TypeDescriptor.GetComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName
  nameWithType: TypeDescriptor.GetComponentName
- uid: System.ComponentModel.TypeDescriptor.GetConverter*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter
  nameWithType: TypeDescriptor.GetConverter
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent
  nameWithType: TypeDescriptor.GetDefaultEvent
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty
  nameWithType: TypeDescriptor.GetDefaultProperty
- uid: System.ComponentModel.TypeDescriptor.GetEditor*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: TypeDescriptor.GetEditor
- uid: System.ComponentModel.TypeDescriptor.GetEvents*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents
  nameWithType: TypeDescriptor.GetEvents
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptor.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptor.GetProperties*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties
  nameWithType: TypeDescriptor.GetProperties
- uid: System.ComponentModel.TypeDescriptor.GetProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider
  nameWithType: TypeDescriptor.GetProvider
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptor.GetReflectionType
- uid: System.ComponentModel.TypeDescriptor.InterfaceType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh
  nameWithType: TypeDescriptor.Refresh
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation
  nameWithType: TypeDescriptor.RemoveAssociation
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations
  nameWithType: TypeDescriptor.RemoveAssociations
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider
  nameWithType: TypeDescriptor.RemoveProvider
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent
  nameWithType: TypeDescriptor.RemoveProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray
  nameWithType: TypeDescriptor.SortDescriptorArray
