### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  id: ECDsa
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  summary: "Предоставляет абстрактный базовый класс, инкапсулирующий эллиптических кривых цифровой подписи алгоритма (ECDSA)."
  remarks: "Этот класс служит в качестве абстрактного базового класса для <xref:System.Security.Cryptography.ECDsaCng>производных.</xref:System.Security.Cryptography.ECDsaCng>"
  syntax:
    content: 'public abstract class ECDsa : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Initializes a new instance of the <xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref> class."
  remarks: "Данный конструктор вызывается классами, которые являются производными от <xref:System.Security.Cryptography.ECDsa>класса.</xref:System.Security.Cryptography.ECDsa> <xref:System.Security.Cryptography.ECDsaCng>Класс является в настоящее время поддерживается только реализацией [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].</xref:System.Security.Cryptography.ECDsaCng> Можно предоставить собственную реализацию."
  syntax:
    content: protected ECDsa ();
    parameters: []
  overload: System.Security.Cryptography.ECDsa.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый экземпляр реализации по умолчанию из эллиптических кривых цифровой подписи алгоритма (ECDSA)."
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDsa
      description: "Новый экземпляр реализации по умолчанию (<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>) этого класса."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый экземпляр заданной реализации из эллиптических кривых цифровой подписи алгоритма (ECDSA)."
  remarks: "При разработке свою собственную реализацию <xref:System.Security.Cryptography.ECDsa>объекта, можно использовать перегрузку метода Create для создания пользовательского `algorithm` строка, указывающая вашей реализации.</xref:System.Security.Cryptography.ECDsa>       Если указать пользовательское значение `algorithm` параметр <xref:System.Security.Cryptography.CryptoConfig>объекта будет использоваться для определения того, могут ли быть созданы объект ECDSA.</xref:System.Security.Cryptography.CryptoConfig>"
  syntax:
    content: public static System.Security.Cryptography.ECDsa Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "The name of an ECDSA implementation. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]:  \n  \n \\- \"ECDsa\"  \n  \n \\- \"ECDsaCng\"  \n  \n \\- \"System.Security.Cryptography.ECDsaCng\"  \n  \n You can also provide the name of a custom ECDSA implementation."
    return:
      type: System.Security.Cryptography.ECDsa
      description: "Новый экземпляр заданной реализации этого класса. Если заданное имя алгоритма не соответствует реализации ECDSA, этот метод возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "При переопределении в производном классе вычисляет хэш-значение указанного двоичного потока с помощью заданного алгоритма хэширования."
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Двоичный поток, хэширование которого требуется выполнить."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Алгоритм, используемый для хэширования данных."
    return:
      type: System.Byte[]
      description: "Хэшированные данные."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Производный класс должен переопределять этот метод."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "При переопределении в производном классе вычисляет хэш-значение указанного фрагмента массива байтов с помощью заданного алгоритма хэширования."
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Данные, предназначенные для хэширования."
    - id: offset
      type: System.Int32
      description: "Индекс первого байта в `data` для хэширования."
    - id: count
      type: System.Int32
      description: "Число байтов для хэширования."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Алгоритм, используемый для хэширования данных."
    return:
      type: System.Byte[]
      description: "Хэшированные данные."
  overload: System.Security.Cryptography.ECDsa.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Производный класс должен переопределять этот метод."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает имя алгоритма обмена ключами."
  remarks: "Данное свойство наследуется из <xref:System.Security.Cryptography.AsymmetricAlgorithm>базового класса.</xref:System.Security.Cryptography.AsymmetricAlgorithm>       Эллиптических кривых цифровой подписи алгоритма (ECDSA) используется для создания цифровой подписи; для формирования ключа, поэтому он не используется, это свойство возвращает `null`."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает имя алгоритма подписи."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Строка «ECDsa»."
  overload: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Вычисляет хэш-значение заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение."
  syntax:
    content: public virtual byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Входные данные, для которых нужно вычислить хэш."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения."
    return:
      type: System.Byte[]
      description: "Подпись ECDSA для указанных данных."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Вычисляет хэш-значение заданного потока, с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение."
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Входной поток, для которого нужно вычислить хэш."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения."
    return:
      type: System.Byte[]
      description: "Подпись ECDSA для указанных данных."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Вычисляет хэш-значение части заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение."
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Входные данные, для которых нужно вычислить хэш."
    - id: offset
      type: System.Int32
      description: "Смещение в массиве, с которого следует использовать данные."
    - id: count
      type: System.Int32
      description: "Число байтов в массиве для использования в качестве данных."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения."
    return:
      type: System.Byte[]
      description: "Подпись ECDSA для указанных данных."
  overload: System.Security.Cryptography.ECDsa.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>меньше нуля.       - или - <code>count</code> меньше нуля.       - или - <code>offset</code>  + <code>count</code> – 1 приводит к индексу, который выходит за пределы верхней границы <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает цифровую подпись для указанного хэш-значения."
  syntax:
    content: public abstract byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "Хэш-значение подписываемых данных."
    return:
      type: System.Byte[]
      description: "Цифровая подпись, состоящая из указанного хэш-значения, зашифрованные с помощью закрытого ключа."
  overload: System.Security.Cryptography.ECDsa.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>hash</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет допустимость цифровой подписи, вычисляя хэш-значение указанных данных с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью."
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Подписанные данные."
    - id: signature
      type: System.Byte[]
      description: "Данные подписи, которую требуется проверить."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения данных."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подпись является допустимой; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет допустимость цифровой подписи, вычисляя хэш-значение заданного потока с помощью указанного алгоритма хэширования и сравнения его с предоставленной подписью."
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "Подписанные данные."
    - id: signature
      type: System.Byte[]
      description: "Данные подписи, которую требуется проверить."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения данных."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подпись является допустимой; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет допустимость цифровой подписи, вычисляя хэш-значения данных в части байтовый массив с помощью указанного алгоритма хэширования и сравнения его с предоставленной подписью."
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "Подписанные данные."
    - id: offset
      type: System.Int32
      description: "Индекс, начиная с которого нужно вычислить хэш."
    - id: count
      type: System.Int32
      description: "Число байтов для хэширования."
    - id: signature
      type: System.Byte[]
      description: "Данные подписи, которую требуется проверить."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, используемый для создания хэш-значения данных."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подпись является допустимой; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или &lt;xref:System.String.Empty?displayProperty=fullName&gt;."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>меньше нуля.       - или - <code>count</code> меньше нуля.       - или - <code>offset</code>  + <code>count</code> – 1 приводит к индексу, который выходит за пределы верхней границы <code>data</code>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет цифровую подпись для указанного хэш-значения."
  remarks: "Подпись сначала расшифровываются с помощью открытого ключа и затем результат сравнивается с хэш-значение для проверки."
  syntax:
    content: public abstract bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "Хэш-значение блока данных."
    - id: signature
      type: System.Byte[]
      description: "Цифровая подпись для проверки."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если хэш-значение соответствует расшифрованной подписи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDsa.VerifyHash*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsa.#ctor
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
- uid: System.Security.Cryptography.ECDsa.Create
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
- uid: System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create(System.String)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create(String)
  nameWithType: ECDsa.Create(String)
  fullName: System.Security.Cryptography.ECDsa.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Stream,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsa.#ctor*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa.ECDsa
- uid: System.Security.Cryptography.ECDsa.Create*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: Create
  nameWithType: ECDsa.Create
- uid: System.Security.Cryptography.ECDsa.HashData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: HashData
  nameWithType: ECDsa.HashData
- uid: System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDsa.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDsa.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDsa.SignData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignData
  nameWithType: ECDsa.SignData
- uid: System.Security.Cryptography.ECDsa.SignHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: SignHash
  nameWithType: ECDsa.SignHash
- uid: System.Security.Cryptography.ECDsa.VerifyData*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyData
  nameWithType: ECDsa.VerifyData
- uid: System.Security.Cryptography.ECDsa.VerifyHash*
  parent: System.Security.Cryptography.ECDsa
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsa.VerifyHash
