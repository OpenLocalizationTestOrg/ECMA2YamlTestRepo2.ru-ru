### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "Предоставляет системный идентификатор типа XAML для членов типов XAML. Идентификатор используется средствами чтения и записи XAML во время обработки узлов элемента (Если средство чтения XAML находится на <xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) и также общие логику системы типов XAML."
  remarks: "XamlMember можно использовать три методологии для возврата сведений о члене XAML: стандартные общие отражения среды CLR (CLR); метод ссылки — только для отражения, вызов внутренней флаги API-интерфейсы, использовать оптимизированные для бита; или переопределений виртуального вызова `Lookup*` API, предоставляемые возможности XamlMember подклассов. В большинстве случаев API служб XAML .NET Framework и XamlMember API использовать контекст схемы XAML по умолчанию. Контекст схемы XAML по умолчанию для служб XAML .NET Framework использует для системы типов среды CLR. Это позволяет средств чтения и записи XAML для работы с любой тип или член, определенный в, или в противном случае можно, среда CLR и его методами отражения.      ## API поиска * и XamlMember производные классы XamlMember определяет несколько виртуальных членов, которые производные классы могут переопределить. Эти элементы имеют имена, всегда начинаются со строки, `Lookup`. В оставшейся части API имя затем ссылки на свойство, которое влияет виртуальный метод. Например XamlMember производный класс может переопределить <xref:System.Xaml.XamlMember.LookupTargetType%2A>для оказания влияния на какие определяемого базы свойства <xref:System.Xaml.XamlMember.TargetType%2A>возвращает в производном классе.</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A> Можно прогнозировать значения, возвращаемые для таких свойств в XamlMember или имеющиеся производных классов из документации для соответствующего `Lookup*` методы.       Назначение `Lookup*` методы — предоставить метод расширения XAML тип системы, включающей XamlMember базового класса. Используя наследование из XamlMember и переопределение `Lookup` виртуальные члены можно определить концепции элемента XAML для схемы XAML в системе типов XAML без привязки к особенностям система резервных типов или технологии. Можно также использовать предоставленный контекст схемы XAML в этой схеме и по-прежнему возвращать нужных результатов.       Например рассмотрим свойство XamlMember <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Это свойство информирует вызывающие объекты, что операции, например, с помощью <xref:System.Xaml.XamlWriter>для сериализации могут записывать значение для этого элемента на целевом объекте.</xref:System.Xaml.XamlWriter> В реализации по умолчанию выполняется определение, является ли элемент для записи, используя методы отражения для резервный CLR <xref:System.Type>и его членах ( <xref:System.Reflection.MemberInfo>).</xref:System.Reflection.MemberInfo> </xref:System.Type> Таким образом по умолчанию в системе типов XAML зависит от системы типов CLR. Тем не менее можно удалить эту зависимость для XAML тип системы создания отчетов из <xref:System.Xaml.XamlMember.IsWritePublic%2A>путем переопределения API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> </xref:System.Xaml.XamlMember.IsWritePublic%2A> В рамках переопределения можно использовать другие определения, такие как метаданные, специфичные для технологии, главная таблица подстановки, оптимизированный для фиксированного словаря XAML или ряд других стратегий для определения, является ли член XAML для записи в словаре XAML.      ## Создав XamlMember без XAML схемы контекста наиболее требуются конструкторы XamlMember <xref:System.Xaml.XamlSchemaContext>как часть их инициализации.</xref:System.Xaml.XamlSchemaContext> <xref:System.Xaml.XamlSchemaContext>Также необходим для многих внутренней <xref:System.Xaml.XamlSchemaContext>операций, таких как получения информации, перенаправление из резервного типа.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> При работе с XamlMember API обычно имеется <xref:System.Xaml.XamlSchemaContext>доступный в окружающей конструкции, такие как <xref:System.Xaml.XamlWriter>.</xref:System.Xaml.XamlWriter> </xref:System.Xaml.XamlSchemaContext> В этом случае можно передать <xref:System.Xaml.XamlSchemaContext>ссылаться через все XAML типа системные вызовы, требующие контекст схемы XAML.</xref:System.Xaml.XamlSchemaContext>       Определенный конструктор, <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>требуется <xref:System.Xaml.XamlSchemaContext>.</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> Тем не менее XamlMember, который формируется с <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>подпись возвращает `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       Для пути загрузки, который включает в себя <xref:System.Xaml.XamlObjectWriter>, такой член не может быть записан в граф объектов.</xref:System.Xaml.XamlObjectWriter> С помощью реализации служб .NET Framework XAML, <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>вызова создается исключение <xref:System.Xaml.XamlObjectWriterException>при сообщает соответствующие XamlMember `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Не следует создавать XamlMember, который имеет значение `true` для <xref:System.Xaml.XamlMember.IsUnknown%2A>Если ваша реализация может обрабатывать исключения из <xref:System.Xaml.XamlObjectWriter>, или у вас есть другие способы настройки <xref:System.Xaml.XamlObjectWriter>поведение.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> Например, один или несколько из следующих может быть верно для реализации:-контекст схемы XAML доступен в более поздней версии.      -Используется шаблон вызова члена.      -Намеренно переопределяется <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>в пользовательский модуль записи XAML.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса системе типов среды CLR с помощью <xref:System.Reflection.EventInfo>и <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.EventInfo>"
  remarks: "Этот конструктор используется, если элемент представляет событие (свойство точки подключения обработчика событий)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "Система типов среды CLR <xref:System.Reflection.EventInfo>, представляющий член события.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса системе типов среды CLR с помощью <xref:System.Reflection.PropertyInfo>и <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>.</xref:System.Reflection.PropertyInfo>"
  remarks: "Этот конструктор используется, если элемент представляет свойство (специально не является подключением обработчика событий)."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "Система типов среды CLR <xref:System.Reflection.PropertyInfo>, представляющий свойство элемента.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса системе типов среды CLR с помощью <xref:System.Reflection.EventInfo>и <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, в том числе <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> сведения.</xref:System.Reflection.EventInfo>"
  remarks: "Этот конструктор используется, если элемент представляет событие (или свойство точки подключения обработчика событий)."
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "Система типов среды CLR <xref:System.Reflection.EventInfo>, представляющий член события.</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> Вызывает реализацию, обрабатывающую отражения во время выполнения для <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса с помощью отражения <xref:System.Reflection.PropertyInfo>и <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>, в том числе <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> сведения.</xref:System.Reflection.PropertyInfo>"
  remarks: "Этот конструктор используется только в том случае, если элемент представляет свойство и не является подключением обработчика событий."
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "Система типов среды CLR <xref:System.Reflection.PropertyInfo>, представляющий свойство элемента.</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> Вызывает реализацию, обрабатывающую во время выполнения вызова от <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса для <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , представляющий присоединяемые события."
  remarks: "Этот конструктор используется, если элемент представляет элемент вложенного события."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "Строковое имя присоединяемого события."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>обработчика <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> метод присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> классов с помощью строкового имени и объявление <xref href=&quot;System.Xaml.XamlType&quot;> </xref> сведения. Объект <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , создаваемое с этим сигнатура имеет значительные ограничения; см. заметки."
  remarks: "Объект <xref:System.Xaml.XamlMember>, создаваемое с подпись возвращает XamlMember `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       Для пути загрузки, который включает в себя <xref:System.Xaml.XamlObjectWriter>, такой член не может быть записан в граф объектов.</xref:System.Xaml.XamlObjectWriter> С помощью реализации служб XAML .NET Framework <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>вызова создается исключение <xref:System.Xaml.XamlObjectWriterException>при соответствующие <xref:System.Xaml.XamlMember>отчеты `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Не следует создавать <xref:System.Xaml.XamlMember>с <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` Если ваша реализация может обрабатывать исключения из <xref:System.Xaml.XamlObjectWriter>, или у вас есть другие способы настройки <xref:System.Xaml.XamlObjectWriter>поведение.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> Например, один или несколько из следующих может быть верно для реализации:-контекст схемы XAML доступен в более поздней версии.      -Используется шаблон вызова члена.      -Намеренно переопределяется <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>в пользовательский модуль записи XAML.</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "Имя элемента строки."
    - id: declaringType
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> Сведения для объявляющего типа."
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы указать, что член может быть присоединен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса для <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , представляющий присоединяемое свойство."
  remarks: "Этот конструктор используется, если элемент представляет присоединяемое свойство."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "Строковое имя присоединяемого свойства."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>для <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> доступа присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>для <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> доступа присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса для <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , представляющий присоединяемые события, включая <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> сведения."
  remarks: "Этот конструктор используется, если элемент представляет элемент вложенного события."
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "Строковое имя присоединяемого события."
    - id: adder
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>обработчика <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref> метод присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> Вызывает реализацию, обрабатывающую во время выполнения вызова от <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> класса для <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , представляющий присоединяемое свойство, включая <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> сведения."
  remarks: "Этот конструктор используется, если элемент представляет элемент вложенного свойства."
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "Строковое имя присоединяемого свойства."
    - id: getter
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>для <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> доступа присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "Система типов среды CLR <xref:System.Reflection.MethodInfo>для <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> доступа присоединяемого члена резервном реализации.</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref> Контекста, определяющее элемент."
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> Вызывает реализацию, обрабатывающую во время выполнения вызова от <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.XamlType&quot;> </xref> для типа, который объявляет член, который связан с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Это значение обычно устанавливается во время инициализации и обычно не `null`.      Настроек [!IMPORTANT] настроек DeclaringType данные могут передаваться в конструкторами для инициализации. Путем вызова непосредственно базовых конструкторов, инициализация для <xref:System.Xaml.XamlMember>производных классов может пропускать некоторые проверки значений, которые будут внесены в базового класса.</xref:System.Xaml.XamlMember> Таким образом производная инициализация можно изменить сведения о связях обнаруженную члена типа члена XAML, чтобы он больше не согласовывался ожидаемым способом с информацией о его базового объявления CLR в системе типов. Для каких-либо критическим с точки зрения безопасности проверок объявления информации о типах используйте базовый тип CLR."
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> Для типа, который объявляет член, который связан с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; объектов объявлен объект, который используется для отложенной загрузки XAML."
  remarks: "Вызов DeferringLoader вызывает <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> Это происходит в случаях, когда логика начального внутреннего отражения не уже задал сведения."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; с <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> ограничение универсального."
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Получает список <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов. Эти поставщики отображают элементы, для которых существуют отношения зависимости для порядка инициализации относительно это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Вызов DependsOn вызывает <xref:System.Xaml.XamlMember.LookupDependsOn%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupDependsOn%2A> Это происходит в случаях, когда логика начального внутреннего отражения не уже задал сведения.       `DependsOn` Применить шаблон к вариантам модели объекта, которые намеренно противоречат общему правилу XAML. Общее правило XAML: члены типа, которые передаются как текст инициализации (или методом фабрики в XAML 2009) должно иметь возможность назначаться в любом порядке. Применяя `DependsOn` узор к члену, можно указать средству записи XAML всегда обработать указанный член перед этим членом. Можно применить этот шаблон в ситуациях, где значение текущего элемента требует контекста или другие сведения, которые доступны только после установки другого элемента.       `DependsOn` Шаблон быть применен внимательно и зарезервирован для сценариев свойств, где он служит архитектурной цели. Большое количество зависимостей которые потенциально могут замедлить обработку XAML. Кроме того существует возможность создать циклические зависимости, в этом случае поведение обработки XAML не определено.       Пример `DependsOn` сценарии из WPF включают некоторые свойства на <xref:System.Windows.Controls.ControlTemplate>и <xref:System.Windows.DataTemplate>на <xref:System.Windows.Trigger>и <xref:System.Windows.Setter>.</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Список <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов."
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Указывает, равен ли текущий объект другому объекту."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект, сравниваемый с этим объектом."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий объект равен <code> obj </code> параметр; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Указывает, равен ли текущий объект другому объекту того же типа."
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "Объект, сравниваемый с этим объектом."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий объект равен <code> other </code> параметр; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает хэш-код для этого объекта."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Целочисленный хэш-код."
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает список пространств имен XAML, где могут существовать этот член XAML."
  remarks: "Реализация по умолчанию возвращает <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>результат, <xref:System.Xaml.XamlMember.DeclaringType%2A>который связан с <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.DeclaringType%2A> вызова</xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "Список идентификаторов пространства имен XAML как строки."
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> реализацию, связанный с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "`Invoker` Шаблон — это сложная службе расширения системы типов XAML. `Invoker` Шаблон предоставляет способ вставки поведение сопоставления типов другую схему, используя при этом по-прежнему определения системы типов XAML в службах XAML .NET Framework.       Если <xref:System.Xaml.XamlMember.LookupInvoker%2A>переопределить возвращает `null`, или если реализация по умолчанию возвращает `null` , так как он не имеет <xref:System.Xaml.XamlMember.UnderlyingMember%2A>для этого <xref:System.Xaml.XamlMember>свойство Invoker возвращает <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>значение по умолчанию.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> Это верно для большинства операций, с помощью служб XAML .NET Framework и контекст схемы XAML по умолчанию и где переопределить конкретные `Invoker` шаблоны передаются для построения сущностей системы типов XAML.       Вызов вызова вызывает <xref:System.Xaml.XamlMember.LookupInvoker%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> Реализацию, связанный с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> передается в качестве внешнего свойства."
  remarks: "Вызов IsAmbient вызывает <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> Это происходит в реализациях, когда логика начального внутреннего отражения не уже задал сведения.       Проверка внешних свойств обычно являются частью логики обработки XAML, чтобы убедиться в том, что объекты и значения, которые зависят от использования окружения для уточнения типа может работать неправильно. API-интерфейсы служб XAML .NET Framework и контекст схемы XAML по умолчанию заполняет значение в зависимости от однозначного соответствия с <xref:System.Windows.Markup.AmbientAttribute>.</xref:System.Windows.Markup.AmbientAttribute> Реализация по умолчанию <xref:System.Xaml.XamlMember.LookupIsAmbient%2A>использует этот существующие <xref:System.Windows.Markup.AmbientAttribute>прием и она вернет `true` Если <xref:System.Windows.Markup.AmbientAttribute>существует в объявлении члена.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>найти членов из нескольких типов WPF, включая <xref:System.Windows.Application>, <xref:System.Windows.Setter>и <xref:System.Windows.Style>.</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> Он находится на <xref:System.Windows.ResourceDictionary>тип, который описывающая, что любой элемент, использует <xref:System.Windows.ResourceDictionary>как его тип должен считаться окружающим даже если специально не установлен атрибут элемента.</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> выводятся как внешнее свойство; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> является присоединяемого члена."
  remarks: "Значение IsAttachable инициализируется в зависимости от того, какой конструктор использовался для создания <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>"
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> является присоединяемого члена; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой директиву XAML."
  remarks: "Значение IsDirective инициализируется в зависимости от того, какой конструктор использовался для создания <xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember> Базовый <xref:System.Xaml.XamlMember>конструкторы инициализируют так, чтобы IsDirective `false`.</xref:System.Xaml.XamlMember> Однако <xref:System.Xaml.XamlDirective>класса ( <xref:System.Xaml.XamlMember>производный класс) инициализирует так, чтобы IsDirective `true`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       Если вы хотите сообщить IsDirective как `true` для вызова пользовательского класса схемы XAML для элементов XAML, убедитесь в том, являются производными от <xref:System.Xaml.XamlDirective>, так как это не единственный способ включить это поведение.</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> является XAML директив, в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет член события."
  remarks: "Вызов IsEvent вызывает <xref:System.Xaml.XamlMember.LookupIsEvent%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет событие; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> инициализируется с недопустимым <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> строку как <xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> инициализируется с недопустимым <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> строки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент только для чтения."
  remarks: "Вызов IsReadOnly вызывает <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент только для чтения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент с вызываемой public <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
  remarks: "IsReadPublic значение проверок, будет ли <xref:System.Xaml.XamlMember.DeclaringType%2A>является открытым.</xref:System.Xaml.XamlMember.DeclaringType%2A> Если <xref:System.Xaml.XamlMember.DeclaringType%2A>является закрытым, `get` метод доступа не может быть вызван практическая и возвращает IsReadPublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Вызов IsReadPublic вызывает <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      Настроек [!IMPORTANT] настроек <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>метод является виртуальным и поэтому могут переопределяться.</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> Переопределение имеет возможность изменить (намеренно или иным способом) доступа член XAML, чтобы он больше не согласовывался ожидаемым способом с доступа к информации о системе типов из его базового объявления CLR. Для проверок уровни доступа к критическим с точки зрения безопасности используйте базовый тип CLR."
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет вызываемую public <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> доступа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли элемент не может разрешить резервной системы, используемый для разрешения типов и членов."
  remarks: "Объект <xref:System.Xaml.XamlMember>, создаваемое с <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>подпись возвращает `true` для IsUnknown.</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       Для пути загрузки, который включает в себя <xref:System.Xaml.XamlObjectWriter>, <xref:System.Xaml.XamlMember>с `true` для IsUnknown не может быть записан в граф объектов.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> В реализации по умолчанию в API служб XAML .NET Framework <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>вызова создается исключение <xref:System.Xaml.XamlObjectWriterException>при соответствующие <xref:System.Xaml.XamlMember>отчеты `true` для IsUnknown.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       Не следует создавать <xref:System.Xaml.XamlMember>, имеет значение `true` для IsUnknown Если ваша реализация может обрабатывать исключения из <xref:System.Xaml.XamlObjectWriter>, или у вас есть другие способы настройки <xref:System.Xaml.XamlObjectWriter>поведение.</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       Вызов IsUnknown вызывает <xref:System.Xaml.XamlMember.LookupIsUnknown%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент не удается разрешить; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> , если элемент можно разрешить."
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее, является ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент, доступный только для записи."
  remarks: "Вызов IsWriteOnly вызывает <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент, доступный только для записи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает значение, указывающее ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет элемент, который имеет открытый вызываемой <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метода доступа."
  remarks: "Значение IsWritePublic считает ли <xref:System.Xaml.XamlMember.DeclaringType%2A>является общим как часть определения.</xref:System.Xaml.XamlMember.DeclaringType%2A> Если <xref:System.Xaml.XamlMember.DeclaringType%2A>является закрытым, `set` метод доступа не может быть вызван практическая и возвращает IsWritePublic `false`.</xref:System.Xaml.XamlMember.DeclaringType%2A>       Вызов IsWritePublic вызывает <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      Настроек [!IMPORTANT] настроек <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>метод является виртуальным и поэтому могут переопределяться.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> Переопределение имеет возможность изменить (намеренно или иным способом) доступа член XAML, чтобы он больше не согласовывался ожидаемым способом с доступа к информации о системе типов из его базового объявления CLR. Для проверок уровни доступа к критическим с точки зрения безопасности используйте базовый тип CLR."
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет вызываемую public <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> доступа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "При реализации в производном классе, возвращает <xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> реализации."
  remarks: "Переопределите этот метод для предоставления внутреннее отражение альтернативным способом получения значений атрибутов CLR. В отсутствие переопределения внутренний рефлектор использует типичные логику отражения среды CLR, например вызовы <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>       Реализация по умолчанию возвращает `null`."
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref> Реализации."
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; объектов объявлен объект, который используется для отложенной загрузки XAML."
  remarks: "Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.DeferringLoader%2A>свойство.</xref:System.Xaml.XamlMember.DeferringLoader%2A> Переопределите этот метод, если требуется <xref:System.Xaml.XamlMember.DeferringLoader%2A>для возврата значение, отличное от значения, включаемые внутреннего отражения по умолчанию, и если предоставляется пользовательский <xref:System.Xaml.Schema.XamlMemberInvoker>сведения.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       Реализация по умолчанию возвращает объект, либо путем чтения <xref:System.Windows.Markup.XamlDeferLoadAttribute>или с помощью <xref:System.Xaml.XamlDeferringLoader>из объявляющего типа.</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> Если ни один объект не доступен, этот метод может возвращать `null`."
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; с <xref href=&quot;System.Xaml.XamlDeferringLoader&quot;> </xref> ограничение универсального."
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает список <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов. Элементы в списке отчетов элементы, для которых существуют отношения зависимости для порядка инициализации относительно это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.DependsOn%2A>свойство.</xref:System.Xaml.XamlMember.DependsOn%2A> Переопределите этот метод, если требуется <xref:System.Xaml.XamlMember.DependsOn%2A>для возврата значение, отличное от значения, включаемые внутреннего отражения по умолчанию, и если предоставляется пользовательский <xref:System.Xaml.Schema.XamlMemberInvoker>сведения.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       Этот случай <xref:System.Windows.Markup.DependsOnAttribute>.</xref:System.Windows.Markup.DependsOnAttribute> атрибут реализации чтения и записи XAML в WPF Реализация по умолчанию использует этот существующий <xref:System.Windows.Markup.DependsOnAttribute>методика.</xref:System.Windows.Markup.DependsOnAttribute>       Переопределите этот метод, если вы не используете <xref:System.Windows.Markup.DependsOnAttribute>для этой цели и намерены заменить этот прием для указания порядка обработки свойств собственной методикой.</xref:System.Windows.Markup.DependsOnAttribute> Если вы не собираетесь поддерживать порядка обработки свойств, можно использовать реализация по умолчанию, поскольку он не возвращает результатов, который подходит.       Список доступен только для чтения."
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "Список <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов."
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref> , связанного с данным <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Этот метод вызывается путем вызова метода <xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A>       Реализация по умолчанию не требует <xref:System.Xaml.XamlMember>создаваться с помощью одного из конструкторов, передайте первоначальный <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember> Тем не менее <xref:System.Xaml.XamlMember.UnderlyingMember%2A>значение должно существовать для <xref:System.Xaml.XamlMember>; в противном случае реализация по умолчанию возвращает `null`.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Переопределите этот метод, если вы наследуете от <xref:System.Xaml.Schema.XamlMemberInvoker>и должны возвращать производного класса.</xref:System.Xaml.Schema.XamlMemberInvoker> Если возвращается `null`, <xref:System.Xaml.XamlMember.Invoker%2A>возвращает <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>вызывающим объектам.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> передается в качестве внешнего свойства."
  remarks: "Этот метод вызывается внутренних вызовов, которые проверяют окружения сведения о свойстве XAML. Поведение внешнее свойство учитывается в поведении открытого API средств чтения и записи XAML. Внутренние вызовы, которые ссылаются на LookupIsAmbient обычно являются частью логики обработки XAML, чтобы убедиться в том, что объекты и значения, которые зависят от использования окружения для уточнения типа может работать неправильно. Реализация по умолчанию служб XAML .NET Framework использует атрибуты для получения этих сведений из отражения резервных типов среды CLR. В частности, реализация по умолчанию проверяет наличие <xref:System.Windows.Markup.AmbientAttribute>и возвращает `true` для LookupIsAmbient Если <xref:System.Windows.Markup.AmbientAttribute>существует для определения члена.</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       Переопределите этот метод, если вы не используете <xref:System.Windows.Markup.AmbientAttribute>для этой цели и намерены заменить этот прием для указания свойства окружения XAML собственной методикой.</xref:System.Windows.Markup.AmbientAttribute>       Пример API-интерфейсы из атрибута с <xref:System.Windows.Markup.AmbientAttribute>и <xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> <xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>.</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName> </xref:System.Windows.Trigger.Property%2A?displayProperty=fullName> </xref:System.Windows.Markup.AmbientAttribute> WPF"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы сообщить об этом <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> как внешнее свойство; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет событие."
  remarks: "Реализация проверок по умолчанию ли <xref:System.Xaml.XamlMember.UnderlyingMember%2A>относится к типу <xref:System.Reflection.EventInfo>и если это так, возвращает `true`.</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsEvent%2A>.</xref:System.Xaml.XamlMember.IsEvent%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, можно интерпретировать для определения XAML тип представления систем для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>отчет, это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет событие; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет предназначен только для чтения свойство."
  remarks: "Реализация по умолчанию возвращает `true` Если <xref:System.Xaml.XamlMember.UnderlyingMember%2A>существует, но открытый `set` доступа не существует для него, что определяется внутреннего отражения.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</xref:System.Xaml.XamlMember.IsReadOnly%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, можно интерпретировать для определения XAML тип представления систем для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы сообщить об этом <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> как предназначен только для чтения свойство; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет свойство, которое имеет открытый <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
  remarks: "Реализация по умолчанию возвращает результаты, либо на основе внутреннего отражения, либо отрицательными значениями <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, обработку в указанном порядке.</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       Возвращает LookupIsReadPublic ли сам элемент является открытым; он возвращает `true` для открытого члена на nonpublic, объявляющий тип. Используйте <xref:System.Xaml.XamlMember.IsReadPublic%2A>вместо этого, если требуется, чтобы учитывать видимость объявляющего типа.</xref:System.Xaml.XamlMember.IsReadPublic%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</xref:System.Xaml.XamlMember.IsReadPublic%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>      Настроек [!IMPORTANT] настроек LookupIsReadPublic метод является виртуальным и таким образом, может быть переопределен. Переопределение имеет возможность изменить (намеренно или иным способом) доступа член XAML, чтобы он больше не согласовывался ожидаемым способом с доступа к информации о системе типов из его базового объявления CLR. Для проверок уровни доступа к критическим с точки зрения безопасности используйте базовый тип CLR."
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет свойство, которое имеет открытый <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> доступа; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет элемент, который не удается разрешить резервной системы, используемый для разрешения типов и членов."
  remarks: "Этот метод может быть вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsUnknown%2A>.</xref:System.Xaml.XamlMember.IsUnknown%2A> Реализация по умолчанию возвращает результаты, основанного на любом внутреннего отражения или проверке `null` значение <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, обработку в указанном порядке.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент, не удается разрешить; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет элемент, который имеет открытый <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> , но не открытый метод доступа <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
  remarks: "Реализация по умолчанию возвращает `true` Если <xref:System.Xaml.XamlMember.UnderlyingMember%2A>существует, имеет открытый `set` метода доступа и закрытого `get` метод доступа, как определено внутреннего отражения.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</xref:System.Xaml.XamlMember.IsWriteOnly%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент, доступный только для записи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает ли это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет элемент, который имеет открытый <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метода доступа."
  remarks: "Реализация по умолчанию возвращает результаты на основе внутреннего отражения или отрицательными значениями <xref:System.Xaml.XamlMember.IsReadOnly%2A>, обработку в указанном порядке.</xref:System.Xaml.XamlMember.IsReadOnly%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>      Настроек [!IMPORTANT] настроек LookupIsWritePublic метод является виртуальным и таким образом, может быть переопределен. Переопределение имеет возможность изменить (намеренно или иным способом) доступа член XAML, чтобы он больше не согласовывался ожидаемым способом с доступа к информации о системе типов из его базового объявления CLR. Для проверок уровни доступа к критическим с точки зрения безопасности используйте базовый тип CLR."
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> представляет собой элемент, доступный для записи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.XamlType&quot;> </xref> типа, где <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> может существовать."
  remarks: "Реализация по умолчанию различаются присоединяемого и неприсоединяемого члены. Для неприсоединяемого элементов LookupTargetType всегда возвращает <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Для прикрепляемые члены LookupTargetType возвращает результат на основании проверки <xref:System.Xaml.XamlMember.UnderlyingMember%2A>тип параметра метода доступа и интерпретирует тип, основанный на контекст схемы XAML.</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.TargetType%2A>.</xref:System.Xaml.XamlMember.TargetType%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "Тип где <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> может существовать. См. заметки."
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.XamlType&quot;> </xref> типа, который используется элементом. См. заметки."
  remarks: "Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Переопределите этот метод, если требуется <xref:System.Xaml.XamlMember.Type%2A>для возврата значение, отличное от значения, включаемые внутреннего отражения по умолчанию, и если предоставляется пользовательский <xref:System.Xaml.Schema.XamlMemberInvoker>сведения.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       Реализация по умолчанию использует разных путей кода и концептуальные значения для возвращаемого <xref:System.Xaml.XamlType>, зависит ли это <xref:System.Xaml.XamlMember>представляет свойство, метод или событие.</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      — Для свойства, возвращаемый <xref:System.Xaml.XamlType>— тип, который задает свойство или возвращаемое свойство.</xref:System.Xaml.XamlType>      -Для события, возвращенный <xref:System.Xaml.XamlType>Тип обработчика событий (делегат в реализации CLR).</xref:System.Xaml.XamlType>      -Для метода <xref:System.Xaml.XamlType>является возвращаемым типом.</xref:System.Xaml.XamlType>       В каждом случае контекст схемы XAML используется для определения типа XAML с базовым системным типом.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.Type%2A>.</xref:System.Xaml.XamlMember.Type%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> Типа, который используется элементом. См. заметки."
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает реализация преобразователя типов, связанный с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Реализация по умолчанию использует следующую логику и порядок обработки: - Если присвоение атрибутов существует на уровне элементов (<xref:System.ComponentModel.TypeConverterAttribute>), сведения об атрибутах используется для вызова <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>в контексте схемы XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -Если <xref:System.Xaml.XamlMember.Type%2A>является допустимым, возвращается преобразователь типов, связанный с типом.</xref:System.Xaml.XamlMember.Type%2A>      -Если член является событием, возвращается преобразователь типов для конкретного события.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.TypeConverter%2A>.</xref:System.Xaml.XamlMember.TypeConverter%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; экземпляра с <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> ограничения; или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> доступа, который связан с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Реализация по умолчанию интерпретирует <xref:System.Xaml.XamlMember.UnderlyingMember%2A>свойство как <xref:System.Reflection.PropertyInfo>и возвращает значение <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(с параметром в `true`), это означает, что возвращаемый метод может быть закрытым.</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Это поведение может привести к `null` для определенных вариантов. включая случаи, когда связанный метод доступа не существует или член не является свойством.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>Свойства связанного <xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember> Убедитесь, что для реализации LookupUnderlyingGetter, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, и <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>, чтобы все они возвращают результаты коррелированный.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>Для связанного <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метод доступа; или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает системе типов среды CLR <xref:System.Reflection.MemberInfo>, связанного с данным <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  remarks: "Реализация по умолчанию возвращает базовые сведения о членстве, зависит от конструкции. Если <xref:System.Reflection.MemberInfo>объект создан с сигнатурой, которая не предоставляет достаточно сведений, чтобы задать базовый член, этот метод возвращает `null`.</xref:System.Reflection.MemberInfo>       Если базовый член был задан во время конструирования, нет необходимости вызывать этот метод.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</xref:System.Xaml.XamlMember.UnderlyingMember%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember> Убедитесь, что для реализации <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, которые LookupUnderlyingMember, чтобы вернуть все они связаны между собой результаты.</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "Системе типов среды CLR <xref:System.Reflection.MemberInfo>объект, связанный с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> доступа, который связан с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Реализация по умолчанию интерпретирует <xref:System.Xaml.XamlMember.UnderlyingMember%2A>как <xref:System.Reflection.PropertyInfo>и возвращает значение <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(с параметром в `true`), это означает, что возвращаемый метод может быть закрытым.</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> Это может привести к `null` некоторые случаи, включая случаи, когда такой метод доступа отсутствует или член не является свойством.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>на связанные <xref:System.Xaml.Schema.XamlMemberInvoker>. Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember> </xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> Убедитесь, что для реализации <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, LookupUnderlyingSetter, и <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>, чтобы все они возвращают результаты коррелированный.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>Для связанного <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метод доступа; или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает реализации преобразователя значений, связанный с этим <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Реализация по умолчанию использует следующую логику и порядок обработки: - Если присвоение атрибутов существует на уровне элементов (<xref:System.Windows.Markup.ValueSerializerAttribute>), сведения об атрибутах используется для вызова <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>в контексте схемы XAML.</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -Если <xref:System.Xaml.XamlMember.Type%2A>является допустимым, возвращается преобразователь значений, связанный с типом.</xref:System.Xaml.XamlMember.Type%2A>      — Если предыдущие условия не применяются, `null` возвращается.       Этот метод вызывается, когда вызывающий объект получает значение из <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</xref:System.Xaml.XamlMember.ValueSerializer%2A> Переопределите этот метод, если вы хотите сообщить о результатах универсальный для всего <xref:System.Xaml.XamlMember>производного класса, или если специализированные метаданные, доступные для определение для каждого случая.</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; экземпляр <xref:System.Windows.Markup.ValueSerializer>ограничение, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> имя строку, которая объявляет это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Это значение всегда устанавливается во время построения. Конструкторы, которые реализуются <xref:System.Xaml.XamlMember>обычно выдал исключение если начальное имя не указано; таким образом, не ожидается, что это свойство, чтобы быть `null` или пустую строку, если вы используете реализации служб XAML .NET Framework по умолчанию.</xref:System.Xaml.XamlMember>       [Грамматика XamlName](~/add/includes/ajax-current-ext-md.md) и правила именования для членов и типов CLR не образуют точного пересечения. Это можно объявить имя члена, который является допустимым в среде CLR, но не является допустимым в области имен XAML. По возможности следует избегать такой ситуации."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> Имя строку, которая объявляет это <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Определяет, являются ли два заданных <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов имеют одинаковое значение."
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение <code> xamlMember1 </code> совпадает со значением параметра <code> xamlMember2 </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Определяет, являются ли два заданных <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> объектов имеют разные значения."
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение <code> xamlMember1 </code> отличается от значения <code> xamlMember2 </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Получает одно пространство имен XAML URI, определяющий основного пространства имен XAML для данного <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Свойство PreferredXamlNamespace содержит то же значение, что и вызов метода <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>и получения первой строки значений из этого списка.</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> Предпочтительный пространства имен XAML можно использовать при записи элемента обратно в текст или другие представления, которые сохраняют сведения о пространстве имен XAML."
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "Идентификатор для основного пространства имен XAML для данного <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>, как строка."
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> значение, указывающее, как визуальный конструктор должен обрабатывать члена."
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "Значение <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> перечисления. Значение по умолчанию — <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>."
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.XamlType&quot;> </xref> типа, где <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> может существовать."
  remarks: "Возвращаемое значение отличается для членов присоединяемого и неприсоединяемого. Для неприсоединяемого члены TargetType возвращает <xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> Для прикрепляемые члены <xref:System.Xaml.XamlMember.LookupTargetType%2A>возвращает результат, основанный на этой логики: - Если отражение не может разрешить резервирование (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), этот метод возвращает внутреннюю константу, представляющее тип универсального объекта.</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -Если предыдущее условие не применяется, <xref:System.Xaml.XamlMember.LookupTargetType%2A>называется.</xref:System.Xaml.XamlMember.LookupTargetType%2A> Реализация по умолчанию возвращает <xref:System.Xaml.XamlType>, основанный на изучение методы, которые реализуют `get` и `set` методы доступа.</xref:System.Xaml.XamlType> Класс может переопределить <xref:System.Xaml.XamlMember.LookupTargetType%2A>использовать другое поведение других метаданных, forms, может сообщить о целевых типов присоединяемых членов.</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "Тип где <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> может существовать. См. заметки."
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает строковое представление данного объекта <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  remarks: "Эта реализация возвращает <xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Строковое представление данного объекта <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>."
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает <xref href=&quot;System.Xaml.XamlType&quot;> </xref> типа, который используется элементом."
  remarks: "Вызов типа вызывает <xref:System.Xaml.XamlMember.LookupType%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupType%2A> Это происходит, когда логика начального внутреннего отражения уже не задано сведения.       В поведении по умолчанию (без <xref:System.Xaml.XamlMember.LookupType%2A>переопределения), возвращаемый <xref:System.Xaml.XamlType>может иметь разные значения концептуальной.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> Применяемое значение зависит от того это <xref:System.Xaml.XamlMember>представляет свойство, метод или событие, как показано в следующем списке: — для свойства, возвращаемый <xref:System.Xaml.XamlType>— тип, который задает свойство или возвращаемое свойство.</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -Для события, возвращенный <xref:System.Xaml.XamlType>Тип обработчика событий (делегат в реализации CLR).</xref:System.Xaml.XamlType>      -Для метода <xref:System.Xaml.XamlType>является тип возвращаемого значения этого метода, который может быть `null`.</xref:System.Xaml.XamlType>       В каждом случае контекст схемы XAML используется для определения типа XAML из резервного типа."
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref> Типа, который используется элементом. См. заметки."
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; объекта, который может использоваться для создания XAML-код объявлен объектов преобразования типа."
  remarks: "Вызов TypeConverter вызывает <xref:System.Xaml.XamlMember.LookupTypeConverter%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> Это происходит, когда логика начального внутреннего отражения уже не задано сведения.       Реализации, которые возвращают значение свойства от null для TypeConverter не обязательно являются рабочий <xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> Ниже приведен список возможных возвращаемых значений от null для TypeConverter и возможных значений:-возвращаемое значение сообщает преобразователь типов, который имеет атрибут членом или общем в конечный тип преобразователя. Такое поведение обычно какие большинство системами типов XAML и искать обработчики XAML для создания экземпляра преобразователя типов и вызов его методов.      -Возвращаемое значение сообщает преобразователь встроенных значений. Эти конвертеры существуют для определенных внутренних операций, выполняемых модулем записи XAML. В частности эти встроенные преобразователи значений преобразовать необработанные строковые значения атрибута в примитивы уровня языка XAML. Для реализации служб XAML .NET Framework эти встроенные преобразования типа часто пересылают в преобразователь типов, который определен в сборке System. Например, преобразование для <xref:System.Int32>значение встроен перенаправленных преобразования и таким образом, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>ссылки на значения <xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> </xref:System.Int32>      -Возвращаемое значение сообщает об особом случае неограниченной объектной модели; то есть <xref:System.Xaml.XamlMember>имеет <xref:System.Xaml.XamlMember.Type%2A>значение <xref:System.Object>.</xref:System.Object> </xref:System.Xaml.XamlMember.Type%2A> </xref:System.Xaml.XamlMember> В этом случае <xref:System.Xaml.Schema.XamlValueConverter%601>сообщает, что <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>— {`Object}`.</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> Тем не менее <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>— `null` , так как не фактический тип или экземпляр доступен для выполнения данного преобразования.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> Вместо этого поведение модели объекта не удается определить до времени выполнения, когда среда выполнения определенной технологии определяет обработку его графа объектов.       Если можно получить доступ к рабочей <xref:System.ComponentModel.TypeConverter>из <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, можно вызывать его методы преобразования.</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> Тем не менее многие методы преобразования зависит от контекста службы. Если у вас тот же контекст службы, доступные, ожидаемый преобразователем для стандартной роли записи объектов для графов объектов, методы преобразователя можно вызывать исключения."
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; значение, с <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> ограничение универсального. См. заметки."
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает системе типов среды CLR <xref:System.Reflection.MemberInfo>, доступное для элемента, который создается с помощью <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.MethodInfo>, или <xref:System.Reflection.EventInfo>.</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "Вызов UnderlyingMember вызывает <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "Система типов среды CLR <xref:System.Reflection.MemberInfo>сведения, как приведение из параметров начальной конструктора.</xref:System.Reflection.MemberInfo> Объект <xref href=&quot;System.Xaml.XamlMember&quot;> </xref> , создаваемое с &lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt; подпись возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "Возвращает &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; объект, который используется для сериализации значения объявлены объектов XAML."
  remarks: "Вызов ValueSerializer вызывает <xref:System.Xaml.XamlMember.LookupValueSerializer%2A>или конкретного переопределения этого метода.</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> Это происходит, когда логика начального внутреннего отражения уже не задано сведения.       Не все варианты, которые возвращают значение свойства от null для ValueSerializer обязательно являются рабочий <xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer> Можно найти в заметках <xref:System.Xaml.XamlMember.TypeConverter%2A>; те же рекомендации применяются для ValueSerializer.</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "Объект &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt; с <xref:System.Windows.Markup.ValueSerializer>ограничение универсального.</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
