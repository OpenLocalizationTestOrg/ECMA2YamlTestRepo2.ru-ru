### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ReliableSession
  id: ReliableSession
  children:
  - System.ServiceModel.ReliableSession.#ctor
  - System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  - System.ServiceModel.ReliableSession.InactivityTimeout
  - System.ServiceModel.ReliableSession.Ordered
  langs:
  - csharp
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
  type: Class
  summary: "Предоставляет удобный доступ к свойствам элемента привязки надежного сеанса, доступные при использовании одной из предоставляемых системой привязок."
  remarks: "Свойства, содержащиеся в классе ReliableSession, набор утверждений, содержащихся в <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, доступных из предопределенной привязки.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Это подмножество состоит из <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A>и <xref:System.ServiceModel.ReliableSession.Ordered%2A>Свойства.</xref:System.ServiceModel.ReliableSession.Ordered%2A> </xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> Класс ReliableSession ссылается на те же объекты, что <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, поэтому изменение значения одного изменяется значение другого класса.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement> Этот класс объединяет эти два свойства элемента привязки надежного сеанса для повышения возможности обнаружения."
  example:
  - "The following example shows how to create a new reliable session, and access and change the property values of that session. The ReliableSession class allows you to write:  \n  \n [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/t-system.servicemodel.re_0_1.cs)]\n [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/t-system.servicemodel.re_0_1.vb)]"
  syntax:
    content: public class ReliableSession
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> класса."
  syntax:
    content: public ReliableSession ();
    parameters: []
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> класса из элемента привязки надежного сеанса."
  remarks: ''
  example:
  - >-
    [!code-cs[UEReliableSession#1](~/add/codesnippet/csharp/80f1598c-ddfc-4656-a81f-_1.cs)]
     [!code-vb[UEReliableSession#1](~/add/codesnippet/visualbasic/80f1598c-ddfc-4656-a81f-_1.vb)]
  syntax:
    content: public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement reliableSessionBindingElement);
    parameters:
    - id: reliableSessionBindingElement
      type: System.ServiceModel.Channels.ReliableSessionBindingElement
      description: "<xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref> Значения свойств которого используются для инициализации надежного сеанса."
  overload: System.ServiceModel.ReliableSession.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reliableSessionBindingElement</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  id: InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает интервал времени, в течение которого служба остается неактивной, перед закрытием."
  remarks: "Свойство Возвращает или задает значение <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>Свойства.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A>       Под активностью канала определяется как получение сообщений приложения или инфраструктуры. Свойство времени ожидания простоя определяет максимальное количество времени для поддерживается неактивный сеанс. Если более передает InactivityTimeout указанного интервала времени неактивности, сеанс прерывается инфраструктурой и канал закрывается с ошибкой. Надежный сеанс ликвидируется в одностороннем порядке.       Если отправляющее приложение не имеет сообщений для отправки затем надежный сеанс обычно не завершилась ошибкой из-за бездействия; Вместо этого механизм поддержания активности поддерживает сеанс в активном бесконечно. Обратите внимание, что диспетчер может независимо прервать надежный сеанс, если сообщения приложения не отправляются и не получаются. Таким образом время ожидания бездействия обычно истекает, если условия сети таковы, что сообщения из каких-либо не были получены, или если происходит сбой на стороне отправителя.       Задание времени ожидания не позволяет серверу останавливая сеанс безопасности, если клиент не закрыл его. Если во время сеанса безопасности не получила сообщение интервал времени бездействия, он закрыт сервером. Это позволяет снизить потенциальной атаки отказа в обслуживании.       При использовании надежного сеанса, существует два разных таймера периода бездействия, значениям которых необходимо следовать для поддержки подключения. Если времени любого из таймеров периода бездействия соединение удаляется.      Первый таймер периода бездействия находится в надежном сеансе и называется InactivityTimeout. Этот таймер периода бездействия запускается, если нет сообщений, приложения или инфраструктуры не получено в течение периода ожидания. Сообщение инфраструктуры — сообщение, созданное для одного из протоколов в стеке каналов, например поддержки активности или подтверждения, а не содержит данные приложения.      Второй таймер периода бездействия находится в службе и использует <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>привязки.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> Этот таймер периода бездействия запускается, если ни одно сообщение приложения не получено в течение периода ожидания.       Поскольку подключение сбрасывается, когда либо включается таймеров, увеличение InactivityTimeout, если оно больше чем <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A>не делает ничего.</xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> Значение по умолчанию для обоих таймеров составляет 10 минут, поэтому всегда следует увеличивать значения обоих таймеров, чтобы провести различие при использовании надежного сеанса."
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_0_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_0_1.vb)]
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>, Задающий интервал времени, для которого служба остается неактивной, перед закрытием.</xref:System.TimeSpan> Значение по умолчанию — 10 минут."
  overload: System.ServiceModel.ReliableSession.InactivityTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Задано значение меньше или равно нулю."
  platform:
  - net462
- uid: System.ServiceModel.ReliableSession.Ordered
  id: Ordered
  parent: System.ServiceModel.ReliableSession
  langs:
  - csharp
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает значение, указывающее, должен ли при доставке сохраняться порядок отправки сообщений."
  remarks: "Свойство Возвращает или задает значение <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>Свойства.</xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A>"
  example:
  - >-
    [!code-cs[UEReliableSession#2](~/add/codesnippet/csharp/p-system.servicemodel.re_1_1.cs)]
     [!code-vb[UEReliableSession#2](~/add/codesnippet/visualbasic/p-system.servicemodel.re_1_1.vb)]
  syntax:
    content: public bool Ordered { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если сообщения должны доставляться в том порядке, в котором они отправляются; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.ReliableSession.Ordered*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.ReliableSession.#ctor
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession()
  nameWithType: ReliableSession.ReliableSession()
  fullName: System.ServiceModel.ReliableSession.ReliableSession()
- uid: System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession(ReliableSessionBindingElement)
  nameWithType: ReliableSession.ReliableSession(ReliableSessionBindingElement)
  fullName: System.ServiceModel.ReliableSession.ReliableSession(ReliableSessionBindingElement)
- uid: System.ServiceModel.Channels.ReliableSessionBindingElement
  parent: System.ServiceModel.Channels
  isExternal: false
  name: ReliableSessionBindingElement
  nameWithType: ReliableSessionBindingElement
  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement
- uid: System.ServiceModel.ReliableSession.InactivityTimeout
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
  fullName: System.ServiceModel.ReliableSession.InactivityTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceModel.ReliableSession.Ordered
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
  fullName: System.ServiceModel.ReliableSession.Ordered
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ReliableSession.#ctor*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession.ReliableSession
- uid: System.ServiceModel.ReliableSession.InactivityTimeout*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: InactivityTimeout
  nameWithType: ReliableSession.InactivityTimeout
- uid: System.ServiceModel.ReliableSession.Ordered*
  parent: System.ServiceModel.ReliableSession
  isExternal: false
  name: Ordered
  nameWithType: ReliableSession.Ordered
