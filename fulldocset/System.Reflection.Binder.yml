### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "Выбирает члена из списка кандидатов и выполняет преобразование типа из типа фактического аргумента в тип формального аргумента."
  remarks: "Реализации класса привязки, используемые методами <xref:System.Type.InvokeMember%2A?displayProperty=fullName>, которые выполняет выборку из набора возможных элементов для выполнения, на основе набора типов параметров и значений аргументов; <xref:System.Type.GetMethod%2A?displayProperty=fullName>, который выбирает метод на основе параметров типов; и т. д.</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       Реализация по умолчанию класса связыватель обеспечивается <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>свойство.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Reflection.Binder&quot;> </xref> класса."
  remarks: "Этот конструктор вызывается конструкторами производных классов для инициализации состояния данного типа."
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Выбор поля из данного набора полей, согласно указанным условиям."
  remarks: "Если `bindingAttr` не включает <xref:System.Reflection.BindingFlags?displayProperty=fullName>, реализация связыватель по умолчанию, предоставляемые <xref:System.Type.DefaultBinder%2A?displayProperty=fullName>просто возвращает первый элемент `match`.</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Выбор не выполняется.       Этот метод управляет привязки, предоставляемые <xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Побитовое сочетание <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> значения."
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "Набор полей, которые являются кандидатами для сопоставления. Например, если <xref href=&quot;System.Reflection.Binder&quot;> </xref> используется объект &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, этот параметр указывает, соответствует набор полей, которые отражения определил возможна, обычно из-за наличия правильным именем члена. Реализация по умолчанию, предоставляемые &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; изменяет порядок элементов этого массива."
    - id: value
      type: System.Object
      description: "Значение поля, используемый для нахождения соответствующего поля."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Экземпляр <xref:System.Globalization.CultureInfo>, используемый для управления приведением типов данных в реализациях связывателя, выполняющих приведение типов.</xref:System.Globalization.CultureInfo> Если `culture` является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>для текущего потока используется.</xref:System.Globalization.CultureInfo>       Примечание. Например, если в реализации связывателя допускается приведение строковых значений в числовые типы, этот параметр необходим для преобразования <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> , представляющий 1000, в <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> значение, поскольку при разных языках и региональных параметрах 1000 представляется по-разному. Связыватель по умолчанию не выполняет подобного преобразования строковых типов."
    return:
      type: System.Reflection.FieldInfo
      description: "Соответствующее поле."
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Для связывателя по умолчанию <code> bindingAttr </code> включает <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, и <code> match </code> содержит несколько полей, которые одинаково хорошо соответствуют <code> value </code>. Например <code> value </code> содержит `MyClass` объект, реализующий `IMyClass` интерфейс, и <code> match </code> содержит поле типа `MyClass` и поля типа `IMyClass`."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Для связывателя по умолчанию <code> bindingAttr </code> включает <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, и <code> match </code> не содержит полей, которые могут принимать <code> value </code>."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "Для связывателя по умолчанию <code> bindingAttr </code> включает <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>, и <code> match </code> является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустой массив.       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Выбирает метод, вызываемый из данного набора методов в зависимости от предоставленных аргументов."
  remarks: "Связыватель по умолчанию учитывает оба параметра, имеющие значения и `params` массивов (`ParamArray` массивов в Visual Basic). Таким образом, можно найти соответствие в случаях, где `args` и `match` не содержат одинаковое количество элементов.       Связыватель позволяет клиенту сопоставить массив аргументов обратно в исходном виде, если аргумент массива был изменен с помощью метода BindToMethod. Эту возможность преобразования можно используйте для возврата аргументов по ссылке, при наличии таких аргументов. При передаче аргументов по имени связыватель изменяет порядок массива аргументов. `state` Параметр сохраняет отслеживания о аргумент переупорядочение, благодаря чему средство привязки <xref:System.Reflection.Binder.ReorderArgumentArray%2A>метод порядок аргументов в исходном виде.</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       Метод метод BindToMethod используется <xref:System.Type.InvokeMember%2A?displayProperty=fullName>метод.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Побитовое сочетание <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> значения."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Набор методов, являющихся кандидатами для сопоставления. Например, если <xref href=&quot;System.Reflection.Binder&quot;> </xref> используется объект &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, этот параметр указывает, соответствует набор методов, которые отражения определил возможна, обычно из-за наличия правильным именем члена. Реализация по умолчанию, предоставляемые &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; изменяет порядок элементов этого массива."
    - id: args
      type: System.Object[]
      description: "Аргументы, передаваемые в. Связыватель может изменить порядок аргументов в этом массиве; Например, связыватель по умолчанию изменяет порядок аргументов, если `names` параметр используется для указания порядке, отличном от порядка по позиции. Если реализации связывателя выполняется приведение типов аргументов, типы и значения аргументов, можно изменить также."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Массив модификаторов параметров, позволяющий привязке работать с подписями параметров, в которых были изменены типы. Реализация связыватель по умолчанию этот параметр не используется."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Экземпляр <xref:System.Globalization.CultureInfo>, используемый для управления приведением типов данных в реализациях связывателя, выполняющих приведение типов.</xref:System.Globalization.CultureInfo> Если `culture` является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>для текущего потока используется.</xref:System.Globalization.CultureInfo>       Примечание. Например, если в реализации связывателя допускается приведение строковых значений в числовые типы, этот параметр необходим для преобразования <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> , представляющий 1000, в <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> значение, поскольку при разных языках и региональных параметрах 1000 представляется по-разному. Связыватель по умолчанию не выполняет подобного преобразования строковых типов."
    - id: names
      type: System.String[]
      description: "Имена параметров, если имена параметров должны учитываться при сопоставлении, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если рассматривать исключительно как позиционные аргументы. Например имена параметров необходимо использовать, если аргументы не передаются в порядковой позиции."
    - id: state
      type: System.Object
      description: "После возврата из этого метода `state` содержит предоставленный связывателем объект, который отслеживает изменение порядка аргументов. Связыватель создает этот объект и является единственным объектом-получателем данного объекта. Если `state` не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> при <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref> возвращает, необходимо передать `state` для <xref:System.Reflection.Binder.ReorderArgumentArray*>метод, если вы хотите восстановить `args` исходного заказа, например, чтобы вы могли получать значения <xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;> </xref> параметров (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref> в Visual Basic).</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "Соответствующий метод."
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Для связывателя по умолчанию <code> match </code> содержит несколько методов, которые одинаково хорошо соответствуют <code> args </code>. Например <code> args </code> содержит `MyClass` объект, реализующий `IMyClass` интерфейс, и <code> match </code> содержит метод, который принимает `MyClass` и метод, который принимает `IMyClass`."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Для связывателя по умолчанию <code> match </code> не содержит методов, которые могут принимать аргументы, переданные в <code> args </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Для связывателя по умолчанию <code> match </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустой массив."
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Изменяет тип данного <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> для данного <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
  remarks: "Отражение моделирует правила доступности для системы общих типов. Например если вызывающий объект находится в той же сборке, вызывающий объект не нужны специальные разрешения для внутренних членов. В противном случае вызывающий объект должен <xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> Это при поиске членов, которые защищены, закрытого и т. д.       Представляет общий принцип, `ChangeType` должен выполнять только расширяющее преобразование, которое никогда не потерять данные. Примером расширяющего преобразования является преобразование значение, которое является 32-разрядное целое число со знаком в значение, которое является 64-разрядное целое число со знаком. Этим оно отличается от сужающего преобразования, может произойти потеря данных. Примером сужающего преобразования является преобразование 64-разрядное целое число со знаком в 32-разрядное целое число со знаком.       В следующей таблице перечислены преобразования, выполняемые по умолчанию `ChangeType`.      | Тип источника | Целевой тип |   |-----------------|-----------------|   | Любой тип | Базовый тип. |   | Любой тип | Он реализует интерфейс. |   | Char | UInt16, UInt32, Int32, UInt64, Int64, Single, Double |   | Байт | Char, UInt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double |   | SByte | Int16, Int32, Int64, Single, Double |   | UInt16 | UInt32, Int32, UInt64, Int64, Single, Double |   | Int16 | Int32, Int64, Single, Double |   | UInt32 | UInt64, Int64, Single, Double |   | Int32 | Int64, один дважды |   | UInt64 | Единый, двойные |   | Int64 | Единый, двойные |   | Один | Двойные |   | Не ссылка | По ссылке. |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "Объект для изменения в новый <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>."
    - id: type
      type: System.Type
      description: "Новый <xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> , `value` станет."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Экземпляр <xref:System.Globalization.CultureInfo>, используемый для управления приведением типов данных.</xref:System.Globalization.CultureInfo> Если `culture` является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>для текущего потока используется.</xref:System.Globalization.CultureInfo>       Примечание. Например, этот параметр необходим для преобразования <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> , представляющий 1000, в <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> значение, поскольку при разных языках и региональных параметрах 1000 представляется по-разному."
    return:
      type: System.Object
      description: "Объект, содержащий заданное значение в качестве нового типа."
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "При возвращении с <xref:System.Reflection.Binder.BindToMethod*>, восстанавливает <code> args </code> аргумента в том случае, если он поступает от <xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>.</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "Среда вызывает этот метод, если `state` не `null` после возвращения из `BindToMethod`."
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "Фактические аргументы, передаваемые в. Можно изменить типы и значения аргументов."
    - id: state
      type: System.Object
      description: "Предоставленный связывателем объект, который отслеживает изменение порядка аргументов."
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Выбирает метод из данного набора методов в зависимости от типа аргумента."
  remarks: "Этот метод должен возвращать `null` Если метод не соответствует критерию. Этот метод управляет выбором, предоставляемые `GetConstructor` и `GetMethod` методы `Type`."
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Побитовое сочетание <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> значения."
    - id: match
      type: System.Reflection.MethodBase[]
      description: "Набор методов, являющихся кандидатами для сопоставления. Например, если <xref href=&quot;System.Reflection.Binder&quot;> </xref> используется объект &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, этот параметр указывает, соответствует набор методов, которые отражения определил возможна, обычно из-за наличия правильным именем члена. Реализация по умолчанию, предоставляемые &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; изменяет порядок элементов этого массива."
    - id: types
      type: System.Type[]
      description: "Типы параметров, используемый для нахождения соответствующего метода."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Массив модификаторов параметров, позволяющий привязке работать с подписями параметров, в которых были изменены типы."
    return:
      type: System.Reflection.MethodBase
      description: "Соответствующий метод, если найден; в противном случае <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Для связывателя по умолчанию <code> match </code> содержит несколько методов, которые хорошо совпадений для типов параметров, описываемых <code> types </code>. Например, массив в <code> types </code> содержит <xref:System.Type>для объекта `MyClass` и массива в <code> match </code> содержит метод, который принимает базовый класс `MyClass` и метод, который принимает интерфейс, `MyClass` реализует.</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Для связывателя по умолчанию <code> match </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустой массив.       - или - элемент <code> types </code> является производным от <xref:System.Type>, но не относится к типу <xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>.</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Выбирает свойство из заданного набора свойств в зависимости от заданных критериев."
  remarks: "Этот метод управляет выбором, предоставляемые `GetProperty` метод `Type`."
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Побитовое сочетание <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> значения."
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "Набор свойств, которые являются кандидатами для сопоставления. Например, если <xref href=&quot;System.Reflection.Binder&quot;> </xref> используется объект &lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;, этот параметр указывает, соответствует набор свойств, которые отражения определил возможна, обычно из-за наличия правильным именем члена. Реализация по умолчанию, предоставляемые &lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt; изменяет порядок элементов этого массива."
    - id: returnType
      type: System.Type
      description: "Должен иметь возвращаемое значение, соответствующее свойство."
    - id: indexes
      type: System.Type[]
      description: "Типы индексов свойства, поиск которого выполняется. Используется для свойств индекса, например указателя для класса."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Массив модификаторов параметров, позволяющий привязке работать с подписями параметров, в которых были изменены типы."
    return:
      type: System.Reflection.PropertyInfo
      description: "Соответствующее свойство."
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Для связывателя по умолчанию <code> match </code> содержит несколько свойств, которые одинаково хорошо соответствуют <code> returnType </code> и <code> indexes </code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Для связывателя по умолчанию <code> match </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустой массив."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
