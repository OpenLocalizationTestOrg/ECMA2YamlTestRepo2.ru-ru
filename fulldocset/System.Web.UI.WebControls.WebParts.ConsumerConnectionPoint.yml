### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Определяет объект точки подключения, который позволяет серверного элемента управления, выступающего в качестве получателя для соединения с поставщиком."
  remarks: "В каждой связи веб-частей между двумя серверными элементами управления каждый элемент управления (помимо прочих требований) должен иметь связанный объект точки подключения, позволяющий его для подключения к другому элементу управления, а также для предоставления или использования данных, в зависимости от того, является ли элемент управления используется в качестве поставщик или потребитель соединения. Объект <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>объект содержит сведения о том, как элемент управления может подключаться к другой элемент управления и типа данных, можно использовать совместно.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Для элемента управления, выступающего в качестве получателя в подключении своей точки подключения должен быть объектом ConsumerConnectionPoint. Сведения о подключениях веб-частей и точках подключения см. в статье в разделах, перечисленных в подразделе ниже.       Чтобы создать объект ConsumerConnectionPoint, требуются несколько шагов: 1.  Включение управления получателя для ссылки на экземпляр интерфейса. Объект <xref:System.Web.UI.WebControls.WebParts.WebPart>или другого серверного элемента управления (любого типа серверного элемента управления, который будет добавлен в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>можно использовать зоны) должен иметь возможность получать данные из экземпляра определенный интерфейс.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Элемент управления не должны реализовывать интерфейс; только поставщик должен реализовывать его. Потребитель может либо работать с типом интерфейса, предоставляемым поставщиком или, если оно отсутствует, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект может использоваться для преобразования данных из поставщика типа интерфейса в тип, принимаемый получателем.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Типичный способ разрешения получателю — объявить закрытое поле для содержат ссылку на тип нужного интерфейса.      2.  Определите метод обратного вызова. Метод в объекте-получателе должны быть определены как метод обратного вызова для установления соединения с поставщиком. Этот метод получает экземпляр интерфейса, который реализует поставщик и назначает его (например) закрытое поле создания на первом шаге. Способов веб-частей для определения метода обратного вызова в объекте-получателе — добавить `ConnectionConsumer` атрибута метаданных (определяется <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>класса) для метода, который получает экземпляр интерфейса.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> При добавлении атрибута Единственным обязательным параметром является отображаемое имя для точки подключения потребителя. Необязательные параметры можно также добавить, например идентификатор.      3.  Процесс и вывода данных из экземпляра интерфейса. Выполнить внутреннюю обработку при необходимости на основе данных, а затем обычно управления получателя отобразит данные на страницу. Стандартным способом является переопределение элемента управления <xref:System.Web.UI.Control.OnPreRender%2A>метод.</xref:System.Web.UI.Control.OnPreRender%2A>          Настроек [!NOTE] настроек во время синхронного запроса получатель должен требовать данные напрямую от поставщика во время или сразу после <xref:System.Web.UI.Control.PreRender>событий.</xref:System.Web.UI.Control.PreRender> При выполнении асинхронного запроса Если поставщик метод обратного вызова не вызывается в любой момент во время отрисовки, разработчик может предположить, что данные не были отправлены получателю.       После элемента управления начнет действовать в качестве получателя, элемент управления может участвовать в соединениях, (при условии, что элемент управления поставщика также оборудован). Чтобы создать статическое, объявленное подключение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если `ConnectionConsumer` в исходном коде потребителя, который идентифицирует метод обратного вызова указывает идентификатор для точки подключения, то это значение должны быть назначены `ConsumerConnectionPointID` атрибут `<asp:webpartconnection>` элемента на странице. Причины, что разработчик может указать идентификатор для точки подключения потребителя является, если имеется несколько точек подключения, определенные в элементе управления получателя. Если для точки подключения потребителя в элементе управления получателя не указан идентификатор, значение не должна назначаться `ConsumerConnectionPointID` атрибут на странице, так как соединение будет создаваться с помощью по умолчанию значение, полученное от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>поля.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Для создания подключения в коде, разработчики должны создать объект ConsumerConnectionPoint путем вызова <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>метода и передачи в идентификатор элемента управления потребителя, а также идентификатор или индекс объекта ConsumerConnectionPoint определенных в элементе управления получателя.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Возвращаемый объект ConsumerConnectionPoint, а также ссылку на элемент управления потребителя, ссылку на элемент управления поставщика и соответствующим <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>, являются все передаваемые <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Несмотря на то, что разработчики могут использовать точки подключения потребителя в рамках установление подключения декларативно или программно, пользователи также могут взаимодействовать с точками подключения потребителя для установления подключений через пользовательский интерфейс (UI). Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>элемента управления веб-страницы, он предоставляет пользовательский Интерфейс во время выполнения для создания подключений.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Если пользователь выбрал управления поставщика в качестве отправной точки для установления соединения, щелкнув его команду подключения (они могут выбрать получателя, нет никаких различий результирующего подключения), в пользовательском Интерфейсе пользователь увидит элемент управления раскрывающегося списка отображаемых имен доступных потребитель соединения точка (или точек, если их несколько), поставщик может отправлять данные. Пользователи должны выбрать точки подключения для подключения.       Объект ConsumerConnectionPoint связывает непосредственно с элементом управления определенного получателя и хранит сведения о соединении в свойствах, которые он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Например, в наследуемого <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>свойство, клиентская точка подключения поддерживает тип интерфейса, он использует.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Если поставщика и потребителя в соединении и понять, тип интерфейса, элементы управления являются совместимыми и могут создавать прямое подключение. Если поставщик и получатель не может работать с тем же типом интерфейса, не являются совместимыми и необходимо использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта для преобразования точка подключения поставщика <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>свойство в тип, который потребитель может работать с.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Другим важным наследуемым свойством является <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>при создании подключения, выберите пункт Свойства, которое предоставляет понятное имя для отображения в пользовательском Интерфейсе для выбора соединения с потребителем.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Отображаемое имя является обязательным при добавлении разработчиками `ConnectionConsumer` атрибут в метод обратного вызова в элементе управления получателя. Наследуемый <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Свойства также является полезным, как указано выше, поскольку она предоставляет уникальный идентификатор для точки подключения потребителя в случае, если получатель имеет несколько точек подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Каждый получатель может иметь несколько объектов ConsumerConnectionPoint, определенные в нем и в этом случае при добавлении разработчиками `ConnectionConsumer` атрибут к методу, следует указать значение идентификатора для различения каждой точки подключения. Один других важных является свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>свойство, которое указывает ли клиентская точка подключения можно одновременно подключиться к нескольким поставщикам.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Это свойство имеет значение `false` по умолчанию для точки подключения потребителя (в то время как значение по умолчанию `true` для точки подключения поставщика).       Класс ConsumerConnectionPoint добавляет несколько уникальных методов членам он наследуется от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>Метод вызывает метод обратного вызова потребителя собственного определенные извлечь экземпляр интерфейса от поставщика.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>Метод возвращает логическое значение, указывающее, способен ли точка подключения для установки соединения, исходя из текущего состояния элемента управления связанного получателя.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> класса."
  remarks: "Конструктор ConsumerConnectionPoint для <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>класса просто вызывает базовый конструктор, передавая ей различных параметров и инициализации базового класса.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Конструктор базового класса, проверяет число параметров для точки подключения и может создать несколько исключений. Список возможных исключений см. раздел &quot;исключения&quot;.       Можно вызвать конструктор ConsumerConnectionPoint для создания экземпляра <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Однако в случаях, когда вы просто установления соединения и не расширения класса, должен вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>метод для возврата объекта точки подключения поставщика.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Метод в элементе управления получателя, который возвращает экземпляр интерфейса потребителям для установления соединения."
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>Интерфейса, который потребитель получает от поставщика.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>Элемента управления получателя, с которым связан точки подключения потребителя.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Понятное отображаемое имя для точки подключения потребителя, которая отображается для пользователей в пользовательском интерфейсе (UI) подключения."
    - id: id
      type: System.String
      description: "Уникальный идентификатор для точки подключения потребителя."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Логическое значение, указывающее, является ли клиентская точка подключения может иметь несколько одновременных подключений с поставщиками."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>не совпадает с типом управления получателя (или допустимый класс, производный от него)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Вызывает метод обратного вызова в элементе управления получателя и получает экземпляр интерфейса из элемента управления поставщика."
  remarks: "Этот метод получает экземпляр интерфейса от поставщика, который содержит данные для элемента управления поставщика.       Метод SetObject вызывается <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объектов, когда соединение активируется.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Это критически важный этап является частью инициализации подключения и включение двух элементов управления общий доступ к данным.       Элемент управления потребителя в подключении должен быть возможность работать с тем же типом интерфейса, как поставщик. Если этого не произошло, элементы управления несовместимы и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект должен использоваться для установления соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Элемент управления потребителя, связанную с точкой подключения потребителя."
    - id: data
      type: System.Object
      description: "Экземпляр интерфейса, возвращенного из элемента управления поставщика."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Определяет, является ли клиентская точка подключения в настоящее время поддерживает подключения."
  remarks: "Метод SupportsConnection реализация всегда возвращает `true` во всех случаях для <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Для этого метода предполагается его проверить состояние `control` и `secondaryInterfaces` в критических точках, определенных для определения ли <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекта в настоящее время возможность создать подключение.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Могут существовать сценарии, где `control` находится в состоянии, которое делает невозможным создание подключения или где `secondaryInterfaces` должны существовать до подключения. В таких случаях разработчики могут наследовать от <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>класса и переопределить метод SupportsConnection, предоставляя пользовательскую реализацию, чтобы определить, когда точка подключения будет готов для поддержки соединений.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Элемент управления потребителя, связанном с <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> из любых вторичных интерфейсов, участвующих в соединении."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если точка подключения в настоящее время можно установить соединение; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
