### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "Описывает фиксируемую транзакцию."
  remarks: "Класс CommittableTransaction позволяет явным образом приложениям использовать транзакцию, а не с помощью <xref:System.Transactions.TransactionScope>класса неявно.</xref:System.Transactions.TransactionScope> В отличие от <xref:System.Transactions.TransactionScope>класса, разработчик приложения должен специально вызывать <xref:System.Transactions.CommittableTransaction.Commit%2A>и <xref:System.Transactions.Transaction.Rollback%2A>методы для фиксации или прерывания транзакции.</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> Однако только создатель транзакции можно зафиксировать транзакцию. Таким образом, копии фиксируемую транзакцию, полученные с помощью <xref:System.Transactions.Transaction.Clone%2A>метод не может быть зафиксирована.</xref:System.Transactions.Transaction.Clone%2A>      Настроек [!NOTE] настроек рекомендуется создавать неявные транзакции с помощью <xref:System.Transactions.TransactionScope>класса, чтобы контекст внешней транзакции автоматически осуществляется.</xref:System.Transactions.TransactionScope> Также следует использовать <xref:System.Transactions.TransactionScope>и <xref:System.Transactions.DependentTransaction>для приложений, которые требуют использования одной транзакции между несколькими вызовами функции или вызовов нескольких потоков.</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> Дополнительные сведения об этой модели см. в разделе [реализации неявные транзакции с помощью области транзакции](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) раздела.       Создание CommittableTransaction не задает автоматически внешнюю транзакцию, код выполняется в транзакции. Можно получить или установить внешнюю транзакцию путем вызова статического <xref:System.Transactions.Transaction.Current%2A>Глобальное свойство <xref:System.Transactions.Transaction>объекта.</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> Дополнительные сведения о внешних транзакциях см. раздел «Потока транзакций управление с помощью TransactionScopeOption» [реализации неявные транзакции с помощью области транзакции](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199) раздела. Если внешняя транзакция не указано, какой-либо операции диспетчера ресурсов не является частью этой транзакции. Необходимо явно установить или переустановить внешнюю транзакцию, чтобы убедиться, что диспетчеры ресурсов работали в правильном контексте транзакции.       Пока не зафиксирована CommittableTransaction, по-прежнему блокируются все ресурсы, связанные с транзакцией.       Объект CommittableTransaction нельзя использовать повторно. После ее фиксации или отката, его нельзя использовать повторно в транзакции или задать в качестве текущего контекста внешней транзакции."
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Initializes a new instance of the <xref href=&quot;System.Transactions.CommittableTransaction&quot;></xref> class."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Сбой при создании транзакции в Windows 98, Windows 98 Second Edition или Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> класса с заданным <code> timeout </code> значение."
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Максимальное количество времени, транзакции могут существовать, прежде чем он будет прерван."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Сбой при создании транзакции в Windows 98, Windows 98 Second Edition или Windows Millennium Edition."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> класса с указанными параметрами транзакции."
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "Объект <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref> структура, описывающая параметры транзакций для новой транзакции."
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Сбой при создании транзакции в Windows 98, Windows 98 Second Edition или Windows Millennium Edition."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>является недопустимым."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Начинает попытку зафиксировать транзакцию асинхронно."
  remarks: "Этот метод возвращает немедленно, до завершения транзакции. Транзакции, а затем фиксирует в другом потоке и `asyncCallback` делегат вызывается после ее завершения. После вызова этого метода, вы не получите результат транзакции до вызова <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A>      Настроек [!NOTE] настроек процесса фиксации может выполняться синхронно при вызове этого метода."
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, вызываемый после завершения транзакции.</xref:System.AsyncCallback> Этот параметр может иметь <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, в этом случае приложение не уведомляется о завершении транзакции. Вместо этого приложение должно использовать <xref:System.IAsyncResult>интерфейса для проверки выполнения и ожидания соответствующим образом или вызвать <xref:System.Transactions.CommittableTransaction.EndCommit*>для ожидания завершения.</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "Объект, который может содержать произвольную информацию о состоянии, связанные с асинхронной фиксацией. Этот объект передается функции обратного вызова, а не интерпретируется <xref href=&quot;System.Transactions&quot;> </xref>. Допускается пустая ссылка."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Интерфейс, который может использоваться вызывающей стороной для проверки состояния асинхронной операции или дождитесь завершения операции.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Пытается зафиксировать транзакцию."
  remarks: "При вызове этого метода все объекты, которые зарегистрированы для участия в транзакции, опрашиваются и могут независимо проголосовать за фиксацию или откат транзакции. Если любой из участников голосует выполнить откат транзакции, она откатывается, и этот метод создает исключение <xref:System.Transactions.TransactionException>исключение.</xref:System.Transactions.TransactionException> Это нормальное событие для транзакции, и код должен перехватывать и обрабатывать такие исключения.       Фиксация и <xref:System.Transactions.CommittableTransaction.EndCommit%2A>блокирования до завершения первой фазы обработки транзакций.</xref:System.Transactions.CommittableTransaction.EndCommit%2A> Первый этап завершается после все диспетчеры ресурсов и зачисления в транзакции проголосовали по результату транзакции и <xref:System.Transactions.TransactionManager>принял решение зафиксировать или прервать транзакцию.</xref:System.Transactions.TransactionManager> Второй этап обработки всегда является асинхронным. Таким образом нет никакой гарантии, что данные только что зафиксированные в рамках данной транзакции будут немедленно становится доступной после без использования для просмотра этих данных другой транзакцией.       Поскольку этот метод блокируется до на первом этапе обработки транзакций завершен, следует очень осторожно при использовании этого метода в приложении Windows Form (WinForm) или взаимоблокировка может произойти. Если вызвать этот метод в одно событие управления WinForm (например, нажатие кнопки) и использовать синхронные <xref:System.Windows.Forms.Control.Invoke%2A>метод для прямого управления для выполнения некоторых задач пользовательского интерфейса (например, изменения цветов) в ходе обработки транзакций, произойдет взаимоблокировка.</xref:System.Windows.Forms.Control.Invoke%2A> Это вызвано <xref:System.Windows.Forms.Control.Invoke%2A>метод является синхронным и блокирует рабочий поток, пока поток пользовательского интерфейса не завершит свою работу.</xref:System.Windows.Forms.Control.Invoke%2A> Однако в нашем сценарии поток пользовательского интерфейса также ждет, пока рабочий поток зафиксировать транзакцию. Результат — что не сможет продолжить работу, и область бесконечно ожидает завершения фиксирования. Следует использовать <xref:System.Windows.Forms.Control.BeginInvoke%2A>вместо <xref:System.Windows.Forms.Control.Invoke%2A>везде, где это возможно, поскольку он является асинхронным и, таким образом менее подвержены возникновению взаимоблокировки.</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "Фиксация вызывается в транзакцию, и транзакция становится <xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>."
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "Вызывается фиксации и отката транзакции в первый раз."
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Завершает попытку зафиксировать транзакцию асинхронно."
  remarks: "Этот метод следует вызывать в делегат обратного вызова, который указан в качестве параметра для <xref:System.Transactions.CommittableTransaction.BeginCommit%2A>метод после завершения какой-либо работы очистки, связанные с асинхронной фиксацией.</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> Можно также вызвать этот метод раньше не ожидая делегата. Если в момент вызова этого метода, транзакция не завершена, этот метод ожидает ее завершения.      Настроек [!CAUTION] настроек <xref:System.IAsyncResult.CompletedSynchronously%2A>свойство, возвращенное `asyncResult` всегда `false`, даже если операция выполнена синхронно.</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>и EndCommit блок до завершения первой фазы обработки транзакций.</xref:System.Transactions.CommittableTransaction.Commit%2A> Первый этап завершается после все диспетчеры ресурсов и зачисления в транзакции проголосовали по результату транзакции и <xref:System.Transactions.TransactionManager>принял решение зафиксировать или прервать транзакцию.</xref:System.Transactions.TransactionManager> Второй этап обработки всегда является асинхронным. Таким образом нет никакой гарантии, что данные только что зафиксированные в рамках данной транзакции будут немедленно становится доступной после без использования для просмотра этих данных другой транзакцией."
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, связанный с асинхронной фиксацией.</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>вызывается и откат транзакции в первый раз.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает объект, предоставленный как последний параметр <xref:System.Transactions.CommittableTransaction.BeginCommit*>вызова метода.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "Объект, предоставленный как последний параметр <xref:System.Transactions.CommittableTransaction.BeginCommit*>вызова метода.</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает <xref:System.Threading.WaitHandle>, используемый для ожидания завершения асинхронной операции.</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "Объект <xref:System.Threading.WaitHandle>, используемый для ожидания завершения асинхронной операции.</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает значение, указывающее, следует ли асинхронная операция фиксации завершена синхронно."
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если асинхронная операция фиксации завершена синхронно. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Это свойство всегда возвращает <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> даже, если операция выполнена синхронно."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает значение, указывающее, является ли асинхронная операция фиксации завершена."
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если операция завершена; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
