### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Collection
  id: Collection
  children:
  - Microsoft.VisualBasic.Collection.#ctor
  - Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  - Microsoft.VisualBasic.Collection.Clear
  - Microsoft.VisualBasic.Collection.Contains(System.String)
  - Microsoft.VisualBasic.Collection.Count
  - Microsoft.VisualBasic.Collection.GetEnumerator
  - Microsoft.VisualBasic.Collection.Item(System.Int32)
  - Microsoft.VisualBasic.Collection.Item(System.Object)
  - Microsoft.VisualBasic.Collection.Item(System.String)
  - Microsoft.VisualBasic.Collection.Remove(System.Int32)
  - Microsoft.VisualBasic.Collection.Remove(System.String)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  - Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: Collection
  nameWithType: Collection
  fullName: Microsoft.VisualBasic.Collection
  type: Class
  summary: "Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> — это упорядоченный набор элементов, которые могут ссылаться как единое целое."
  remarks: "> [!NOTE]Настроек по возможности следует использовать универсальные коллекции в <xref:System.Collections.Generic?displayProperty=fullName>пространства имен или <xref:System.Collections.Concurrent>пространства имен, а не Visual Basic `Collection`.</xref:System.Collections.Concurrent> </xref:System.Collections.Generic?displayProperty=fullName> Дополнительные сведения см. в разделе [коллекции](~/add/includes/ajax-current-ext-md.md).       В Visual Basic `Collection` объект предоставляет удобный способ для ссылки на группу связанных элементов как один объект. Элементы, или *элементы*в коллекции должны быть связаны только из-за того, что они существуют в коллекции. Элементы коллекции не нужно совместно использовать тот же тип данных.       Можно создать коллекцию так же, как и другие объекты, как показано в следующем примере.      ```   Dim coll As New Microsoft.VisualBasic.Collection()   ```После создания коллекции, можно выполнить одно из следующих:-добавить элемент с <xref:Microsoft.VisualBasic.Collection.Add%2A>метод.</xref:Microsoft.VisualBasic.Collection.Add%2A>      -Удалить элемент с <xref:Microsoft.VisualBasic.Collection.Remove%2A>метод.</xref:Microsoft.VisualBasic.Collection.Remove%2A>      -Удалите все элементы с <xref:Microsoft.VisualBasic.Collection.Clear%2A>метод.</xref:Microsoft.VisualBasic.Collection.Clear%2A>      -Узнайте, сколько элементов содержится в коллекции с <xref:Microsoft.VisualBasic.Collection.Count%2A>свойство.</xref:Microsoft.VisualBasic.Collection.Count%2A>      — Проверить, присутствует ли определенный элемент с <xref:Microsoft.VisualBasic.Collection.Contains%2A>метод.</xref:Microsoft.VisualBasic.Collection.Contains%2A>      -Получить определенный элемент из коллекции с <xref:Microsoft.VisualBasic.Collection.Item%2A>свойство.</xref:Microsoft.VisualBasic.Collection.Item%2A>      -Итерации по всей коллекции с [For Each... Следующий оператор](~/add/includes/ajax-current-ext-md.md).          Настроек [!NOTE] настроек хотя Visual Basic `Collection` объект имеет функциональность идентична `Collection` объекта в Visual Basic 6.0, их не смогут взаимодействовать в среде COM.          Настроек [!CAUTION] настроек прохода Visual Basic `Collection` не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить коллекцию, что приведет к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении, либо заблокировать коллекцию, либо перехватывать исключения, возникающие в результате изменений, внесенных другими потоками. Дополнительные сведения о блокировке элемента программирования см. в разделе [оператор SyncLock](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection. It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.  \n  \n To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance. Leave the default name as `nameClass`. Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure. (This example works only with host applications that support classes.)  \n  \n [!code-vb[VbVbalrCollectionObject#1](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]

      public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Создает и возвращает новый [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  remarks: "[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] Коллекция, возвращаемая этим конструктором является пустым и не поддерживает любой начальной емкостью выделенный.       [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]коллекции не совместимы с [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] коллекции, доступные в <xref:System.Collections?displayProperty=fullName>, <xref:System.Collections.Generic?displayProperty=fullName>, и <xref:System.Collections.Specialized?displayProperty=fullName>пространства имен.</xref:System.Collections.Specialized?displayProperty=fullName> </xref:System.Collections.Generic?displayProperty=fullName> </xref:System.Collections?displayProperty=fullName>"
  example:
  - "The following example creates a new [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:  \n  \n```  \nDim coll As New Microsoft.VisualBasic.Collection()  \n```  \n  \n This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property. [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collections hold elements of type <xref:System.Object>."
  syntax:
    content: public Collection ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  id: Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Добавляет элемент в <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "`Before` Или `After` аргумент должен ссылаться на существующий элемент коллекции; в противном случае возникает ошибка.       Если оба `Before` и `After` аргументов опущены, новый объект добавляется в конец коллекции.       Ошибка также возникает, если указанный `Key` значение соответствует ключу существующего элемента коллекции."
  example:
  - "The following example uses the `Add` method to add `child` objects — instances of a class called `child` containing a `Public` property `name` — to a collection called `family`. To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`. Add the `child` class definition and the `family` declaration to the form code. Modify the `_Click` event handlers for the **Add** and **List** buttons as shown. The **Add** button allows you to add children. The **List** button displays the names of all the children.  \n  \n [!code-vb[VbVbalrCollectionObject#2](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Form1.vb#2)]"
  syntax:
    content: public void Add (object Item, string Key = null, object Before = null, object After = null);
    parameters:
    - id: Item
      type: System.Object
      description: "Обязательный параметр. Объект любого типа, которое указывает элемент для добавления в коллекцию."
    - id: Key
      type: System.String
      description: "Необязательный параметр. Уникальный <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, задающее ключевую строку, которая может использоваться для доступа к этому элементу коллекции вместо индекса."
    - id: Before
      type: System.Object
      description: "Необязательный параметр. Выражение, указывающее относительное положение в коллекции. Добавляемый элемент помещается в коллекцию перед элемент, идентифицируемый `Before` аргумент. Если `Before` является числовым выражением, оно должно быть числом от 1 до значения коллекции <xref:Microsoft.VisualBasic.Collection.Count*>свойство.</xref:Microsoft.VisualBasic.Collection.Count*> Если `Before` — <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражения, оно должно соответствовать ключевой строке, заданной при добавлении элемента в коллекции. Нельзя указывать оба `Before` и `After`."
    - id: After
      type: System.Object
      description: "Необязательный параметр. Выражение, указывающее относительное положение в коллекции. Добавляемый элемент помещается в коллекцию после элемента, указанного `After` аргумент. Если `After` является числовым выражением, оно должно быть числом от 1 до значения коллекции <xref uid=&quot;langword_csharp_Count&quot; name=&quot;Count&quot; href=&quot;&quot;> </xref> свойство. Если `After` — <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражения, оно должно соответствовать ключевой строки, заданной при добавлении элемента в коллекцию. Нельзя указывать оба `Before` и `After`."
  overload: Microsoft.VisualBasic.Collection.Add*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Clear
  id: Clear
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет все элементы Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "`Clear` Метод очищает коллекцию и присваивает его <xref:Microsoft.VisualBasic.Collection.Count%2A>установить равным 0.</xref:Microsoft.VisualBasic.Collection.Count%2A>"
  example:
  - '[!code-vb[VbVbalrCollectionObject#3](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#3)]'
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  id: Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> значение, указывающее, будет ли Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объект содержит элемент с указанным ключом."
  remarks: "`Contains`Возвращает `True` , если коллекция содержит элемент с ключом, точно соответствующим `Key`. В противном случае `Contains` возвращает `False`. Регистр учитывается при сравнении значений ключей.       Visual Basic `Collection` может включать некоторые элементы, которые имеют ключей и другие элементы без ключей. Это зависит от того вызов <xref:Microsoft.VisualBasic.Collection.Add%2A>метод предоставляет необязательный аргумент `Key` параметр.</xref:Microsoft.VisualBasic.Collection.Add%2A>"
  example:
  - "[!code-vb[VbVbalrCollectionObject#4](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#4)]  \n  \n If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method."
  syntax:
    content: public bool Contains (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Обязательный параметр. Объект <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, которое задает ключ для поиска элемента в коллекции."
    return:
      type: System.Boolean
      description: "Возвращает <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> значение, указывающее, будет ли Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объект содержит элемент с указанным ключом."
  overload: Microsoft.VisualBasic.Collection.Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Count
  id: Count
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> содержит число элементов в коллекции. Только для чтения."
  remarks: "Используйте `Count` свойства, чтобы определить количество элементов в `Collection` объекта."
  example:
  - "This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#6](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#6)]  \n  \n The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Возвращает <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> содержит число элементов в коллекции. Только для чтения."
  overload: Microsoft.VisualBasic.Collection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает ссылку на объект перечислителя, который используется для прохода по <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  remarks: "[For Each... Следующий оператор](~/add/includes/ajax-current-ext-md.md) вызовы `GetEnumerator` для получения объекта перечислителя поддержка итерации по элементам коллекции. Как правило, используется `For Each`... `Next` цикл для прохождения коллекции или массива, и необходимо вызвать `GetEnumerator` явным образом.       Если требуется более тщательно контролировать итерацию, чем `For Each`... `Next` предоставляют инструкции, можно использовать `GetEnumerator` метод для выполнения пользовательского обхода. Ниже приведены некоторые случаи, в которых может потребоваться сделать это.      — Может потребоваться вернуться в начало коллекции и запустить итерацию снова до ее завершения.      — Может потребоваться пропустить один или несколько элементов по различным причинам.      — Может потребоваться изменить элементы коллекции в середине обхода. В этом случае необходимо получить новый объект перечислителя, так как предыдущий становится недействительным."
  example:
  - "The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.  \n  \n [!code-vb[VbVbalrCollectionObject#7](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#7)]  \n  \n `GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace. The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods. For more information, see [For Each...Next Statement](../Topic/For%20Each...Next%20Statement%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Возвращает ссылку на объект перечислителя, который используется для прохода по <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  overload: Microsoft.VisualBasic.Collection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  remarks: "Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException>исключение.</xref:System.ArgumentException>       `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: "(A) числовое выражение, указывающее положение элемента коллекции. `Index`должно быть числом от 1 до значения коллекции <xref:Microsoft.VisualBasic.Collection.Count*>свойство.</xref:Microsoft.VisualBasic.Collection.Count*> Или (Б) <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> выражение, задающее позицию или ключевую строку элемента коллекции."
    return:
      type: System.Object
      description: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  id: Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  remarks: "Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException>исключение.</xref:System.ArgumentException>       `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[object Index] { get; }
    parameters:
    - id: Index
      type: System.Object
      description: "(A) числовое выражение, указывающее положение элемента коллекции. `Index`должно быть числом от 1 до значения коллекции <xref:Microsoft.VisualBasic.Collection.Count*>свойство.</xref:Microsoft.VisualBasic.Collection.Count*> Или (Б) <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> выражение, задающее позицию или ключевую строку элемента коллекции."
    return:
      type: System.Object
      description: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  remarks: "Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException>исключение.</xref:System.ArgumentException>       `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[string Key] { get; }
    parameters:
    - id: Key
      type: System.String
      description: "Уникальный <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, задающее ключевую строку, которая может использоваться вместо индекса, для доступа к элементу коллекции. `Key`должен соответствовать `Key` аргумент задан, когда элемент был добавлен в коллекцию."
    return:
      type: System.Object
      description: "Возвращает определенный элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта по позиции или ключу. Только для чтения."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "При `Remove` удаляет элемент из коллекции, он уменьшает коллекции <xref:Microsoft.VisualBasic.Collection.Count%2A>свойство на единицу.</xref:Microsoft.VisualBasic.Collection.Count%2A> Он также уменьшает `Index` значение каждого элемента, следующего за удаленным элементом коллекции.       Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` удалить его."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (int Index);
    parameters:
    - id: Index
      type: System.Int32
      description: "Числовое выражение, указывающее положение элемента коллекции. `Index`должно быть числом от 1 до значения коллекции <xref:Microsoft.VisualBasic.Collection.Count*>свойство.</xref:Microsoft.VisualBasic.Collection.Count*>"
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет элемент из <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "При `Remove` удаляет элемент из коллекции, он уменьшает коллекции <xref:Microsoft.VisualBasic.Collection.Count%2A>свойство на единицу.</xref:Microsoft.VisualBasic.Collection.Count%2A> Он также уменьшает `Index` значение каждого элемента, следующего за удаленным элементом коллекции.       Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` удалить его."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Уникальный <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, задающее ключевую строку, которая может использоваться вместо индекса, для доступа к элементу коллекции. `Key`должен соответствовать `Key` аргумент задан, когда элемент был добавлен в коллекцию."
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Копирует элементы <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> для <xref:System.Array>, начиная с определенного <xref:System.Array>индекса.</xref:System.Array> </xref:System.Array> Реализует <xref:System.Collections.ICollection>интерфейса.</xref:System.Collections.ICollection>"
  remarks: "Элементы копируются в <xref:System.Array>в том же порядке, в котором перечислитель перемещается по <xref:Microsoft.VisualBasic.Collection>объекта.</xref:Microsoft.VisualBasic.Collection> </xref:System.Array>       Этот метод является операцией O (`n`) операции, где `n` получается из <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>.</xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, является целевым для элементов, копируемых из <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект больше, чем свободное пространство от <code>index</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  id: System#Collections#ICollection#ICollectionCount
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: int System.Collections.ICollection.ICollectionCount { get; }
    return:
      type: System.Int32
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  id: System#Collections#ICollection#ICollectionIsSynchronized
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.ICollection.ICollectionIsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  id: System#Collections#ICollection#ICollectionSyncRoot
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.ICollection.ICollectionSyncRoot { get; }
    return:
      type: System.Object
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает перечислитель, выполняющий итерацию по коллекции. Реализует <xref:System.Collections.ICollection>интерфейса.</xref:System.Collections.ICollection>"
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей. Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>Метод также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A> В этой позиции <xref:System.Collections.IEnumerator.Current%2A>свойство не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>метод, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой. Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления. Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Объект, который может использоваться для итерации по коллекции.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Добавляет элемент в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "Можно также использовать <xref:Microsoft.VisualBasic.Collection.Item%2A>свойство для добавления новых элементов, задав значение ключа, который не существует в <xref:Microsoft.VisualBasic.Collection>объекта.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection.Item%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Добавление <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Позиция, в которую вставлен новый элемент."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект имеет фиксированный размер."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет все элементы из <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "Этот метод удаляет все элементы из <xref:Microsoft.VisualBasic.Collection>объекта.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IList>Доступно только для чтения.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Определяет, является ли <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект содержит определенное значение. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "Этот метод определяет, является ли <xref:Microsoft.VisualBasic.Collection>объект содержит определенное значение.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "Возвращает <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> Если <xref:System.Object>находится в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта; в противном случае <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  id: System#Collections#IList#IListIsFixedSize
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  id: System#Collections#IList#IListIsReadOnly
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  id: System#Collections#IList#IListItem(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.IList.IListItem[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Для добавления."
    return:
      type: System.Object
      description: "Для добавления."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Определяет индекс заданного элемента в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "Этот метод определяет индекс заданного элемента в <xref:Microsoft.VisualBasic.Collection>объекта.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Индекс <code> value </code> Если найден в коллекции; в противном случае — значение -1."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Вставляет элемент в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта по указанному индексу. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "Если `index` равно количеству элементов в <xref:Microsoft.VisualBasic.Collection>объекта, затем `value` добавляется в конец.</xref:Microsoft.VisualBasic.Collection>       В коллекциях с непрерывным набором элементов таких как списки, следующие за точкой вставки элементы перемещаются вниз для размещения нового элемента. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `value` следует вставить."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для вставки в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>не является допустимым индексом в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект имеет фиксированный размер."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>value</code>является пустой ссылкой в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет первое вхождение указанного объекта из <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице. Если `value` не найден в <xref:Microsoft.VisualBasic.Collection>объекта, <xref:Microsoft.VisualBasic.Collection>объекта не изменяется и исключение не возникает.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для удаления из <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект имеет фиксированный размер."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Удаляет <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> элемента объекта по указанному индексу. Реализует <xref:System.Collections.IList>интерфейса.</xref:System.Collections.IList>"
  remarks: "В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс удаляемого элемента."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>не является допустимым индексом в <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> Объект доступен только для чтения.       - или - <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объект имеет фиксированный размер."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Выполняется после завершения всей <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> десериализован граф объектов. Реализует <xref href=&quot;System.Runtime.Serialization.IDeserializationCallback&quot;> </xref> интерфейса."
  remarks: "Этот метод вызывается после всего <xref:Microsoft.VisualBasic.Collection>десериализован граф объектов.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Объект, который инициализирует обратный вызов."
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает данные, необходимые для сериализации <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта. Реализует <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> интерфейса."
  remarks: "Этот метод возвращает данные, необходимые для сериализации <xref:Microsoft.VisualBasic.Collection>объекта.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Объект <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> объект, содержащий сведения, необходимые для сериализации <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>объект, содержащий источник и назначение сериализованного потока, связанного с <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> объекта.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Collection.#ctor
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Collection.Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Collection.Count
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.VisualBasic.Collection.#ctor*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection
  nameWithType: Collection.Collection
- uid: Microsoft.VisualBasic.Collection.Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add
  nameWithType: Collection.Add
- uid: Microsoft.VisualBasic.Collection.Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear
  nameWithType: Collection.Clear
- uid: Microsoft.VisualBasic.Collection.Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains
  nameWithType: Collection.Contains
- uid: Microsoft.VisualBasic.Collection.Count*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
- uid: Microsoft.VisualBasic.Collection.GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.Item*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item
  nameWithType: Collection.Item
- uid: Microsoft.VisualBasic.Collection.Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove
  nameWithType: Collection.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection.System.Collections.ICollection.CopyTo
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection.System.Collections.IList.Add
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Collection.System.Collections.IList.Clear
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection.System.Collections.IList.Contains
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem
  nameWithType: Collection.System.Collections.IList.IListItem
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection.System.Collections.IList.IndexOf
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection.System.Collections.IList.Insert
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection.System.Collections.IList.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Collection.System.Collections.IList.RemoveAt
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData
