### YamlMime:ManagedReference
items:
- uid: System.Net.WebProxy
  id: WebProxy
  children:
  - System.Net.WebProxy.#ctor
  - System.Net.WebProxy.#ctor(System.String)
  - System.Net.WebProxy.#ctor(System.Uri)
  - System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Int32)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  - System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  - System.Net.WebProxy.Address
  - System.Net.WebProxy.BypassArrayList
  - System.Net.WebProxy.BypassList
  - System.Net.WebProxy.BypassProxyOnLocal
  - System.Net.WebProxy.Credentials
  - System.Net.WebProxy.GetDefaultProxy
  - System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.GetProxy(System.Uri)
  - System.Net.WebProxy.IsBypassed(System.Uri)
  - System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.WebProxy.UseDefaultCredentials
  langs:
  - csharp
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
  type: Class
  summary: "Содержит параметры HTTP-прокси для <xref:System.Net.WebRequest>класса.</xref:System.Net.WebRequest>"
  remarks: "Класс WebProxy содержит параметры прокси-сервера, <xref:System.Net.WebRequest>экземпляры используют, чтобы определить, используется ли веб-прокси для отправки запросов.</xref:System.Net.WebRequest> Глобальные в машины и файлы конфигурации приложений и приложений можно указать параметры прокси-сервера веб-можно использовать экземпляры класса WebProxy для настройки использования веб-прокси. Класс WebProxy является базовую реализацию <xref:System.Net.IWebProxy>интерфейса.</xref:System.Net.IWebProxy>       Чтобы получить экземпляры класса веб-прокси-сервера, можно использовать любой из следующих методов: - <xref:System.Net.WebProxy.%23ctor%2A>конструктор.</xref:System.Net.WebProxy.%23ctor%2A>      - <xref:System.Net.WebProxy.GetDefaultProxy%2A>Метод.</xref:System.Net.WebProxy.GetDefaultProxy%2A>      - <xref:System.Net.GlobalProxySelection.Select%2A>Метод.</xref:System.Net.GlobalProxySelection.Select%2A>       Эти методы предоставления WebProxy экземпляр, который можно выполнить дальнейшую настройку; различие между ними — способ инициализации экземпляра перед возвратом к приложению. <xref:System.Net.WebProxy.%23ctor%2A>Конструктор возвращает экземпляр класса WebProxy с <xref:System.Net.WebProxy.Address%2A>свойство `null`.</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy.%23ctor%2A> Если запрос использует экземпляр WebProxy в этом состоянии, не прокси-сервера используется для отправки запроса.       <xref:System.Net.WebProxy.GetDefaultProxy%2A>Метод возвращает экземпляр класса WebProxy с <xref:System.Net.WebProxy.Address%2A>, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>, и <xref:System.Net.WebProxy.BypassList%2A>заданы значения, используемые в Internet Explorer 5.5 и более поздних версий.</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy.GetDefaultProxy%2A>       <xref:System.Net.GlobalProxySelection.Select%2A>Метод возвращает экземпляр класса WebProxy с его свойства, заданные в соответствии с сочетание Internet Explorer и файл параметров конфигурации.</xref:System.Net.GlobalProxySelection.Select%2A>       Класс WebProxy поддерживает автоматическое определение и выполнение сценариев конфигурации прокси-сервера. Эта функция также называется автоматического обнаружения веб-прокси (WPAD). При использовании автоматической настройки прокси, сценарий конфигурации, обычно называемый Wpad.dat, должен быть расположен, загрузки, компиляции и запуска. Если эти операции выполняются успешно, сценарий возвращает прокси-серверы, которые могут использоваться для запроса."
  example:
  - "The following code example assigns a WebProxy instance to a <xref:System.Net.WebRequest> instance. The <xref:System.Net.WebRequest> instance uses the proxy to connect to external Internet resources. (For an example that demonstrates using the WPAD feature, see the documentation for the <xref:System.Net.IWebProxyScript> class.)  \n  \n [!code-cpp[Classic WebProxy Example#1](~/add/codesnippet/cpp/t-system.net.webproxy_1.cpp)]\n [!code-vb[Classic WebProxy Example#1](~/add/codesnippet/visualbasic/t-system.net.webproxy_1.vb)]\n [!code-cs[Classic WebProxy Example#1](~/add/codesnippet/csharp/t-system.net.webproxy_1.cs)]"
  syntax:
    content: 'public class WebProxy : System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor
  id: '#ctor'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый пустой экземпляр класса <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса."
  remarks: "Конструктор по умолчанию инициализирует пустой экземпляр <xref:System.Net.WebProxy>класса <xref:System.Net.WebProxy.Address%2A>свойство `null`.</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>       Когда <xref:System.Net.WebProxy.Address%2A>свойство `null`, <xref:System.Net.WebProxy.IsBypassed%2A>возвращает `true` и <xref:System.Net.WebProxy.GetProxy%2A>метод возвращает адрес назначения.</xref:System.Net.WebProxy.GetProxy%2A> </xref:System.Net.WebProxy.IsBypassed%2A> </xref:System.Net.WebProxy.Address%2A>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#1](~/add/codesnippet/cpp/m-system.net.webproxy.sh_3_1.cpp)]\n [!code-cs[NCLWebProxy#1](~/add/codesnippet/csharp/m-system.net.webproxy.sh_3_1.cs)]"
  syntax:
    content: public WebProxy ();
    parameters: []
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с заданным URI."
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство <xref:System.Uri>содержащий экземпляр `Address`.</xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#6](~/add/codesnippet/cpp/m-system.net.webproxy.sh_1_1.cpp)]\n [!code-cs[NCLWebProxy#6](~/add/codesnippet/csharp/m-system.net.webproxy.sh_1_1.cs)]"
  syntax:
    content: public WebProxy (string Address);
    parameters:
    - id: Address
      type: System.String
      description: "URI прокси-сервера."
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> не является допустимым URI."
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> от указанного класса <xref:System.Uri>экземпляра.</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство `Address` параметр.</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.sh_0_1.cpp)]\n [!code-cs[NCLWebProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.sh_0_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address);
    parameters:
    - id: Address
      type: System.Uri
      description: "Объект <xref:System.Uri>экземпляр, содержащий адрес прокси-сервера.</xref:System.Uri>"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр класса <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с использованием ранее сериализованного содержимого."
  remarks: "Этот метод вызывается системой для десериализации <xref:System.Net.WebProxy>экземпляра; приложения не вызывает его.</xref:System.Net.WebProxy>"
  syntax:
    content: protected WebProxy (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "Данные сериализации."
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "Контекст для сериализованных данных."
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с указанным URI и отменить установку."
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство <xref:System.Uri>экземпляру, содержащему `Address` и <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`.</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/m-system.net.webproxy.sh_4_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/m-system.net.webproxy.sh_4_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.String
      description: "URI прокси-сервера."
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> не является допустимым URI."
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> с указанного узла и номер порта."
  remarks: '<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство <xref:System.Uri>экземпляра вид http:// `Host` : `Port`.</xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>'
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#5](~/add/codesnippet/cpp/m-system.net.webproxy.sh_6_1.cpp)]\n [!code-cs[NCLWebProxy#5](~/add/codesnippet/csharp/m-system.net.webproxy.sh_6_1.cs)]"
  syntax:
    content: public WebProxy (string Host, int Port);
    parameters:
    - id: Host
      type: System.String
      description: "Имя узла прокси-сервера."
    - id: Port
      type: System.Int32
      description: "Номер порта на `Host` для использования."
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "URI, сформированном путем объединения <code> Host </code> и <code> Port </code> не является допустимым URI."
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  id: '#ctor(System.Uri,System.Boolean)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса <xref:System.Uri>экземпляра и пропускаемых.</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство `Address` и <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`.</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#3](~/add/codesnippet/cpp/m-system.net.webproxy.sh_7_1.cpp)]\n [!code-cs[NCLWebProxy#3](~/add/codesnippet/csharp/m-system.net.webproxy.sh_7_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal);
    parameters:
    - id: Address
      type: System.Uri
      description: "Объект <xref:System.Uri>экземпляр, содержащий адрес прокси-сервера.</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  id: '#ctor(System.String,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с заданным универсальным кодом Ресурса, пропускаемых и список пропускаемых URI."
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство <xref:System.Uri>экземпляр, содержащий `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`и <xref:System.Net.WebProxy.BypassList%2A>свойство `BypassList`.</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#8](~/add/codesnippet/cpp/m-system.net.webproxy.sh_2_1.cpp)]\n [!code-cs[NCLWebProxy#8](~/add/codesnippet/csharp/m-system.net.webproxy.sh_2_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.String
      description: "URI прокси-сервера."
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: BypassList
      type: System.String[]
      description: "Массив строк регулярных выражений, содержащих URI пропускаемых серверов."
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> не является допустимым URI."
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  id: '#ctor(System.Uri,System.Boolean,System.String[])'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с заданным <xref:System.Uri>экземпляра, пропускаемых и список пропускаемых URI.</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`и <xref:System.Net.WebProxy.BypassList%2A>свойство `BypassList`.</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#4](~/add/codesnippet/cpp/m-system.net.webproxy.sh_5_1.cpp)]\n [!code-cs[NCLWebProxy#4](~/add/codesnippet/csharp/m-system.net.webproxy.sh_5_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList);
    parameters:
    - id: Address
      type: System.Uri
      description: "Объект <xref:System.Uri>экземпляр, содержащий адрес прокси-сервера.</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: BypassList
      type: System.String[]
      description: "Массив строк регулярных выражений, содержащий URI пропускаемых серверов."
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с указанным URI, пропускаемых, список пропускаемых URI и учетные данные."
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство <xref:System.Uri>экземпляр, содержащий `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`, <xref:System.Net.WebProxy.BypassList%2A>свойство `BypassList`и <xref:System.Net.WebProxy.Credentials%2A>свойству присвоено `Credentials`.</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Uri> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#9](~/add/codesnippet/cpp/25929c39-89a2-4ac3-bf8d-_1.cpp)]\n [!code-cs[NCLWebProxy#9](~/add/codesnippet/csharp/25929c39-89a2-4ac3-bf8d-_1.cs)]"
  syntax:
    content: public WebProxy (string Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.String
      description: "URI прокси-сервера."
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: BypassList
      type: System.String[]
      description: "Массив строк регулярных выражений, содержащий URI пропускаемых серверов."
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>Экземпляра для отправки на прокси-сервер для проверки подлинности.</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.#ctor*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>Address</code> не является допустимым URI."
  platform:
  - net462
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  id: '#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)'
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.WebProxy&quot;> </xref> класса с заданным <xref:System.Uri>экземпляра, пропускаемых, список пропускаемых URI и учетные данные.</xref:System.Uri>"
  remarks: "<xref:System.Net.WebProxy>Экземпляра инициализируется с <xref:System.Net.WebProxy.Address%2A>свойство `Address`, <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>свойство `BypassOnLocal`, <xref:System.Net.WebProxy.BypassList%2A>свойство `BypassList`и <xref:System.Net.WebProxy.Credentials%2A>свойству присвоено `Credentials`.</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A> </xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebProxy>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NCLWebProxy#13](~/add/codesnippet/cpp/35b6ace3-e60e-4d11-a417-_1.cpp)]\n [!code-cs[NCLWebProxy#13](~/add/codesnippet/csharp/35b6ace3-e60e-4d11-a417-_1.cs)]"
  syntax:
    content: public WebProxy (Uri Address, bool BypassOnLocal, string[] BypassList, System.Net.ICredentials Credentials);
    parameters:
    - id: Address
      type: System.Uri
      description: "Объект <xref:System.Uri>экземпляр, содержащий адрес прокси-сервера.</xref:System.Uri>"
    - id: BypassOnLocal
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Использование прокси-сервера для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: BypassList
      type: System.String[]
      description: "Массив строк регулярных выражений, содержащий URI пропускаемых серверов."
    - id: Credentials
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>Экземпляра для отправки на прокси-сервер для проверки подлинности.</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Address
  id: Address
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает адрес прокси-сервера."
  remarks: "Свойство Address содержит адрес прокси-сервера. При обнаружения автоматического прокси-сервера не включен, а не сценарий автоматической настройки задается, свойство Address и <xref:System.Net.WebProxy.BypassList%2A>определения прокси, используемый для запроса.</xref:System.Net.WebProxy.BypassList%2A>       Если свойство адреса не `null`, запросов на обход прокси-сервер и подключение непосредственно в узле назначения."
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its Address.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.ad_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.ad_1.cpp)]"
  syntax:
    content: public Uri Address { get; set; }
    return:
      type: System.Uri
      description: "Объект <xref:System.Uri>экземпляр, содержащий адрес прокси-сервера.</xref:System.Uri>"
  overload: System.Net.WebProxy.Address*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassArrayList
  id: BypassArrayList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает список адресов, которые не используют прокси-сервера."
  remarks: "<xref:System.Net.WebProxy.BypassList%2A>Является списком массив строк регулярных выражений, описывающих URI, <xref:System.Net.WebRequest>экземпляр непосредственно получает доступ вместо доступа через прокси-сервер.</xref:System.Net.WebRequest> </xref:System.Net.WebProxy.BypassList%2A>"
  syntax:
    content: public System.Collections.ArrayList BypassArrayList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> , Содержащий список <xref:System.Net.WebProxy.BypassList*>массивов, представляет идентификаторы URI, которые не используют прокси-сервер при доступе к.</xref:System.Net.WebProxy.BypassList*>"
  overload: System.Net.WebProxy.BypassArrayList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassList
  id: BypassList
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает массив адресов, которые не используют прокси-сервера."
  remarks: "Свойство BypassList содержит массив регулярных выражений, описывающих URI, <xref:System.Net.WebRequest>экземпляр непосредственно получает доступ вместо доступа через прокси-сервер.</xref:System.Net.WebRequest>"
  example:
  - "The following code example displays the properties of a <xref:System.Net.WebProxy> object, including its BypassList property.  \n  \n [!code-cs[NCLAutoProxy#1](~/add/codesnippet/csharp/p-system.net.webproxy.by_0_1.cs)]\n [!code-cpp[NCLAutoProxy#1](~/add/codesnippet/cpp/p-system.net.webproxy.by_0_1.cpp)]"
  syntax:
    content: public string[] BypassList { get; set; }
    return:
      type: System.String[]
      description: "Массив, содержащий список регулярных выражений, описывающих URI, которые не используют прокси-сервер при доступе."
  overload: System.Net.WebProxy.BypassList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает значение, указывающее, следует ли обходить прокси-сервер для локальных адресов."
  remarks: "Определяет свойства BypassProxyOnLocal ли <xref:System.Net.WebRequest>экземпляры используют прокси-сервер при доступе к локальным Интернет-ресурсам.</xref:System.Net.WebRequest>       Если BypassProxyOnLocal `true`, запросы к локальным Интернет-ресурсам не используют прокси-сервера. Локальные запросы определяются по отсутствию точки (.) в URI, как и http://webserver/, или доступ к локального сервера, включая http://localhost, http://loopback или http://127.0.0.1. При BypassProxyOnLocal `false`, все интернет-запросы выполняются через прокси-сервер.      Настроек [!NOTE] настроек запросы на локальный узел с URI, содержащие точку использовать прокси-сервер. Чтобы избежать использования прокси-сервера в этих случаях, создайте запись узла в списке <xref:System.Net.WebProxy.BypassList%2A>.</xref:System.Net.WebProxy.BypassList%2A>"
  example:
  - "The following code example demonstrates calling a constructor that sets this property and getting the value of this property.  \n  \n [!code-cpp[NCLWebProxy#7](~/add/codesnippet/cpp/p-system.net.webproxy.by_1_1.cpp)]\n [!code-cs[NCLWebProxy#7](~/add/codesnippet/csharp/p-system.net.webproxy.by_1_1.cs)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для обхода прокси-сервер для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebProxy.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.Credentials
  id: Credentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает учетные данные, предоставляемые прокси-серверу для проверки подлинности."
  remarks: "Свойство учетных данных содержит учетные данные проверки подлинности для отправки в ответ на код состояния HTTP 407 (авторизация) прокси-сервера. В большинстве сценариев клиента, следует использовать <xref:System.Net.CredentialCache.DefaultCredentials%2A>, которые являются учетными данными пользователя, выполнившего вход.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Чтобы сделать это, задайте <xref:System.Net.WebProxy.UseDefaultCredentials%2A>Свойства `true` вместо задания этого свойства.</xref:System.Net.WebProxy.UseDefaultCredentials%2A>      Настроек [!NOTE] настроек при установке свойства учетных данных учетные данные не <xref:System.Net.CredentialCache.DefaultCredentials%2A>, параметр <xref:System.Net.WebProxy.UseDefaultCredentials%2A>Свойства `true` вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Net.WebProxy.UseDefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> Чтобы избежать этого, необходимо задать свойство учетные данные `null` перед установкой <xref:System.Net.WebProxy.UseDefaultCredentials%2A>Свойства `true`.</xref:System.Net.WebProxy.UseDefaultCredentials%2A> Аналогично, невозможно задать это свойство для любого значения при <xref:System.Net.WebProxy.UseDefaultCredentials%2A>— `true`.</xref:System.Net.WebProxy.UseDefaultCredentials%2A>"
  syntax:
    content: public System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: "<xref:System.Net.ICredentials>Экземпляр, содержащий учетные данные, предоставляемые прокси-серверу для проверки подлинности.</xref:System.Net.ICredentials>"
  overload: System.Net.WebProxy.Credentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Предпринята попытка задать это свойство при <xref:System.Net.WebProxy.UseDefaultCredentials*>было задано значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Net.WebProxy.UseDefaultCredentials*>"
  platform:
  - net462
- uid: System.Net.WebProxy.GetDefaultProxy
  id: GetDefaultProxy
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Считывает параметры нединамические прокси-сервера обозревателя Internet Explorer."
  remarks: "Метод GetDefaultProxy считывает нединамические параметры прокси хранятся в Internet Explorer 5.5 и более поздних версий и создает <xref:System.Net.WebProxy>экземпляра с этими параметрами.</xref:System.Net.WebProxy>       Метод GetDefaultProxy не принимать никаких динамических параметров, которые создаются из сценариев, запускаемых Internet Explorer, из записей автоматической конфигурации или из поиска DHCP или DNS.       Приложения должны использовать <xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>Свойства и <xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName>вместо метода GetDefaultProxy.</xref:System.Net.WebRequest.GetSystemWebProxy%2A?displayProperty=fullName> </xref:System.Net.WebRequest.DefaultWebProxy%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NCLWebProxy#11](~/add/codesnippet/cpp/m-system.net.webproxy.ge_0_1.cpp)]\n [!code-cs[NCLWebProxy#11](~/add/codesnippet/csharp/m-system.net.webproxy.ge_0_1.cs)]"
  syntax:
    content: public static System.Net.WebProxy GetDefaultProxy ();
    parameters: []
    return:
      type: System.Net.WebProxy
      description: "Объект <xref href=&quot;System.Net.WebProxy&quot;> </xref> экземпляр, содержащий нединамические параметры прокси из Internet Explorer 5.5 и более поздних версий."
  overload: System.Net.WebProxy.GetDefaultProxy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Заполняет <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> с данными, необходимыми для сериализации целевого объекта."
  remarks: "Объекты, включенные в <xref:System.Runtime.Serialization.SerializationInfo>, автоматически отслеживаются и сериализации модулем форматирования.</xref:System.Runtime.Serialization.SerializationInfo>"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Требуется заполнить данными."
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>, определяющий целевой объект этой сериализации.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Net.WebProxy.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  id: GetProxy(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает URI, использующий прокси для запроса."
  remarks: "GetProxy-метод возвращает URI, который <xref:System.Net.WebRequest>экземпляр использует для доступа к Интернет-ресурса.</xref:System.Net.WebRequest>       Сравнивает GetProxy `destination` содержимым <xref:System.Net.WebProxy.BypassList%2A>, с использованием <xref:System.Net.WebProxy.IsBypassed%2A>метод.</xref:System.Net.WebProxy.IsBypassed%2A> </xref:System.Net.WebProxy.BypassList%2A> Если <xref:System.Net.WebProxy.IsBypassed%2A>возвращает `true`, возвращает GetProxy `destination` и <xref:System.Net.WebRequest>экземпляр не использовать прокси-сервер.</xref:System.Net.WebRequest> </xref:System.Net.WebProxy.IsBypassed%2A>       Если `destination` не находится в <xref:System.Net.WebProxy.BypassList%2A>, <xref:System.Net.WebRequest>экземпляр использует прокси-сервера и <xref:System.Net.WebProxy.Address%2A>возвращается свойство.</xref:System.Net.WebProxy.Address%2A> </xref:System.Net.WebRequest> </xref:System.Net.WebProxy.BypassList%2A>"
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to get the proxy that is selected for a resource.  \n  \n [!code-cs[NCLAutoProxy#2](~/add/codesnippet/csharp/m-system.net.webproxy.ge_1_1.cs)]\n [!code-cpp[NCLAutoProxy#2](~/add/codesnippet/cpp/m-system.net.webproxy.ge_1_1.cpp)]"
  syntax:
    content: public Uri GetProxy (Uri destination);
    parameters:
    - id: destination
      type: System.Uri
      description: "<xref:System.Uri>Экземпляра Интернет-ресурса.</xref:System.Uri>"
    return:
      type: System.Uri
      description: "<xref:System.Uri>Экземпляра Интернет-ресурса, если ресурс находится в списке пропускаемых адресов; в противном случае <xref:System.Uri>экземпляр прокси-сервера.</xref:System.Uri> </xref:System.Uri>"
  overload: System.Net.WebProxy.GetProxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destination</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  id: IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Указывает, следует ли использовать прокси-сервера для указанного узла."
  remarks: "Метод IsBypassed используется для определения, следует ли обходить прокси-сервер при доступе к Интернет-ресурсу.       <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>И <xref:System.Net.WebProxy.BypassList%2A>Свойства управляют возвращаемое значение метода IsBypassed.</xref:System.Net.WebProxy.BypassList%2A> </xref:System.Net.WebProxy.BypassProxyOnLocal%2A>       Возвращает IsBypassed `true` при выполнении любого из следующих условий: - Если <xref:System.Net.WebProxy.BypassProxyOnLocal%2A>— `true` и `host` — локальный URI.</xref:System.Net.WebProxy.BypassProxyOnLocal%2A> Локальные запросы определяются по отсутствию точки (.) в URI, как «http://webserver/».      -Если `host` соответствует регулярному выражению в <xref:System.Net.WebProxy.BypassList%2A>.</xref:System.Net.WebProxy.BypassList%2A>      -   If <xref:System.Net.WebProxy.Address%2A> is `null`.</xref:System.Net.WebProxy.Address%2A>       Все другие условия возвращают `false`."
  example:
  - "The following code example creates a <xref:System.Net.WebProxy> object and calls this method to check whether the bypass list is properly set.  \n  \n [!code-cpp[NCLWebProxy#12](~/add/codesnippet/cpp/m-system.net.webproxy.is_1.cpp)]\n [!code-cs[NCLWebProxy#12](~/add/codesnippet/csharp/m-system.net.webproxy.is_1.cs)]"
  syntax:
    content: public bool IsBypassed (Uri host);
    parameters:
    - id: host
      type: System.Uri
      description: "<xref:System.Uri>Экземпляр узла для проверки использования прокси-сервера.</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если прокси-сервер не должен использоваться для <code> host </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebProxy.IsBypassed*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>host</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Создает данные сериализации и контекст, используемые системой для сериализации <xref href=&quot;System.Net.WebProxy&quot;> </xref> объекта."
  remarks: "Система вызывает этот метод для сериализации объекта. приложения не вызывают его напрямую."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Объекта для заполнения данными."
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>структуру, которая указывает целевой объект этой сериализации.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.WebProxy.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.WebProxy
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает <xref:System.Boolean>ли значение, которое определяет <xref:System.Net.CredentialCache.DefaultCredentials*>отправляется вместе с запросами.</xref:System.Net.CredentialCache.DefaultCredentials*> </xref:System.Boolean>"
  remarks: "Присвойте этому свойству значение `true` при запросов, выполненных этим <xref:System.Net.WebProxy>объекта по запросу сервера, проверка подлинности должна выполняться с использованием учетных данных пользователя, выполнившего вход.</xref:System.Net.WebProxy> Для клиентских приложений это приемлемо в большинстве сценариев. Для приложений среднего уровня, таких как приложения ASP.NET, вместо того чтобы использовать это свойство обычно устанавливается <xref:System.Net.WebProxy.Credentials%2A>Свойства учетные данные клиента, от лица которого выполняется запрос.</xref:System.Net.WebProxy.Credentials%2A>       В следующей таблице показаны результаты установки значения UseDefaultCredentials, основанного на значение <xref:System.Net.WebProxy.Credentials%2A>Свойства.</xref:System.Net.WebProxy.Credentials%2A>      | значение <xref:System.Net.WebProxy.Credentials%2A>| Значение UseDefaultCredentials | Эффект |   |----------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|   | <xref:System.Net.CredentialCache.DefaultCredentials%2A>| `true`| Не действует. |   | <xref:System.Net.CredentialCache.DefaultCredentials%2A>| `false`| имеет значение <xref:System.Net.WebProxy.Credentials%2A> `null`. |   | `null`|`true`|<xref:System.Net.WebProxy.Credentials%2A> is set to <xref:System.Net.CredentialCache.DefaultCredentials%2A>.|   | Значение, отличное от <xref:System.Net.CredentialCache.DefaultCredentials%2A>или `null` | `true` или `false`| Параметр UseDefaultCredentials приводит к возникновению исключения. |       Если UseDefaultCredentials `false`, вы можете изменить <xref:System.Net.WebProxy.Credentials%2A>свойство учетные данные любого.</xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.WebProxy.Credentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A> Если UseDefaultCredentials `true`, замена <xref:System.Net.WebProxy.Credentials%2A>свойство из <xref:System.Net.CredentialCache.DefaultCredentials%2A>(значение, которое задается при UseDefaultCredentials является свойство `true`) будет создано исключение.</xref:System.Net.CredentialCache.DefaultCredentials%2A> </xref:System.Net.WebProxy.Credentials%2A>"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если используются учетные данные по умолчанию; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.WebProxy.UseDefaultCredentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Предпринята попытка задать это свойство при <xref:System.Net.WebProxy.Credentials*>свойство содержит учетные данные, отличные от учетных данных по умолчанию.</xref:System.Net.WebProxy.Credentials*> Дополнительные сведения см. в разделе «Примечания»."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.WebProxy.#ctor
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy()
  nameWithType: WebProxy.WebProxy()
  fullName: System.Net.WebProxy.WebProxy()
- uid: System.Net.WebProxy.#ctor(System.String)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String)
  nameWithType: WebProxy.WebProxy(String)
  fullName: System.Net.WebProxy.WebProxy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebProxy.#ctor(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri)
  nameWithType: WebProxy.WebProxy(Uri)
  fullName: System.Net.WebProxy.WebProxy(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.WebProxy(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.WebProxy(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean)
  nameWithType: WebProxy.WebProxy(String,Boolean)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.WebProxy.#ctor(System.String,System.Int32)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Int32)
  nameWithType: WebProxy.WebProxy(String,Int32)
  fullName: System.Net.WebProxy.WebProxy(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean)
  nameWithType: WebProxy.WebProxy(Uri,Boolean)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean)
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[])
  nameWithType: WebProxy.WebProxy(String,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[])
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[])
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[])
- uid: System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(String,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(String,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(String,Boolean,String[],ICredentials)
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy(Uri,Boolean,String[],ICredentials)
  nameWithType: WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
  fullName: System.Net.WebProxy.WebProxy(Uri,Boolean,String[],ICredentials)
- uid: System.Net.WebProxy.Address
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
  fullName: System.Net.WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
  fullName: System.Net.WebProxy.BypassArrayList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Net.WebProxy.BypassList
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
  fullName: System.Net.WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
  fullName: System.Net.WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
  fullName: System.Net.WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy()
  nameWithType: WebProxy.GetDefaultProxy()
  fullName: System.Net.WebProxy.GetDefaultProxy()
- uid: System.Net.WebProxy
  parent: System.Net
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy
  fullName: System.Net.WebProxy
- uid: System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.GetProxy(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy(Uri)
  nameWithType: WebProxy.GetProxy(Uri)
  fullName: System.Net.WebProxy.GetProxy(Uri)
- uid: System.Net.WebProxy.IsBypassed(System.Uri)
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed(Uri)
  nameWithType: WebProxy.IsBypassed(Uri)
  fullName: System.Net.WebProxy.IsBypassed(Uri)
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.WebProxy.UseDefaultCredentials
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
  fullName: System.Net.WebProxy.UseDefaultCredentials
- uid: System.Net.WebProxy.#ctor*
  parent: System.Net.WebProxy
  isExternal: false
  name: WebProxy
  nameWithType: WebProxy.WebProxy
- uid: System.Net.WebProxy.Address*
  parent: System.Net.WebProxy
  isExternal: false
  name: Address
  nameWithType: WebProxy.Address
- uid: System.Net.WebProxy.BypassArrayList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassArrayList
  nameWithType: WebProxy.BypassArrayList
- uid: System.Net.WebProxy.BypassList*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassList
  nameWithType: WebProxy.BypassList
- uid: System.Net.WebProxy.BypassProxyOnLocal*
  parent: System.Net.WebProxy
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WebProxy.BypassProxyOnLocal
- uid: System.Net.WebProxy.Credentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: Credentials
  nameWithType: WebProxy.Credentials
- uid: System.Net.WebProxy.GetDefaultProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetDefaultProxy
  nameWithType: WebProxy.GetDefaultProxy
- uid: System.Net.WebProxy.GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetObjectData
  nameWithType: WebProxy.GetObjectData
- uid: System.Net.WebProxy.GetProxy*
  parent: System.Net.WebProxy
  isExternal: false
  name: GetProxy
  nameWithType: WebProxy.GetProxy
- uid: System.Net.WebProxy.IsBypassed*
  parent: System.Net.WebProxy
  isExternal: false
  name: IsBypassed
  nameWithType: WebProxy.IsBypassed
- uid: System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.WebProxy
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WebProxy.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.WebProxy.UseDefaultCredentials*
  parent: System.Net.WebProxy
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: WebProxy.UseDefaultCredentials
