### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  - System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  - System.Windows.Input.KeyEventArgs.ImeProcessedKey
  - System.Windows.Input.KeyEventArgs.InputSource
  - System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.KeyEventArgs.IsDown
  - System.Windows.Input.KeyEventArgs.IsRepeat
  - System.Windows.Input.KeyEventArgs.IsToggled
  - System.Windows.Input.KeyEventArgs.IsUp
  - System.Windows.Input.KeyEventArgs.Key
  - System.Windows.Input.KeyEventArgs.KeyStates
  - System.Windows.Input.KeyEventArgs.SystemKey
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
  type: Class
  summary: "Предоставляет данные для <xref href=&quot;System.Windows.UIElement.KeyUp&quot;> </xref> и <xref href=&quot;System.Windows.UIElement.KeyDown&quot;> </xref> перенаправленных событий, а также связанные присоединенные события и события предварительного просмотра."
  remarks: "Данный класс данных события используется со следующими вложенными событиями:- <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>данный класс данных события также используется со следующими событиями перенаправленного на базовые элементы.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> Эти перенаправленные события пересылать перечисленных выше присоединенных событий, чтобы сделать их более доступными для общего элемента модели в [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].      - <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>Присоединенные события и перенаправленные события базового элемента доступ к своим и восходящей и туннелирования версии перенаправленных событий также совместно использовать данные события.</xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.KeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.KeyUp?displayProperty=fullName> Это может повлиять на обрабатываемых характеристиках события при перемещении по маршруту события. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).       Ключ может находиться в состояния вверх и переключаемых или в нажатом и включенном состоянии одновременно. Для этого необходимо определить, является ли ключ вверх или вниз не сложнее, чем проверка <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>значение в виде числового значения.</xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> Вместо этого следует проверить значение, рассматривая их как перечисление флагов. Используйте `AND` сравнения первого бита. Кроме того, используйте вспомогательные свойства <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, и <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>для определения ли заданного ключа является вверх, вниз или переключаемых.</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  syntax:
    content: 'public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  - System.Windows.Input.KeyboardEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.Input.KeyboardEventArgs.KeyboardDevice
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> класса."
  syntax:
    content: public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);
    parameters:
    - id: keyboard
      type: System.Windows.Input.KeyboardDevice
      description: "Логическое устройство клавиатуры связанное с этим событием."
    - id: inputSource
      type: System.Windows.PresentationSource
      description: "Входной источник."
    - id: timestamp
      type: System.Int32
      description: "Время, когда был выполнен ввод."
    - id: key
      type: System.Windows.Input.Key
      description: "Ключ, который ссылается событие."
  overload: System.Windows.Input.KeyEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  id: DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает ключ, который является частью Неработающая клавиша композиции для создания одного объединенного символа."
  remarks: "Неисправная клавиша, при нажатии, выводятся знака не видны, но указывает, что ключ для объединения с символов, полученных при нажатой клавише Далее буквы.  Если <xref:System.Windows.Input.KeyEventArgs.Key%2A>возвращает <xref:System.Windows.Input.Key?displayProperty=fullName>, это свойство можно использовать, чтобы получить фактический ключ, введенный.</xref:System.Windows.Input.Key?displayProperty=fullName> </xref:System.Windows.Input.KeyEventArgs.Key%2A>"
  syntax:
    content: public System.Windows.Input.Key DeadCharProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "Ключ, который является частью Неработающая клавиша композиции для создания одного объединенного символа."
  overload: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  id: ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает клавишу клавиатуры ссылается событие, если ключ будет обрабатываться [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]."
  syntax:
    content: public System.Windows.Input.Key ImeProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> Ссылается событие."
  overload: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InputSource
  id: InputSource
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает источник ввода, предоставившего данный ввод."
  syntax:
    content: public System.Windows.PresentationSource InputSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "Входной источник."
  overload: System.Windows.Input.KeyEventArgs.InputSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Вызывает обработчики событий в зависимости от типа, что может повысить эффективность системы событий."
  remarks: "Эта реализация приводит Универсальный обработчик <xref:System.Windows.Input.KeyEventHandler>, а затем вызывает его.</xref:System.Windows.Input.KeyEventHandler> Дополнительные сведения о шаблоне реализации и его см <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>и [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "Универсальный обработчик для вызова в зависимости от типа."
    - id: genericTarget
      type: System.Object
      description: "Целевой объект, чтобы вызвать данный обработчик."
  overload: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsDown
  id: IsDown
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает значение, указывающее, является ли ключ, который ссылается событие в отключенном состоянии."
  remarks: "<xref:System.Windows.Input.Keyboard>Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</xref:System.Windows.Input.Keyboard> Например <xref:System.Windows.Input.Keyboard.IsKeyDown%2A>метод возвращает, является ли указанный ключ не работает.</xref:System.Windows.Input.Keyboard.IsKeyDown%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the IsDown property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisdown)]"
  syntax:
    content: public bool IsDown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если ключ не работает; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.KeyEventArgs.IsDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  id: IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает значение, указывающее, является ли данный клавиатуры ссылается событие повторяющихся ключей."
  remarks: ''
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the IsRepeat property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisrepeat)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisrepeat)]"
  syntax:
    content: public bool IsRepeat { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если ключ повторно; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  Нет значения по умолчанию."
  overload: System.Windows.Input.KeyEventArgs.IsRepeat*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  id: IsToggled
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает значение, указывающее, является ли данный ссылается событие в переключенное состояние."
  remarks: "<xref:System.Windows.Input.Keyboard>Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</xref:System.Windows.Input.Keyboard> Например <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>метод возвращает, является ли указанная клавиша.</xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the IsToggled property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsistoggled)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsistoggled)]"
  syntax:
    content: public bool IsToggled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данная клавиша; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  Нет значения по умолчанию."
  overload: System.Windows.Input.KeyEventArgs.IsToggled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsUp
  id: IsUp
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает значение, указывающее, является ли ключ, который ссылается событие в актуальном состоянии."
  remarks: "<xref:System.Windows.Input.Keyboard>Класс также предоставляет сведения о состоянии клавиши на клавиатуре.</xref:System.Windows.Input.Keyboard>  Например, <xref:System.Windows.Input.Keyboard.IsKeyUp%2A>метод возвращает, находится ли указанный. аргумент</xref:System.Windows.Input.Keyboard.IsKeyUp%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the IsUp property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisup)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisup)]"
  syntax:
    content: public bool IsUp { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если ключ. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  Нет значения по умолчанию."
  overload: System.Windows.Input.KeyEventArgs.IsUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.Key
  id: Key
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает клавишу клавиатуры, связанный с событием."
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key> key.  \n  \n [!code-cs[keydown#KeyDownSample](~/add/codesnippet/csharp/KeyDown/Window1.xaml.cs#keydownsample)]\n [!code-vb[keydown#KeyDownSample](~/add/codesnippet/visualbasic/KeyDown/Window1.xaml.vb#keydownsample)]"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> Ссылается событие."
  overload: System.Windows.Input.KeyEventArgs.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  id: KeyStates
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает состояние клавиши клавиатуры, связанной с этим событием."
  remarks: "Ключ может находиться в состояния вверх и переключаемых или в нажатом и включенном состоянии одновременно. Для этого необходимо определить, является ли ключ вверх или вниз не сложнее, чем проверка ключевые значения в виде числового значения. Вместо этого следует проверить значение, рассматривая их как перечисление флагов. Используйте `AND` сравнения первого бита. Кроме того, используйте вспомогательные свойства <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, и <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>для определения ли заданного ключа является вверх, вниз или переключаемых.</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  example:
  - "The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the KeyStates of the key and the <xref:System.Windows.Input.KeyStates> enumeration value.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargskeystatesdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargskeystatesdown)]"
  syntax:
    content: public System.Windows.Input.KeyStates KeyStates { get; }
    return:
      type: System.Windows.Input.KeyStates
      description: "Состояние ключа."
  overload: System.Windows.Input.KeyEventArgs.KeyStates*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  id: SystemKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Получает клавишу ссылается событие, если ключ будет обрабатываться системой."
  syntax:
    content: public System.Windows.Input.Key SystemKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref> Ссылается событие."
  overload: System.Windows.Input.KeyEventArgs.SystemKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.KeyboardEventArgs
  isExternal: false
  name: System.Windows.Input.KeyboardEventArgs
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
- uid: System.Windows.Input.KeyboardDevice
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardDevice
  nameWithType: KeyboardDevice
  fullName: System.Windows.Input.KeyboardDevice
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.KeyEventArgs.IsDown
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyStates
  parent: System.Windows.Input
  isExternal: false
  name: KeyStates
  nameWithType: KeyStates
  fullName: System.Windows.Input.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
- uid: System.Windows.Input.KeyEventArgs.#ctor*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: KeyEventArgs.InvokeEventHandler
- uid: System.Windows.Input.KeyEventArgs.IsDown*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
- uid: System.Windows.Input.KeyEventArgs.IsRepeat*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
