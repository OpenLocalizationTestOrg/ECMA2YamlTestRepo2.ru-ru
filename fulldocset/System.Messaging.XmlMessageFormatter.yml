### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "Сериализует и десериализует объекты в или из тела сообщения, в формате XML, основанный на определении схемы XSD."
  remarks: "XmlMessageFormatter является модуль форматирования по умолчанию, экземпляр <xref:System.Messaging.MessageQueue>использует для сериализации сообщений, записанных в эту очередь.</xref:System.Messaging.MessageQueue> При создании экземпляра <xref:System.Messaging.MessageQueue>, создается и связанные с <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> экземпляр XmlMessageFormatter</xref:System.Messaging.MessageQueue> Можно задать другой форматер, создав его в коде и присвоив его <xref:System.Messaging.MessageQueue.Formatter%2A>свойству <xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Formatter%2A>       Экземпляр XmlMessageFormatter очереди по умолчанию может использоваться для записи в очередь, но не может использоваться для чтения из очереди, пока не будет задан либо <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>или <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>Свойства форматирования.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Либо можно задать одно или оба этих значения в экземпляре по умолчанию модуль форматирования, или можно создать новый экземпляр модуля форматирования и установить эти значения автоматически, передав их в качестве аргументов в соответствующее <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>конструктор.</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       При указании <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>вместо <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, существование типа проверяется во время компиляции, а не время чтения, что уменьшает вероятность ошибок.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>требуется полное, указав его имя сборки каждой записи.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Кроме того при работе с несколькими параллельными версиями номер версии должен также быть добавлен к имени типа цели также.       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>И <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Это позволяет модулю форматирования интерпретировать текст сообщения.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Только один из них должно быть задано при чтении из очереди, но можно задать и оба. Набор типов является совокупный набор из двух свойств. Решение, какое свойство использовать специфична для вашего приложения. Если тело сообщения содержит тип, схема которой не соответствует типам в массиве для каждого свойства, выдается исключение при чтении сообщения.       XmlMessageFormatter является критически важным компонентом слабо связанных обмена сообщениями на основе XML. Утилита XSD.exe, использующая формат XML используется для создания XML-схем, например при использовании программы для сериализации класса, используемого приложением. Этот класс должен иметь конструктор по умолчанию.       Формат используется повторно в обратном процессе когда программа создает класс на основе схемы распространении для описания своего класса данных. Использование служебной программы и XML-схемы, он создает позволяет избежать перераспределения DLL-файлов, каждый раз при перекомпиляции класса после изменения реализации этого класса. При условии, что схема не изменяется на стороне клиента или сервера, на обеих сторонах другие изменения не влияют на другой."
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> класса без целевого набора типов."
  remarks: "Эта перегрузка конструктора используется наиболее часто при записи в очередь, как типы целевого объекта не являются необходимыми при записи.       Для чтения сообщения из очереди, используя экземпляр <xref:System.Messaging.XmlMessageFormatter>создан с помощью этого конструктора, необходимо задать <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>или <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>таким образом, чтобы модуль форматирования известно, какие типы нужно попытаться выполнить десериализацию.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       При создании нового <xref:System.Messaging.MessageQueue>, значение по умолчанию <xref:System.Messaging.XmlMessageFormatter>, создается экземпляр без набора типов назначения.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> С помощью модуля форматирования, созданный с помощью этого конструктора, необходимо задать типы целевых объектов для данного экземпляра модуля форматирования, если требуется выполнить чтение из очереди."
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> класса, устанавливая типы назначения, переданный как массив значений string (полное)."
  remarks: "Конструкторы с параметрами типов целевых объектов чаще всего используются при чтении из очереди. При записи, не требуется указывать типы целевых объектов.       Эта перегрузка <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>конструктора задает <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>свойства значения массива, переданного через `targetTypeNames` параметр.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Установка этого свойства позволяет <xref:System.Messaging.MessageQueue>с помощью этого <xref:System.Messaging.XmlMessageFormatter>экземпляр для чтения сообщений, содержащих объекты при наличии типов.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Как <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Это позволяет модулю форматирования интерпретировать текст сообщения.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Только один из них должно быть задано при чтении из очереди, но можно задать и оба. Набор типов является совокупный набор из двух свойств. Решение, какую из них использовать вашего приложения. Если тело сообщения содержит тип, схема которой не соответствует типам в массиве для каждого свойства, исключение будет создаваться во время чтения."
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "Массив объектов типа <xref:System.String>, задающее набор возможных типов, которые будут десериализованы при использовании средства форматирования из полученного сообщения.</xref:System.String> Эти значения должны быть полными, например, «MyNamespace.MyOrders, MyOrdersAssemblyName»."
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> класса, устанавливая типы назначения, переданный как массив типов объектов."
  remarks: "Конструкторы с параметрами типов целевых объектов чаще всего используются при чтении из очереди. При записи, не требуется указывать типы целевых объектов.       Эта перегрузка <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>конструктора задает <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>свойства значения массива, переданного через `targetTypes` параметр.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> Установка этого свойства позволяет <xref:System.Messaging.MessageQueue>с помощью этого <xref:System.Messaging.XmlMessageFormatter>экземпляр для чтения сообщений, содержащих объекты данного типа.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       Как <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Это позволяет модулю форматирования интерпретировать текст сообщения.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Только один из них должно быть задано при чтении из очереди, но можно задать и оба. Набор типов является совокупный набор из двух свойств. Решение, какую из них использовать вашего приложения. Если тело сообщения содержит тип, схема которой не соответствует типам в массиве для каждого свойства, исключение будет создаваться во время чтения.       При указании <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>вместо <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, существование типа проверяется во время компиляции, а не время чтения, что уменьшает вероятность ошибок.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>требуется полное, указав его имя сборки каждой записи.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Кроме того при работе с несколькими параллельными версиями номер версии должен также быть добавлен к имени типа цели также.       При использовании <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>, можно добавить каждого объекта (например, `MyClass`) в список, в результате, показано в следующем примере кода C#.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "Массив объектов типа <xref:System.Type>, задающее набор возможных типов, которые будут десериализованы при использовании средства форматирования из полученного сообщения.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Определяет, является ли модуль форматирования может десериализовать сообщение."
  remarks: "При вызове CanRead форматирования пытается определить, если содержимое сообщения, может выполнить десериализацию. Модуль форматирования может десериализовать сообщение, только если тип в теле сообщения имеет ту же схему, как один из типов в массиве, представленном <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>Свойства.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Возвращает CanRead `false` в следующих двух случаях:-сообщение не был отформатирован с помощью <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      -Схема тела сообщения не между значениями, перечисленными в любом <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>или <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>свойство.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>И <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру какие типы объектов он должен иметь возможность десериализации.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Если какая-либо отсутствует в списке, еще не найден в сообщении, возвращает CanRead `false`."
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref> Для проверки."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если модуль форматирования XML может выполнить десериализацию сообщения. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ни <> </> *настроек и не <> </> *настроек свойства."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Создает экземпляр <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> класса, чтение и запись свойства (наборы типов назначения) совпадают с текущим <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> экземпляра."
  remarks: "Этот метод создает копию модуля форматирования и инициализирует его свойства на значения <xref:System.Messaging.XmlMessageFormatter>объекта.</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Объект, свойства которого идентичны свойствам данного <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> экземпляра, но с метаданными, которые не определяют его как экземпляр класса модуля форматирования."
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Считывает содержимое из данного сообщения и создает объект, содержащий десериализованное сообщение."
  remarks: "Как <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Должен быть задан один из этих свойств, прежде чем можно десериализовать сообщение.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Типы целевого объекта не обязательно для записи в очередь."
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>, В формате XML для десериализации."
    return:
      type: System.Object
      description: "Десериализованное сообщение."
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Ни <> </> *настроек и не <> </> *настроек свойства.       - или - экземпляр, сериализованный в теле сообщения не соответствует одной из схем, представленных типами в <> </> *настроек и <> </> *настроек свойств."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Указывает набор возможных типов, которые будут десериализованы при использовании средства форматирования из полученного сообщения."
  remarks: "Оба TargetTypeNames и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> Это позволяет модулю форматирования интерпретировать текст сообщения.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Только один из них должно быть задано при чтении из очереди, но можно задать и оба. Набор типов является совокупный набор из двух свойств. Решение, какое свойство использовать специфична для вашего приложения. Если тело сообщения содержит тип, схема которой не соответствует типам в массиве для каждого свойства, выдается исключение при чтении сообщения.       TargetTypeNames требует каждой записи полное, указав его имя сборки. Кроме того при работе с несколькими параллельными версиями номер версии должен также быть добавлен к имени типа цели также.       Типы целевых объектов только при чтении из очереди. TargetTypeNames и <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>свойства не нужно устанавливать при записи в очередь.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "Массив объектов типа <xref:System.String>, указывающее типы объектов, десериализуемых из тела сообщения при чтении сообщения.</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Свойство TargetTypeNames <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Указывает набор возможных типов, которые будут десериализованы при использовании средства форматирования из полученного сообщения."
  remarks: "Как <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>и TargetTypes указывают форматеру схемы, чтобы попытаться найти совпадение при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> Это позволяет модулю форматирования интерпретировать текст сообщения.       Экземпляр, сериализованный в теле сообщения должен согласовываться с одной из схем, представленных в массиве типов. При чтении сообщения, используя <xref:System.Messaging.MessageQueue.Receive%2A>метод, метод создает объект типа, который соответствует схеме и считывает тело сообщения в ней.</xref:System.Messaging.MessageQueue.Receive%2A>       Только один из них должно быть задано при чтении из очереди, но можно задать и оба. Набор типов является совокупный набор из двух свойств. Решение, какое свойство использовать специфична для вашего приложения. Если тело сообщения содержит тип, схема которой не соответствует типам в массиве для каждого свойства, выдается исключение при чтении сообщения.       Типы целевых объектов только при чтении из очереди. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>И TargetTypes свойства не нужно устанавливать при записи в очередь.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       При указании TargetTypes вместо <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>, существование типа проверяется во время компиляции, а не время чтения, что уменьшает вероятность ошибок.</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       При использовании TargetTypes, можно добавить каждого объекта (например, `MyClass`) в список, как показано в коде C# `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "Массив объектов типа <xref:System.Type>, указывающее типы объектов, десериализуемых из тела сообщения при чтении сообщения.</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Свойство TargetTypes <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Сериализует объект в текст сообщения."
  remarks: "Типы целевых объектов для записи в очередь, поскольку они должны быть при чтении не обязательно. <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>Или <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>свойство используется модулем форматирования только при десериализации сообщения.</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter>Использует <xref:System.Xml.Serialization.XmlSerializer>класс, определяющий, что может быть сериализован.</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> Только открытые поля и открытые свойства могут быть сериализованы. Структуры, структуры с массивами и массивы структур являются сериализуемыми, пока они не используется стиль шифрования с протоколом SOAP."
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref> Которого <xref:System.Messaging.Message.Body*>свойство будет содержать сериализованный объект.</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "<xref:System.Object>Для сериализации в теле сообщения.</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
