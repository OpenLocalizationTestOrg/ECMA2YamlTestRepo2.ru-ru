### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Реализует структуру данных для описания свойства как пути под другим свойством или под типом-владельцем. Пути свойств используются в привязках данных к объектам, а также в раскадровках и временных шкалах для анимации."
  remarks: "Этот класс содержит строку <xref:System.Windows.PropertyPath.Path%2A>и список свойств зависимостей, которые вставляются <xref:System.Windows.PropertyPath.PathParameters%2A>в строку<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath поддерживает два режима работы: **режим источника** описывает путь к свойству, используемый в качестве источника для другой операции. Этот режим используется по <xref:System.Windows.Data.Binding>класс для поддержки привязки данных.</xref:System.Windows.Data.Binding>       **Режим целевого** описывает путь к свойству, которое будет задано как целевое свойство. Этот режим используется для поддержки раскадровки и временная шкала задания.       Например `Background.Opacity` представляет собой двухэтапный путь. Этот путь подразумевает: во-первых, найти `Background` свойство объекта, получается значение, `Background` свойство имеет значение, а затем получить значение `Opacity` свойства для этого объекта.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## Использование атрибута XAML ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## значений XAML *propertyPath* строку, вычисляемое для быть путем простого или сложного свойства.       Синтаксис для задания PropertyPath [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] универсальным, но сложные и рассматривается в отдельном разделе [XAML синтаксическая конструкция PropertyPath](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> класса."
  remarks: "Этот конструктор имеет два разных применения в зависимости от того, является ли он используется для пути свойства режим источника привязки, или режим целевого пути свойства для раскадровки цели.       Если с помощью этого <xref:System.Windows.PropertyPath>в режиме исходного кода для привязки, `parameter` является строка, представляющая имя свойства, или может быть строка, описывающая «промежуточный» путь к свойству в [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] объектной модели объекта, который используется как источник привязки.</xref:System.Windows.PropertyPath> Для привязки пути свойства символ, «шаг», точка (.). Также поддерживаются ссылки индексаторов (включая множественные индексаторы и разграничение типа). Дополнительные сведения о синтаксисе строки как используемые <xref:System.Windows.Data.Binding>см. в разделе <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> Свойство, используемое как источник привязки не должны быть свойством зависимостей. Если привязка, ссылочное свойство, заданное необходимо чтения и записи. Также Обратите внимание, что целевой объект привязки для свойства зависимостей. Дополнительные сведения см. в разделе [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md).       Если с помощью этого <xref:System.Windows.PropertyPath>в целевом режиме один шаг пути для раскадровки цели `parameter` обычно предоставляется в качестве типа <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> Можно также указать строку, являющуюся <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> Любой из этих иметь тот же результат, так как он внутренне хранятся в виде строки. Предоставленный <xref:System.Windows.DependencyProperty>преобразуется в строке с помощью <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>Поддерживает формат полного имени для свойства зависимостей, поэтому можно указать *typeName*.* propertyName* полное имя строки свойства зависимостей конструктор PropertyPath в коде.</xref:System.Windows.Markup.DependencyPropertyConverter> Полный путь для идентификатора свойства зависимости имеет отношения от сложного пути. Комплексное path <xref:System.Windows.PropertyPath>вместо должна быть создана с <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>конструктор.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Путь к свойству, описывающий путь к [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] свойства или единственным свойством зависимостей."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> класс с параметрами и указанный путь строку токена."
  remarks: "Эта подпись обычно используется только для режима целевой <xref:System.Windows.PropertyPath>использования сложных путями.</xref:System.Windows.PropertyPath>       Этот конструктор поддерживает `params` для `pathParameters` аргумента конструктора. Таким образом можно задать содержимое `pathParameters` как ряд аргументов конструктора, разделенных запятыми, которые заполняют массив, а не вводить измерения массива и заполните его с `pathParameters` элементов. Каждый элемент в указании должен быть один из следующих типов: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Дополнительные сведения о требованиях к параметров см. в разделе <xref:System.Windows.PropertyPath.Path%2A>и <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Строка, указывающая <xref:System.Windows.PropertyPath.Path*>, в формате токенами.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Массив объектов, который задает <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Возвращает или задает строку, описывающую путь."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Строка, описывающая путь."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Возвращает список параметров для использования, когда путь относится к индексированным параметрам."
  remarks: "Свойства <xref:System.Windows.PropertyPath>обычно устанавливается посредством конструкторов.</xref:System.Windows.PropertyPath> Для настройки PathParameters, <xref:System.Windows.PropertyPath.%23ctor%2A>Конструктор особенно удобно, так как `pathParameters` используется в качестве аргумента конструктора `params`, то есть не требуется для создания или измерения массива для построения.</xref:System.Windows.PropertyPath.%23ctor%2A> Просто укажите каждый элемент массива как дополнительный параметр.       Если последнее свойство, которое является целевым <xref:System.Windows.Freezable>тип, что значения будут клонированы.</xref:System.Windows.Freezable> Дополнительные сведения см. в разделе [Общие](~/add/includes/ajax-current-ext-md.md).       Само вычисление цепочки свойств выполняет раскадровки для анимации. В <xref:System.Windows.PropertyPath>уровня, проверка не выполняется для убедитесь, что все подключения действия пути.</xref:System.Windows.PropertyPath> Например, можно создать путь к свойству, которое имеет <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>в качестве первого шага и <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>на втором этапе.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Путь свойства будет выполнен, если фактического применения в качестве целевого объекта, так как тип кисти, заливки, но <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>не имеет <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>Свойства.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Недопустимые пути свойств не без вмешательства пользователя. Дополнительные сведения см. в разделе [Общие](../Topic/Storyboards%20Overview.md).       **XAML:** при использовании <xref:System.Windows.PropertyPath>для описания ссылка на свойство в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], как строка, которую вы укажите значение атрибута, сначала обрабатывается преобразователя типов (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Этот преобразователь типов, затем обрабатывает строку и на основе ее синтаксиса вызывается один из <xref:System.Windows.PropertyPath>сигнатур конструкторов.</xref:System.Windows.PropertyPath> Это косвенное обращение через преобразователь типов, обработки значения атрибута обычно является использование <xref:System.Windows.PropertyPath>в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], вместо того чтобы объявление <xref:System.Windows.PropertyPath>объекта элемента, а затем применяются определенные значения для атрибутов такие как <xref:System.Windows.PropertyPath.Path%2A>и PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Дополнительные сведения см. в разделе [XAML синтаксическая конструкция PropertyPath](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## Использование членов XAML текст <xref:System.Windows.PropertyPath>типа обычно не заданы в прямой [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] синтаксис.</xref:System.Windows.PropertyPath> См. заметки."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "Список параметров."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
