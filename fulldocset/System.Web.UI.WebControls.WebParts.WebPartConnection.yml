### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "Предоставляет объект, который включает два <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> элементы управления для создания подключения. Этот класс не наследуется."
  remarks: "В наборе элементов управления веб-частей соединение является соединением или связью между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart>(или другой сервер или пользователь) элементов управления, которая позволяет им совместно использовать данные.</xref:System.Web.UI.WebControls.WebParts.WebPart> Эта возможность совместного использования данных позволяет подключенных элементов управления для использования в предоставляют более широкие возможности, предоставляемые изолированных элементов управления. Например если один элемент управления предоставляет данные почтовых индексов, а другой элемент управления может считывать данные и предоставлять сведения о погоде на основании почтовый индекс, затем возможность подключения двух элементов управления обеспечивает дополнительные преимущества пользователей. Чтобы расширить этот пример, может быть создан других элементов управления, также отображают сведения, основанные на почтовом индексе, например, элемент управления со ссылками на местных новостей, и все эти элементы управления, которые могут работать с данными почтовый индекс могут обмениваться данными с одного элемента управления, который предоставляет почтовый индекс. Конечные пользователи приложений веб-части можно создавать и управлять соединениями все совместимые элементы управления напрямую из браузера с помощью стандартного пользовательского интерфейса подключений (UI), предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>управления или с помощью пользовательского интерфейса, предоставленного разработчиком.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       В этом обзоре WebPartConnection класс — это общие основных сведений для создания подключения. Дополнительные сведения о конкретных компонентах и требования, связанные с созданием подключений см [Общие сведения о подключениях веб частей](~/add/includes/ajax-current-ext-md.md), или разделе ссылочных классов и упомянутые ниже примеры кода. Существует несколько основных аспектов подключения веб-частей: - два <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Каждое подключение веб-частей, состоит из двух элементов управления. Возможно, для элемента управления для участия в несколько соединений одновременно, но каждое отдельное подключение состоит ровно из двух элементов управления. Элементы управления могут быть производными напрямую <xref:System.Web.UI.WebControls.WebParts.WebPart>базового класса, или они могут быть другие серверные элементы управления, включая элементы управления ASP.NET, пользовательских серверных элементов управления и пользовательские элементы управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Элементы управления, которые не являются производными от <xref:System.Web.UI.WebControls.WebParts.WebPart>класса, если поместить в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны, будут автоматически переноситься с <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>объекта во время выполнения, что позволяет им наследовать <xref:System.Web.UI.WebControls.WebParts.WebPart>класса и функции, как во время выполнения <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Элементов управления, расположенных в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зон.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> Оба <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления и других видов серверный элемент управления должен находиться в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны, чтобы иметь возможность участвовать в подключениях веб-частей (и многие другие возможности веб-частей).</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      -Получатели и поставщики. В каждой связи веб-частей имеется два элемента управления: поставщик данных и объекта-получателя данных. Поставщик передает данные получателю через указанный метод обратного вызова, возвращает данные в форме интерфейса. (Пример создания и указания метода обратного вызова см. в разделе примеров в этом разделе.) Этот метод обратного вызова называется точкой подключения поставщика. Сведения из этой точки подключения (его «имя», идентификатор и тип возвращенный интерфейс) находятся в <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объект, связанный с элементом управления поставщика.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Потребитель получает данные через указанный метод, который может принимать экземпляр интерфейса. Этот метод называется клиентская точка подключения, а также содержатся сведения о точке подключения (имя, идентификатор и тип интерфейса) в <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объект, связанный с элементом управления потребителя.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>      -Совместимые элементы управления или допустимый преобразователь. Для работы подключения потребителя и поставщика должны быть совместимыми (то есть, что их методы точки указанное соединение будет работать с тем же типом интерфейса) или же должен быть <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект, способный преобразовывать тип, предлагаемый поставщиком, в тип, принимаемый потребителем.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -WebPartConnection объект. Для подключения к существует должен быть экземпляр WebPartConnection класса, который содержит ссылки на поставщика и потребителя элементы управления, а также сведения об их точках подключения. Поставщика и потребителя, несовместимы и используйте вместо <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта подключения, соединение ссылается на преобразователь.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>      -Средство для установки соединения. После совместимые потребителя и поставщика элементов управления были правильно разработанные с помощью методов точек подключения и размещены в зоне, а объект WebPartConnection доступен, последний необходимым действием является сможет создать подключение. Это может произойти в том для пользователей, для создания подключения через пользовательский Интерфейс. Если поместить `<asp:connectionszone>` элемента на странице, а другая — необходимых компонентов подключения в месте, во время выполнения пользователь может переключить страницу в режим отображения подключения, щелкните команду подключения в меню команд поставщика или потребителя и пользовательский Интерфейс для подключения (на основе <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>управления) будут отображаться.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Посредством этого пользовательского интерфейса то пользователь может инициировать соединение. Другой способ инициировать подключения — сделать это программными средствами. В любом случае через пользовательский Интерфейс или программно, базовому методу, инициирующую соединение, одинаково. Приложение вызывает <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод (или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод, если использование класса transformer) на <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления, передавая ей поставщика, потребитель и их соответствующие объекты точек подключения, а метод возвращает объект WebPartConnection.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>       Класс WebPartConnection определяет объект, инкапсулирующий необходимые сведения о соединении между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Класс почти полностью состоит из свойства, относящиеся к сведениям о определенного соединения. Некоторые свойства связаны управления получателя в соединении. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>Ссылается на свойство, потребитель самого элемента управления и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>свойство ссылается на идентификатор получателя.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>Объект, который содержит сведения о точке подключения потребителя, ссылается потребителя <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>свойство.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>Свойство ссылается на идентификатор <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекта.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A> Все эти свойства соединения, связанные с потребитель должен иметь значение, присвоенное их для создания соединения.       WebPartConnection класс также содержит некоторые свойства, связанные с управлением поставщика в соединении, и они соответствуют свойствам для объекта-получателя. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>Свойство ссылается на поставщика самого элемента управления, при <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>свойство ссылается на его идентификатор.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>Ссылок на свойства <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объекта и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>свойство ссылается на идентификатор точки подключения поставщика.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>       Несколько свойств связаны с состоянием соединения. <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>Свойство указывает, является ли подключение активно (в настоящее время обмена данными) или неактивные (данные все еще подключены, но не активно общего доступа).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>Свойство указывает, является ли подключение общим (доступно всем пользователям страницы) или подключения для конкретного пользователя и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>свойство указывает, является ли элемент управления статические (объявленный в разметке страницы и таким образом постоянных) или динамической (создавать программно, это означает, что он может быть удален).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> класса."
  remarks: "Конструктор WebPartConnection является открытым, чтобы средство синтаксического анализа ASP.NET можно создавать экземпляры, при объявлении подключение в разметке веб-страницы; Этот конструктор не предназначен для использования в коде разработчика.       Если вы хотите создать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>программно, следует использовать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>или <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Эти методы обрабатывают многие сведения о создании соединения и возвращать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       Конструктор WebPartConnection <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>класс задает значения <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>Свойства `true`.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Таким образом, состояние нового подключения по умолчанию должен быть статическим (что означает, что он объявлен в разметке, содержащего веб-страницы) и общих (видны всем пользователям страницы). Это произойдет в случае, при добавлении соединения в типичном сценарии путем объявления подключения в разметке страницы с `<asp:webpartconnection>` элемента. Однако в других случаях соединение будет иметь различные значения для этих свойств. Например при добавлении подключения программным способом, создав объект подключения в коде, и пользователь просматривает страницу в области персонализации пользователя по умолчанию, соединение создается как динамические, user(visible only to the specific user) подключение.      Настроек [!NOTE] настроек <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>и <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>свойства доступны только для чтения, а эти свойства, которые определяют тип подключения задаются внутренним образом <xref:System.Web.UI.WebControls.WebParts.WebPartManager>элемента управления в зависимости от того, как создается подключение (декларативно в разметке страницы или программно с помощью кода или пользовательского интерфейса).</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> объект, выполняющий функции управления получателя в соединении."
  remarks: "Каждое соединение веб-частей состоит из двух элементов управления с общими данными. Один элемент управления функционирует как поставщик данных, а другой элемент управления действует как потребитель, получения и обработки данных от поставщика. Свойство потребитель получает ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPart>управления действующего в качестве объекта-получателя в связи соединения.</xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> , представляющий элемент управления веб-частей, выступающего в качестве получателя в подключении."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Длина <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>свойство имеет значение&0;.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает объект, который служит в качестве точки подключения для элемента управления, выступающего в качестве получателя в подключении."
  remarks: "Один из необходимых действий по созданию подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления является создание точек подключения для каждого элемента управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Точки подключения потребителя является объект, содержащий сведения о подключении к элементу управления, действующего в качестве потребителя. В исходном коде потребителя, один из методов должен быть идентифицирован с `ConnectionConsumer` атрибута. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>Объект, связанный с элементом управления получателя содержит подробные сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и какой тип интерфейса метода могут получать.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Этот набор сведений о получателе, метод формирования подключений и тип интерфейса, который он поддерживает совместно формируют точки подключения потребителя.       По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекта можно подключиться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объект за раз.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Получатель может иметь несколько методов, идентифицированных как возможные точки подключения получателя, но получатель может участвовать только в одном подключении объекта-получателя (поэтому только одной из точек подключения потребителя может быть активна) одновременно. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>могут подключаться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объектов.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>атрибута.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> связанный с элементом управления потребителя в подключении."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, выполняющего роль точки подключения потребителя для этого подключения."
  remarks: "Для статического подключения, объявленного в разметке веб-страницы, разработчики могут указать, какие точки подключения потребителя, которая будет использоваться для подключения путем присвоения значения для `ConsumerConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не присваивается атрибут <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>используется значение свойства.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       При создании динамических подключений (программный), обычно не устанавливайте значение свойства ConsumerConnectionPointID. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления, передавая ей потребителя и соединения с потребителем точки объекты (а также другие необходимые параметры) и этот метод определяет правильный идентификатор для точки подключения потребителя.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>метод не требуется задать значение свойства ConsumerConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      Настроек [!NOTE] настроек можно определить идентификатор точки подключения, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart>или другого серверного элемента управления как получатель.</xref:System.Web.UI.WebControls.WebParts.WebPart> Необходимо определить метод в получателе, который получает экземпляр интерфейса, предоставляемого элементом управления поставщика или преобразователем. Чтобы определить метод, его необходимо пометить `ConnectionConsumer` атрибута кода. При добавлении этого атрибута, можно добавить параметр необязательное строковое значение, который используется в качестве идентификатора для объекта-получателя <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекта.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> При указании значения для необязательного параметра ID, это значение становится значением свойства ConsumerConnectionPointID для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>используется значение свойства.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор подключения потребителя точки."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает значение свойства для подключения, которое ссылается на идентификатор <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления действующего в качестве получателя для этого подключения."
  remarks: "Значение свойства ConsumerID является обязательным при создании подключения между <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Если значение не присваивается свойству, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления пытается активировать соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор элемента управления, действующего в качестве потребителя в соединении."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает идентификатор <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> объекта."
  remarks: "Каждый <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объект имеет уникальное значение, присвоенное свойству идентификатора.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Это позволяет обеспечить способ различать несколько подключений.       При создании статического соединения, объявив `<asp:webpartconnection>` элемент на веб-странице и не присвоить значение `ID` атрибут для соединения, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления пытается активировать соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>       Когда <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления создает новое динамическое подключение, он вызывает метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>метод, чтобы создать уникальный идентификатор для подключения.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> в данный момент объект установленного и осуществлять обмен данными между ее элементы управления поставщика и потребителя."
  remarks: "Свойство IsActive указывает состояние <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Когда соединение находится в этом состоянии, элементы управления поставщика и потребителя в соединении взаимодействующих и иметь возможность обмена данными через общий интерфейс или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Когда пользователь просматривает отображенную страницу, которая содержит установленное подключение в обычном режиме, соединение обычно активно (если она не активировалось из-за некоторых конфликт или по другой причине, при загрузке страницы). На ранних стадиях жизненного цикла страниц и элементов управления, свойство имеет значение `false`. Сразу после активации соединения <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>события <xref:System.Web.UI.WebControls.WebParts.WebPartManager>элемента вызывается событие.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> В частности, активируется соединение после потребитель извлеченные экземпляр указанного интерфейса от поставщика или <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Полезно знать, активен ли соединение в ситуациях, где может быть конфликтов или проблем синхронизации из-за нескольких подключений на странице. Например, если отсутствует какой-то конфликт между двумя подключениями <xref:System.Web.UI.WebControls.WebParts.WebPartManager>элемент управления имеет параметр не активации одно из подключений, чтобы избежать конфликта.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подключение активно; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> объект является видимым для всех пользователей или только для текущего пользователя."
  remarks: "Как и в случае с отдельными <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления, <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объект может быть общим или экземпляра пользователя.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPart> Общий экземпляр означает, что соединение является видимым для всех пользователей веб-страницы и экземпляр пользователя означает, что соединение является видимым только для определенного пользователя.       Как правило способ добавить подключение к странице определяет ли общий доступ к подключению. Если соединение объявляется в разметке веб-страницы, то общий доступ к подключению и IsShared значение свойства `true`. Кроме того Если веб-страницы в общую область персонализации при добавлении соединения, соединения также совместно. Как правило, когда пользователь вводит `<asp:connectionszone>` пользовательский интерфейс (UI), чтобы добавить соединение, страницы находится в области персонализации пользователя, поэтому соединения не используется совместно и IsShared свойство имеет значение `false`."
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если соединение является общим; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref> объявленный в разметке веб-страницы или программном создании объекта."
  remarks: "Подключения между элементами управления веб-частей может быть статической или динамической. Статического подключения, объявленного в разметке веб-страницы с помощью `<asp:WebPartConnection>` элемента. Динамические подключения создаются программно или когда пользователь создает подключения через пользовательский интерфейс (UI), определяемый <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>управления.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>       Статические подключения являются общими объектами, это означает, что они доступны для всех пользователей веб-страницы. Кроме того, по существу постоянных так, как, например статический <xref:System.Web.UI.WebControls.WebParts.WebPart>элемента управления, они не могут быть удалены без возможности восстановления.</xref:System.Web.UI.WebControls.WebParts.WebPart>      Настроек [!NOTE] настроек хотя статический объект подключения не может быть окончательно удален, он может быть окончательно отключен. В этом случае отключенный объект будет существовать на сервере, но конечный пользователь никогда не будет учитывать существование объекта на странице."
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подключение является статическим. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления, который выступает в роли поставщика в соединении веб-частей."
  remarks: "Каждое подключение веб-частей состоит из двух <xref:System.Web.UI.WebControls.WebParts.WebPart>элементы управления--потребителя и поставщика--и свойство поставщика возвращает ссылку на элемент управления поставщика в соединении.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Как и его партнер по подключению (элемент управления получателя) управления поставщика требуется для установления соединения. При создании соединения программным путем или путем его объявления в постоянном формате страницы, необходимо указать элемент управления в качестве поставщика для подключения."
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> , выступающий в качестве поставщика данных."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Длина <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>значение свойства равно нулю.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает объект, который служит в качестве точки подключения для <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления действующего в качестве поставщика для подключения."
  remarks: "Один из необходимых действий по созданию подключения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления является создание точек подключения для каждого элемента управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Точка подключения поставщика — это объект, содержащий сведения о подключении к элементу управления, выступающий в роли поставщика. В исходном коде поставщика, один из методов должен быть идентифицирован с `ConnectionProvider` атрибута. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>, Связанный с поставщиком управления содержит сведения о методе и атрибуте, включая идентификатор метода, отображаемое имя для использования в пользовательском интерфейсе (UI), и введите экземпляр интерфейса метод может возвращать для элемента управления получателя.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Этот набор сведений о поставщике, его метод для создания подключений и тип интерфейса, которые он предоставляет совместно формируют точки подключения поставщика.       По умолчанию <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>могут подключаться только к одной <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объект за раз.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Получатель может иметь несколько методов, идентифицированных как возможные точки подключения получателя, но получатель может участвовать только в одном подключении объекта-получателя (поэтому только одной из точек подключения потребителя может быть активна) одновременно. Напротив <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>могут подключаться к любому количеству <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объектов по умолчанию.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Например управления поставщика, который предоставляет почтовый индекс может быть подключен к нескольким пользовательским элементам управления, которые используют почтовый индекс для создания различных типов данных, на основании почтового индекса, например данных о погоде, новости и т. д. Это поведение по умолчанию можно изменить путем переопределения <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>свойство <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>атрибута.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> связанные с элементом управления поставщика в соединении."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает значение свойства для подключения, которое ссылается на идентификатор объекта, выполняющего роль точки подключения поставщика для этого подключения."
  remarks: "Для статического подключения, объявленного в разметке веб-страницы, разработчики могут указать, какая точка подключения поставщика, которая будет использоваться для подключения путем присвоения значения для `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента. Если значение не присваивается атрибут <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>используется значение свойства.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       При создании динамических подключений (программный), обычно не устанавливайте значение свойства ProviderConnectionPointID. Можно просто вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager>контроля, передав ему поставщика и соединения с поставщиком точек объекты (а также другие обязательные параметры), и этот метод определяет правильный идентификатор для точки подключения поставщика.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> Аналогичным образом, при отключении, можно вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>метод не требуется задать значение свойства ProviderConnectionPointID.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>      Настроек [!NOTE] настроек идентификатор точки подключения поставщика может быть определен, при указании <xref:System.Web.UI.WebControls.WebParts.WebPart>или другого серверного элемента управления, как поставщик.</xref:System.Web.UI.WebControls.WebParts.WebPart> Необходимо определить метод обратного вызова в поставщике, который обслуживает экземпляр интерфейса, содержащего данные с потребителем. Чтобы определить метод, его необходимо пометить `ConnectionProvider` атрибута кода. При добавлении этого атрибута, можно добавить параметр необязательное строковое значение, который используется в качестве идентификатора поставщика <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объекта.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> При указании значения для необязательного параметра ID, это значение становится значением свойства ProviderConnectionPointID для соединения. Если не указать значение идентификатора <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления назначается идентификатор по умолчанию при создании объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор для объекта точки подключения поставщика."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает значение свойства для подключения, которое ссылается на идентификатор <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления действующего в качестве поставщика для этого подключения."
  remarks: "Свойство ProviderID значение является обязательным при создании соединения между двумя <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> Если значение не присваивается свойству, исключение создается, если <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления пытается активировать соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartManager>"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор элемента управления поставщика."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Переопределяет унаследованный <xref:System.Object.ToString*>метод и возвращает тип короткое имя для объекта соединения.</xref:System.Object.ToString*>"
  remarks: "Этот метод используется преимущественно разработчиками элементов управления. Это улучшает отображение объектов подключения в режиме конструктора с помощью короткое имя типа, а не полное имя типа. Тем не менее метод может вызываться в любой точке кода которой вы хотите знать имя типа объекта соединения."
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Строка, содержащая имя тип short (неопределенную) <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> объект, используемый для преобразования данных между двумя точками подключения, в противном случае несовместимые соединение веб-частей."
  remarks: "Соединение веб-частей можно двумя способами, в которых можно подключиться подключения элементов управления поставщика и потребителя. Они могут подключаться напрямую, через соответствующие <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>объекты и типом интерфейса, понятную для обоих элементов управления.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Или, если они не являются совместимыми, они могут подключаться косвенно, с помощью <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект, который преобразует экземпляр интерфейса от поставщика в тип, принимаемый объектом-получателем.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       При необходимости преобразователя как часть подключения, свойства Transformer предоставляет ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Преобразователь для подключения декларативно в разметке веб-страницы, можно добавить путем добавления тега для пользовательского преобразователя (или одного из преобразователей, предоставленных в наборе элементов управления веб-частей) в `<asp:WebPartConnection>` элемент. Можно также добавить преобразователь программным образом, создание его экземпляр в коде и вызов <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager>элемента управления для создания подключения, передавая ей объект преобразователя, а также обязательные параметры.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает коллекцию <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> объекты, которые используются внутренне набором элементов управления веб-частей."
  remarks: "Преобразователи, свойство никогда не предназначен для использования разработчиками. Для доступа к преобразователя, ассоциированные с соединением, разработчикам следует всегда использовать <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>свойство.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>       Свойство преобразователями внутренне используется элементом управления веб-частей, равным позволяют разработчикам объявлять элементы класса transformer в `<asp:webpartconnection>` элемент в разметке веб-страницы."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref> содержащий <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> объектов."
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
