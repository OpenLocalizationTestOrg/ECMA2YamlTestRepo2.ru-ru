### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.SemaphoreAccessRule
  id: SemaphoreAccessRule
  children:
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  langs:
  - csharp
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule
  fullName: System.Security.AccessControl.SemaphoreAccessRule
  type: Class
  summary: "Представляет набор прав доступа, разрешенных или запрещенных для пользователя или группы. Этот класс не наследуется."
  remarks: "Класс SemaphoreAccessRule является одним из набора классов, которые платформа .NET Framework предоставляет для управления безопасность управления доступом Windows для именованного системного семафора. Обзор этих классов и их связь с базовых структур управления доступом Windows см. в разделе <xref:System.Security.AccessControl.SemaphoreSecurity>.</xref:System.Security.AccessControl.SemaphoreSecurity>      Настроек [!NOTE] настроек Windows, безопасность управления доступом имеет смысл только для именованных семафоров системы. Если <xref:System.Threading.Semaphore>представляет локальный семафор, контроля доступа не имеет значения.</xref:System.Threading.Semaphore>       Чтобы получить список правил, применяемый в текущий момент именованный семафор, используйте <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>метода <xref:System.Security.AccessControl.SemaphoreSecurity>объекта, а затем использовать его <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>метод, чтобы получить коллекцию объектов SemaphoreAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>       Объекты SemaphoreAccessRule не соответствуют одному с записями управления доступом в базовом списке управления доступом на уровне пользователей (DACL). При получении набора из всех правил доступа для семафора, этот набор содержит минимальное число правил, необходимых для выражения все записи управления доступом.      Настроек [!NOTE] настроек изменить базовые элементы управления доступом, при добавлении и удалении правил. Сведения в правилах объединяются по возможности для поддержания наименьшее количество записей управления доступом. Таким образом при чтении текущий список правил, он может не совпадать список всех правил, которые были добавлены.       Объекты SemaphoreAccessRule можно используйте для указания прав доступа, чтобы разрешить или запретить пользователю или группе. SemaphoreAccessRule, объект всегда представляет доступ разрешен или запрещен доступ, никогда не оба.       Чтобы применить правило для именованного системного семафора, используйте <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>метода <xref:System.Security.AccessControl.SemaphoreSecurity>объекта.</xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> Изменить <xref:System.Security.AccessControl.SemaphoreSecurity>объекта с помощью его методов, чтобы добавить правило, а затем использовать <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>метод, чтобы заново присоединить объект безопасности.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>      Настроек [!IMPORTANT] настроек изменения, внесенные в <xref:System.Security.AccessControl.SemaphoreSecurity>объекта не влияют на уровни доступа именованный семафор, пока не будет вызван <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>метод назначения объекта измененного безопасности именованный семафор.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>       Объекты SemaphoreAccessRule являются неизменяемыми. Безопасность для семафора изменяются с помощью методов <xref:System.Security.AccessControl.SemaphoreSecurity>класс для добавления или удаления правил; при этом изменяются базовые элементы управления доступом.</xref:System.Security.AccessControl.SemaphoreSecurity>      Настроек [!NOTE] настроек безопасности объектов синхронизации не поддерживается для Windows 98 или Windows Millennium Edition."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_3_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_3_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> класса, указав пользователя или группу, применяется правило, права доступа и ли разрешен или запрещен с заданными правами доступа."
  remarks: "Чтобы ввести <xref:System.Threading.Semaphore>, например путем вызова <xref:System.Threading.WaitHandle.WaitOne%2A>метод, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>доступ.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Выходов из семафора, путем вызова <xref:System.Threading.Semaphore.Release%2A>метод, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>доступ.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>"
  syntax:
    content: public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "Пользователь или группа, в которой применяется правило. Должен иметь тип <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> или тип, такой как <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> может привести к типу <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "Побитовое сочетание <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> значения, указывающие права разрешен или запрещен."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Один из <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> значения, указывающие, разрешенных или запрещенных права."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Задает недопустимое значение.       - или - <code>type</code> задает недопустимое значение."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - <code>eventRights</code> равно нулю."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>не является типом <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> ни тип, такой как <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> может привести к типу <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> класса, указав имя пользователя или группы, применяется правило, права доступа и ли разрешен или запрещен с заданными правами доступа."
  remarks: "Чтобы ввести <xref:System.Threading.Semaphore>, например путем вызова <xref:System.Threading.WaitHandle.WaitOne%2A>метод, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>доступ.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Выходов из семафора, путем вызова <xref:System.Threading.Semaphore.Release%2A>метод, пользователь должен иметь <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>доступ.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>       Этот конструктор является эквивалентно созданию <xref:System.Security.Principal.NTAccount>объекта, передавая `identity` для <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>конструктор и передачи только что созданный <xref:System.Security.Principal.NTAccount>объект <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29>конструктор.</xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.SemaphoreAccessRule> objects. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/09c19b7f-c894-4d29-aa9f-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/09c19b7f-c894-4d29-aa9f-_1.vb)]"
  syntax:
    content: public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "Имя пользователя или группы, применяется правило."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "Побитовое сочетание <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> значения, указывающие права разрешен или запрещен."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Один из <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> значения, указывающие, разрешенных или запрещенных права."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Задает недопустимое значение.       - или - <code>type</code> задает недопустимое значение."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>равно нулю."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - <code>identity</code> представляет собой строку нулевой длины.       - или - <code>identity</code> имеет длину более 512 символов."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  id: SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Получает права разрешает или запрещает правило доступа."
  remarks: "<xref:System.Security.AccessControl.SemaphoreAccessRule>объекты являются неизменяемыми.</xref:System.Security.AccessControl.SemaphoreAccessRule> Можно создать новое правило доступа другого пользователя, других прав или другой <xref:System.Security.AccessControl.AccessControlType>, но нельзя изменять существующее правило доступа.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the SemaphoreRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.SemaphoreSecurity> object. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_1_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_1_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }
    return:
      type: System.Security.AccessControl.SemaphoreRights
      description: "Побитовое сочетание <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> значения, указывающие права разрешает или запрещает правило доступа."
  overload: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.SemaphoreRights
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
