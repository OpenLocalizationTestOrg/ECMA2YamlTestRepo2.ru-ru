### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoStream
  id: CryptoStream
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Clear
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: CryptoStream
  nameWithType: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  summary: "Определяет поток, который связывает потоки данных с криптографическими преобразованиями."
  remarks: "Общеязыковая среда выполнения использует поточно ориентированный подход для шифрования. Основа такого подхода является CryptoStream. Все криптографические объекты, реализующие CryptoStream могут быть соединены вместе с любыми объектами, реализующими <xref:System.IO.Stream>, поэтому потоковые выходные данные из одного объекта может подаваться на вход другого объекта.</xref:System.IO.Stream> Промежуточный результат (выходные данные из первого объекта) не должны храниться отдельно.      Настроек [!IMPORTANT] настроек этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно путем вызова его <xref:System.Security.Cryptography.CryptoStream.Clear%2A>метод, который в свою очередь вызывает его <xref:System.IDisposable>реализации.</xref:System.IDisposable> </xref:System.Security.Cryptography.CryptoStream.Clear%2A> Для удаления типа непосредственно вызвать его <xref:System.Security.Cryptography.CryptoStream.Clear%2A>метод в `try` / `catch` блока.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>       Следует всегда явно закрыть объект CryptoStream после завершения его использования, вызвав <xref:System.Security.Cryptography.CryptoStream.Clear%2A>метод.</xref:System.Security.Cryptography.CryptoStream.Clear%2A>  Исключение сохраняет базовый поток и указывает, что все оставшиеся блоки данных, обрабатываемый объект CryptoStream.  Однако при возникновении исключения перед вызовом метода <xref:System.IO.Stream.Close%2A>метод CryptoStream объект не может быть закрыт.</xref:System.IO.Stream.Close%2A>  Чтобы убедиться, что <xref:System.IO.Stream.Close%2A>метод всегда вызывается, поместите вызов <xref:System.Security.Cryptography.CryptoStream.Clear%2A>метода в `finally` блока `try` / `catch` инструкции.</xref:System.Security.Cryptography.CryptoStream.Clear%2A> </xref:System.IO.Stream.Close%2A>"
  example:
  - "The following example demonstrates how to use a CryptoStream to encrypt a string. This method uses <xref:System.Security.Cryptography.RijndaelManaged> class with the specified <xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A> and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>).  \n  \n [!code-cs[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/csharp/t-system.security.crypto_78_1.cs)]\n [!code-vb[Cryptography.Rijndael.Create.File#1](~/add/codesnippet/visualbasic/t-system.security.crypto_78_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class CryptoStream : System.IO.Stream
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> класса с целевой поток данных, преобразования и режим потока."
  remarks: "Любой объект, который является производным от <xref:System.IO.Stream>может быть передан в `stream` параметр.</xref:System.IO.Stream> Любой объект, реализующий <xref:System.Security.Cryptography.ICryptoTransform>(такие как <xref:System.Security.Cryptography.HashAlgorithm>) могут быть переданы в `transform` параметр.</xref:System.Security.Cryptography.HashAlgorithm> </xref:System.Security.Cryptography.ICryptoTransform>"
  syntax:
    content: public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Поток для выполнения криптографического преобразования."
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: "Криптографическое преобразование, должна выполняться в потоке."
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: "Один из <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> значения."
  overload: System.Security.Cryptography.CryptoStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>является недопустимым."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает значение, указывающее, является ли текущий <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> доступен для чтения."
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий поток доступен для чтения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает значение, указывающее, возможен ли поиск в текущем <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Поиск не включен в <xref:System.Security.Cryptography.CryptoStream>, поэтому этот метод всегда возвращает `false`.</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает значение, указывающее, является ли текущий <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> доступен для записи."
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий поток доступен для записи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref>."
  remarks: "Этот метод создает оболочку для вызова этого типа <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>реализации.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>       Вызов `Dispose` позволяет ресурсы, используемые <xref:System.Security.Cryptography.CryptoStream>перераспределить для других целей.</xref:System.Security.Cryptography.CryptoStream> Дополнительные сведения о `Dispose`, в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md)"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые `Dispose()` метод и `Finalize` метод. `Dispose()`вызывает защищенный `Dispose(Boolean)` метод с параметром disposing установлено значение `true`. `Finalize`вызывает `Dispose` с disposing равен `false`.       При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Security.Cryptography.CryptoStream>ссылки.</xref:System.Security.Cryptography.CryptoStream> Этот метод вызывает `Dispose()` метод для каждого объекта, на который указывает ссылка."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Security.Cryptography.CryptoStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Очищает все буферы для текущего потока и вызывает запись всех буферизованных данных в базовое устройство."
  remarks: "Сброс потока его основной кодировщик не очищается, пока не будет явно вызван метод Flush или <xref:System.IO.Stream.Close%2A>.</xref:System.IO.Stream.Close%2A> Параметр <xref:System.IO.StreamWriter.AutoFlush%2A>для `true` означает, что данные будут сброшены из буфера в поток, но состояние кодировщика при этом не сбрасывается.</xref:System.IO.StreamWriter.AutoFlush%2A> Это позволяет кодировщику сохранить свое состояние (частичные символы), чтобы правильно выполнить кодировку следующего блока знаков. Этот сценарий влияет на кодировки UTF8 и UTF7, в которых определенные символы кодируются только после кодировщик получает соседние знаки.      Настроек [!NOTE] настроек следует вызывать либо <xref:System.IO.Stream.Close%2A>метода или <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>метод для завершения очистки буфера.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A> </xref:System.IO.Stream.Close%2A>"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Асинхронно очищает все буферы для текущего потока, вызывает запись всех буферизованных данных в базовое устройство и отслеживает запросы отмены."
  remarks: "Должно начинаться при вызове FlushAsync с `await` (C#) или `Await` оператора (Visual Basic) для приостановки выполнения метода до завершения задачи. Дополнительные сведения см. в разделе [асинхронное программирование с использованием ключевых слов Async и Await](~/add/includes/ajax-current-ext-md.md).       Если операция отменена до ее завершения, возвращаемая задача содержит <xref:System.Threading.Tasks.TaskStatus>значение <xref:System.Threading.Tasks.Task.Status%2A>Свойства.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Токен для отслеживания запросов отмены. Значение по умолчанию — <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию очистки."
  overload: System.Security.Cryptography.CryptoStream.FlushAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Поток был удален."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Обновляет базовый источник данных или хранилище текущим содержимым буфера, а затем очищает буфер."
  remarks: "Вызов <xref:System.IO.Stream.Close%2A>метод будет вызывать FlushFinalBlock.</xref:System.IO.Stream.Close%2A> Если вы не вызываете <xref:System.IO.Stream.Close%2A>, вызовите FlushFinalBlock для выполнения очистки буфера.</xref:System.IO.Stream.Close%2A> Вызов FlushFinalBlock только после завершения всех действий потока."
  syntax:
    content: public void FlushFinalBlock ();
    parameters: []
  overload: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Ключ поврежден, что может привести к неправильному заполнению потока."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Текущий поток недоступен для записи.       - или - уже преобразовало последний блок."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает значение, указывающее, записан ли последний буферный блок в базовый поток."
  remarks: "Это свойство имеет значение `true` при <xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>вызывается метод.</xref:System.Security.Cryptography.CryptoStream.FlushFinalBlock%2A>"
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если последний блок передан. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает длину в байтах потока."
  remarks: "Это свойство существует только для поддержки наследования от <xref:System.IO.Stream>и не может использоваться.</xref:System.IO.Stream>"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Данное свойство не поддерживается."
  overload: System.Security.Cryptography.CryptoStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Данное свойство не поддерживается."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает или задает позицию в текущем потоке."
  remarks: "Это свойство существует только для поддержки наследования от <xref:System.IO.Stream>и не может использоваться.</xref:System.IO.Stream>"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Данное свойство не поддерживается."
  overload: System.Security.Cryptography.CryptoStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Данное свойство не поддерживается."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Считывает последовательность байтов из текущего потока и перемещает позицию внутри потока на число считанных байтов."
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Массив байтов. Более `count` байтов, считанных из текущего потока и сохраняются в `buffer`."
    - id: offset
      type: System.Int32
      description: "Смещение байтов в `buffer` с которого начинается сохранение данных, считанных из текущего потока."
    - id: count
      type: System.Int32
      description: "Максимальное число байтов, считываемых из текущего потока."
    return:
      type: System.Int32
      description: "Общее число байтов, считанных в буфер. Это может быть меньше запрошенного числа байтов, если что столько байтов в настоящее время недоступны, или нуль, если достигнут конец потока."
  overload: System.Security.Cryptography.CryptoStream.Read*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> Связанный с текущим <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> объект не соответствует базового потока.  Например, это исключение возникает при использовании <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> с основной поток, который доступен только для записи."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code> Меньше нуля.       - или - <code> count </code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Thesum из <code> count </code> и <code> offset </code> длиннее, чем длина буфера."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Асинхронно считывает последовательность байтов из текущего потока, перемещает позицию внутри потока на число считанных байтов и отслеживает запросы отмены."
  remarks: "Должно начинаться при вызове ReadAsync с `await` (C#) или `Await` оператора (Visual Basic) для приостановки выполнения метода до завершения задачи. Дополнительные сведения см. в разделе [асинхронное программирование с использованием ключевых слов Async и Await](~/add/includes/ajax-current-ext-md.md).       Если операция отменена до ее завершения, возвращаемая задача содержит <xref:System.Threading.Tasks.TaskStatus>значение <xref:System.Threading.Tasks.Task.Status%2A>Свойства.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Буфер для записи данных."
    - id: offset
      type: System.Int32
      description: "Смещение байтов в `buffer` с которого начинается запись данных из потока."
    - id: count
      type: System.Int32
      description: "Максимальное число байтов для чтения."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Токен для отслеживания запросов отмены. Значение по умолчанию — <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Задача, представляющая асинхронную операцию чтения. Значение объекта задачи <code> TResult </code> параметр содержит общее число байтов, считанных в буфер. Результат может быть меньше запрошенного числа байтов, если число текущих доступных байтов меньше запрошенного числа, или он может быть 0 (нуль), если был достигнут конец потока."
  overload: System.Security.Cryptography.CryptoStream.ReadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>или <code>count</code> является отрицательным значением."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Сумма <code> offset </code> и <code> count </code> больше, чем длина буфера."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Поток не поддерживает чтение."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Поток был удален."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Поток в данный момент используется предыдущей операцией чтения."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Задает позицию в текущем потоке."
  remarks: "Этот метод существует только для поддержки наследования от <xref:System.IO.Stream>и не может использоваться.</xref:System.IO.Stream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Смещение байтов относительно `origin` параметра."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Объект <xref:System.IO.SeekOrigin>, задающий опорную точку, используемую для получения новой позиции.</xref:System.IO.SeekOrigin>"
    return:
      type: System.Int64
      description: "Этот метод не поддерживается."
  overload: System.Security.Cryptography.CryptoStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Этот метод не поддерживается."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Задает длину текущего потока."
  remarks: "Это свойство существует только для поддержки наследования от <xref:System.IO.Stream>и не может использоваться.</xref:System.IO.Stream>"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Требуемая длина текущего потока в байтах."
  overload: System.Security.Cryptography.CryptoStream.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Это свойство существует только для поддержки наследования от <xref:System.IO.Stream>и не может использоваться.</xref:System.IO.Stream>"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Записывает последовательность байтов в текущий <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> и перемещает текущую позицию внутри потока на число записанных байтов."
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Массив байтов. Этот метод копирует `count` байтов из `buffer` в текущий поток."
    - id: offset
      type: System.Int32
      description: "Смещение байтов в `buffer` с которого начинается копирование байтов в текущий поток."
    - id: count
      type: System.Int32
      description: "Число байтов для записи в текущий поток."
  overload: System.Security.Cryptography.CryptoStream.Write*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> Связанный с текущим <xref href=&quot;System.Security.Cryptography.CryptoStream&quot;> </xref> объект не соответствует базового потока.  Например, это исключение возникает при использовании <xref href=&quot;System.Security.Cryptography.CryptoStreamMode&quot;> </xref> с основной поток, который доступен только для чтения."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code> Меньше нуля.       - или - <code> count </code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Сумма <code> count </code> и <code> offset </code> длиннее, чем длина буфера."
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Асинхронно записывает последовательность байтов в текущий поток, перемещает текущую позицию внутри потока на число записанных байтов и отслеживает запросы отмены."
  remarks: "Должно начинаться при вызове WriteAsync с `await` (C#) или `Await` оператора (Visual Basic) для приостановки выполнения метода до завершения задачи. Дополнительные сведения см. в разделе [асинхронное программирование с использованием ключевых слов Async и Await](~/add/includes/ajax-current-ext-md.md).       Если операция отменена до ее завершения, возвращаемая задача содержит <xref:System.Threading.Tasks.TaskStatus>значение <xref:System.Threading.Tasks.Task.Status%2A>Свойства.</xref:System.Threading.Tasks.Task.Status%2A> </xref:System.Threading.Tasks.TaskStatus>"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Буфер, из которого записываются данные."
    - id: offset
      type: System.Int32
      description: "Отсчитываемое от нуля смещение в `buffer` с которого начинается запись байтов в поток."
    - id: count
      type: System.Int32
      description: "Максимальное число байтов для записи."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Токен для отслеживания запросов отмены. Значение по умолчанию — <xref:System.Threading.CancellationToken.None*>.</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию записи."
  overload: System.Security.Cryptography.CryptoStream.WriteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>или <code>count</code> является отрицательным значением."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Сумма <code> offset </code> и <code> count </code> больше, чем длина буфера."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Поток не поддерживает запись."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Поток был удален."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Поток в данный момент используется предыдущей операцией записи."
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  nameWithType: CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(Stream,ICryptoTransform,CryptoStreamMode)
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  nameWithType: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.Security.Cryptography.CryptoStream.CanRead
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear()
  nameWithType: CryptoStream.Clear()
  fullName: System.Security.Cryptography.CryptoStream.Clear()
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: CryptoStream.Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(Boolean)
- uid: System.Security.Cryptography.CryptoStream.Flush
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush()
  nameWithType: CryptoStream.Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: CryptoStream.FlushAsync(CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock()
  nameWithType: CryptoStream.FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
  fullName: System.Security.Cryptography.CryptoStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Security.Cryptography.CryptoStream.Position
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
  fullName: System.Security.Cryptography.CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Read(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: CryptoStream.Seek(Int64,SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: CryptoStream.SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(Int64)
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: CryptoStream.Write(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.#ctor*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CryptoStream
  nameWithType: CryptoStream.CryptoStream
- uid: System.Security.Cryptography.CryptoStream.CanRead*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanRead
  nameWithType: CryptoStream.CanRead
- uid: System.Security.Cryptography.CryptoStream.CanSeek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanSeek
  nameWithType: CryptoStream.CanSeek
- uid: System.Security.Cryptography.CryptoStream.CanWrite*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: CanWrite
  nameWithType: CryptoStream.CanWrite
- uid: System.Security.Cryptography.CryptoStream.Clear*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Clear
  nameWithType: CryptoStream.Clear
- uid: System.Security.Cryptography.CryptoStream.Dispose*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Dispose
  nameWithType: CryptoStream.Dispose
- uid: System.Security.Cryptography.CryptoStream.Flush*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Flush
  nameWithType: CryptoStream.Flush
- uid: System.Security.Cryptography.CryptoStream.FlushAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushAsync
  nameWithType: CryptoStream.FlushAsync
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: FlushFinalBlock
  nameWithType: CryptoStream.FlushFinalBlock
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: HasFlushedFinalBlock
  nameWithType: CryptoStream.HasFlushedFinalBlock
- uid: System.Security.Cryptography.CryptoStream.Length*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Length
  nameWithType: CryptoStream.Length
- uid: System.Security.Cryptography.CryptoStream.Position*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Position
  nameWithType: CryptoStream.Position
- uid: System.Security.Cryptography.CryptoStream.Read*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Read
  nameWithType: CryptoStream.Read
- uid: System.Security.Cryptography.CryptoStream.ReadAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: ReadAsync
  nameWithType: CryptoStream.ReadAsync
- uid: System.Security.Cryptography.CryptoStream.Seek*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Seek
  nameWithType: CryptoStream.Seek
- uid: System.Security.Cryptography.CryptoStream.SetLength*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: SetLength
  nameWithType: CryptoStream.SetLength
- uid: System.Security.Cryptography.CryptoStream.Write*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: Write
  nameWithType: CryptoStream.Write
- uid: System.Security.Cryptography.CryptoStream.WriteAsync*
  parent: System.Security.Cryptography.CryptoStream
  isExternal: false
  name: WriteAsync
  nameWithType: CryptoStream.WriteAsync
