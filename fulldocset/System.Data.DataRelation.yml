### YamlMime:ManagedReference
items:
- uid: System.Data.DataRelation
  id: DataRelation
  children:
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  - System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  - System.Data.DataRelation.CheckStateForProperty
  - System.Data.DataRelation.ChildColumns
  - System.Data.DataRelation.ChildKeyConstraint
  - System.Data.DataRelation.ChildTable
  - System.Data.DataRelation.DataSet
  - System.Data.DataRelation.ExtendedProperties
  - System.Data.DataRelation.Nested
  - System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  - System.Data.DataRelation.ParentColumns
  - System.Data.DataRelation.ParentKeyConstraint
  - System.Data.DataRelation.ParentTable
  - System.Data.DataRelation.RaisePropertyChanging(System.String)
  - System.Data.DataRelation.RelationName
  - System.Data.DataRelation.ToString
  langs:
  - csharp
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
  type: Class
  summary: "Представляет связь «родители потомки» между двумя <xref href=&quot;System.Data.DataTable&quot;> </xref> объектов."
  remarks: "DataRelation используется для связи двух <xref:System.Data.DataTable>объектов друг с другом через <xref:System.Data.DataColumn>объектов.</xref:System.Data.DataColumn> </xref:System.Data.DataTable> Например в отношении клиентов и заказов таблицы Customers является родительским и таблица Orders является потомком связи. Это похоже на связь первичного ключа и внешнего ключа. Дополнительные сведения см. в разделе [перехода отношений DataRelation](~/add/includes/ajax-current-ext-md.md).       Создаются связи между соответствующими столбцами в родительской и дочерней таблицами. То есть <xref:System.Data.DataColumn.DataType%2A>значение для обоих столбцов должны быть одинаковыми.</xref:System.Data.DataColumn.DataType%2A>       Отношения также могут передавать различные изменения из родительской <xref:System.Data.DataRow>в ее дочерние строки.</xref:System.Data.DataRow> Чтобы контролировать, как изменяются значения в дочерних строках, добавьте <xref:System.Data.ForeignKeyConstraint>для <xref:System.Data.ConstraintCollection>из <xref:System.Data.DataTable>объекта.</xref:System.Data.DataTable> </xref:System.Data.ConstraintCollection> </xref:System.Data.ForeignKeyConstraint> <xref:System.Data.ConstraintCollection>Определяет, какое действие необходимо выполнить при значения в родительской таблице, удаления или обновления.</xref:System.Data.ConstraintCollection>       При создании DataRelation он сначала проверяет, что можно установить связь. После него добавляется к <xref:System.Data.DataRelationCollection>отношение поддерживается путем запрещения изменений, которые нарушат его.</xref:System.Data.DataRelationCollection> Период, когда создается и добавляется к DataRelation между <xref:System.Data.DataRelationCollection>, возможно для дополнительных изменений, которые будут сделаны в родительские или дочерние строки.</xref:System.Data.DataRelationCollection> Если в результате отношение, которое больше не является допустимым, создается исключение.      Настроек [!NOTE] настроек может произойти повреждение данных, если определено двунаправленная связь между двумя таблицами. Двунаправленная связь состоит из двух `DataRelation` объектов, использующих те же столбцы, с помощью переключения ролей родители потомки. Исключение не вызывается при `DataRelation` сохраняются объекты; тем не менее, могут привести к повреждению данных.       Объекты DataRelation содержатся в <xref:System.Data.DataRelationCollection>, к которому можно получить через <xref:System.Data.DataSet.Relations%2A>свойство <xref:System.Data.DataSet>и <xref:System.Data.DataTable.ChildRelations%2A> <xref:System.Data.DataTable.ParentRelations%2A>Свойства элемента <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.ParentRelations%2A> и</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataSet> </xref:System.Data.DataSet.Relations%2A> </xref:System.Data.DataRelationCollection>"
  example:
  - "The following example creates a new DataRelation and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataRelation Example#1](~/add/codesnippet/csharp/t-system.data.datarelation_1.cs)]\n [!code-vb[Classic WebData DataRelation Example#1](~/add/codesnippet/visualbasic/t-system.data.datarelation_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("RelationName")]

      [System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataRelationEditor, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.TypeConverter(typeof(System.Data.RelationshipConverter))]

      public class DataRelation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  id: '#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn,DataColumn)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DataRelation&quot;> </xref> класса с помощью указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref> имя и родительский и дочерний <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataRelation.DataRelation#1](~/add/codesnippet/csharp/c51592f7-179d-4737-b5e5-_1.cs)]\n [!code-vb[Classic WebData DataRelation.DataRelation#1](~/add/codesnippet/visualbasic/c51592f7-179d-4737-b5e5-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataRelation&quot;> </xref>. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumn
      type: System.Data.DataColumn
      description: "Родительский <xref href=&quot;System.Data.DataColumn&quot;> </xref> в связи."
    - id: childColumn
      type: System.Data.DataColumn
      description: "Дочерние <xref href=&quot;System.Data.DataColumn&quot;> </xref> в связи."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба <xref href=&quot;System.Data.DataColumn&quot;> </xref> содержит объекты <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Столбцы имеют различные типы данных таблицы не принадлежат тому же - или - <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  id: '#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn[],DataColumn[])
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DataRelation&quot;> </xref> класса с помощью указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref> именем и соответствующих массивов родительских и дочерних <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation2 Example#1](~/add/codesnippet/visualbasic/74c401a9-c184-4dbd-895b-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя отношения. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumns
      type: System.Data.DataColumn[]
      description: "Массив родительского <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
    - id: childColumns
      type: System.Data.DataColumn[]
      description: "Массив дочерних <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба <xref href=&quot;System.Data.DataColumn&quot;> </xref> содержит объекты <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "<xref href=&quot;System.Data.DataColumn&quot;> </xref> Объекты имеют разные данные типы - или - один или оба массива не состоят из различных столбцов из одной таблицы.       - Или - таблиц, не принадлежащие к тому же <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  id: '#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn,DataColumn,Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DataRelation&quot;> </xref> класса с помощью указанного имени, родительского и дочернего <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов и значение, указывающее, нужно ли создавать ограничения."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation1 Example#1](~/add/codesnippet/visualbasic/6c615cfd-3655-4658-a32b-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn parentColumn, System.Data.DataColumn childColumn, bool createConstraints);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя отношения. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumn
      type: System.Data.DataColumn
      description: "Родительский <xref href=&quot;System.Data.DataColumn&quot;> </xref> в связи."
    - id: childColumn
      type: System.Data.DataColumn
      description: "Дочерние <xref href=&quot;System.Data.DataColumn&quot;> </xref> в связи."
    - id: createConstraints
      type: System.Boolean
      description: "Значение, указывающее, создаются ли ограничения. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, если создаются ограничения. В противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба <xref href=&quot;System.Data.DataColumn&quot;> </xref> содержит объекты <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Столбцы имеют различные типы данных таблицы не принадлежат тому же - или - <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  id: '#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,DataColumn[],DataColumn[],Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DataRelation&quot;> </xref> класса с помощью указанного имени, соответствующих массивов родительских и дочерних <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов и значение, указывающее, нужно ли создавать ограничения."
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Data.DataRelation> and adds it to the <xref:System.Data.DataRelationCollection> of a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DataRelation.DataRelation3 Example#1](~/add/codesnippet/visualbasic/91b51f14-3ecf-436c-8f4c-_1.vb)]"
  syntax:
    content: public DataRelation (string relationName, System.Data.DataColumn[] parentColumns, System.Data.DataColumn[] childColumns, bool createConstraints);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя отношения. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentColumns
      type: System.Data.DataColumn[]
      description: "Массив родительского <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
    - id: childColumns
      type: System.Data.DataColumn[]
      description: "Массив дочерних <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
    - id: createConstraints
      type: System.Boolean
      description: "Значение, указывающее, нужно ли создавать ограничения. <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, если создаются ограничения. В противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Один или оба <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Столбцы имеют различные типы данных таблицы не принадлежат тому же - или - <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Этот конструктор предназначен для поддержки времени разработки в среде Visual Studio."
  remarks: "Любой <xref:System.Data.DataRelation>объектом, созданным с использованием этого конструктора необходимо добавить в коллекцию с <xref:System.Data.DataRelationCollection.AddRange%2A>метод внутри <xref:System.Data.DataTable.BeginInit%2A>и <xref:System.Data.DataTable.EndInit%2A>блока.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A> </xref:System.Data.DataRelationCollection.AddRange%2A> </xref:System.Data.DataRelation> Если этот конструктор не вызывается между <xref:System.Data.DataTable.BeginInit%2A>и <xref:System.Data.DataTable.EndInit%2A> <xref:System.NullReferenceException>произойдет.</xref:System.NullReferenceException> </xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A> Кроме того таблицы и столбцы с указанными именами должен существовать на момент вызова конструктора."
  syntax:
    content: public DataRelation (string relationName, string parentTableName, string childTableName, string[] parentColumnNames, string[] childColumnNames, bool nested);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя отношения. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentTableName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataTable&quot;> </xref> именно родительской таблицы связи."
    - id: childTableName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataTable&quot;> </xref> именно дочернюю таблицу для связи."
    - id: parentColumnNames
      type: System.String[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> имен объектов в родительской <xref href=&quot;System.Data.DataTable&quot;> </xref> отношения."
    - id: childColumnNames
      type: System.String[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> имен объектов в дочерних <xref href=&quot;System.Data.DataTable&quot;> </xref> отношения."
    - id: nested
      type: System.Boolean
      description: "Значение, указывающее, являются ли отношения вложенными."
  overload: System.Data.DataRelation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)'
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataRelation(String,String,String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Этот конструктор предназначен для поддержки времени разработки в среде Visual Studio."
  remarks: "Любой <xref:System.Data.DataRelation>объект, созданный с помощью этого конструктора затем необходимо добавить в коллекцию с <xref:System.Data.DataRelationCollection.AddRange%2A>.</xref:System.Data.DataRelationCollection.AddRange%2A> </xref:System.Data.DataRelation> Таблицы и столбцы с указанными именами должны существовать на момент вызова метода, или если <xref:System.Data.DataTable.BeginInit%2A>был вызван до вызова этого конструктора, таблицы и столбцы с указанными именами должен существовать на момент, <xref:System.Data.DataTable.EndInit%2A>называется.</xref:System.Data.DataTable.EndInit%2A> </xref:System.Data.DataTable.BeginInit%2A>"
  syntax:
    content: public DataRelation (string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, string[] parentColumnNames, string[] childColumnNames, bool nested);
    parameters:
    - id: relationName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataRelation&quot;> </xref>. Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (&quot;»), при добавлении созданного объекта присваивается имя по умолчанию <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
    - id: parentTableName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataTable&quot;> </xref> именно родительской таблицы связи."
    - id: parentTableNamespace
      type: System.String
      description: "Имя пространства имен родительской таблицы."
    - id: childTableName
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataTable&quot;> </xref> именно дочернюю таблицу для связи."
    - id: childTableNamespace
      type: System.String
      description: "Имя пространства имен дочерней таблицы."
    - id: parentColumnNames
      type: System.String[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> имен объектов в родительской <xref href=&quot;System.Data.DataTable&quot;> </xref> отношения."
    - id: childColumnNames
      type: System.String[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> имен объектов в дочерних <xref href=&quot;System.Data.DataTable&quot;> </xref> отношения."
    - id: nested
      type: System.Boolean
      description: "Значение, указывающее, являются ли отношения вложенными."
  overload: System.Data.DataRelation.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.CheckStateForProperty
  id: CheckStateForProperty
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: CheckStateForProperty()
  nameWithType: DataRelation.CheckStateForProperty()
  fullName: System.Data.DataRelation.CheckStateForProperty()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Этот метод поддерживает инфраструктуру .NET Framework и не предназначен для использования непосредственно из программного кода."
  syntax:
    content: protected void CheckStateForProperty ();
    parameters: []
  overload: System.Data.DataRelation.CheckStateForProperty*
  exceptions:
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Родительскую и дочернюю таблицы принадлежат различным <xref href=&quot;System.Data.DataSet&quot;> </xref> объектов.       - Или - один или несколько пар родительских и дочерних <xref href=&quot;System.Data.DataColumn&quot;> </xref> объекты имеют несовпадающие типы данных.       - Или - родительской и дочерней <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов идентичны."
  platform:
  - net462
- uid: System.Data.DataRelation.ChildColumns
  id: ChildColumns
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
  fullName: System.Data.DataRelation.ChildColumns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочерние <xref href=&quot;System.Data.DataColumn&quot;> </xref> объекты этого отношения."
  remarks: ''
  example:
  - "The following example gets the child <xref:System.Data.DataColumn> objects of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ChildColumns Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_7_1.vb)]"
  syntax:
    content: public virtual System.Data.DataColumn[] ChildColumns { get; }
    return:
      type: System.Data.DataColumn[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов."
  overload: System.Data.DataRelation.ChildColumns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ChildKeyConstraint
  id: ChildKeyConstraint
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
  fullName: System.Data.DataRelation.ChildKeyConstraint
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает <xref href=&quot;System.Data.ForeignKeyConstraint&quot;> </xref> для отношения."
  remarks: "Если нет связанного <xref:System.Data.ForeignKeyConstraint>существует для этой связи, он будет создан автоматически, а, на который указывает `ChildKeyConstraint`, при добавлении связи в коллекцию отношений.</xref:System.Data.ForeignKeyConstraint>"
  example:
  - "The following example sets the `UpdateRule`, `DeleteRule`, and `AcceptReject` rule for the `ForeignKeyConstraint` associated with the `DataRelation`.  \n  \n [!code-vb[Classic WebData DataRelation.ChildKeyConstraint Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_2_1.vb)]"
  syntax:
    content: public virtual System.Data.ForeignKeyConstraint ChildKeyConstraint { get; }
    return:
      type: System.Data.ForeignKeyConstraint
      description: "A <xref uid=&quot;langword_csharp_ForeignKeyConstraint&quot; name=&quot;ForeignKeyConstraint&quot; href=&quot;&quot;></xref>."
  overload: System.Data.DataRelation.ChildKeyConstraint*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ChildTable
  id: ChildTable
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ChildTable
  nameWithType: DataRelation.ChildTable
  fullName: System.Data.DataRelation.ChildTable
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочернюю таблицу этого отношения."
  remarks: ''
  example:
  - "The following example gets the child <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ChildTable Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_0_1.vb)]"
  syntax:
    content: public virtual System.Data.DataTable ChildTable { get; }
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> именно дочернюю таблицу для связи."
  overload: System.Data.DataRelation.ChildTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.DataSet
  id: DataSet
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: DataSet
  nameWithType: DataRelation.DataSet
  fullName: System.Data.DataRelation.DataSet
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает <xref href=&quot;System.Data.DataSet&quot;> </xref> к которому <xref href=&quot;System.Data.DataRelation&quot;> </xref> принадлежит."
  remarks: "<xref:System.Data.DataRelationCollection>Связанных с <xref:System.Data.DataSet>осуществляется с помощью <xref:System.Data.DataSet.Relations%2A>свойство <xref:System.Data.DataSet>объекта.</xref:System.Data.DataSet> </xref:System.Data.DataSet.Relations%2A> </xref:System.Data.DataSet> </xref:System.Data.DataRelationCollection>"
  example:
  - "The following example gets the <xref:System.Data.DataSet> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.DataSet Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_1_1.vb)]"
  syntax:
    content: public virtual System.Data.DataSet DataSet { get; }
    return:
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> к которому <xref href=&quot;System.Data.DataRelation&quot;> </xref> принадлежит."
  overload: System.Data.DataRelation.DataSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ExtendedProperties
  id: ExtendedProperties
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
  fullName: System.Data.DataRelation.ExtendedProperties
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает коллекцию, в которой хранятся настраиваемые свойства."
  remarks: "Используется для добавления пользовательской информации о ExtendedProperties <xref:System.Data.DataRelation>объекта.</xref:System.Data.DataRelation> Добавление информации с помощью метода Add. Получить данные с помощью метода Item.       Расширенные свойства должны иметь тип <xref:System.String>.</xref:System.String> Свойства не типа String не сохраняются при <xref:System.Data.DataRelation>записывается как XML.</xref:System.Data.DataRelation>"
  syntax:
    content: public System.Data.PropertyCollection ExtendedProperties { get; }
    return:
      type: System.Data.PropertyCollection
      description: "Объект <xref href=&quot;System.Data.PropertyCollection&quot;> </xref> , содержащий пользовательские свойства."
  overload: System.Data.DataRelation.ExtendedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.Nested
  id: Nested
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: Nested
  nameWithType: DataRelation.Nested
  fullName: System.Data.DataRelation.Nested
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Data.DataRelation&quot;> </xref> вложенные объекты."
  remarks: "Можно использовать <xref:System.Data.DataRelation>объектов для определения иерархические связи, например теми, которые указаны в формате XML.</xref:System.Data.DataRelation> Дополнительные сведения см. в разделе [вложение отношений DataRelation](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек Если <xref:System.Data.DataTable.TableName%2A>дочерней таблицы в отношении соответствует <xref:System.Data.DataColumn.ColumnName%2A>столбца в родительской таблице в связи, должен иметь значение false свойства Nested.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataTable.TableName%2A> Этого не требовалось с платформой .NET Framework версии 1.0."
  syntax:
    content: public virtual bool Nested { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, если <xref href=&quot;System.Data.DataRelation&quot;> </xref> объектов вложенным; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRelation.Nested*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Этот член поддерживает инфраструктуру .NET Framework и не предназначен для использования непосредственно из программного кода."
  syntax:
    content: protected void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);
    parameters:
    - id: pcevent
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "Ссылка на параметр."
  overload: System.Data.DataRelation.OnPropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentColumns
  id: ParentColumns
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
  fullName: System.Data.DataRelation.ParentColumns
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает или задает массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> объекты, которые являются родительские столбцы <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: ''
  example:
  - "The following example gets the array of <xref:System.Data.DataColumn> objects that function as parent columns for the relation.  \n  \n [!code-vb[Classic WebData DataRelation.ParentColumns Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_5_1.vb)]"
  syntax:
    content: public virtual System.Data.DataColumn[] ParentColumns { get; }
    return:
      type: System.Data.DataColumn[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> объекты, которые являются родительские столбцы <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  overload: System.Data.DataRelation.ParentColumns*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentKeyConstraint
  id: ParentKeyConstraint
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
  fullName: System.Data.DataRelation.ParentKeyConstraint
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> , гарантирующий, значения в столбце родительского <xref href=&quot;System.Data.DataRelation&quot;> </xref> являются уникальными."
  remarks: ''
  example:
  - "The following example gets the ParentKeyConstraint of a <xref:System.Data.DataRelation> object.  \n  \n [!code-vb[Classic WebData DataRelation.ParentKeyConstraint Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_6_1.vb)]"
  syntax:
    content: public virtual System.Data.UniqueConstraint ParentKeyConstraint { get; }
    return:
      type: System.Data.UniqueConstraint
      description: "Объект <xref href=&quot;System.Data.UniqueConstraint&quot;> </xref> , гарантирует, что значения в родительский столбец должны быть уникальными."
  overload: System.Data.DataRelation.ParentKeyConstraint*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.ParentTable
  id: ParentTable
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ParentTable
  nameWithType: DataRelation.ParentTable
  fullName: System.Data.DataRelation.ParentTable
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительский объект <xref href=&quot;System.Data.DataTable&quot;> </xref> этого <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: ''
  example:
  - "The following example gets the parent <xref:System.Data.DataTable> of a <xref:System.Data.DataRelation>.  \n  \n [!code-vb[Classic WebData DataRelation.ParentTable Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_3_1.vb)]"
  syntax:
    content: public virtual System.Data.DataTable ParentTable { get; }
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , является родительской таблицей этого отношения."
  overload: System.Data.DataRelation.ParentTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.RaisePropertyChanging(System.String)
  id: RaisePropertyChanging(System.String)
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: RaisePropertyChanging(String)
  nameWithType: DataRelation.RaisePropertyChanging(String)
  fullName: System.Data.DataRelation.RaisePropertyChanging(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Этот член поддерживает инфраструктуру .NET Framework и не предназначен для использования непосредственно из программного кода."
  syntax:
    content: protected void RaisePropertyChanging (string name);
    parameters:
    - id: name
      type: System.String
      description: "Ссылка на параметр."
  overload: System.Data.DataRelation.RaisePropertyChanging*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRelation.RelationName
  id: RelationName
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: RelationName
  nameWithType: DataRelation.RelationName
  fullName: System.Data.DataRelation.RelationName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает имя, используемое для извлечения <xref href=&quot;System.Data.DataRelation&quot;> </xref> из <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref>."
  remarks: "Используйте свойство RelationName для извлечения <xref:System.Data.DataRelation>из <xref:System.Data.DataRelationCollection>.</xref:System.Data.DataRelationCollection> </xref:System.Data.DataRelation>"
  example:
  - "The following example uses the RelationName property to retrieve a <xref:System.Data.DataRelation> from a <xref:System.Data.DataRelationCollection>.  \n  \n [!code-vb[Classic WebData DataRelation.RelationName Example#1](~/add/codesnippet/visualbasic/p-system.data.datarelati_4_1.vb)]"
  syntax:
    content: public virtual string RelationName { get; set; }
    return:
      type: System.String
      description: "Имя <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  overload: System.Data.DataRelation.RelationName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>или пустая строка (&quot;») был передан <xref href=&quot;System.Data.DataColumn&quot;> </xref> , <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  - type: System.Data.DuplicateNameException
    commentId: T:System.Data.DuplicateNameException
    description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref> Относится к коллекции, которая уже содержит <xref href=&quot;System.Data.DataRelation&quot;> </xref> с тем же именем."
  platform:
  - net462
- uid: System.Data.DataRelation.ToString
  id: ToString
  parent: System.Data.DataRelation
  langs:
  - csharp
  name: ToString()
  nameWithType: DataRelation.ToString()
  fullName: System.Data.DataRelation.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает <xref:System.Data.DataRelation.RelationName*>, если он существует.</xref:System.Data.DataRelation.RelationName*>"
  remarks: ''
  example:
  - "The following example uses the <xref:System.Data.DataColumn.ToString%2A> property to return the name of the <xref:System.Data.DataRelation> object.  \n  \n [!code-vb[Classic WebData DataRelation.ToString Example#1](~/add/codesnippet/visualbasic/m-system.data.datarelati_1_1.vb)]\n [!code-cs[Classic WebData DataRelation.ToString Example#1](~/add/codesnippet/csharp/m-system.data.datarelati_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Значение <xref:System.Data.DataRelation.RelationName*>Свойства.</xref:System.Data.DataRelation.RelationName*>"
  overload: System.Data.DataRelation.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DuplicateNameException
  parent: System.Data
  isExternal: false
  name: DuplicateNameException
  nameWithType: DuplicateNameException
  fullName: System.Data.DuplicateNameException
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn,DataColumn)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn[],DataColumn[])
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[])
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[])
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn,DataColumn,Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn,DataColumn,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,DataColumn[],DataColumn[],Boolean)
  nameWithType: DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,DataColumn[],DataColumn[],Boolean)
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String[],String[],Boolean)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation(String,String,String,String,String,String[],String[],Boolean)
  nameWithType: DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
  fullName: System.Data.DataRelation.DataRelation(String,String,String,String,String,String[],String[],Boolean)
- uid: System.Data.DataRelation.CheckStateForProperty
  parent: System.Data.DataRelation
  isExternal: false
  name: CheckStateForProperty()
  nameWithType: DataRelation.CheckStateForProperty()
  fullName: System.Data.DataRelation.CheckStateForProperty()
- uid: System.Data.DataRelation.ChildColumns
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
  fullName: System.Data.DataRelation.ChildColumns
- uid: System.Data.DataRelation.ChildKeyConstraint
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
  fullName: System.Data.DataRelation.ChildKeyConstraint
- uid: System.Data.ForeignKeyConstraint
  parent: System.Data
  isExternal: false
  name: ForeignKeyConstraint
  nameWithType: ForeignKeyConstraint
  fullName: System.Data.ForeignKeyConstraint
- uid: System.Data.DataRelation.ChildTable
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildTable
  nameWithType: DataRelation.ChildTable
  fullName: System.Data.DataRelation.ChildTable
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataRelation.DataSet
  parent: System.Data.DataRelation
  isExternal: false
  name: DataSet
  nameWithType: DataRelation.DataSet
  fullName: System.Data.DataRelation.DataSet
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.DataRelation.ExtendedProperties
  parent: System.Data.DataRelation
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
  fullName: System.Data.DataRelation.ExtendedProperties
- uid: System.Data.PropertyCollection
  parent: System.Data
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.Data.PropertyCollection
- uid: System.Data.DataRelation.Nested
  parent: System.Data.DataRelation
  isExternal: false
  name: Nested
  nameWithType: DataRelation.Nested
  fullName: System.Data.DataRelation.Nested
- uid: System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Data.DataRelation
  isExternal: false
  name: OnPropertyChanging(PropertyChangedEventArgs)
  nameWithType: DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
  fullName: System.Data.DataRelation.OnPropertyChanging(PropertyChangedEventArgs)
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.Data.DataRelation.ParentColumns
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
  fullName: System.Data.DataRelation.ParentColumns
- uid: System.Data.DataRelation.ParentKeyConstraint
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
  fullName: System.Data.DataRelation.ParentKeyConstraint
- uid: System.Data.UniqueConstraint
  parent: System.Data
  isExternal: false
  name: UniqueConstraint
  nameWithType: UniqueConstraint
  fullName: System.Data.UniqueConstraint
- uid: System.Data.DataRelation.ParentTable
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentTable
  nameWithType: DataRelation.ParentTable
  fullName: System.Data.DataRelation.ParentTable
- uid: System.Data.DataRelation.RaisePropertyChanging(System.String)
  parent: System.Data.DataRelation
  isExternal: false
  name: RaisePropertyChanging(String)
  nameWithType: DataRelation.RaisePropertyChanging(String)
  fullName: System.Data.DataRelation.RaisePropertyChanging(String)
- uid: System.Data.DataRelation.RelationName
  parent: System.Data.DataRelation
  isExternal: false
  name: RelationName
  nameWithType: DataRelation.RelationName
  fullName: System.Data.DataRelation.RelationName
- uid: System.Data.DataRelation.ToString
  parent: System.Data.DataRelation
  isExternal: false
  name: ToString()
  nameWithType: DataRelation.ToString()
  fullName: System.Data.DataRelation.ToString()
- uid: System.Data.DataRelation.#ctor*
  parent: System.Data.DataRelation
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation.DataRelation
- uid: System.Data.DataRelation.CheckStateForProperty*
  parent: System.Data.DataRelation
  isExternal: false
  name: CheckStateForProperty
  nameWithType: DataRelation.CheckStateForProperty
- uid: System.Data.DataRelation.ChildColumns*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildColumns
  nameWithType: DataRelation.ChildColumns
- uid: System.Data.DataRelation.ChildKeyConstraint*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildKeyConstraint
  nameWithType: DataRelation.ChildKeyConstraint
- uid: System.Data.DataRelation.ChildTable*
  parent: System.Data.DataRelation
  isExternal: false
  name: ChildTable
  nameWithType: DataRelation.ChildTable
- uid: System.Data.DataRelation.DataSet*
  parent: System.Data.DataRelation
  isExternal: false
  name: DataSet
  nameWithType: DataRelation.DataSet
- uid: System.Data.DataRelation.ExtendedProperties*
  parent: System.Data.DataRelation
  isExternal: false
  name: ExtendedProperties
  nameWithType: DataRelation.ExtendedProperties
- uid: System.Data.DataRelation.Nested*
  parent: System.Data.DataRelation
  isExternal: false
  name: Nested
  nameWithType: DataRelation.Nested
- uid: System.Data.DataRelation.OnPropertyChanging*
  parent: System.Data.DataRelation
  isExternal: false
  name: OnPropertyChanging
  nameWithType: DataRelation.OnPropertyChanging
- uid: System.Data.DataRelation.ParentColumns*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentColumns
  nameWithType: DataRelation.ParentColumns
- uid: System.Data.DataRelation.ParentKeyConstraint*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentKeyConstraint
  nameWithType: DataRelation.ParentKeyConstraint
- uid: System.Data.DataRelation.ParentTable*
  parent: System.Data.DataRelation
  isExternal: false
  name: ParentTable
  nameWithType: DataRelation.ParentTable
- uid: System.Data.DataRelation.RaisePropertyChanging*
  parent: System.Data.DataRelation
  isExternal: false
  name: RaisePropertyChanging
  nameWithType: DataRelation.RaisePropertyChanging
- uid: System.Data.DataRelation.RelationName*
  parent: System.Data.DataRelation
  isExternal: false
  name: RelationName
  nameWithType: DataRelation.RelationName
- uid: System.Data.DataRelation.ToString*
  parent: System.Data.DataRelation
  isExternal: false
  name: ToString
  nameWithType: DataRelation.ToString
