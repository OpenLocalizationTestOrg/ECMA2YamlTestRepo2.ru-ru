### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Проверяет наличие достаточного количество ресурсов памяти перед выполнением операции. Этот класс не наследуется."
  remarks: "> [!NOTE]Настроек этот класс предназначен для использования при разработке дополнительных.       Создание экземпляра класса MemoryFailPoint создает шлюз памяти. Шлюз памяти проверяет наличие достаточного количество ресурсов, перед запуском действия, которому требуется большой объем памяти. В результате сбоя проверки <xref:System.InsufficientMemoryException>вызываемом исключении.</xref:System.InsufficientMemoryException> Это исключение не позволяет выполнить операцию при запуске и снижает вероятность сбоев из-за нехватки ресурсов. Это позволяет уменьшить производительность, чтобы избежать <xref:System.OutOfMemoryException>исключения и любые нарушения состояния, которое может быть вызвано неправильной обработки исключений в произвольных местах кода.</xref:System.OutOfMemoryException>      Настроек [!IMPORTANT] настроек этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A>метод в `try` / `catch` блока.</xref:System.IDisposable.Dispose%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>       Путем создания исключения <xref:System.InsufficientMemoryException>исключение, приложение может различать оценки, что операция не сможет завершить и частично завершенной операции, может привести к повреждению состояния приложения.</xref:System.InsufficientMemoryException> Это позволяет приложению уменьшить частоту пессимистичной политики эскалации, чего может потребоваться выгрузка текущего <xref:System.AppDomain>или перезапуска процесса.</xref:System.AppDomain>       MemoryFailPoint проверяет, достаточно памяти и последовательных виртуального адресного пространства, доступны ли во все сборки мусора кучи и может увеличить размер файла подкачки.  MemoryFailPoint не дает никаких гарантий относительно долгосрочной доступности памяти, в течение времени существования шлюза, но следует всегда использовать вызывающие объекты <xref:System.Runtime.MemoryFailPoint.Dispose%2A>метод для освобождения ресурсов, связанных с MemoryFailPoint.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Чтобы использовать шлюз памяти, необходимо создать объект MemoryFailPoint и указать число мегабайтов (МБ) памяти, должен использовать следующей операции. Если недостаточно памяти недоступен, <xref:System.InsufficientMemoryException>исключения.</xref:System.InsufficientMemoryException>       Параметр конструктора должен быть положительным целым числом. Отрицательное значение вызывает <xref:System.ArgumentOutOfRangeException>исключение.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint работает с детализацией 16 МБ. Все значения меньше 16 МБ, обрабатываются как 16 МБ, и другие значения обрабатываются как следующего наибольшего кратно 16 МБ."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> класса, задающего объем памяти, необходимый для успешного выполнения."
  remarks: "Объем памяти, используемый вашим приложением для обработки рабочего элемента можно определить эмпирически.  Чтобы оценить объем памяти, необходимые приложению для обработки запроса, рассмотрите возможность использования <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>метод, чтобы определить объем памяти, доступной до и после вызова метода, который обрабатывает рабочий элемент.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> В разделе <xref:System.Runtime.MemoryFailPoint>класс пример кода, который динамически определяет значение для `sizeInMegabytes` параметр.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "Размер необходимого количества памяти в мегабайтах. Это должен быть положительным."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанный размер памяти является отрицательным значением."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Не хватает памяти, чтобы начать выполнение кода, защищенного для шлюза."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "После использования <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> всегда вызывать Dispose. Метод Dispose оставляет <xref:System.Runtime.MemoryFailPoint>окажется в неработоспособном состоянии.</xref:System.Runtime.MemoryFailPoint> После вызова метода <xref:System.Runtime.MemoryFailPoint>, необходимо освободить все ссылки на <xref:System.Runtime.MemoryFailPoint>, сборщик мусора мог освободить память, <xref:System.Runtime.MemoryFailPoint>занимаемую.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [метода](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек всегда вызова Dispose перед освобождением последней ссылки на <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет метод <xref:System.Runtime.MemoryFailPoint>объекта `Finalize` метод.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Гарантирует, что ресурсы освобождены и выполнены другие операции очистки, когда сборщик мусора восстанавливает <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> объекта."
  remarks: "Сборщик мусора вызывает метод Finalize, когда текущий объект готов к завершению."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
