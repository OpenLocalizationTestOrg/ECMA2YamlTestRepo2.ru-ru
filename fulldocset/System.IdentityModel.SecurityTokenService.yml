### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.SecurityTokenService
  id: SecurityTokenService
  children:
  - System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  - System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  - System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  - System.IdentityModel.SecurityTokenService.GetIssuerName
  - System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  - System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  - System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  - System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.Principal
  - System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.Request
  - System.IdentityModel.SecurityTokenService.Scope
  - System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  - System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  - System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  - System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  langs:
  - csharp
  name: SecurityTokenService
  nameWithType: SecurityTokenService
  fullName: System.IdentityModel.SecurityTokenService
  type: Class
  summary: "Абстрактный базовый класс, который определяет свойства и методы службы маркеров безопасности (STS)."
  remarks: "Для создания маркеров безопасности должен быть производным от класса SecurityTokenService. В пользовательский класс должен как минимум, переопределение <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>и <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>методы.</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> </xref:System.IdentityModel.SecurityTokenService.GetScope%2A> С эти переопределения создан с помощью реализации по умолчанию для всех других методов, определенных в классе службы маркеров безопасности может выдавать токены безопасности в ответ безопасности запросов (RST). То есть реализуется проблема привязки, определенной в спецификации WS-Trust. Эта привязка реализуется в <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> Ни один из других WS-Trust привязок (обновления, отмены и проверки) реализованы в случае по умолчанию и соответствующие ошибки возвращается вызывающему при обнаружении RST, соответствующий одному из этих привязок. Можно Конечно, переопределить соответствующие методы (<xref:System.IdentityModel.SecurityTokenService.Renew%2A>, <xref:System.IdentityModel.SecurityTokenService.Cancel%2A>, и <xref:System.IdentityModel.SecurityTokenService.Validate%2A>) для реализации этих привязок в вашей STS.</xref:System.IdentityModel.SecurityTokenService.Validate%2A> </xref:System.IdentityModel.SecurityTokenService.Cancel%2A> </xref:System.IdentityModel.SecurityTokenService.Renew%2A>      Настроек [!IMPORTANT] настроек реализации рабочей среде служба маркеров безопасности влечет за собой тщательного планирования и значительные ресурсы, чтобы устранить потенциальные угрозы безопасности, присущие предоставление такой службы. Большинство разработчиков, использующих Windows Identity Foundation (WIF) будет быть разработки приложений, которые передать управление идентификаторами в службе маркеров безопасности, а не сам разработки STS. WIF предоставляет расширение Visual Studio Identity and Access Tool для Visual Studio 2012, чтобы помочь разработчикам тестирования решения в среде разработки. Это средство включает в себя STS, `LocalSTS`, который можно настроить для обслуживания конкретные утверждения приложению, которое вы разрабатываете. Дополнительные сведения о средстве Identity and Access см. в разделе [Identity and Access Tool для Visual Studio 2012](~/add/includes/ajax-current-ext-md.md). В некоторых сценариях `LocalSTS` может не предоставлять функциональные возможности, необходимые для адекватного тестирования приложения; например, в сценарии, который включает в себя разработку пользовательского обработчика токенов для использования приложением. В таких случаях можно наследовать от класса SecurityTokenService для создания одного или нескольких простых серверами службы токенов безопасности, можно развернуть в среде разработки, и который может использоваться для тестирования таких компонентов, в приложении. В оставшейся части этого раздела рассматриваются методы, предоставляемые класса SecurityTokenService, которые позволяют реализовать простой STS и расширить конвейера выдачи маркера.       Ниже приведены общие сведения о методах роль разработчику для использования в среде тестирования или разработки.      - <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>Метод.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A> Этот метод возвращает <xref:System.IdentityModel.Scope>, содержащий сведения о RP.</xref:System.IdentityModel.Scope> Этот объект используется в остальной части конвейера выдачи маркера и включает сведения о входе и шифровании учетных данных для использования в ответе, а также `AppliesTo` и `ReplyTo` (при необходимости) адреса. Необходимо переопределить этот метод.      - <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>Метод.</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Этот метод возвращает <xref:System.Security.Claims.ClaimsIdentity>объект, содержащий утверждения, чтобы вернуться в RP.</xref:System.Security.Claims.ClaimsIdentity> Необходимо переопределить этот метод.      - <xref:System.IdentityModel.SecurityTokenService.Issue%2A>Метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> Этот метод реализует конвейера запрос маркера, который обрабатывает входящий запрос маркера безопасности (RST) и возвращает ответ (RSTR), чтобы вызывающий объект, содержащий токен, который может использоваться для проверки подлинности с RP. Многие другие методы, определенные в классе SecurityTokenService вызываются из этого метода, включая <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>и <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>методы.</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> </xref:System.IdentityModel.SecurityTokenService.GetScope%2A> Необходимо переопределить этот метод, но представление запроса маркера конвейера, который реализует интерфейс может оказаться полезным.       STS настраивается с помощью <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration>класса.</xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration>"
  example:
  - "The code examples that are used in the SecurityTokenService topics are taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows the implementation of a passive STS using the SecurityTokenService class.  \n  \n [!code-cs[WIFCustomTokenSTS#3](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#3)]  \n  \n The following code shows how to invoke a custom passive STS to process a WS-Federation request by calling the <xref:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest%28System.Web.HttpRequest%2CSystem.Security.Claims.ClaimsPrincipal%2CSystem.IdentityModel.SecurityTokenService%2CSystem.Web.HttpResponse%29?displayProperty=fullName> method from the code behind in the `default.aspx.cs` file.  \n  \n [!code-cs[WIFCustomTokenSTS#1](~/add/codesnippet/csharp/passivests/default.aspx.cs#1)]"
  syntax:
    content: public abstract class SecurityTokenService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  id: '#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)'
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenService(SecurityTokenServiceConfiguration)
  nameWithType: SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Вызывается из производных классов для инициализации <xref href=&quot;System.IdentityModel.SecurityTokenService&quot;> </xref> класса, используя указанные параметры конфигурации."
  remarks: "Этот конструктор используется для инициализации поставщика области и сертификатов издателя маркера."
  syntax:
    content: protected SecurityTokenService (System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration);
    parameters:
    - id: securityTokenServiceConfiguration
      type: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
      description: "Объект <xref href=&quot;System.IdentityModel.Configuration.SecurityTokenServiceConfiguration&quot;> </xref> , содержащий параметры для службы маркеров безопасности."
  overload: System.IdentityModel.SecurityTokenService.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityTokenServiceConfiguration</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе, начинает выполнение асинхронного запроса отмены WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual IAsyncResult BeginCancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении асинхронной операции отмены.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с на асинхронную операцию отмены."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Ссылается на асинхронную операцию отмены.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginCancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  id: BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе начинает асинхронный вызов <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*>метод.</xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*>"
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  syntax:
    content: protected virtual IAsyncResult BeginGetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , Содержащий сведения о поставщике утверждений, связанные с запросом."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении асинхронной операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с асинхронной операцией."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Ссылается на асинхронную операцию.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе, начинает асинхронный вызов для <xref:System.IdentityModel.SecurityTokenService.GetScope*>метод.</xref:System.IdentityModel.SecurityTokenService.GetScope*>"
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  syntax:
    content: protected virtual IAsyncResult BeginGetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении асинхронной операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с асинхронной операцией."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Ссылается на асинхронную операцию отмены.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginGetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе, начинает выполнение асинхронного запроса выдачи WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual IAsyncResult BeginIssue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении операции асинхронной проблему.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с операцией асинхронной проблему."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Ссылается на операцию асинхронной проблему.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginIssue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе, начинает асинхронный запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual IAsyncResult BeginRenew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении асинхронной операция продления.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с асинхронной возобновить операцию."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Продлить, ссылается на асинхронную операцию.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginRenew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  id: BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе, начинает асинхронный запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual IAsyncResult BeginValidate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, принимающий уведомление о завершении асинхронной операции проверки.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Объект, содержащий сведения о состоянии, связанные с асинхронной операции проверки."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Проверки ссылается на асинхронную операцию.</xref:System.IAsyncResult>"
  overload: System.IdentityModel.SecurityTokenService.BeginValidate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Cancel(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе обрабатывает запрос отмены WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Создает экземпляр <xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>.</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>"
  remarks: "Вызывается в процессе выдачи маркера после <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>.</xref:System.IdentityModel.SecurityTokenService.GetScope%2A>"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Входящий запрос маркера."
    - id: scope
      type: System.IdentityModel.Scope
      description: "<> </> *Настроек объект, возвращенный из <> </> *настроек."
    return:
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "<xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>.</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*>"
  overload: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>scope</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  id: EndCancel(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndCancel(IAsyncResult)
  nameWithType: SecurityTokenService.EndCancel(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndCancel(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный запрос отмены WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginCancel*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginCancel*> </xref:System.IAsyncResult>"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.EndCancel*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  id: EndGetOutputClaimsIdentity(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndGetOutputClaimsIdentity(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный вызов <xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>"
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  syntax:
    content: protected virtual System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*> </xref:System.IAsyncResult>"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> , содержащий коллекцию утверждений, которые будут помещены в выданный маркер безопасности."
  overload: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  id: EndGetScope(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndGetScope(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetScope(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetScope(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный вызов <xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>"
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.NotImplementedException>.</xref:System.NotImplementedException>"
  syntax:
    content: protected virtual System.IdentityModel.Scope EndGetScope (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*> </xref:System.IAsyncResult>"
    return:
      type: System.IdentityModel.Scope
      description: "Объект <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , инкапсулирующий сведения о доверяющей стороны (RP), связанные с запроса (RST), указанный в вызове <xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>метода.</xref:System.IdentityModel.SecurityTokenService.BeginGetScope*>"
  overload: System.IdentityModel.SecurityTokenService.EndGetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  id: EndIssue(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndIssue(IAsyncResult)
  nameWithType: SecurityTokenService.EndIssue(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndIssue(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный запрос выдачи WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginIssue*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginIssue*> </xref:System.IAsyncResult>"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.EndIssue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  id: EndRenew(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndRenew(IAsyncResult)
  nameWithType: SecurityTokenService.EndRenew(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndRenew(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginRenew*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginRenew*> </xref:System.IAsyncResult>"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.EndRenew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  id: EndValidate(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: EndValidate(IAsyncResult)
  nameWithType: SecurityTokenService.EndValidate(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndValidate(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе завершает асинхронный запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Возвращается путем вызова <xref:System.IdentityModel.SecurityTokenService.BeginValidate*>метод.</xref:System.IdentityModel.SecurityTokenService.BeginValidate*> </xref:System.IAsyncResult>"
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.EndValidate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName
  id: GetIssuerName
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetIssuerName()
  nameWithType: SecurityTokenService.GetIssuerName()
  fullName: System.IdentityModel.SecurityTokenService.GetIssuerName()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает имя службы маркеров безопасности (STS)."
  remarks: "Этот метод вызывается из реализации конвейера выдачи маркера в значение по умолчанию <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A>       Реализация по умолчанию возвращает <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A>Свойства из конфигурации, доступных через <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A>свойство.</xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> </xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A>"
  syntax:
    content: protected virtual string GetIssuerName ();
    parameters: []
    return:
      type: System.String
      description: "Имя издателя."
  overload: System.IdentityModel.SecurityTokenService.GetIssuerName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе этот метод возвращает коллекцию субъектов выходные данные должны быть включены в выданном маркере."
  remarks: "Метод GetOutputClaimsIdentity вызывается из конвейера выдачи маркера, который реализуется <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> Он возвращает <xref:System.Security.Claims.ClaimsIdentity>, содержащий утверждения, включаемые в выданный маркер безопасности на запрашивающей стороне токена основе ( `principal` параметр), входящие RST ( `request` параметр) и проверяющей стороной, для которого предназначен маркер ( `scope` параметр).</xref:System.Security.Claims.ClaimsIdentity> Логика в этот метод в основном посвящена ответить на следующие вопросы:- **которого типы утверждений должны быть включены в ответ в соответствии с RP, для которого предназначен?** Обычно это определяется на основе-RP из списков типов утверждений, необходимых для каждого RP или для каждого запроса с помощью проверки <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A>запроса.</xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A> Тем не менее логику и подробные сведения об определении утверждения для включения в ответ зависит полностью вашей реализации.      - **Значения утверждений, который следует назначить утверждений в ответе?** Для поставщика удостоверений (IP-STS) обычно это означает использование одно или несколько утверждений в запрашивающей <xref:System.Security.Claims.ClaimsPrincipal>(предоставляемые `principal` параметр) для доступа к хранилище (или другую сущность) для возврата значений для обязательных типов утверждений.</xref:System.Security.Claims.ClaimsPrincipal> Для поставщика федерации (R-STS) обычно это означает выполнение какой-либо обработки на запрашивающей входящих утверждений для выполнения запроса; Возможно выполнение фильтрация или преобразование на некоторые утверждения, представленные запрашивающей стороны, во время передачи другим пользователям через без изменений. Конечно же как в случае надо решить, какие утверждения для включения в ответ сведения и логику способ определения значения эти утверждения возлагается вашей реализации."
  example:
  - "The code example that is used in this topic is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md). The following code shows how to override the GetOutputClaimsIdentity method to return claims for your STS. In this example, the Request Security Token (RST) message is ignored and a collection of claims based on the user as authenticated at the STS is returned.  \n  \n [!code-cs[WIFCustomTokenSTS#6](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#6)]"
  syntax:
    content: protected abstract System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , Содержащий сведения о поставщике утверждений, связанные с запросом. Это <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> объект, возвращенный <xref:System.IdentityModel.SecurityTokenService.GetScope*>метод.</xref:System.IdentityModel.SecurityTokenService.GetScope*>"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref> , содержащий коллекцию утверждений, которые будут помещены в выданный маркер безопасности."
  overload: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  id: GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetProofToken(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Получает маркер проверки, которые будут включены в ответ (RSTR)."
  remarks: "Этот метод вызывается из реализации конвейера выдачи маркера в значение по умолчанию <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A>       Реализация по умолчанию возвращает корректирующий дескриптор или выдает соответствующее исключение."
  syntax:
    content: protected virtual System.IdentityModel.Tokens.ProofDescriptor GetProofToken (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий входящего маркера запроса (RST)."
    - id: scope
      type: System.IdentityModel.Scope
      description: "<xref href=&quot;System.IdentityModel.Scope&quot;> </xref> Экземпляр, который инкапсулирует сведения о проверяющей стороне."
    return:
      type: System.IdentityModel.Tokens.ProofDescriptor
      description: "Объект <xref href=&quot;System.IdentityModel.Tokens.ProofDescriptor&quot;> </xref> , представляющий дескриптор только что созданный проверки. Дескриптор проверки может быть асимметричного проверки дескриптора дескриптор симметричный проверки или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> в случае токена носителя."
  overload: System.IdentityModel.SecurityTokenService.GetProofToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>scope</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Получает подтверждение запрашивающей шифровании учетных данных."
  remarks: "Этот метод вызывается из <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>метод.</xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>       Реализация по умолчанию выполняет следующие функции. Возвращает `null` существует ли токен не шифрования, указанный в запросе ( <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=fullName>свойство `null`).</xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=fullName> В противном случае, если оно может получить маркер как <xref:System.IdentityModel.Tokens.X509SecurityToken>, он возвращает учетные данные, основанные на этот токен.</xref:System.IdentityModel.Tokens.X509SecurityToken> При невозможности разрешить маркер, как <xref:System.IdentityModel.Tokens.X509SecurityToken>, <xref:System.IdentityModel.RequestFailedException>возникает исключение.</xref:System.IdentityModel.RequestFailedException> </xref:System.IdentityModel.Tokens.X509SecurityToken>"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий входящего маркера запроса (RST)."
    return:
      type: System.IdentityModel.Tokens.EncryptingCredentials
      description: "<xref href=&quot;System.IdentityModel.Tokens.EncryptingCredentials&quot;> </xref> , Представляющий запрашивающей стороне в шифровании учетных данных."
  overload: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  nameWithType: SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  fullName: System.IdentityModel.SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Создает ответ (RSTR), содержащий токен, выданный с помощью указанного запроса (RST) и дескриптор токена безопасности."
  remarks: "Метод GetResponse вызывается в качестве последнего шага из конвейера выдачи маркера, который реализуется <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> Он создает и возвращает ответ (RSTR), используя исходный входящего запроса (RST) и дескриптор токена, который был создан во время предыдущего действия в конвейере выдачи маркера.       Реализация по умолчанию создает RSTR, передав RST, указанный в параметре запроса в <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=fullName>конструктор вызывает метод <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=fullName>на дескриптор токена, переданные GetResponse для применения его свойства в только что созданный RSTR, чтобы задать свойство <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A>в RSTR, используя свойство <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A>на дескриптор токена и наконец задать данное свойство <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A>в RSTR согласно следующей таблице :      | `RST.ReplyTo` свойства | Свойство <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName>. | `RSTR.ReplyTo` свойства |   |----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|   | Задать | Не задано | Не задано |   | Задать | Задать | <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName>|   | Не задано | Задать | Не задано |   | Не задано | Не задано | Not Set|</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=fullName></xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A></xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A></xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=fullName></xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=fullName>"
  syntax:
    content: protected virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "RST, содержащий запрос маркера."
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "Дескриптор токена, содержащий сведения, которые используются для выданного маркера."
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Ответ (RSTR) или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если ответ не удается создать из указанного запроса и маркера дескриптора. Реализация по умолчанию возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если <code> tokenDescriptor </code> параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.SecurityTokenService.GetResponse*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetScope(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , содержащий сведения о доверяющей стороны (RP), связанный с указанным запросом (RST). Этот метод необходимо переопределить в реализации <xref href=&quot;System.IdentityModel.SecurityTokenService&quot;> </xref> класса."
  remarks: "Метод GetScope вызывается из конвейера выдачи маркера после <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>метод и должен возвращать <xref:System.IdentityModel.Scope>объекта, настроенных для входящего запроса.</xref:System.IdentityModel.Scope> </xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> (Реализации в конвейере выдачи маркера <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.)</xref:System.IdentityModel.SecurityTokenService.Issue%2A> <xref:System.IdentityModel.Scope>Объект инкапсулирует информацию о RP, связанные с запросом маркера безопасности (RST).</xref:System.IdentityModel.Scope> Сюда входят сведения об учетных данных шифрования и подписи для использования с RP и ли шифровать все выданные маркеры и симметричные ключи в ответе. Некоторые типичные задачи, выполняемые в методе GetScope являются:-определить, является ли RP, для которого предназначен маркер распознаваемым RP. Как это сделать, зависит от реализации. Если предполагаемого RP не является допустимым RP для STS, метод должен вызывать <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>      -Определения учетных данных подписывания должна использоваться в ответе (RSTR) и задать <xref:System.IdentityModel.Scope.SigningCredentials%2A>Свойства соответствующим образом.</xref:System.IdentityModel.Scope.SigningCredentials%2A>      -Определите ли должно быть зашифровано ответа и/или какие-либо включенные симметричные ключи и учетные данные, используемые для шифрования. Задать <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>, <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>, и <xref:System.IdentityModel.Scope.EncryptingCredentials%2A>Свойства соответствующим образом.</xref:System.IdentityModel.Scope.EncryptingCredentials%2A> </xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> </xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>          Настроек [!IMPORTANT] настроек по умолчанию <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>и <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A>свойств `true` предотвращают выдачу токенов, которые не являются безопасными STS.</xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> </xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> Рекомендуется никогда не устанавливать эти свойства в `false` в рабочей среде.      -Определите адрес, к которому должны быть возвращены ответа. Задана <xref:System.IdentityModel.Scope.AppliesToAddress%2A>или <xref:System.IdentityModel.Scope.ReplyToAddress%2A>Свойства соответствующим образом.</xref:System.IdentityModel.Scope.ReplyToAddress%2A> </xref:System.IdentityModel.Scope.AppliesToAddress%2A>"
  example:
  - "The code example that is used in this topic is taken from the `Custom Token` sample. This sample provides custom classes that enable processing of Simple Web Tokens (SWT) and it includes an implementation of a passive STS that is capable of serving an SWT token. For an example of how to implement an active STS, you can see the `Federation Metadata` sample. For information about these samples and other samples available for WIF and about where to download them, see [WIF Code Sample Index](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example shows an implementation of the GetScope method. This implementation verifies that the RP is recognized by the STS, validates the <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> address in the request and sets the <xref:System.IdentityModel.Scope.ReplyToAddress%2A?displayProperty=fullName> property accordingly, and sets the signing and encrypting credentials to use with the RP based on certificates that are hard-coded in the file.  \n  \n [!code-cs[WIFCustomTokenSTS#4](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#4)]  \n[!code-cs[WIFCustomTokenSTS#5](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#5)]  \n[!code-cs[WIFCustomTokenSTS#7](~/add/codesnippet/csharp/passivests/customsecuritytokenservice.cs#7)]"
  syntax:
    content: protected abstract System.IdentityModel.Scope GetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий клиента, выполняющего запрос."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий входящего запроса (RST)."
    return:
      type: System.IdentityModel.Scope
      description: "Объект <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , инкапсулирующий сведения RP, связанные с запросом."
  overload: System.IdentityModel.SecurityTokenService.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  id: GetSecurityTokenHandler(System.String)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetSecurityTokenHandler(String)
  nameWithType: SecurityTokenService.GetSecurityTokenHandler(String)
  fullName: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Получает обработчик маркеров безопасности для выдачи маркера безопасности указанного типа."
  remarks: "В реализации по умолчанию если `requestedTokenType` — `null` или является пустой строкой, значение по умолчанию используется тип токена из конфигурации. Этот режим задается <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A>Свойства объекта конфигурации STS, доступных через <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A>свойство.</xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> </xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A>       Этот метод вызывается из реализации конвейера выдачи маркера в значение по умолчанию <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A>"
  syntax:
    content: protected virtual System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler (string requestedTokenType);
    parameters:
    - id: requestedTokenType
      type: System.String
      description: "Строка, содержащая запрошенный тип маркера URI."
    return:
      type: System.IdentityModel.Tokens.SecurityTokenHandler
      description: "Объект <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> , представляющий обработчик токенов, используемый для создания выданного маркера безопасности. Возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если запрошенный тип маркера не поддерживается (отсутствует обработчик настроен для указанного типа маркера)."
  overload: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  id: GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: GetTokenLifetime(Lifetime)
  nameWithType: SecurityTokenService.GetTokenLifetime(Lifetime)
  fullName: System.IdentityModel.SecurityTokenService.GetTokenLifetime(Lifetime)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает время существования для выданного маркера."
  remarks: "Этот метод обычно вызывается с временем жизни, поступивших в RST. В реализации по умолчанию время существования маркера вычисляется согласно следующей таблице.      | (В) | Срок действия истекает (через) | (В) | Срок действия истекает (out) |   |--------------------|--------------------|--------------------|---------------------|   | `null`|`null`|<xref:System.DateTime.UtcNow%2A?displayProperty=fullName>| <xref:System.DateTime.UtcNow%2A?displayProperty=fullName> + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName>|   | C | `null`| C | C + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName>|   | `null`| E | <xref:System.DateTime.UtcNow%2A?displayProperty=fullName>| E |   | C | E | C | E |       Этот метод вызывается из реализации конвейера выдачи маркера в значение по умолчанию <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> </xref:System.DateTime.UtcNow%2A?displayProperty=fullName> </xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName> </xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=fullName> </xref:System.DateTime.UtcNow%2A?displayProperty=fullName> </xref:System.DateTime.UtcNow%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime (System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime);
    parameters:
    - id: requestLifetime
      type: System.IdentityModel.Protocols.WSTrust.Lifetime
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.Lifetime&quot;> </xref> , представляющий запрошенный времени существования."
    return:
      type: System.IdentityModel.Protocols.WSTrust.Lifetime
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.Lifetime&quot;> </xref> , представляющий предоставленный временем существования."
  overload: System.IdentityModel.SecurityTokenService.GetTokenLifetime*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Issue(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Выдает маркер безопасности."
  remarks: "Этот метод реализует проблема привязки, определенной в спецификации WS-Trust. Реализация по умолчанию метода проблема обрабатывает входящий запрос (RST) через конвейер выдачи маркера (выдачи утверждений) и возвращает ответ (RSTR), который содержит маркер безопасности с соответствующими утверждениями для проверки подлинности запрашивающей стороне с RP либо соответствующее исключение. Конвейера выдачи маркера в реализации по умолчанию состоит из следующих методов (из <xref:System.IdentityModel.SecurityTokenService>класса).</xref:System.IdentityModel.SecurityTokenService>      1.  <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>Метод для проверки запроса (RST).</xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>      2.  <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>Метод, чтобы получить <xref:System.IdentityModel.Scope>, содержащий сведения о доверяющей стороны (RP), связанные с запросом.</xref:System.IdentityModel.Scope> </xref:System.IdentityModel.SecurityTokenService.GetScope%2A> Необходимо переопределить этот метод. Если <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>возвращает `null`, <xref:System.InvalidOperationException>возникает исключение.</xref:System.InvalidOperationException> </xref:System.IdentityModel.SecurityTokenService.GetScope%2A>      3.  <xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A>Для получения дескриптора безопасности маркера на основании RST и <xref:System.IdentityModel.Scope>вернуть объект на предыдущем шаге.</xref:System.IdentityModel.Scope> </xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A> Дескриптор токена безопасности (<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>) содержит сведения о запросе в форме, которая может использоваться обработчика токенов.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor> <xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=fullName>Свойству дескриптор, возвращенный из вызова.</xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=fullName> Если `null` возвращается или если <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A>свойство дескриптора `null`, <xref:System.InvalidOperationException>возникает исключение.</xref:System.InvalidOperationException> </xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A> Исключение вызывается также в том случае, если <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=fullName>свойство `true` , но <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A>свойство возвращенный дескриптор `null`.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A> </xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=fullName>      4.  <xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A>Метод, чтобы получить соответствующий обработчик маркеров в зависимости от типа маркера запрошенного.</xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A> Если `null` возвращается, <xref:System.NotImplementedException>возникает исключение.</xref:System.NotImplementedException>      5.  <xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A>Метод для получения имени издателя маркера.</xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A> Создает <xref:System.InvalidOperationException>Если имя `null` или пуста; в противном случае задает <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A>Свойства в дескрипторе.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A> </xref:System.InvalidOperationException>      6.  <xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>Метод, чтобы получить время жизни токена и наборы <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A>Свойства в дескрипторе.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A> </xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>      7.  <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>Метод, чтобы получить маркер проверки для включения в выданный маркер и задает <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A>Свойства в дескрипторе.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A> </xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>      8.  <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>Метод для получения утверждений для включения в выданный маркер и задает <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A>Свойства в дескрипторе.</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A> </xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Необходимо переопределить этот метод.      9. <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A>Метод для создания ответа (RSTR), содержащий токен, выданный.</xref:System.IdentityModel.SecurityTokenService.GetResponse%2A>       Можно переопределить метод проблему для реализации пользовательского маркера конвейера; Однако это обычно не требуется в средах разработки и тестирования, для которых наиболее пользовательские реализации <xref:System.IdentityModel.SecurityTokenService>класс предназначены.</xref:System.IdentityModel.SecurityTokenService> Во многих случаях можно переопределить <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A>и <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>методов и при необходимости переопределить <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A>метод для предоставления обслуживания STS для вашей среды.</xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> </xref:System.IdentityModel.SecurityTokenService.GetScope%2A> </xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Если дальнейшей необходимости настройки можно предоставить его путем переопределения методов, которые реализуют каждый этап конвейера выдачи маркера перечисленные выше по умолчанию."
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , содержащий выданного маркера безопасности."
  overload: System.IdentityModel.SecurityTokenService.Issue*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Principal
  id: Principal
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Principal
  nameWithType: SecurityTokenService.Principal
  fullName: System.IdentityModel.SecurityTokenService.Principal
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает или задает участника, связанного с текущим экземпляром."
  syntax:
    content: public System.Security.Claims.ClaimsPrincipal Principal { get; set; }
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий текущий участник."
  overload: System.IdentityModel.SecurityTokenService.Principal*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Renew(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе обрабатывает запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.Renew*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Request
  id: Request
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Request
  nameWithType: SecurityTokenService.Request
  fullName: System.IdentityModel.SecurityTokenService.Request
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает или задает безопасности маркера запроса (RST) связанный с текущим экземпляром."
  syntax:
    content: public System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request { get; set; }
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , содержащий запрос."
  overload: System.IdentityModel.SecurityTokenService.Request*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Scope
  id: Scope
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Scope
  nameWithType: SecurityTokenService.Scope
  fullName: System.IdentityModel.SecurityTokenService.Scope
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает или задает область, связанную с текущим экземпляром."
  syntax:
    content: public System.IdentityModel.Scope Scope { get; set; }
    return:
      type: System.IdentityModel.Scope
      description: "Объект <xref href=&quot;System.IdentityModel.Scope&quot;> </xref> , представляющий конфигурацию для запроса маркера."
  overload: System.IdentityModel.SecurityTokenService.Scope*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  id: SecurityTokenDescriptor
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает или задает <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenDescriptor&quot;> </xref> связанный с текущим экземпляром."
  syntax:
    content: protected System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor { get; set; }
    return:
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "Дескриптор токена безопасности, связанный с текущим экземпляром."
  overload: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Попытка установить свойство <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> происходит."
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  id: SecurityTokenServiceConfiguration
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Возвращает владельца экземпляра конфигурации."
  syntax:
    content: public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }
    return:
      type: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
      description: "Объект <xref href=&quot;System.IdentityModel.Configuration.SecurityTokenServiceConfiguration&quot;> </xref> , содержащий настройки для текущего экземпляра."
  overload: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: Validate(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "При переопределении в производном классе обрабатывает запрос продления WS-Trust."
  remarks: "Реализация по умолчанию этот метод создает исключение <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.</xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>"
  syntax:
    content: public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "Объект <xref href=&quot;System.Security.Claims.ClaimsPrincipal&quot;> </xref> , представляющий удостоверение запрашивающей стороне токена."
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос маркера безопасности. Это включает в себя запрос сообщения, а также другие клиентские связанные сведения, например контекст авторизации."
    return:
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&quot;> </xref> , представляющий RSTR для возвращения вызывающему объекту."
  overload: System.IdentityModel.SecurityTokenService.Validate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  id: ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  langs:
  - csharp
  name: ValidateRequest(RequestSecurityToken)
  nameWithType: SecurityTokenService.ValidateRequest(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.ValidateRequest(RequestSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "Проверяет безопасность запрос маркера (RST), содержащийся в этом экземпляре."
  remarks: "Метод ValidateRequest вызывается из конвейера выдачи маркера ( <xref:System.IdentityModel.SecurityTokenService.Issue%2A>метод) для проверки входящих RST.</xref:System.IdentityModel.SecurityTokenService.Issue%2A> RST проверяется на соответствие требованиям службы маркеров безопасности (политика) и соответствующее исключение возникает в том случае, если оно является недопустимым.       Реализация по умолчанию <xref:System.IdentityModel.SecurityTokenService>класс поддерживает только шаблон RST RSTR и только привязки проблема спецификации WS-Trust ( <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A>запроса должно быть присвоено <xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=fullName>).</xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=fullName> </xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A> </xref:System.IdentityModel.SecurityTokenService> Реализация по умолчанию этого метода, обеспечивающий выполнение этих требований (и другие, указаны в раздел &quot;исключения&quot;). Можно переопределить этот метод, если необходимо принудительно установить требования различных проверки для вашей собственной STS."
  syntax:
    content: protected virtual void ValidateRequest (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);
    parameters:
    - id: request
      type: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
      description: "Объект <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestSecurityToken&quot;> </xref> , представляющий запрос."
  overload: System.IdentityModel.SecurityTokenService.ValidateRequest*
  exceptions:
  - type: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
    commentId: T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException
    description: "<code>request</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType*> запроса не задано значение <xref href=&quot;System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue&quot;> </xref>.       - или - <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType*> свойство запроса не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или одна из констант, определенных в <xref href=&quot;System.IdentityModel.Protocols.WSTrust.KeyTypes&quot;> </xref> класса.       - или - <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType*> запроса <xref href=&quot;System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer&quot;> </xref> и <xref uid=&quot;langword_csharp_KeySize&quot; name=&quot;KeySize&quot; href=&quot;&quot;> </xref> элемент присутствует, но его значение не равно нулю."
  - type: System.IdentityModel.UnsupportedTokenTypeBadRequestException
    commentId: T:System.IdentityModel.UnsupportedTokenTypeBadRequestException
    description: "Служба маркеров безопасности не поддерживает тип маркера запроса (на основе значения из <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType*>запроса).</xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType*>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: InvalidRequestException
  nameWithType: InvalidRequestException
  fullName: System.IdentityModel.Protocols.WSTrust.InvalidRequestException
- uid: System.IdentityModel.UnsupportedTokenTypeBadRequestException
  parent: System.IdentityModel
  isExternal: false
  name: UnsupportedTokenTypeBadRequestException
  nameWithType: UnsupportedTokenTypeBadRequestException
  fullName: System.IdentityModel.UnsupportedTokenTypeBadRequestException
- uid: System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenService(SecurityTokenServiceConfiguration)
  nameWithType: SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenService(SecurityTokenServiceConfiguration)
- uid: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
  parent: System.IdentityModel.Configuration
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.Configuration.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginCancel(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: RequestSecurityToken
  nameWithType: RequestSecurityToken
  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityToken
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope,AsyncCallback,Object)
- uid: System.IdentityModel.Scope
  parent: System.IdentityModel
  isExternal: false
  name: Scope
  nameWithType: Scope
  fullName: System.IdentityModel.Scope
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginGetScope(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginIssue(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginRenew(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  nameWithType: SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
  fullName: System.IdentityModel.SecurityTokenService.BeginValidate(ClaimsPrincipal,RequestSecurityToken,AsyncCallback,Object)
- uid: System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Cancel(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Cancel(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: RequestSecurityTokenResponse
  nameWithType: RequestSecurityTokenResponse
  fullName: System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(RequestSecurityToken,Scope)
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndCancel(IAsyncResult)
  nameWithType: SecurityTokenService.EndCancel(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndCancel(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetOutputClaimsIdentity(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(IAsyncResult)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetScope(IAsyncResult)
  nameWithType: SecurityTokenService.EndGetScope(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndGetScope(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndIssue(IAsyncResult)
  nameWithType: SecurityTokenService.EndIssue(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndIssue(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndRenew(IAsyncResult)
  nameWithType: SecurityTokenService.EndRenew(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndRenew(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndValidate(IAsyncResult)
  nameWithType: SecurityTokenService.EndValidate(IAsyncResult)
  fullName: System.IdentityModel.SecurityTokenService.EndValidate(IAsyncResult)
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetIssuerName()
  nameWithType: SecurityTokenService.GetIssuerName()
  fullName: System.IdentityModel.SecurityTokenService.GetIssuerName()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(ClaimsPrincipal,RequestSecurityToken,Scope)
- uid: System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetProofToken(RequestSecurityToken,Scope)
  nameWithType: SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
  fullName: System.IdentityModel.SecurityTokenService.GetProofToken(RequestSecurityToken,Scope)
- uid: System.IdentityModel.Tokens.ProofDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: ProofDescriptor
  nameWithType: ProofDescriptor
  fullName: System.IdentityModel.Tokens.ProofDescriptor
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(RequestSecurityToken)
- uid: System.IdentityModel.Tokens.EncryptingCredentials
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: EncryptingCredentials
  nameWithType: EncryptingCredentials
  fullName: System.IdentityModel.Tokens.EncryptingCredentials
- uid: System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  nameWithType: SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
  fullName: System.IdentityModel.SecurityTokenService.GetResponse(RequestSecurityToken,SecurityTokenDescriptor)
- uid: System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetScope(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.GetScope(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetSecurityTokenHandler(String)
  nameWithType: SecurityTokenService.GetSecurityTokenHandler(String)
  fullName: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(String)
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetTokenLifetime(Lifetime)
  nameWithType: SecurityTokenService.GetTokenLifetime(Lifetime)
  fullName: System.IdentityModel.SecurityTokenService.GetTokenLifetime(Lifetime)
- uid: System.IdentityModel.Protocols.WSTrust.Lifetime
  parent: System.IdentityModel.Protocols.WSTrust
  isExternal: false
  name: Lifetime
  nameWithType: Lifetime
  fullName: System.IdentityModel.Protocols.WSTrust.Lifetime
- uid: System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Issue(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Issue(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.Principal
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Principal
  nameWithType: SecurityTokenService.Principal
  fullName: System.IdentityModel.SecurityTokenService.Principal
- uid: System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Renew(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Renew(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.Request
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Request
  nameWithType: SecurityTokenService.Request
  fullName: System.IdentityModel.SecurityTokenService.Request
- uid: System.IdentityModel.SecurityTokenService.Scope
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Scope
  nameWithType: SecurityTokenService.Scope
  fullName: System.IdentityModel.SecurityTokenService.Scope
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
  fullName: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Validate(ClaimsPrincipal,RequestSecurityToken)
  nameWithType: SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.Validate(ClaimsPrincipal,RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: ValidateRequest(RequestSecurityToken)
  nameWithType: SecurityTokenService.ValidateRequest(RequestSecurityToken)
  fullName: System.IdentityModel.SecurityTokenService.ValidateRequest(RequestSecurityToken)
- uid: System.IdentityModel.SecurityTokenService.#ctor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenService
  nameWithType: SecurityTokenService.SecurityTokenService
- uid: System.IdentityModel.SecurityTokenService.BeginCancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginCancel
  nameWithType: SecurityTokenService.BeginCancel
- uid: System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetOutputClaimsIdentity
  nameWithType: SecurityTokenService.BeginGetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.BeginGetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginGetScope
  nameWithType: SecurityTokenService.BeginGetScope
- uid: System.IdentityModel.SecurityTokenService.BeginIssue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginIssue
  nameWithType: SecurityTokenService.BeginIssue
- uid: System.IdentityModel.SecurityTokenService.BeginRenew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginRenew
  nameWithType: SecurityTokenService.BeginRenew
- uid: System.IdentityModel.SecurityTokenService.BeginValidate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: BeginValidate
  nameWithType: SecurityTokenService.BeginValidate
- uid: System.IdentityModel.SecurityTokenService.Cancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Cancel
  nameWithType: SecurityTokenService.Cancel
- uid: System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: CreateSecurityTokenDescriptor
  nameWithType: SecurityTokenService.CreateSecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.EndCancel*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndCancel
  nameWithType: SecurityTokenService.EndCancel
- uid: System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetOutputClaimsIdentity
  nameWithType: SecurityTokenService.EndGetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.EndGetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndGetScope
  nameWithType: SecurityTokenService.EndGetScope
- uid: System.IdentityModel.SecurityTokenService.EndIssue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndIssue
  nameWithType: SecurityTokenService.EndIssue
- uid: System.IdentityModel.SecurityTokenService.EndRenew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndRenew
  nameWithType: SecurityTokenService.EndRenew
- uid: System.IdentityModel.SecurityTokenService.EndValidate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: EndValidate
  nameWithType: SecurityTokenService.EndValidate
- uid: System.IdentityModel.SecurityTokenService.GetIssuerName*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetIssuerName
  nameWithType: SecurityTokenService.GetIssuerName
- uid: System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetOutputClaimsIdentity
  nameWithType: SecurityTokenService.GetOutputClaimsIdentity
- uid: System.IdentityModel.SecurityTokenService.GetProofToken*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetProofToken
  nameWithType: SecurityTokenService.GetProofToken
- uid: System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetRequestorProofEncryptingCredentials
  nameWithType: SecurityTokenService.GetRequestorProofEncryptingCredentials
- uid: System.IdentityModel.SecurityTokenService.GetResponse*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetResponse
  nameWithType: SecurityTokenService.GetResponse
- uid: System.IdentityModel.SecurityTokenService.GetScope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetScope
  nameWithType: SecurityTokenService.GetScope
- uid: System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetSecurityTokenHandler
  nameWithType: SecurityTokenService.GetSecurityTokenHandler
- uid: System.IdentityModel.SecurityTokenService.GetTokenLifetime*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: GetTokenLifetime
  nameWithType: SecurityTokenService.GetTokenLifetime
- uid: System.IdentityModel.SecurityTokenService.Issue*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Issue
  nameWithType: SecurityTokenService.Issue
- uid: System.IdentityModel.SecurityTokenService.Principal*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Principal
  nameWithType: SecurityTokenService.Principal
- uid: System.IdentityModel.SecurityTokenService.Renew*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Renew
  nameWithType: SecurityTokenService.Renew
- uid: System.IdentityModel.SecurityTokenService.Request*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Request
  nameWithType: SecurityTokenService.Request
- uid: System.IdentityModel.SecurityTokenService.Scope*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Scope
  nameWithType: SecurityTokenService.Scope
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenService.SecurityTokenDescriptor
- uid: System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: SecurityTokenServiceConfiguration
  nameWithType: SecurityTokenService.SecurityTokenServiceConfiguration
- uid: System.IdentityModel.SecurityTokenService.Validate*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: Validate
  nameWithType: SecurityTokenService.Validate
- uid: System.IdentityModel.SecurityTokenService.ValidateRequest*
  parent: System.IdentityModel.SecurityTokenService
  isExternal: false
  name: ValidateRequest
  nameWithType: SecurityTokenService.ValidateRequest
