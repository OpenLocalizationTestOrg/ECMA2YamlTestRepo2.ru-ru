### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.IObjectReference
  id: IObjectReference
  children:
  - System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: IObjectReference
  nameWithType: IObjectReference
  fullName: System.Runtime.Serialization.IObjectReference
  type: Interface
  summary: "Указывает, что конструктор текущего интерфейса является ссылкой на другой объект."
  remarks: ''
  example:
  - >-
    [!code-cs[IObjectReference Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_9_1.cs)]
     [!code-cpp[IObjectReference Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_9_1.cpp)]
     [!code-vb[IObjectReference Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_9_1.vb)]
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IObjectReference
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)
  id: GetRealObject(System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.IObjectReference
  langs:
  - csharp
  name: GetRealObject(StreamingContext)
  nameWithType: IObjectReference.GetRealObject(StreamingContext)
  fullName: System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Возвращает реальный объект, который необходимо десериализовать, а не объект, определяющий сериализованного потока."
  remarks: "Этот метод полезен в ситуации удаленного взаимодействия, где сериализовать объект прокси разработчика, не является реальным объектом. Когда десериализуется объект прокси разработчика, десериализация вызывает своего метода GetRealObject. На этом этапе объект прокси разработчика создает новый экземпляр прокси-объекта, который ссылается на исходный фактическому объекту, возможно, на удаленном компьютере. Наконец объект прокси разработчика удаляется и позже сборщиком мусора.       Например, рассмотрим как <xref:System.Type>объекты сериализуются.</xref:System.Type> Вместо передачи данных из <xref:System.Type>объекта, система передает объект держателя с именем объекта типа и сведениями о сборке, где он находится в объект, реализующий <xref:System.Runtime.Serialization.IObjectReference>.</xref:System.Runtime.Serialization.IObjectReference> </xref:System.Type> Если имя типа и имя сборки доступны, инфраструктура десериализации вызывает GetRealObject владельца объекта, переданного. Этот держатель возвращает <xref:System.Type>объект, вставляемый в граф.</xref:System.Type>       Этот метод защищен <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>для <xref:System.Security.Permissions.SecurityPermission>с <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>указанный.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.SecurityPermission> </xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>"
  example:
  - >-
    [!code-cs[IObjectReference Interface Example#1](~/add/codesnippet/csharp/cd60c7d2-ba12-4220-8a1f-_1.cs)]
     [!code-cpp[IObjectReference Interface Example#1](~/add/codesnippet/cpp/cd60c7d2-ba12-4220-8a1f-_1.cpp)]
     [!code-vb[IObjectReference Interface Example#1](~/add/codesnippet/visualbasic/cd60c7d2-ba12-4220-8a1f-_1.vb)]
  syntax:
    content: public object GetRealObject (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>Из которого десериализуется текущий объект.</xref:System.Runtime.Serialization.StreamingContext>"
    return:
      type: System.Object
      description: "Возвращает фактический объект, который помещается в граф."
  overload: System.Runtime.Serialization.IObjectReference.GetRealObject*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений. Вызов не будет работать на средний доверенных серверов."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.IObjectReference
  isExternal: false
  name: GetRealObject(StreamingContext)
  nameWithType: IObjectReference.GetRealObject(StreamingContext)
  fullName: System.Runtime.Serialization.IObjectReference.GetRealObject(StreamingContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.IObjectReference.GetRealObject*
  parent: System.Runtime.Serialization.IObjectReference
  isExternal: false
  name: GetRealObject
  nameWithType: IObjectReference.GetRealObject
