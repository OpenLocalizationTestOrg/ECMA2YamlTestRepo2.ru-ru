### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Управляет проверкой стека, который определяет, имеют ли все вызывающие объекты в стеке вызовов разрешения, необходимые для доступа к защищенному ресурсу."
  remarks: "Частично доверенный код всегда представляет угрозу безопасности. Иногда, ими можно управлять для выполнения действий от имени вредоносный код, который не имеет разрешения на доступ к ресурсу. Таким образом вредоносный код может получить высокий уровень доступа, чем следует разрешить.       Общеязыковая среда выполнения защищает управляемый код от подобных атак, выполнив проверку стека вызова. Обход стека требует, что весь код в стеке вызовов имеет разрешение на доступ к защищенному ресурсу. Поскольку коду, выполняющему атаки, всегда попадает в стек вызовов, он сможет превышать свои собственные разрешения безопасности."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Подтверждает, что вызывающий код может получить доступ к ресурсу, определяемому текущим объектом разрешения, даже если вызывающим объектам выше в стеке вызовов не предоставлено разрешение на доступ к ресурсу."
  remarks: "Вызов Assert прекращает проверку наличия разрешений на вызывающим объектам выше в стеке вызовов. Таким образом даже если эти вызывающие объекты не имеют необходимых разрешений, они по-прежнему доступны ресурсы. Утверждение действует только в том случае, если код, который вызывает Assert проходит проверку безопасности на наличие утверждающего разрешения.       Вызов Assert действует до возвращается вызывающему коду, вызвавшему его или в последующем вызове Assert сделает предыдущее утверждение неэффективным. Кроме того <xref:System.Security.CodeAccessPermission.RevertAssert%2A>или <xref:System.Security.CodeAccessPermission.RevertAll%2A>удаляет ожидающие утверждения.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Утверждение учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным. Тем не менее если код, расположенный ниже в стеке вызовов вызывает <xref:System.Security.IStackWalk.Demand%2A>для этого разрешения <xref:System.Security.SecurityException>возникает при проверке стека достигается код, который пытался вызвать Assert.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Это происходит, так как код, который вызвал Assert не предоставлено разрешение, несмотря на то, что он пытался подтверждает его.      Настроек [!CAUTION] настроек из-за вызова Assert удаляет требование, что весь код в цепочке вызовов должны предоставляться разрешения на доступ к указанному ресурсу, может привести к возникновению уязвимости системы безопасности неправильное или неверно. Таким образом он должен использоваться с большой осторожностью."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий код не имеет <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Определяет во время выполнения все вызывающие объекты в стеке вызовов было предоставлено разрешение, указанное текущим объектом разрешений."
  remarks: "Этот метод обычно используется с защищенными библиотеками для обеспечения наличия у вызывающих объектов разрешений на доступ к ресурсу. Например, файл класса в безопасной библиотеке классов вызывает требование для необходимого <xref:System.Security.Permissions.FileIOPermission>перед выполнением операции файл запрошенную вызывающим.</xref:System.Security.Permissions.FileIOPermission>       Разрешения для кода, который вызывает этот метод, не проверяется; Проверка начинается с непосредственный вызывающий объект кода и продолжается вверх по стеку. Требование завершается успешно, только если не <xref:System.Security.SecurityException>возникает.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект выше в стеке вызовов не имеет разрешения, указанного в текущем объекте разрешений.       - или - У вызывающего кода в стеке вызовов вызвал <xref:System.Security.IStackWalk.Deny*>с текущим объектом разрешений.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Вызывает каждый <xref:System.Security.IStackWalk.Demand*>для текущего объекта, проходящего через вызывающий код.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Этот метод не позволяет вызывающим объектам выше в стеке вызовов доступ к защищенному ресурсу через код, вызывающий этот метод, даже если этим вызывающим предоставлено разрешение на доступ к нему. Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.       Инструкция DENY может ограничить ответственность программиста или предотвратить случайное уязвимостей, поскольку он не позволяет использовать метод, вызывающий Deny не могут использоваться для доступа к ресурсу, защищенному путем отказа в разрешении. Если метод вызывает метод Deny для разрешения и <xref:System.Security.IStackWalk.Demand%2A>для этого разрешения вызывающий объект, расположенный ниже в стеке вызовов, то проверка безопасности завершится ошибкой при достижении Deny.</xref:System.Security.IStackWalk.Demand%2A>       Запретить учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Вызывает каждый <xref:System.Security.IStackWalk.Demand*>для всех объектов, кроме текущего, проходящих через вызывающий код, даже если коду выше в стеке вызовов предоставлено разрешение на доступ к другим ресурсам.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Аналогично PermitOnly <xref:System.Security.IStackWalk.Deny%2A>, в том, что оба метода приводят стека с ошибкой, когда в противном случае они бы успешно.</xref:System.Security.IStackWalk.Deny%2A> Различие состоит в том <xref:System.Security.IStackWalk.Deny%2A>Указывает разрешения, которые вызовут стека пройти сбой, но PermitOnly задает только те разрешения, не приводят к сбою стека.</xref:System.Security.IStackWalk.Deny%2A> Вызовите этот метод, чтобы убедиться, что код может использоваться для доступа к только к заданным ресурсам.       PermitOnly учитывается для разрешения не предоставляются, так как запрос на это разрешение не будет успешным. Тем не менее если код, расположенный ниже, при вызове стеке вызовов <xref:System.Security.IStackWalk.Demand%2A>этим разрешением, <xref:System.Security.SecurityException>возникает при проверке стека достигается код, который пытался вызвать PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Это так, как код, который вызвал PermitOnly не предоставлено разрешение, несмотря на вызов PermitOnly для этого разрешения. Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
