### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellman
  id: ECDiffieHellman
  children:
  - System.Security.Cryptography.ECDiffieHellman.#ctor
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.PublicKey
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  langs:
  - csharp
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
  type: Class
  summary: "Предоставляет абстрактный базовый класс, эллиптических кривых Диффи-Хелмана (ECDH) могут быть производными реализации алгоритма. Этот класс предоставляет базовый набор операций, которые должны поддерживать все реализации алгоритма ECDH."
  remarks: "Этот класс служит в качестве абстрактный базовый класс для реализаций ECDH."
  syntax:
    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;> </xref> класса."
  remarks: "Данный конструктор вызывается классами, которые являются производными от <xref:System.Security.Cryptography.ECDiffieHellman>класса.</xref:System.Security.Cryptography.ECDiffieHellman> <xref:System.Security.Cryptography.ECDiffieHellmanCng>Класс является только реализацией, включенного в данный момент [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)].</xref:System.Security.Cryptography.ECDiffieHellmanCng> Сведения о создании новой реализации алгоритма алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) см. в разделе <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A>метод.</xref:System.Security.Cryptography.ECDiffieHellman.Create%2A>"
  syntax:
    content: protected ECDiffieHellman ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  id: Create
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый экземпляр реализации по умолчанию алгоритма алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH)."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "Новый экземпляр реализации по умолчанию этого класса."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый экземпляр заданной реализации алгоритма алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH)."
  remarks: "При разработке свою собственную реализацию <xref:System.Security.Cryptography.ECDiffieHellman>объекта, можно использовать перегрузку метода Create для создания пользовательского `algorithm` строка, указывающая вашей реализации.</xref:System.Security.Cryptography.ECDiffieHellman>       `algorithm` Параметр указывает имя реализации алгоритма ECDH. Поддерживаются следующие строки, которые ссылаются на одну реализацию, равный в настоящее время это единственная реализация в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]: - «ECDH» - «ECDiffieHellman» - «ECDiffieHellmanCng» - «System.Security.Cryptography.ECDiffieHellmanCng» можно также указать имя для пользовательской реализации ECDH `algorithm` параметра. Если сделать это, <xref:System.Security.Cryptography.CryptoConfig>объекта будет использоваться для определения того, могут ли быть созданы объект ECDH.</xref:System.Security.Cryptography.CryptoConfig>"
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Имя реализации алгоритма ECDH."
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: "Новый экземпляр заданной реализации этого класса. Если заданное имя алгоритма не соответствует реализации ECDH, этот метод возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>algorithm</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Извлекает байт, которые могут использоваться в качестве ключа, с помощью хэш-функции, имени другой стороне открытый ключ и хэш-алгоритма."
  remarks: "Эта перегрузка вызывает <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A>метод передачи `null` в начале и добавляют значения.</xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A>"
  syntax:
    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, которые используются для формирования материал ключа."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "При реализации в производном классе определяет байтов, которые могут использоваться в качестве хэш-функции, с помощью заданного открытого ключа другой стороны, имя хэш-алгоритма, начале значение и добавить значение ключа."
  syntax:
    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, которые используются для формирования материал ключа."
    - id: secretPrepend
      type: System.Byte[]
      description: "Значение для вставки в начале производном секрета прежде, чем хэшировать."
    - id: secretAppend
      type: System.Byte[]
      description: "Значение добавляемого производном секрет прежде, чем хэшировать."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Производный класс должен переопределять этот метод."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает последовательность байтов, которые могут использоваться в качестве ключа, с помощью хэш-проверки подлинности сообщения код (HMAC)."
  remarks: "Эта перегрузка вызывает <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A>метод передачи `null` в начале и добавляют значения.</xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A>"
  syntax:
    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, которые используются для формирования материал ключа."
    - id: hmacKey
      type: System.Byte[]
      description: "Ключ HMAC."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "При реализации в производном классе определяет байтов, которые можно использовать в качестве ключа, с помощью хэш-проверки подлинности сообщения код (HMAC)."
  syntax:
    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "Хэш-алгоритм, которые используются для формирования материал ключа."
    - id: hmacKey
      type: System.Byte[]
      description: "Ключ HMAC."
    - id: secretPrepend
      type: System.Byte[]
      description: "Значение для вставки в начале производном секрета прежде, чем хэшировать."
    - id: secretAppend
      type: System.Byte[]
      description: "Значение добавляемого производном секрет прежде, чем хэшировать."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Производный класс должен переопределять этот метод."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Извлекает байт, которые могут использоваться в качестве ключа, открытый ключ другой стороне."
  remarks: "Дополнительные сведения об открытых ключах см. в разделе <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey>класса.</xref:System.Security.Cryptography.ECDiffieHellmanPublicKey>"
  syntax:
    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "При реализации в производном классе определяет байтов, которые можно использовать в качестве ключа, с помощью алгоритма производного функция Pseudo-Random Transport Layer Security (TLS) (PRF)."
  syntax:
    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытый ключ другой стороне."
    - id: prfLabel
      type: System.Byte[]
      description: "Метка PRF-кодировке ASCII."
    - id: prfSeed
      type: System.Byte[]
      description: "Начальное значение PRF 64 байт."
    return:
      type: System.Byte[]
      description: "Материал ключа из обмена ключами с помощью открытого ключа другой стороны."
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Производный класс должен переопределять этот метод."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает имя алгоритма обмена ключами."
  remarks: "Реализация по умолчанию (не переопределен) это свойство возвращает строку «ECDiffieHellman».       Данное свойство наследуется из <xref:System.Security.Cryptography.AsymmetricAlgorithm>базового класса.</xref:System.Security.Cryptography.AsymmetricAlgorithm>"
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "Имя алгоритма обмена ключами."
  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает открытый ключ, используемый в текущем экземпляре алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH)."
  syntax:
    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: "Открытая часть пары ключей ECDH, который используется этим <xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;> </xref> экземпляра."
  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает имя алгоритма подписи."
  remarks: "Данное свойство наследуется из <xref:System.Security.Cryptography.AsymmetricAlgorithm>базового класса.</xref:System.Security.Cryptography.AsymmetricAlgorithm>       Алгоритм алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) используется для формирования ключа создания не цифровой подписи. Таким образом, это свойство возвращает `null`."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: System.Security.Cryptography.ECDiffieHellman.ECDiffieHellman()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: System.Security.Cryptography.ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: System.Security.Cryptography.ECDiffieHellman.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey,HashAlgorithmName,Byte[],Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey,Byte[],Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: System.Security.Cryptography.ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create
  nameWithType: ECDiffieHellman.Create
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellman.DeriveKeyFromHash
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellman.DeriveKeyMaterial
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellman.DeriveKeyTls
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
