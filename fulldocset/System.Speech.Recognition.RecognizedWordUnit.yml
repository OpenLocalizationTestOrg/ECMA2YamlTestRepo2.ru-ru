### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  summary: "Предоставляет единицей распознанной речи."
  remarks: "Все результаты, возвращенные механизма распознавания формируются RecognizedWordUnit объектов.       Массив объектов RecognizedWordUnit доступна для любой операции распознавания через <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>свойство <xref:System.Speech.Recognition.RecognizedPhrase>объекта.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>       Помимо измерения точности распознавания (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) предоставляет экземпляр RecognizedWordUnit: - нормализованное и точное (или лексической) текстовыми представлениями для распознанного слова.</xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> Дополнительные сведения см. в разделе <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>и <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> </xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> </xref:System.Speech.Recognition.ReplacementText>      -Сведения о произношения символов из поддерживаемых фонетического алфавита, например международного фонетического алфавита (IPA) или универсальных Phone набор (ИБП). Дополнительные сведения см. <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>      -Форматирование для печати. Дополнительные сведения см. <xref:System.Speech.Recognition.DisplayAttributes>класса и его <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A>свойство.</xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> </xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of RecognizedWordUnit objects. The RecognizedWordUnit objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Text: {Text}")]

      public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> класса."
  remarks: "Если `text` или `pronunciation` , `null`, «», или <xref:System.String.Empty>и <xref:System.Speech.Recognition.RecognizedWordUnit>используется в операции распознавания, модуль распознавания создает соответствующие значения в выходных данных <xref:System.Speech.Recognition.RecognizedWordUnit>экземпляра.</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.String.Empty>       Прямой создания <xref:System.Speech.Recognition.RecognizedWordUnit>экземпляров обычно используется только в том случае, если эмуляция распознавания операций с использованием <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>или <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>методы <xref:System.Speech.Recognition.SpeechRecognitionEngine>класса и <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>или <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>методов <xref:System.Speech.Recognition.SpeechRecognizer>класса.</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       Для фактического приложений, не создавайте непосредственно <xref:System.Speech.Recognition.RecognizedWordUnit>, вместо получения его через <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>свойство <xref:System.Speech.Recognition.RecognizedPhrase>объекта.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>"
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```c#  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "Нормализованный текст для распознанного слова.       Это значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, «», или <xref:System.String>.</xref:System.String>"
    - id: confidence
      type: System.Single
      description: "Объект <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;> </xref> значения от 0,0 до 1,0, показывающее достоверности распознавания слов."
    - id: pronunciation
      type: System.String
      description: "Фонетическое написание распознанного слова.       Это значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, «», или <xref:System.String>.</xref:System.String>"
    - id: lexicalForm
      type: System.String
      description: "Текст ненормализованных распознанного слова.       Этот аргумент является обязательным и не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, «», или <xref:System.String>.</xref:System.String>"
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: "Определяет использование пробелов для отображения распознанных слов."
    - id: audioPosition
      type: System.TimeSpan
      description: "Расположение распознанного слова в аудио входного потока.       Это значение может быть <xref:System.TimeSpan>.</xref:System.TimeSpan>"
    - id: audioDuration
      type: System.TimeSpan
      description: "Длина аудио входной соответствующий распознанного слова.       Это значение может быть <xref:System.TimeSpan>.</xref:System.TimeSpan>"
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Возвращает значение, присвоенное распознавателем, которое представляет вероятность того, что распознанного слова соответствует заданным входным данным."
  remarks: "Достоверности не указывает абсолютный вероятность правильного распознавания слова. Вместо этого достоверности обеспечивают механизм для сравнения относительную точность нескольких альтернативных результатов распознавания для указанных введенных данных. Это облегчает, возвращая наиболее точный результат распознавания. Например если показатель достоверности 0,8 распознанного слова, это означает, что слово имеет 80% вероятность того, что совпадение точным для входных данных.  Он означает, что слово наиболее вероятные что совпадение точное, для ввода, чем другие результаты, имеющие достоверности оценки меньше, чем 0,8.       Показатель достоверности сам по себе не имеет смысла, если нет альтернативного результаты для сравнения, из одной и той же операции распознавания или из предыдущего отзывы одинаковыми входными данными.       Значения, возвращаемые методом достоверности относительных и уникальный для каждого модуля распознавания. Отсутствует определение из сравнить достоверность значения в диапазоне от двух разных распознавания, а также о том, как достоверность отдельных <xref:System.Speech.Recognition.RecognizedWordUnit>определения объектов <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> <xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> </xref:System.Speech.Recognition.RecognizedWordUnit>       Распознавание речи может назначить низкий показатель достоверности ввода речи по различным причинам, включая фона помех, inarticulate речи или непредвиденных слова или word последовательностей. Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine>экземпляр, можно изменить уровень достоверности какие речь приняты или отклонены с одним из входных данных <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>методы.</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> Пороговые значения достоверности для общего распознавателя, управляется <xref:System.Speech.Recognition.SpeechRecognizer>, связанные с профилем пользователя и хранится в реестре Windows.</xref:System.Speech.Recognition.SpeechRecognizer> Приложения не следует записывать изменения в реестр для свойств общего распознавателя."
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "Относительная мера достоверности правильного распознания слова. Значение от 0,0 до 1,0, низкая и высокая достоверность соответственно."
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Получает форматирования сведения, используемые для создания выходной текст из текущего <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> экземпляра."
  remarks: "<xref:System.Speech.Recognition.DisplayAttributes>Объекта, возвращаемого свойством DisplayAttributes указывает начальные и конечные пробелы для использования с определенное слово, если таковые имеются.</xref:System.Speech.Recognition.DisplayAttributes>       Дополнительные сведения о том, как использовать эти сведения о форматировании см. в разделе <xref:System.Speech.Recognition.DisplayAttributes>перечисления.</xref:System.Speech.Recognition.DisplayAttributes>"
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the DisplayAttributes property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: "Указывает, что используется пробел для отображения содержимого <xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;> </xref> объекта."
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Возвращает текст ненормализованных распознанного слова."
  remarks: "В большинстве случаев значения, возвращаемые методом <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>и LexicalForm идентичны.</xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> Однако модули распознавания может использовать нормализацию речи для возврата более удобной для пользователей или colloquial текстовыми представлениями звукового ввода.       Нормализация речи используется одна специальная конструкция или символов, для выражения речи в записи. Например нормализация можно заменить произносимых слов «доллара и шестнадцать центов» «$1.16&quot;в выходной текст."
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using LexicalForm), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: "Возвращает <xref:System.String>, содержащее текст распознанного слова, без нормализацию.</xref:System.String>"
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Возвращает фонетические Правописание распознанного слова."
  remarks: "Содержимое произношение показывает, какие произношение распознавания речи, используемый для сопоставления входных данных речи для одного из его загруженного <xref:System.Speech.Recognition.Grammar>объектов.</xref:System.Speech.Recognition.Grammar> Произношение может быть определено в внутреннего лексикона механизма распознавания речи в документе лексики, связанного с Грамматика распознавания на загруженной <xref:System.Speech.Recognition.Grammar>объект или как встроенные в грамматику распознавания на загруженной <xref:System.Speech.Recognition.Grammar>объекта.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar> Распознавание речи может также создавать произношения редко встречающиеся слова, чьи произношение не определены в лексики или грамматики, к которому распознавания речи в настоящее время имеет доступ.       Многие шрифты Юникода на основе Windows, например Courier New поддерживают отображение IPA строк. Дополнительные сведения см. в разделе [международного фонетического алфавита](http://go.microsoft.com/fwlink/?LinkId=58363)."
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using Pronunciation). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: "Строка символов из поддерживаемых фонетического алфавита, например международного фонетического алфавита (IPA) или универсальных Phone набор (ИБП)."
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Получает нормализованный текст для распознанного слова."
  remarks: "В большинстве случаев значения, возвращаемые методом текста и <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>, будут идентичны.</xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> Однако модули распознавания может использовать нормализацию речи для возврата более удобной для пользователей или colloquial текстовыми представлениями звукового ввода.       Нормализация речи используется одна специальная конструкция или символов, для выражения речи в записи. Например нормализация можно заменить произносимых слов «доллара и шестнадцать центов» «$1.16&quot;в выходной текст."
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using Text), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```c#  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```c#  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "Строка, содержащая выходные данные нормализованный текст данного ввода слова."
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
  fullName: System.Speech.Recognition.RecognizedWordUnit.RecognizedWordUnit(String,Single,String,String,DisplayAttributes,TimeSpan,TimeSpan)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: System.Speech.Recognition.RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: System.Speech.Recognition.RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
