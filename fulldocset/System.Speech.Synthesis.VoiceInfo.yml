### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.VoiceInfo
  id: VoiceInfo
  children:
  - System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  - System.Speech.Synthesis.VoiceInfo.Age
  - System.Speech.Synthesis.VoiceInfo.Culture
  - System.Speech.Synthesis.VoiceInfo.Description
  - System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  - System.Speech.Synthesis.VoiceInfo.Gender
  - System.Speech.Synthesis.VoiceInfo.GetHashCode
  - System.Speech.Synthesis.VoiceInfo.Id
  - System.Speech.Synthesis.VoiceInfo.Name
  - System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  langs:
  - csharp
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
  type: Class
  summary: "Представляет установленные синтеза речи."
  remarks: "Голос имеет установленный синтеза речи, который также называется механизм озвучивания текста или текста в речь. <xref:System.Speech.Synthesis.SpeechSynthesizer>Объект использует голоса для формирования речи из текста.</xref:System.Speech.Synthesis.SpeechSynthesizer> Свойства объекта VoiceInfo определения голоса и описания его характеристики. Наиболее определение характеристика голоса его <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>, который определяет один язык, на котором могут согласовать голоса.</xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>       <xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A>Свойство возвращает объект VoiceInfo, содержащий сведения о текущий голос используется <xref:System.Speech.Synthesis.SpeechSynthesizer>.</xref:System.Speech.Synthesis.SpeechSynthesizer> </xref:System.Speech.Synthesis.SpeechSynthesizer.Voice%2A> Можно также использовать объект VoiceInfo для получения сведений о любой из голосов, установленных в системе, возвращенные <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices> В разделе <xref:System.Speech.Synthesis.InstalledVoice>Подробнее.</xref:System.Speech.Synthesis.InstalledVoice>"
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{(_name != null ? "'" + _name + "' " : "") +  (_culture != null ? " '" + _culture.ToString () + "' " : "") + (_gender != VoiceGender.NotSet ? " '" + _gender.ToString () + "' " : "") + (_age != VoiceAge.NotSet ? " '" + _age.ToString () + "' " : "") + (_variant > 0 ? " " + _variant.ToString () : "")}")]

      public class VoiceInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  id: AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает дополнительные сведения о голоса."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> AdditionalInfo { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Возвращает коллекцию пар имя значение, описания и определения голоса."
  overload: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Age
  id: Age
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает возраст используемого голоса."
  remarks: "Свойство Age Получает элемент <xref:System.Speech.Synthesis.VoiceAge>перечисление, указывающее, возраст используемого голоса.</xref:System.Speech.Synthesis.VoiceAge>"
  syntax:
    content: public System.Speech.Synthesis.VoiceAge Age { get; }
    return:
      type: System.Speech.Synthesis.VoiceAge
      description: "Возвращает возраст используемого голоса."
  overload: System.Speech.Synthesis.VoiceInfo.Age*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  id: Culture
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает язык и региональные параметры голоса."
  remarks: "<xref:System.Globalization.CultureInfo>Класс задает уникальное имя для каждого языка и региональных параметров.</xref:System.Globalization.CultureInfo> Имя представляет собой сочетание код ISO 639 двух букв нижнего регистра, языка и региональных параметров, связанных с языком и ISO 3166 прописные региона двухбуквенный код страны или региона. Примеры имен языка и региональных параметров включают «es US» для испанского языка, используемый в США или «fr-CA» для французского языка, в котором говорят в Канаде. Можно указать нейтрального языка и региональных параметров, используя только код языка строчные двумя цифрами. Например «fr» определяет нейтральный язык и региональные параметры для французского языка, и символов «de» определяет нейтральный язык и региональные параметры для немецкого языка."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; }
    return:
      type: System.Globalization.CultureInfo
      description: "Возвращает <xref:System.Globalization.CultureInfo>объект, предоставляющий сведения о конкретных языка и региональных параметров, таких как названия языка и региональных параметров, системе письма, используемый календарь и способ форматирования даты и сортировке строк.</xref:System.Globalization.CultureInfo>"
  overload: System.Speech.Synthesis.VoiceInfo.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Description
  id: Description
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает описание голоса."
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "Возвращает описание голоса."
  overload: System.Speech.Synthesis.VoiceInfo.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Сравнивает поля голоса с указанным <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> объектом, чтобы определить, содержат ли они одинаковые значения."
  remarks: "Метод Equals принимает <xref:System.Object>тип в качестве параметра.</xref:System.Object> Если этот объект не относится к <xref:System.Speech.Synthesis.VoiceInfo>тип, метод возвращает `False`.</xref:System.Speech.Synthesis.VoiceInfo>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Указанный <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> объекта."
    return:
      type: System.Boolean
      description: "Возвращает <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> Если полей двух <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> объектов равны; в противном случае возвращает <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: System.Speech.Synthesis.VoiceInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  id: Gender
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает Пол голоса."
  remarks: "Пол свойство возвращает член <xref:System.Speech.Synthesis.VoiceGender>перечисления, которое указывает Пол голоса.</xref:System.Speech.Synthesis.VoiceGender>"
  syntax:
    content: public System.Speech.Synthesis.VoiceGender Gender { get; }
    return:
      type: System.Speech.Synthesis.VoiceGender
      description: "Возвращает Пол голоса."
  overload: System.Speech.Synthesis.VoiceInfo.Gender*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  id: GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Предоставляет хэш-код для `VoiceInfo` объекта."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для текущего <xref href=&quot;System.Speech.Synthesis.VoiceInfo&quot;> </xref> объекта."
  overload: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Id
  id: Id
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Получает идентификатор голоса."
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "Возвращает идентификатор для голоса."
  overload: System.Speech.Synthesis.VoiceInfo.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.Name
  id: Name
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает название используемого голоса."
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "Возвращает название используемого голоса."
  overload: System.Speech.Synthesis.VoiceInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  id: SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  langs:
  - csharp
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает коллекцию поддерживаемых голос аудио форматов."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo> SupportedAudioFormats { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
      description: "Возвращает коллекцию звуковых форматов, поддерживаемых голоса."
  overload: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
  fullName: System.Speech.Synthesis.VoiceInfo.AdditionalInfo
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.Age
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
  fullName: System.Speech.Synthesis.VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.VoiceInfo.Culture
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
  fullName: System.Speech.Synthesis.VoiceInfo.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.VoiceInfo.Description
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
  fullName: System.Speech.Synthesis.VoiceInfo.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.VoiceInfo.Equals(System.Object)
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: VoiceInfo.Equals(Object)
  fullName: System.Speech.Synthesis.VoiceInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.VoiceInfo.Gender
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
  fullName: System.Speech.Synthesis.VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: VoiceInfo.GetHashCode()
  fullName: System.Speech.Synthesis.VoiceInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.VoiceInfo.Id
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
  fullName: System.Speech.Synthesis.VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
  fullName: System.Speech.Synthesis.VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
  fullName: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.AudioFormat.SpeechAudioFormatInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<SpeechAudioFormatInfo>
  nameWithType: ReadOnlyCollection<SpeechAudioFormatInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.AudioFormat.SpeechAudioFormatInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
    name: SpeechAudioFormatInfo
    nameWithType: SpeechAudioFormatInfo
    fullName: SpeechAudioFormatInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.VoiceInfo.AdditionalInfo*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: AdditionalInfo
  nameWithType: VoiceInfo.AdditionalInfo
- uid: System.Speech.Synthesis.VoiceInfo.Age*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Age
  nameWithType: VoiceInfo.Age
- uid: System.Speech.Synthesis.VoiceInfo.Culture*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Culture
  nameWithType: VoiceInfo.Culture
- uid: System.Speech.Synthesis.VoiceInfo.Description*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Description
  nameWithType: VoiceInfo.Description
- uid: System.Speech.Synthesis.VoiceInfo.Equals*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Equals
  nameWithType: VoiceInfo.Equals
- uid: System.Speech.Synthesis.VoiceInfo.Gender*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Gender
  nameWithType: VoiceInfo.Gender
- uid: System.Speech.Synthesis.VoiceInfo.GetHashCode*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: GetHashCode
  nameWithType: VoiceInfo.GetHashCode
- uid: System.Speech.Synthesis.VoiceInfo.Id*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Id
  nameWithType: VoiceInfo.Id
- uid: System.Speech.Synthesis.VoiceInfo.Name*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: Name
  nameWithType: VoiceInfo.Name
- uid: System.Speech.Synthesis.VoiceInfo.SupportedAudioFormats*
  parent: System.Speech.Synthesis.VoiceInfo
  isExternal: false
  name: SupportedAudioFormats
  nameWithType: VoiceInfo.SupportedAudioFormats
