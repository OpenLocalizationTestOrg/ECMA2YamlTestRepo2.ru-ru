### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "Представляет экземпляр рабочего процесса."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Класс WorkflowInstance предоставляет методы и свойства, которые могут использоваться для управления выполнением экземпляра рабочего процесса; Это по сути прокси для фактического экземпляра рабочего процесса используется подсистемой среды выполнения рабочего процесса. Узел или служба могут предписать механизму среды выполнения рабочего процесса для выполнения действий в экземпляре рабочего процесса, вызвав соответствующие методы, содержащиеся в классе WorkflowInstance.  Если запрошенное действие является недопустимым, например, если узел вызывает метод <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>для экземпляра рабочего процесса, который уже завершен, механизм среды выполнения рабочих процессов вызовет соответствующее исключение.</xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>      Настроек [!NOTE] настроек Если экземпляр рабочего процесса перестает отвечать, так как вызов ведущего приложения не возвращается, единственным способом восстановления этого экземпляра будет перезапуск среды выполнения. Тем не менее, если экземпляр был принудительно выгружен, прерван или приостановлен, он может быть продолжен, вызвав <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>метод.</xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Прерывает экземпляр рабочего процесса."
  remarks: "Экземпляр рабочего процесса прерывается в синхронном режиме; то есть метод возвращается после прерывания экземпляра рабочего процесса. Механизм среды выполнения рабочих процессов делает недействительным в памяти экземпляр рабочего процесса и очищает <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> Если служба постоянного хранения использовался экземпляр рабочего процесса, все действия выполняются с момента последней точки сохранения, отбрасываются. После прерывания экземпляра рабочего процесса, подсистема среды выполнения рабочего процесса вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>событий.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> Можно вызвать <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>Повторная загрузка экземпляра рабочего процесса и запуск из ее последней точки сохранения.</xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>       `Abort`отличается от <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>в что, хотя `Abort` просто удаляет экземпляр рабочего процесса в памяти, можно перезапустить с точки последнего сохранения, Terminate удаляет экземпляр рабочего процесса в памяти и уведомляет службу сохраняемости о том, что экземпляр удален из памяти.</xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> Для <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, это означает, что все сведения о состоянии для этого экземпляра рабочего процесса удаляются из базы данных при его завершении.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Вы не сможете перезагрузить экземпляр рабочего процесса с ранее сохраненной точки."
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Применяет изменения к экземпляра рабочего процесса, заданного параметром <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> объекта."
  remarks: "Если экземпляр рабочего процесса еще не приостановлен, механизм среды выполнения рабочих процессов временно приостанавливает выполнение экземпляра перед применением изменений."
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "Объект <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> задающий динамические обновления для экземпляра рабочего процесса."
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Синхронно отправляет сообщение в указанную очередь рабочего процесса."
  remarks: "Отправляет `item` на указанный <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Если вы хотите получать уведомления при доставке сообщения, можно реализовать <xref:System.Workflow.Runtime.IPendingWork>в службы и передать `workItem` и <xref:System.Workflow.Runtime.IPendingWork>объект EnqueueItem.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Если такое уведомление не требуется, можно передать неопределенную ссылку (`Nothing` в Visual Basic) для `pendingWork` и `workItem`.       При использовании этого метода с рабочего потока конечного компьютера, можно получить исключение с сообщением «очередь «{0}» не включена.» Это происходит, когда текущее состояние конечного автомата не знает, как обработать определенное событие. Например, если какое-либо состояние, отличное от текущего содержит <xref:System.Workflow.Activities.EventDrivenActivity>, содержащий <xref:System.Workflow.Activities.HandleExternalEventActivity>, представленный очереди «{0}».</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>      Настроек [!NOTE] настроек должны быть получены в экземпляре рабочего процесса в порядке, в котором они были отправлены сообщения не гарантируется. Например при получении сообщения в существующей очереди (очередь A) вызывает рабочий процесс создает другую очередь (очередь B), которая затем ожидает другое сообщение, отправленное после первого сообщения, возможна второе сообщение поступит первым что не будет получен из-за его очередь еще не создана. Чтобы предотвратить эту проблему, второе сообщение не следует отправлять до проверки на наличие его очереди (с помощью <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "Имя <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Объект для постановки в очередь."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> , Позволяющий отправителю получать уведомления при `item` доставки."
    - id: workItem
      type: System.Object
      description: "Объект должен быть передан <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> методы."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>является пустой ссылкой (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется.       - или - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> заданные <code> queueName </code> не существует.       - или - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> заданные <code> queueName </code> не включена."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Отправляет сообщение в указанную очередь рабочего процесса при простое рабочего процесса. EnqueueItemOnIdle ожидает, пока не будет начато следующей точки бездействия и ставит в очередь после проверки того, что планировщик рабочего процесса простаивает (то есть нет активных операций выполняется)."
  remarks: "Ожидает, пока экземпляр рабочего процесса в состояние бездействия, а затем отправляет `item` на указанный <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Если вызвать EnqueueItemOnIdle, пока экземпляр рабочего процесса приостановлена, механизм среды выполнения рабочих процессов вызовет <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> Если вы хотите получать уведомления при доставке сообщения, можно реализовать <xref:System.Workflow.Runtime.IPendingWork>в службы и передать `workItem` и <xref:System.Workflow.Runtime.IPendingWork>объект <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> </xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Если такое уведомление не требуется, можно передать неопределенную ссылку (`Nothing` в Visual Basic) для `pendingWork` и `workItem`.       При использовании этого метода с рабочего потока конечного компьютера, можно получить исключение с сообщением «Очередь «{0}» не включена.» Это происходит, когда текущее состояние конечного автомата не знает, как обработать определенное событие. Например, если какое-либо состояние, отличное от текущего содержит <xref:System.Workflow.Activities.EventDrivenActivity>, содержащий <xref:System.Workflow.Activities.HandleExternalEventActivity>, представленный очереди «{0}».</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>"
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "Имя <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Объект для постановки в очередь."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> , Позволяющий отправителю получать уведомления при `item` доставки."
    - id: workItem
      type: System.Object
      description: "Объект должен быть передан <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> методы."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>является пустой ссылкой (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется.       - или - приостановленного экземпляра рабочего процесса.       - или - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> заданные <code> queueName </code> не существует.       - или - <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> заданные <code> queueName </code> не включена."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает значение, указывающее, равен ли указанный объект к <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  remarks: "Объект должен быть экземпляром <xref:System.Workflow.Runtime.WorkflowInstance>класса и имеют одинаковые <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>как <xref:System.Workflow.Runtime.WorkflowInstance>.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> </xref:System.Workflow.Runtime.WorkflowInstance>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект для сравнения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный объект равен этому <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает хэш-код данного экземпляра рабочего процесса."
  remarks: "GetHashCode Возвращает хэш-код на основе значения <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для данного <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает корневое действие для данного экземпляра рабочего процесса."
  remarks: "Корневое действие можно использовать для перемещения по иерархии действий рабочего процесса.       Этот метод не является потокобезопасным, поэтому узел должен синхронизировать свои вызовы этого метода."
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> Объекта."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает следующий момент времени, который <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> запланирована должно быть передано сообщение таймера."
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "Значение DateTime представляет следующий <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>это время <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> будет доставлено сообщение таймера.</xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает коллекцию <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> объектов, которая содержит ожидающие элементы и подписанные действия для очередей рабочего процесса, связанного с данным экземпляром рабочего процесса."
  remarks: "GetWorkflowQueueData возвращает коллекцию <xref:System.Workflow.Runtime.WorkflowQueueInfo>объектов, каждый из которых содержит сведения о состоянии одной из очередей рабочего процесса, связанного с данным экземпляром рабочего процесса.</xref:System.Workflow.Runtime.WorkflowQueueInfo> <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>содержит ожидающие элементы <xref:System.Workflow.Runtime.WorkflowQueue>и <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>содержит список действий, которые подписаны на доставку элементов <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> </xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> </xref:System.Workflow.Runtime.WorkflowQueue></xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "Объект &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; из <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> объектов."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает уникальный идентификатор для экземпляра рабочего процесса."
  remarks: "Идентификатор экземпляра можно использовать для ссылки на экземпляр рабочего процесса."
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "<xref:System.Guid>Экземпляра рабочего процесса.</xref:System.Guid>"
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Загружает ранее выгруженный экземпляр рабочего процесса."
  remarks: "Загрузка является синхронным; При загрузке экземпляра рабочего процесса после экземпляра рабочего процесса был загружен в память и план выполнения механизмом среды выполнения рабочего процесса будет возвращать нагрузки. Среда выполнения вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>событие после восстановления службой сохраняемости экземпляра рабочего процесса в памяти, но перед рабочего процесса механизм среды выполнения планирует экземпляра.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>"
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Перезагрузите профили отслеживания для данного экземпляра рабочего процесса."
  remarks: "Инфраструктура отслеживания среды выполнения перезагрузит все <xref:System.Workflow.Runtime.Tracking.TrackingProfile>для данного экземпляра рабочего процесса, связанных с ее каналами отслеживания.</xref:System.Workflow.Runtime.Tracking.TrackingProfile> Если она отсутствует в приостановленном состоянии, рабочий процесс временно приостанавливается при повторной загрузке профилей отслеживания, инфраструктура отслеживания среды выполнения."
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возобновляет выполнение ранее приостановленного экземпляра рабочего процесса."
  remarks: "Узел может вызвать Resume для возобновления выполнения экземпляра рабочего процесса, который был ранее приостановлен. Если экземпляр рабочего процесса не находится в приостановленном состоянии, никакие действия не выполняются. Среда выполнения вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>событие только до возобновления выполнения экземпляра рабочего процесса.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>"
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Запускает выполнение экземпляра рабочего процесса."
  remarks: "Запуск вызовы <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>для корневого действия данного экземпляра рабочего процесса.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> Если запуск возникает исключение, он завершает экземпляр рабочего процесса путем вызова <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>с <xref:System.Exception.Message%2A>свойство исключения, переданного в качестве причины завершения.</xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>"
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется.       - или - экземпляр рабочего процесса уже запущен."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Приостанавливает экземпляр рабочего процесса."
  remarks: "Экземпляр рабочего процесса приостановлен в синхронном режиме. Если экземпляр рабочего процесса уже приостановлен, то никакие действия не выполняются; в противном случае механизм среды выполнения рабочих процессов приостанавливает экземпляр рабочего процесса, вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>событий и передает исключение `reason` в <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>      Настроек [!NOTE] настроек Suspend не выгружает экземпляр рабочего процесса."
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "Описание причины приостановки экземпляра рабочего процесса."
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Завершает экземпляр рабочего процесса в синхронном режиме."
  remarks: "Экземпляр рабочего процесса завершено в синхронном режиме. Узел вызывает метод завершения для завершения выполнения экземпляра рабочего процесса. Механизм среды выполнения рабочих процессов удаляет экземпляр рабочего процесса в памяти и уведомляет службу сохраняемости о том, что экземпляр удален из памяти. Для <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, это означает, что все сведения о состоянии для этого экземпляра рабочего процесса удаляются из базы данных при его завершении.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Вы не сможете перезагрузить экземпляр рабочего процесса с ранее сохраненной точки.       После удаления экземпляра рабочего процесса в памяти и уведомления службы сохраняемости о завершении, `Terminate` вызывает метод <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>событий и передает исключение `reason` в <xref:System.Exception.Message%2A>свойство, <xref:System.Workflow.ComponentModel.WorkflowTerminatedException>содержащихся в списке <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> </xref:System.Workflow.ComponentModel.WorkflowTerminatedException> </xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>       `Terminate`отличается от <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>только в том, что при прекращении удаляет экземпляр рабочего процесса в памяти и уведомляет службу сохраняемости о завершении, `Abort` просто удаляет экземпляр рабочего процесса в памяти, который впоследствии можно перезапустить с точки последнего сохранения.</xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>"
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "Описание причины завершения работы экземпляра рабочего процесса."
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Механизм среды выполнения рабочего процесса не выполняется."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Выгружает экземпляр рабочего процесса из памяти в хранилище сохраняемости, когда экземпляр будет приостановлен или бездействует."
  remarks: "Если экземпляр рабочего процесса приостановлен или бездействует, TryUnload использует службу сохраняемости для удаления экземпляра рабочего процесса из памяти и ее сохранения в хранилище данных. Если имеется служба сохраняемости, зарегистрированная <xref:System.Workflow.Runtime.WorkflowRuntime>TryUnload вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> Если экземпляр рабочего процесса сохранен успешно, среда выполнения вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>события и возвращает `true`.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>Возвращает `false` Если экземпляр рабочего процесса уже был выгружен, был завершен, была прервана или уже завершена.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>       Узел может использовать TryUnload для освобождения системных ресурсов бездействующего рабочего процесса."
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если экземпляр рабочего процесса выгружен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Отсутствует служба сохраняемости, зарегистрированная механизмом среды выполнения рабочих процессов."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Выгружает экземпляр рабочего процесса из памяти в хранилище сохраняемости. Этот вызов блокируется до, после завершения текущих запланированных заданий или до окончания области транзакции."
  remarks: "Выгрузить является синхронным; то есть после завершения он возвращает любое действие, которое выполняет его. Если экземпляр рабочего процесса не бездействует, среда выполнения ожидает, пока экземпляр может быть прервана. Экземпляр может быть прерван только после завершения текущей запланированного рабочего элемента; Это обычно происходит, когда выполняемое действие возвращает из его <xref:System.Workflow.ComponentModel.Activity.Execute%2A>метод.</xref:System.Workflow.ComponentModel.Activity.Execute%2A> Тем не менее если экземпляр выполняет <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, область транзакции должна завершить выполнение перед экземпляр может быть прервана.</xref:System.Workflow.ComponentModel.TransactionScopeActivity> Выгрузить затем использует службу сохраняемости для удаления экземпляра рабочего процесса из памяти и сохраняет ее в хранилище данных. Если имеется служба сохраняемости, зарегистрированная <xref:System.Workflow.Runtime.WorkflowRuntime>Выгрузка вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> Если экземпляр рабочего процесса сохранен успешно, среда выполнения вызывает <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>событий.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>       Узел может использовать выгрузить для освобождения системных ресурсов бездействующего рабочего процесса."
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Отсутствует служба сохраняемости, зарегистрированная механизмом среды выполнения рабочих процессов."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Возвращает <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> для данного экземпляра рабочего процесса."
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "Объект <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> , представляющий среду выполнения, в котором выполняется данный экземпляр рабочего процесса."
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
