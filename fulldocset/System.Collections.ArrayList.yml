### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Реализует <xref:System.Collections.IList>интерфейса с помощью массива, размер которого динамически увеличивается по требованию.</xref:System.Collections.IList>       Для просмотра исходного кода .NET Framework для этого типа, в разделе [ссылки на источник](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]Настроек исходного кода .NET Framework для этого типа см. в разделе [ссылки на источник](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). Выполнять поиск исходного кода в Интернете, справочник для автономной работы и пошагово источники (включая исправления и обновления) во время отладки; в разделе [инструкции](http://referencesource.microsoft.com/).       Класс ArrayList предназначен для хранения разнородные коллекции объектов. Однако он не всегда предлагает наивысшую производительность. Вместо этого рекомендуется следующее: - для разнородных коллекции объектов, используйте `List<Object>` (в C#) или `List(Of Object)` (в Visual Basic) введите.      -Для однородной коллекцию объектов используйте <xref:System.Collections.Generic.List%601>класс.</xref:System.Collections.Generic.List%601>       В разделе «Вопросы производительности» в <xref:System.Collections.Generic.List%601>справочном разделе обсуждение относительную производительность этих классов.</xref:System.Collections.Generic.List%601>       ArrayList не обязательно быть отсортированы.  Сначала нужно отсортировать ArrayList путем вызова его <xref:System.Collections.ArrayList.Sort%2A>метод перед выполнением операций (таких как <xref:System.Collections.ArrayList.BinarySearch%2A>), требующих ArrayList должны быть отсортированы.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> Чтобы поддерживать коллекцию, которая автоматически сортируется по мере добавления новых элементов, можно использовать <xref:System.Collections.Generic.SortedSet%601>класс.</xref:System.Collections.Generic.SortedSet%601>       Емкость ArrayList — количество элементов, которые может вместить ArrayList. При добавлении элементов ArrayList емкость автоматически увеличивается должным образом посредством перераспределения. Емкость может быть уменьшена путем вызова <xref:System.Collections.ArrayList.TrimToSize%2A>или установив <xref:System.Collections.ArrayList.Capacity%2A>свойство явно.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       Для очень больших объектов ArrayList, максимальная емкость 2 миллиардов элементы в 64-разрядной системе можно повысить, указав `enabled` атрибута элемента конфигурации для `true` в среде выполнения.       Элементы в этой коллекции осуществляется с помощью целочисленного индекса.  Индексы в этой коллекции отсчитываются от нуля.       Принимает коллекцию ArrayList `null` как допустимое значение. Она также позволяет повторяющиеся элементы.       Использование многомерные массивы как элементы в коллекции ArrayList не поддерживается."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.ArrayList&quot;> </xref> класс, который является пустым и имеет начальную емкость по умолчанию."
  remarks: "Емкость <xref:System.Collections.ArrayList>— количество элементов, <xref:System.Collections.ArrayList>поместятся.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> При добавлении элементов к <xref:System.Collections.ArrayList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.ArrayList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Этот конструктор является операцией o(1)."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.ArrayList&quot;> </xref> класса, содержит элементы, скопированные из указанной коллекции, и обладает начальной емкостью, равной количеству скопированных элементов."
  remarks: "Емкость <xref:System.Collections.ArrayList>— количество элементов, <xref:System.Collections.ArrayList>поместятся.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> При добавлении элементов к <xref:System.Collections.ArrayList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.ArrayList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Элементы копируются <xref:System.Collections.ArrayList>в том же порядке, они считываются по <xref:System.Collections.IEnumerator> <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.ArrayList>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>, Элементы которой копируются в новый список.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.ArrayList&quot;> </xref> класс, который является пустым и обладает указанной начальной емкостью."
  remarks: "Емкость <xref:System.Collections.ArrayList>— количество элементов, <xref:System.Collections.ArrayList>поместятся.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> При добавлении элементов к <xref:System.Collections.ArrayList>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</xref:System.Collections.ArrayList>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Число элементов, которые может изначально вместить новый список."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Создает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> программы-оболочки для конкретного <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  remarks: "Адаптер не копирует содержимое <xref:System.Collections.IList>.</xref:System.Collections.IList> Вместо этого он создает <xref:System.Collections.ArrayList>оболочку вокруг <xref:System.Collections.IList>; таким образом, изменения <xref:System.Collections.IList>также влияет на <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> </xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList>Предоставляет универсальный класс <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>и <xref:System.Collections.ArrayList.Sort%2A>методы.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> Эта оболочка может быть возможность использовать эти методы <xref:System.Collections.IList>, однако этих универсальных операций через программу-оболочку может оказаться менее эффективным, чем применение непосредственно на <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.IList>       Этот метод является операцией o(1).      ## Версия совместимости в .NET Framework версий 1.0 и 1.1, вызов <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>перегрузку метода <xref:System.Collections.ArrayList>оболочки возвращается перечислитель, который обрабатывается второй аргумент, как верхнюю границу, а не как число.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> В [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] второй аргумент правильно воспринимается как количество."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Программы-оболочки.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Оболочка <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Добавляет объект в конец <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Если <xref:System.Collections.ArrayList.Count%2A>уже равно <xref:System.Collections.ArrayList.Capacity%2A>, емкости из <xref:System.Collections.ArrayList>увеличивается на автоматического перераспределения внутреннего массива и существующие элементы копируются в новый массив перед добавлением нового элемента.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Если <xref:System.Collections.ArrayList.Count%2A>является менее <xref:System.Collections.ArrayList.Capacity%2A>, этот метод является операцией o(1).</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Если емкость требуется увеличить для размещения нового элемента, этот метод становится операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для добавления в конец <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Индекс, по которому <code> value </code> был добавлен."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Добавляет элементы <xref:System.Collections.ICollection>в конец <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Порядок элементов <xref:System.Collections.ICollection>сохраняется в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Если новый <xref:System.Collections.ArrayList.Count%2A>(текущего <xref:System.Collections.ArrayList.Count%2A>плюс размер коллекции) больше значения <xref:System.Collections.ArrayList.Capacity%2A>, емкости из <xref:System.Collections.ArrayList>увеличивается на автоматически перераспределения внутреннего массива для размещения новых элементов, и существующие элементы копируются в новый массив перед добавлением новых элементов.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Если <xref:System.Collections.ArrayList>может вместить новые элементы без увеличения <xref:System.Collections.ArrayList.Capacity%2A>, этот метод является операцией O (`n`) операции, где `n` — количество элементов для добавления.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Если емкость требуется увеличить для размещения новых элементов, этот метод становится операцией O (`n` + `m`) операции, где `n` — количество элементов для добавления и `m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>, Элементы которого должны быть добавлены в конец <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Сама коллекция не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, но может содержать элементы, которые являются <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет поиск по всему отсортированному списку <xref href=&quot;System.Collections.ArrayList&quot;> </xref> для элемента, используя компаратор по умолчанию и возвращает отсчитываемый от нуля индекс элемента."
  remarks: "`value` И каждый элемент из <xref:System.Collections.ArrayList>необходимо реализовать <xref:System.IComparable>интерфейс, который используется для сравнения.</xref:System.IComparable> </xref:System.Collections.ArrayList> Элементы <xref:System.Collections.ArrayList>уже должны быть отсортированы по возрастанию в соответствии с порядком сортировки, заданным по <xref:System.IComparable>реализации; в противном случае результаты могут быть неправильными.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Сравнение `null` допускается с любым типом и не создает исключение при использовании <xref:System.IComparable>.</xref:System.IComparable> При сортировке, `null` считается меньше любого другого объекта.       Если <xref:System.Collections.ArrayList>содержит более одного элемента с тем же значением, метод возвращает только одно из вхождений и он может возвращать одно из вхождений, не обязательно первый.</xref:System.Collections.ArrayList>       Если <xref:System.Collections.ArrayList>не содержит указанное значение, метод возвращает отрицательное целое число.</xref:System.Collections.ArrayList> Можно применить побитовую операцию дополнения (~) для этого отрицательное целое число, возвращается индекс первого элемента, большего, чем искомое значение. При вставке значения в <xref:System.Collections.ArrayList>, следует использовать этот индекс позиции для сохранения порядка сортировки.</xref:System.Collections.ArrayList>       Этот метод является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Искомый.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <code> value </code> в отсортированном списке <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, если <code> value </code> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <code> value </code> или, если большего элемента не, поразрядным дополнением значения <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ни <code> value </code> ни элементы <xref href=&quot;System.Collections.ArrayList&quot;> </xref> реализовать <xref:System.IComparable>интерфейса.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>не совпадает с типом элементов <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет поиск по всему отсортированному списку <xref href=&quot;System.Collections.ArrayList&quot;> </xref> для элемента, используя указанный компаратор и возвращает отсчитываемый от нуля индекс элемента."
  remarks: "Функция сравнения определяет способ сравнения элементов. Например, можно использовать <xref:System.Collections.CaseInsensitiveComparer>экземпляр как функцию сравнения для выполнения поиска без учета регистра строк.</xref:System.Collections.CaseInsensitiveComparer>       Если `comparer` предоставляется элементы <xref:System.Collections.ArrayList>сравниваются с указанным значением, используя указанный <xref:System.Collections.IComparer>реализации.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Элементы <xref:System.Collections.ArrayList>уже должны быть отсортированы по возрастанию в соответствии с порядком сортировки, заданным по `comparer`; в противном случае результаты могут быть неправильными.</xref:System.Collections.ArrayList>       Если `comparer` — `null`, сравнение выполняется с помощью <xref:System.IComparable>реализацию, предоставляемую самим элементом и указанным значением.</xref:System.IComparable> Элементы <xref:System.Collections.ArrayList>уже должны быть отсортированы по возрастанию в соответствии с порядком сортировки, заданным по <xref:System.IComparable>реализации; в противном случае результаты могут быть неправильными.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Сравнение `null` допускается с любым типом и не создает исключение при использовании <xref:System.IComparable>.</xref:System.IComparable> При сортировке, `null` считается меньше любого другого объекта.       Если <xref:System.Collections.ArrayList>содержит более одного элемента с тем же значением, метод возвращает только одно из вхождений и он может возвращать одно из вхождений, не обязательно первый.</xref:System.Collections.ArrayList>       Если <xref:System.Collections.ArrayList>не содержит указанное значение, метод возвращает отрицательное целое число.</xref:System.Collections.ArrayList> Можно применить побитовую операцию дополнения (~) для этого отрицательное целое число, возвращается индекс первого элемента, большего, чем искомое значение. При вставке значения в <xref:System.Collections.ArrayList>, следует использовать этот индекс позиции для сохранения порядка сортировки.</xref:System.Collections.ArrayList>       Этот метод является операцией O (журнала `n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Искомый.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении элементов.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, <xref:System.IComparable>реализации каждого элемента.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <code> value </code> в отсортированном списке <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, если <code> value </code> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <code> value </code> или, если большего элемента не, поразрядным дополнением значения <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и ни <code>value</code> ни элементы <xref href=&quot;System.Collections.ArrayList&quot;> </xref> реализовать <xref:System.IComparable> интерфейса."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и <code>value</code> не совпадает с типом элементов <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет в диапазоне элементов отсортированного списка <xref href=&quot;System.Collections.ArrayList&quot;> </xref> для элемента, используя указанный компаратор и возвращает отсчитываемый от нуля индекс элемента."
  remarks: "Функция сравнения определяет способ сравнения элементов. Например, можно использовать <xref:System.Collections.CaseInsensitiveComparer>экземпляр как функцию сравнения для выполнения поиска без учета регистра строк.</xref:System.Collections.CaseInsensitiveComparer>       Если `comparer` предоставляется элементы <xref:System.Collections.ArrayList>сравниваются с указанным значением, используя указанный <xref:System.Collections.IComparer>реализации.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> Элементы <xref:System.Collections.ArrayList>уже должны быть отсортированы по возрастанию в соответствии с порядком сортировки, заданным по `comparer`; в противном случае результаты могут быть неправильными.</xref:System.Collections.ArrayList>       Если `comparer` — `null`, сравнение выполняется с помощью <xref:System.IComparable>реализацию, предоставляемую самим элементом и указанным значением.</xref:System.IComparable> Элементы <xref:System.Collections.ArrayList>уже должны быть отсортированы по возрастанию в соответствии с порядком сортировки, заданным по <xref:System.IComparable>реализации; в противном случае результаты могут быть неправильными.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Сравнение `null` допускается с любым типом и не создает исключение при использовании <xref:System.IComparable>.</xref:System.IComparable> При сортировке, `null` считается меньше любого другого объекта.       Если <xref:System.Collections.ArrayList>содержит более одного элемента с тем же значением, метод возвращает только одно из вхождений и он может возвращать одно из вхождений, не обязательно первый.</xref:System.Collections.ArrayList>       Если <xref:System.Collections.ArrayList>не содержит указанное значение, метод возвращает отрицательное целое число.</xref:System.Collections.ArrayList> Можно применить побитовую операцию дополнения (~) для этого отрицательное целое число, возвращается индекс первого элемента, большего, чем искомое значение. При вставке значения в <xref:System.Collections.ArrayList>, следует использовать этот индекс позиции для сохранения порядка сортировки.</xref:System.Collections.ArrayList>       Этот метод является операцией O (журнала `n`) операции, где `n` — `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля начальный индекс диапазона поиска."
    - id: count
      type: System.Int32
      description: "Длина диапазона поиска."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Искомый.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении элементов.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, <xref:System.IComparable>реализации каждого элемента.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <code> value </code> в отсортированном списке <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, если <code> value </code> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <code> value </code> или, если большего элемента не, поразрядным дополнением значения <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - или - <code>comparer</code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и ни <code>value</code> ни элементы <xref href=&quot;System.Collections.ArrayList&quot;> </xref> реализовать <xref:System.IComparable> интерфейса."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и <code>value</code> не совпадает с типом элементов <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает число элементов, которые <xref href=&quot;System.Collections.ArrayList&quot;> </xref> может содержать."
  remarks: "Емкость — количество элементов, <xref:System.Collections.ArrayList>можно хранить.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>число элементов, фактически <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Count%2A>       Емкость всегда больше или равно <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Если <xref:System.Collections.ArrayList.Count%2A>превышает емкость при добавлении элементов, емкость автоматически увеличивается за счет перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</xref:System.Collections.ArrayList.Count%2A>       Емкость может быть уменьшена путем вызова <xref:System.Collections.ArrayList.TrimToSize%2A>или явным образом задав свойство Capacity.</xref:System.Collections.ArrayList.TrimToSize%2A> Если явно задано значение емкости, внутреннего массива также перераспределяется в соответствии с указанной емкостью.       Получение значения данного свойства является операцией o(1). Задание этого свойства является операцией O (`n`) операции, где `n` — новое значение емкости."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Число элементов, <xref href=&quot;System.Collections.ArrayList&quot;> </xref> может содержать."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Емкость присвоено значение, которое меньше, чем <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Не хватает памяти доступны в системе."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет все элементы из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>имеет значение&0;, а также ссылки на другие объекты из элементов коллекции также освобождаются.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>остается без изменений.</xref:System.Collections.ArrayList.Capacity%2A>  Чтобы сбросить емкость <xref:System.Collections.ArrayList>, вызовите <xref:System.Collections.ArrayList.TrimToSize%2A>или задать <xref:System.Collections.ArrayList.Capacity%2A>непосредственно.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> Удаление пустой <xref:System.Collections.ArrayList>Задает емкость объекта <xref:System.Collections.ArrayList>емкость по умолчанию.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Создает неполную копию объекта <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Неполная копия коллекции копируются только элементы коллекции, они являются ссылочными типами или типами значений, но не копирует объекты, которые ссылаются на. Ссылки в новой коллекции указывают на те же объекты, на которые указывают ссылки в исходной коллекции.       Напротив глубокую копию коллекции копирует элементы и все, что прямо или косвенно ссылаются элементы.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Неполная копия <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли элемент в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует целую коллекцию <xref href=&quot;System.Collections.ArrayList&quot;> </xref> в совместимый одномерный массив <xref:System.Array>, начиная с начала целевого массива.</xref:System.Array>"
  remarks: "Указанный массив должен иметь совместимый тип.       Этот метод использует <xref:System.Array.Copy%2A?displayProperty=fullName>копируются элементы.</xref:System.Array.Copy%2A?displayProperty=fullName>       Элементы копируются <xref:System.Array>в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, является целевым для элементов, копируемых из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;System.Collections.ArrayList&quot;> </xref> больше, чем число элементов, назначение <code>array</code> может содержать."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует целую коллекцию <xref href=&quot;System.Collections.ArrayList&quot;> </xref> в совместимый одномерный массив <xref:System.Array>, начиная с указанного индекса целевого массива.</xref:System.Array>"
  remarks: "Указанный массив должен иметь совместимый тип.       Этот метод использует <xref:System.Array.Copy%2A?displayProperty=fullName>копируются элементы.</xref:System.Array.Copy%2A?displayProperty=fullName>       Элементы копируются <xref:System.Array>в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, является целевым для элементов, копируемых из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;System.Collections.ArrayList&quot;> </xref> больше, чем свободное пространство от <code>arrayIndex</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует диапазон элементов из <xref href=&quot;System.Collections.ArrayList&quot;> </xref> в совместимый одномерный массив <xref:System.Array>, начиная с указанного индекса целевого массива.</xref:System.Array>"
  remarks: "Указанный массив должен иметь совместимый тип.       Этот метод использует <xref:System.Array.Copy%2A?displayProperty=fullName>копируются элементы.</xref:System.Array.Copy%2A?displayProperty=fullName>       Элементы копируются <xref:System.Array>в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Array>       Этот метод является операцией O (`n`) операции, где `n` — `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс исходного списка <xref href=&quot;System.Collections.ArrayList&quot;> </xref> с которого начинается копирование."
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, является целевым для элементов, копируемых из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
    - id: count
      type: System.Int32
      description: "Число копируемых элементов."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>arrayIndex</code> меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - <code>index</code> больше или равно значению <xref:System.Collections.ArrayList.Count*> источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - или - количество элементов из <code>index</code> конец источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref> больше, чем свободное пространство от <code>arrayIndex</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает количество элементов, фактически содержащихся в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>число элементов, <xref:System.Collections.ArrayList>можно хранить.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Число — количество элементов, фактически <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList.Capacity%2A>всегда равно, больше или равно числу.</xref:System.Collections.ArrayList.Capacity%2A> Если число превышает <xref:System.Collections.ArrayList.Capacity%2A>при добавлении элементов, емкость автоматически увеличивается за счет перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</xref:System.Collections.ArrayList.Capacity%2A>       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Число элементов, фактически содержащихся в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> оболочки фиксированного размера."
  remarks: "Эта оболочка может использоваться для предотвращения операций добавления и удаления элементов в исходном <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> Элементы по-прежнему может быть изменен или заменен.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Программы-оболочки."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Оболочки фиксированного размера."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IList>оболочки фиксированного размера.</xref:System.Collections.IList>"
  remarks: "Эта оболочка может использоваться для предотвращения операций добавления и удаления элементов в исходном <xref:System.Collections.IList>.</xref:System.Collections.IList> Элементы по-прежнему может быть изменен или заменен.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Этот метод является операцией o(1)."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Программы-оболочки.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Оболочки фиксированного размера.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает перечислитель для всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "`foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A>  В этой позиции <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой.  Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления.  Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию.       Этот метод является операцией o(1)."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Для всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает перечислитель для диапазона элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "`foreach` Инструкции языка C# (`for each` в Visual C++ `For Each` Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A>  В этой позиции <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой.  Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления.  Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию.       Этот метод является операцией o(1).      ## Совместимость в .NET Framework версии 1.0 и 1.1, перечислитель для <xref:System.Collections.ArrayList>оболочки, возвращаемой методом <xref:System.Collections.ArrayList.Adapter%2A>метод обрабатываются второй аргумент, как верхнюю границу, а не как число.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> В [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] второй аргумент правильно воспринимается как количество."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля начальный индекс <xref href=&quot;System.Collections.ArrayList&quot;> </xref> раздел, который должен ссылаться перечислитель."
    - id: count
      type: System.Int32
      description: "Число элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref> раздел, который должен ссылаться перечислитель."
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Для указанного диапазона элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> которого представляет собой подмножество элементов в исходном <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Этот метод не создает копии элементов. Новым <xref:System.Collections.ArrayList>является только окно представления в источнике <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Тем не менее все последующие изменения в источник, <xref:System.Collections.ArrayList>должны осуществляться через окно представления <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Если изменения были внесены непосредственно к источнику <xref:System.Collections.ArrayList>, окно просмотра <xref:System.Collections.ArrayList>становится недействительным и какие-либо операции, будут возвращать <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля <xref href=&quot;System.Collections.ArrayList&quot;> </xref> индекс, с которого начинается диапазон."
    - id: count
      type: System.Int32
      description: "Число элементов в диапазоне."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Которого представляет собой подмножество элементов в исходном <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс первого вхождения в пределах всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Осуществляется в прямом направлении, начиная с первого элемента и заканчивая последним элементом.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого вхождения <code> value </code> в пределах всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс первого вхождения в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начиная с указанного индекса до конца элемента.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Выполняется от на `startIndex` и заканчивая последним элементом.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` — количество элементов из `startIndex` конец <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс начала поиска. 0 (ноль) действительно в пустом списке."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого вхождения <code> value </code> в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начиная с <code> startIndex </code> на последний элемент, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс первого вхождения в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начинается с заданного индекса и содержащем указанное число элементов.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Выполняется от в `startIndex` и заканчивая `startIndex` , а также `count` минус 1, если `count` больше 0.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` — `count`.       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс начала поиска. 0 (ноль) действительно в пустом списке."
    - id: count
      type: System.Int32
      description: "Число элементов в диапазоне поиска."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого вхождения <code> value </code> в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начинающемся <code> startIndex </code> и содержит <code> count </code> элементов, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - или - <code>count</code> меньше нуля.       - или - <code>startIndex</code> и <code>count</code> не указывают допустимый раздел в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Вставляет элемент в <xref href=&quot;System.Collections.ArrayList&quot;> </xref> по указанному индексу."
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Если <xref:System.Collections.ArrayList.Count%2A>уже равно <xref:System.Collections.ArrayList.Capacity%2A>, емкости из <xref:System.Collections.ArrayList>увеличивается на автоматического перераспределения внутреннего массива и существующие элементы копируются в новый массив перед добавлением нового элемента.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Если `index` равен <xref:System.Collections.ArrayList.Count%2A>, `value` добавляется в конец <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       В коллекциях с непрерывным набором элементов таких как списки, следующие за точкой вставки элементы перемещаются вниз для размещения нового элемента. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `value` следует вставить."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для вставки.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше, чем <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Вставляет элементы коллекции в <xref href=&quot;System.Collections.ArrayList&quot;> </xref> по указанному индексу."
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Если новый <xref:System.Collections.ArrayList.Count%2A>(текущего <xref:System.Collections.ArrayList.Count%2A>плюс размер коллекции) больше значения <xref:System.Collections.ArrayList.Capacity%2A>, емкости из <xref:System.Collections.ArrayList>увеличивается на автоматически перераспределения внутреннего массива для размещения новых элементов, и существующие элементы копируются в новый массив перед добавлением новых элементов.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Если `index` равен <xref:System.Collections.ArrayList.Count%2A>, элементы добавляются в конец <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       Порядок элементов <xref:System.Collections.ICollection>сохраняется в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       В коллекциях с непрерывным набором элементов таких как списки, следующие за точкой вставки элементы перемещаются вниз для размещения нового элемента. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n` + `m`) операции, где `n` — количество элементов для добавления и `m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому следует вставить новые элементы."
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>, Элементы которого должен быть вставлен <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Сама коллекция не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, но может содержать элементы, которые являются <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше, чем <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы после создания коллекции, но разрешается изменять существующие элементы.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Получение значения данного свойства является операцией o(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.ArrayList&quot;> </xref> доступно только для чтения."
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. Таким образом при внесении изменений в базовую коллекцию, доступную только для чтения коллекцию отражает эти изменения.       Получение значения данного свойства является операцией o(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.ArrayList&quot;> </xref> только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли доступ к <xref href=&quot;System.Collections.ArrayList&quot;> </xref> является синхронизированным (потокобезопасным)."
  remarks: "Чтобы гарантировать потокобезопасность <xref:System.Collections.ArrayList>, все операции должны осуществляться через оболочки, возвращаемой методом <xref:System.Collections.ArrayList.Synchronized%2A>метод.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref href=&quot;System.Collections.ArrayList&quot;> </xref> является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает элемент по указанному индексу."
  remarks: "Возвращает элемент <xref:System.Object>поэтому необходимо привести возвращаемое значение к исходному типу, чтобы управлять его.</xref:System.Object> Важно обратить внимание, что <xref:System.Collections.ArrayList>не является строго типизированной коллекции.</xref:System.Collections.ArrayList> Строго типизированные см <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Это свойство предоставляет возможность доступа к указанному элементу коллекции с помощью следующего синтаксиса: `myCollection[index]`.       Ключевое слово языка C# используется для определения индексаторов вместо реализации свойства элемента. Visual Basic реализует элемент как свойство по умолчанию, который предоставляет те же возможности индексирования.       Получение значения данного свойства является операцией o(1). Задание этого свойства также является операцией o(1)."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс элемента, который требуется получить или задать."
    return:
      type: System.Object
      description: "Элемент по указанному индексу."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше или равно значению <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс последнего вхождения в пределах всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Осуществляется в обратном направлении, начиная с последнего элемента и заканчивается на первом элементе.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс последнего вхождения <code> value </code> в пределах всего <xref href=&quot;System.Collections.ArrayList&quot;> </xref>, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начиная с первого элемента и до заданного индекса.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Поиска в обратном направлении от `startIndex` и заканчивается на первом элементе.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` — число элементов от начала <xref:System.Collections.ArrayList>для `startIndex`.</xref:System.Collections.ArrayList>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс начала поиска в обратном направлении."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс последнего вхождения <code> value </code> в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , начиная с первого элемента и до <code> startIndex </code>, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , содержащий указанное число элементов и заканчивается по указанному индексу.</xref:System.Object>"
  remarks: "<xref:System.Collections.ArrayList>Поиска в обратном направлении от `startIndex` и заканчивая `startIndex` минус `count` плюс 1, если `count` больше 0.</xref:System.Collections.ArrayList>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` — `count`.       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс начала поиска в обратном направлении."
    - id: count
      type: System.Int32
      description: "Число элементов в диапазоне поиска."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс последнего вхождения <code> value </code> в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , содержащий <code> count </code> число элементов и заканчивающемся в позиции <code> startIndex </code>, если он найден; в противном случае — значение -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>находится вне диапазона допустимых индексов для <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - или - <code>count</code> меньше нуля.       - или - <code>startIndex</code> и <code>count</code> не указывают допустимый раздел в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает доступную только для чтения <xref href=&quot;System.Collections.ArrayList&quot;> </xref> программы-оболочки."
  remarks: "Чтобы предотвратить любые изменения `list`, предоставляют `list` только через эту оболочку.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. При внесении изменений в базовую коллекцию эти изменения отражаются в коллекции только для чтения.       Этот метод является операцией o(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Программы-оболочки."
    return:
      type: System.Collections.ArrayList
      description: "Только для чтения <xref href=&quot;System.Collections.ArrayList&quot;> </xref> оболочка <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает доступную только для чтения <xref:System.Collections.IList>оболочки.</xref:System.Collections.IList>"
  remarks: "Чтобы предотвратить любые изменения `list`, предоставляют `list` только через эту оболочку.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. При внесении изменений в базовую коллекцию эти изменения отражаются в коллекции только для чтения.       Этот метод является операцией o(1)."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Программы-оболочки.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Только для чтения <xref:System.Collections.IList>оболочка <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет первое вхождение указанного объекта из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Если <xref:System.Collections.ArrayList>не содержит указанный объект <xref:System.Collections.ArrayList>остается неизменным.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Исключение не возникает.       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>Для удаления из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет элемент по указанному индексу из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "После удаления элемента размер коллекции изменяется и значение <xref:System.Collections.ArrayList.Count%2A>Свойства уменьшается на единицу.</xref:System.Collections.ArrayList.Count%2A>       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс удаляемого элемента."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше или равно значению <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет диапазон элементов из <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля начальный индекс диапазона элементов, которые требуется удалить."
    - id: count
      type: System.Int32
      description: "Число удаляемых элементов."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> , элементы которого являются копиями указанного значения."
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Этот метод является операцией O (`n`) операции, где `n` — `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Копирование несколько раз в новом <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "Сколько раз `value` должен быть скопирован."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> С <code> count </code> элементов, которые являются копиями <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>меньше нуля."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Изменяет порядок элементов во всем <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Этот метод использует <xref:System.Array.Reverse%2A?displayProperty=fullName>Чтобы изменить порядок элементов, таким образом, что элемент, расположенный <xref:System.Collections.ArrayList>[i], где i — любой индекс в диапазоне, перемещает <xref:System.Collections.ArrayList>[j], где j равно значению `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Изменяет порядок элементов в указанном диапазоне."
  remarks: "Этот метод использует <xref:System.Array.Reverse%2A?displayProperty=fullName>Чтобы изменить порядок элементов, таким образом, что элемент, расположенный <xref:System.Collections.ArrayList>[i], где i — любой индекс в диапазоне, перемещает <xref:System.Collections.ArrayList>[j], где j равно значению `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Этот метод является операцией O (`n`) операции, где `n` — `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля начальный индекс диапазона, который нужно изменить на обратный."
    - id: count
      type: System.Int32
      description: "Число элементов в диапазоне на обратный."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует элементы коллекции в диапазон элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>принимает `null` как допустимое значение и допускает наличие повторяющихся элементов.</xref:System.Collections.ArrayList>       Порядок элементов <xref:System.Collections.ICollection>сохраняется в <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Этот метод является операцией O (`n` + 1) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля <xref href=&quot;System.Collections.ArrayList&quot;> </xref> индекс, с которого начинается копирование элементов `c`."
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>, Элементы которой требуется скопировать <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> Сама коллекция не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, но может содержать элементы, которые являются <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> плюс количество элементов в <code>c</code> больше, чем <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Сортирует элементы во всем <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Этот метод использует <xref:System.Array.Sort%2A?displayProperty=fullName>, которая использует алгоритм быстрой сортировки.</xref:System.Array.Sort%2A?displayProperty=fullName> Алгоритм быстрой сортировки приведено сравнение сортировки (также называемой нестрогой сортировкой), это означает, что «меньше или равно» операцию сравнения определяет, какой из двух элементов должна выполняться первой, в окончательный отсортированный список. Тем не менее если два элемента равны, их исходный порядок может не сохраняться. В отличие от этого строгой сортировке сохраняется порядок элементов, которые равны. Для выполнения стабильной сортировки, необходимо реализовать пользовательский <xref:System.Collections.IComparer>интерфейс для использования с перегрузки этого метода.</xref:System.Collections.IComparer>       В среднем этот метод является операцией O (`n` журнала `n`) операции, где `n` — <xref:System.Collections.ArrayList.Count%2A>; в худшем случае он является операцией O (`n`^&2;) операции.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Сортирует элементы во всем <xref href=&quot;System.Collections.ArrayList&quot;> </xref> с помощью указанной функции сравнения."
  remarks: "Метод сортировки для сортировки списка объектов с помощью пользовательского модуля сравнения, который реализует <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer> Если передать `null` для `comparer`, этот метод использует <xref:System.IComparable>реализацию каждого элемента.</xref:System.IComparable> В этом случае убедитесь, что объекты, содержащиеся в списке реализуют <xref:System.Collections.IComparer>интерфейса или исключение произойдет.</xref:System.Collections.IComparer>       Кроме того, с помощью <xref:System.IComparable>Реализация означает список выполняет сортировку со сравнением (также называемой нестрогой сортировкой); то есть, если два элемента равны, их порядок могут не сохраняться.</xref:System.IComparable> В отличие от этого строгой сортировке сохраняется порядок элементов, которые равны. Для выполнения стабильной сортировки, необходимо реализовать пользовательский <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer>       В среднем этот метод является операцией O (`n` журнала `n`) операции, где `n` — <xref:System.Collections.ArrayList.Count%2A>; в худшем случае он является операцией O (`n`^&2;) операции.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении элементов.</xref:System.Collections.IComparer>       - или - указатель null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic) для использования <xref:System.IComparable>реализации каждого элемента.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Произошла ошибка при сравнении двух элементов."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>передается <code> comparer </code>, а элементы в списке не реализуют <xref:System.IComparable>.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Сортирует элементы в диапазоне элементов массива <xref href=&quot;System.Collections.ArrayList&quot;> </xref> с помощью указанной функции сравнения."
  remarks: "Если `comparer` равно `null`, этот метод выполняет сортировку сравнения (также называемой нестрогой сортировкой); то есть, если два элемента равны, их порядок могут не сохраняться. В отличие от этого строгой сортировке сохраняется порядок элементов, которые равны. Для выполнения стабильной сортировки, необходимо реализовать пользовательский <xref:System.Collections.IComparer>интерфейса.</xref:System.Collections.IComparer>       В среднем этот метод является операцией O (`n` журнала `n`) операции, где `n` — `count`; в худшем случае он является операцией O(n^2)."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля начальный индекс диапазона сортировки."
    - id: count
      type: System.Int32
      description: "Длина диапазона сортировки."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Реализация нужно использовать при сравнении элементов.</xref:System.Collections.IComparer>       - или - указатель null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic) для использования <xref:System.IComparable>реализации каждого элемента.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>count</code> меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>и <code>count</code> не указывают допустимый диапазон в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Произошла ошибка при сравнении двух элементов."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> синхронизированную (потокобезопасную) оболочку."
  remarks: "Чтобы гарантировать потокобезопасность <xref:System.Collections.ArrayList>, все операции должны осуществляться через эту оболочку.</xref:System.Collections.ArrayList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Для синхронизации."
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Синхронизированную (потокобезопасную) оболочку."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IList>синхронизированную (потокобезопасную) оболочку.</xref:System.Collections.IList>"
  remarks: "Чтобы гарантировать потокобезопасность <xref:System.Collections.ArrayList>, все операции должны осуществляться через эту оболочку.</xref:System.Collections.ArrayList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Для синхронизации.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Синхронизированную (потокобезопасную) оболочку.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Чтобы создать синхронизированную версию <xref:System.Collections.ArrayList>, используйте <xref:System.Collections.ArrayList.Synchronized%2A>метод.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> Однако производные классы могут предоставлять собственную синхронизированную версию <xref:System.Collections.ArrayList>используя свойство SyncRoot.</xref:System.Collections.ArrayList> Синхронизированный код должен выполнять операции над элемент SyncRoot <xref:System.Collections.ArrayList>, не непосредственно на <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности, это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в <xref:System.Collections.ArrayList>объекта.</xref:System.Collections.ArrayList>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует элементы <xref href=&quot;System.Collections.ArrayList&quot;> </xref> в новую <xref:System.Object>массива.</xref:System.Object>"
  remarks: "Копирование элементов с помощью <xref:System.Array.Copy%2A?displayProperty=fullName>, который является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "<xref:System.Object>Массив, содержащий копии элементов <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует элементы <xref href=&quot;System.Collections.ArrayList&quot;> </xref> в новый массив указанного типа."
  remarks: "Все объекты в <xref:System.Collections.ArrayList>объект приводится к <xref:System.Type>указано в `type` параметр.</xref:System.Type> </xref:System.Collections.ArrayList>       Копирование элементов с помощью <xref:System.Array.Copy%2A?displayProperty=fullName>, который является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Элемент <xref:System.Type>массива назначения для создания и копирования элементов в.</xref:System.Type>"
    return:
      type: System.Array
      description: "Массив типа указанного элемента, содержащий копии элементов <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.ArrayList&quot;> </xref> не может быть автоматически приведен к указанному типу."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Устанавливает емкость равной фактическому числу элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Этот метод можно использовать для минимизации издержек коллекцией памяти, если новые элементы добавляются в коллекцию.       Чтобы сбросить <xref:System.Collections.ArrayList>в исходное состояние, вызовите <xref:System.Collections.ArrayList.Clear%2A>метод перед вызовом TrimToSize.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> Удаление пустой <xref:System.Collections.ArrayList>Задает емкость объекта <xref:System.Collections.ArrayList>емкость по умолчанию.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Доступен только для чтения.       - или - <xref href=&quot;System.Collections.ArrayList&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
