### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  summary: "Предоставляет базовый класс для производного пользовательского типа, который отслеживает изменения в состоянии данных, который зависит от элемента кэша."
  remarks: "Класс ChangeMonitor используется как базовый класс для классов производного монитора, предназначенного для реализации конкретного кэша. Экземпляр ChangeMonitor отслеживает изменения в состоянии данных, который зависит от элемента кэша. Например элемент может быть файлом или сущностью данных, содержимое которой кэшируется. При обновлении данных или файлов сущности необходимо также изменить связанная запись кэша. Общие элементы, которые могут быть проверены включают сущностей данных (например, поля базы данных, значения, строки или таблицы), другая запись кэша и файлы и атрибуты файлов.       Изменение зависимости — изменение в состоянии зависимости. В обычной реализации кэша после экземпляра ChangeMonitor уведомляет кэш, зависимость изменилась, кэш выполняет необходимое действие, например аннулирование вставленной записи кэша.       Производные классы ChangeMonitor можно настроить для контроля за изменениями зависимостей для определенных различных хранилищ данных. Например существуют реализации кэша для файловой системы, физической памяти или базы данных. Класс ChangeMonitor проверяет изменения, происходящие вне кэша и оповещает кэша, произошли изменения.       [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Содержит следующие классы, производные от класса ChangeMonitor:- <xref:System.Runtime.Caching.CacheEntryChangeMonitor>- <xref:System.Runtime.Caching.FileChangeMonitor>- <xref:System.Runtime.Caching.HostFileChangeMonitor>- <xref:System.Runtime.Caching.SqlChangeMonitor>каждый из этих классов работает с различными типами зависимостей.</xref:System.Runtime.Caching.SqlChangeMonitor> </xref:System.Runtime.Caching.HostFileChangeMonitor> </xref:System.Runtime.Caching.FileChangeMonitor> </xref:System.Runtime.Caching.CacheEntryChangeMonitor> Например, производном <xref:System.Runtime.Caching.FileChangeMonitor>класс отслеживает изменения в кэш для данных файловой системы (файлы и папки), который зависит от элемента кэша.</xref:System.Runtime.Caching.FileChangeMonitor>"
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> класса. Данный конструктор вызывается из конструкторов в производных классах для инициализации базового класса."
  remarks: "<xref:System.Runtime.Caching.ChangeMonitor>Класс имеет конструктор по умолчанию.</xref:System.Runtime.Caching.ChangeMonitor> Тем не менее, классов, наследующих от базового <xref:System.Runtime.Caching.ChangeMonitor>класса и определение пользовательского наблюдения за изменениями поведение должны выполнять инициализацию в конструкторе.</xref:System.Runtime.Caching.ChangeMonitor> Дополнительные сведения см. примечания для наследующих объектов раздела."
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Освобождает все ресурсы, используемые текущим экземпляром <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> класса."
  remarks: "Метод Dispose вызывается <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метода производного класса только один раз, при первом вызове.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Последующие вызовы метода Dispose не действуют. После вызова метода <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>свойству `true`.</xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>       <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>Для удаления необходимо вызвать перегрузку <xref:System.Runtime.Caching.ChangeMonitor>экземпляра.</xref:System.Runtime.Caching.ChangeMonitor> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Ниже приведены правила для вызова метода dispose:-это перед вставкой элемента в кэше, вызывающим для удаления <xref:System.Runtime.Caching.ChangeMonitor>экземпляра.</xref:System.Runtime.Caching.ChangeMonitor>      — Один раз для элемента кэша и <xref:System.Runtime.Caching.ChangeMonitor>экземпляров, связанных с ним передаются в кэш, Реализатор кэша, убедиться, что <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>вызывается, даже если завершается неудачей.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor>      -После элемента и связанный с ним <xref:System.Runtime.Caching.ChangeMonitor>экземпляры передаются в кэш, так как вызывающий объект не должен располагать зависимость при <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>вызывается метод, вызов обрабатывается, как если бы зависимость изменилась.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor> В результате <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>автоматически вызывается метод.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      -Учетом этих правил, <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метод должен вызываться в одном из следующих способов:-пользователей необходимо вызвать перегрузку метода Dispose, не для того, чтобы вставить экземпляр производного монитора изменения в кэше.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>          -Реализация кэша отвечает за вызов Dispose перегрузки, если реализация пытается вставить экземпляр монитора изменений в кэш объекта Вставка не выполняется. При попытке вставки приводит к исключению, реализация кэша должна освободить все связанные зависимости.          -Если запись кэша удаляется, реализация кэша должна также удалить зависимость.       Внутренняя реализация <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>автоматически вызывает метод <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метод после вызова обратный вызов, регистрируется через <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>метод.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      Настроек [!NOTE] настроек этого автоматического удаления во время срабатывания события происходят, если инициализация <xref:System.Runtime.Caching.ChangeMonitor>экземпляр ранее выполненные.</xref:System.Runtime.Caching.ChangeMonitor>       При вызове конструктора монитор производном изменений <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>метод, если состояние монитора изменений уже была изменена (то есть, состояние, которое отслеживается уже изменен при конструктор был по-прежнему активен) затем <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>метод автоматически удаляет монитор изменений.</xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> </xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>      Настроек [!NOTE] настроек пользователей не следует вызывать метод Dispose. Тем не менее можно запретить пользователям вызова метода. Таким образом, если они есть, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>вызывается метод.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> В этом случае запись кэша уведомляется, как если бы зависимость изменилась.       Чтобы запретить переопределение метода Dispose производные классы, метод не является явной реализацией интерфейса."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Инициализация еще не завершена, вызывается метод Dispose базового класса производного монитора изменения."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Освобождает все управляемые и неуправляемые ресурсы и ссылки на <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> экземпляра. Эта перегрузка должен быть реализован классами производного монитора изменения."
  remarks: "Если значение `disposing` значение `true`, все управляемые и неуправляемые ресурсы удаляются, и все ссылки на этот объект освобождаются, чтобы экземпляр производного монитора изменения могут быть собраны как мусор. Гарантируется, что базовый <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метод будет вызывать метод Dispose реализовано только один раз.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы освободить управляемые и неуправляемые ресурсы и ссылки на <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> экземпляра; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов. Когда <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> передается метод вызывается методом Dispose <xref uid=&quot;langword_csharp_finalizer&quot; name=&quot;finalizer&quot; href=&quot;&quot;> </xref> поток и любые ссылки на управляемый, скорее всего, больше не является допустимым, поскольку они уже были собраны как мусор."
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Получает значение, которое указывает, что состояние, которое отслеживается <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> класс был изменен."
  remarks: "Можно проверить значение этого свойства в производном <xref:System.Runtime.Caching.ChangeMonitor>класс, чтобы изменился ли зависимость.</xref:System.Runtime.Caching.ChangeMonitor>       Имеет значение `true` при изменении зависимостей (то есть, когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>вызывается метод).</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> После <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>метод вызывается для производного класса, значение свойства HasChanged будет `true`независимо от того, следует ли <xref:System.Runtime.Caching.OnChangedCallback>экземпляр получила уведомление с помощью вызова <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>метод.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      Настроек [!NOTE] настроек вызывающим объектам можно проверить свойство HasChanged, изменился ли зависимости. Тем не менее в многопоточной среде, более простой и более простого в сопровождении подход — для вставки данных в реализации кэша без проверки HasChanged свойство. Реализации кэша должен проверьте свойство HasChanged автоматически и не должен выполнения инструкции insert или операции задания, если один или несколько связанные зависимости уже были изменены."
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если состояние, которое отслеживается <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> экземпляр был изменен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Вызывается из конструктора производного класса, чтобы указать, что для завершения инициализации."
  remarks: "В случае изменения зависимостей до завершения в производном классе инициализации, необходимо вызвать конструктор производного класса <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>метод.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       Когда <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>вызывается метод, <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>свойству автоматически присваивается `true` монитор изменений.</xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> В результате, когда монитор изменений конструктор вызывает метод InitializationComplete, базовый класс автоматически вызывает <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метод.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> При завершении инициализации <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>метод автоматически удаляет экземпляр производного монитора изменения.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>"
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Возвращает значение, которое указывает, что экземпляр производного <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> класс удален."
  remarks: "Свойство имеет значение `true` после определения базовой <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>вызовы метода <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>метод в производном классе для удаления экземпляра.</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если экземпляр удален; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Вызывается по кэшу для регистрации обратного вызова и уведомления <xref href=&quot;System.Runtime.Caching.ObjectCache&quot;> </xref> экземпляра <xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;> </xref> делегат при изменении зависимости."
  remarks: "Этот метод использовать реализациях кэша для привязки к монитору изменений. Если связать один или несколько мониторов изменений с элементом кэша, то можно передать <xref:System.Runtime.Caching.CacheItemPolicy>экземпляр с заполненным свойством мониторов изменений с элементом кэша.</xref:System.Runtime.Caching.CacheItemPolicy> Реализация кэша мониторов изменений поддерживает отвечает за итерацию <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>свойство и регистр <xref:System.Runtime.Caching.OnChangedCallback>делегатов с каждым изменения монитора, которые найдет.</xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>       Поскольку <xref:System.Runtime.Caching.OnChangedCallback>делегат включает необязательный параметр состояния, конкретная реализация монитора изменений может передать необязательную информацию о состоянии.</xref:System.Runtime.Caching.OnChangedCallback> Реализатор кэша определяет, могут быть предприняты явная зависимость типа состояния, который передает настраиваемый монитор изменений как часть обратного вызова.      Настроек [!NOTE] настроек API расширяемости базовый кэша не имеет требования явной зависимости типа состояния.       Реализация метода NotifyOnChanged автоматически определяет ли во время вызова метода NotifyOnChanged уже изменилось состояние монитора. Если <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>свойство `true`, а затем автоматически вызывает метод <xref:System.Runtime.Caching.OnChangedCallback>обработчик событий, который был зарегистрирован, с использованием <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>метод.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> Это происходит потому, что это возможно, с момента реализации кэша создает монитор изменений, во время реализации кэша возвращает монитора и связывает сам вплоть до его базового отслеживаемых состояние изменилось. Если уже изменилось состояние выберите объект, который передается <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>метод `null`.</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       Метод NotifyOnChanged может вызываться только один раз и будет вызывать исключение при последующих вызовах."
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "Ссылка на метод, который вызывается при изменении зависимости."
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Уже был вызван метод обратного вызова."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>onChangedCallback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Вызывается производными классами для создания события при изменении зависимости."
  remarks: "Как правило метод OnChanged вызывается при внесении изменений зависимостей. Метод OnChanged также вызывается экземпляр монитора изменений удален, однако реализации происходит только в том случае, если обратный вызов уже не был вызван.       При вызове метода OnChanged перед <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>метод вызывается, данные о состоянии из вызова метода OnChanged сохраняется с помощью реализации кэша.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Кроме того, обратный вызов, который <xref:System.Runtime.Caching.OnChangedCallback>сразу вызывается метод при <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>вызывается метод.</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback>"
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Данные для события изменения. Это значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "Возвращает значение, представляющее <xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;> </xref> экземпляра класса."
  remarks: "Значение свойства UniqueId обычно состоит из зависимостей имена вместе строковые данные, уникальным образом идентификаторы данных, который отслеживается с <xref:System.Runtime.Caching.ChangeMonitor>экземпляра.</xref:System.Runtime.Caching.ChangeMonitor> Значение свойства UniqueId является строкой. Значение строки используется для назначения уникальный идентификатор <xref:System.Runtime.Caching.ChangeMonitor>экземпляра.</xref:System.Runtime.Caching.ChangeMonitor>"
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: "Идентификатор для экземпляра монитор изменений."
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
