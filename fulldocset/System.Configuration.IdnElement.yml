### YamlMime:ManagedReference
items:
- uid: System.Configuration.IdnElement
  id: IdnElement
  children:
  - System.Configuration.IdnElement.#ctor
  - System.Configuration.IdnElement.Enabled
  - System.Configuration.IdnElement.Properties
  langs:
  - csharp
  name: IdnElement
  nameWithType: IdnElement
  fullName: System.Configuration.IdnElement
  type: Class
  summary: "Предоставляет параметры конфигурации для международного доменного имени (IDN) в обработке &lt;xref:System.Uri?displayProperty=fullName&gt; класса."
  remarks: "Существующий <xref:System.Uri?displayProperty=fullName>класс был расширен для обеспечения поддержки для международных идентификаторов ресурсов (IRI) в соответствии с RFC 3987.</xref:System.Uri?displayProperty=fullName> Текущие пользователи не увидят любые изменения в работе платформы .NET Framework 2.0, пока они не запустят IRI. Это обеспечивает совместимость приложений с предыдущими версиями платформы .NET Framework.       Параметр конфигурации для IdnElement косвенно определяется <xref:System.Configuration.IriParsingElement>значение параметра конфигурации, обработку IRI элементов управления в <xref:System.Uri?displayProperty=fullName>классе.</xref:System.Uri?displayProperty=fullName> </xref:System.Configuration.IriParsingElement> Обработка IRI должна быть включена для обработки возможна IDN. При отключении IRI система обработки IDN значение по умолчанию, где используется поведение платформы .NET Framework 2.0 для обеспечения совместимости и не используются имена IDN.       Только атрибут международного доменного имени (IDN) управляет работой. Все другие операции по обработке IRI (например, нормализация знаков) выполняются по умолчанию.       Параметр конфигурации для IdnElement будет считываться один раз при первом <xref:System.Uri?displayProperty=fullName>создается класс.</xref:System.Uri?displayProperty=fullName> Изменения в параметрах конфигурации после этого игнорируются.       Дополнительные сведения о поддержке IRI см. в разделе «Примечания» для <xref:System.Uri?displayProperty=fullName>класса.</xref:System.Uri?displayProperty=fullName>"
  syntax:
    content: 'public sealed class IdnElement : System.Configuration.ConfigurationElement'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements: []
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  platform:
  - net462
- uid: System.Configuration.IdnElement.#ctor
  id: '#ctor'
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: IdnElement()
  nameWithType: IdnElement.IdnElement()
  fullName: System.Configuration.IdnElement.IdnElement()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Configuration.IdnElement&quot;> </xref> класса."
  remarks: "Этот конструктор создает <xref:System.Configuration.IdnElement>экземпляр</xref:System.Configuration.IdnElement>"
  syntax:
    content: public IdnElement ();
    parameters: []
  overload: System.Configuration.IdnElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IdnElement.Enabled
  id: Enabled
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: Enabled
  nameWithType: IdnElement.Enabled
  fullName: System.Configuration.IdnElement.Enabled
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Возвращает или задает значение <xref href=&quot;System.Configuration.IdnElement&quot;> </xref> параметр конфигурации."
  remarks: "Только атрибут международного доменного имени (IDN) управляет работой. Все остальные международных идентификаторов ресурсов (IRI) обработки (например, нормализация знаков) выполняются по умолчанию.       Параметр конфигурации для <xref:System.Configuration.IdnElement>косвенно управляется <xref:System.Configuration.IriParsingElement?displayProperty=fullName>параметра конфигурации, который управляет IRI обработки в <xref:System.Uri?displayProperty=fullName>классе.</xref:System.Uri?displayProperty=fullName> </xref:System.Configuration.IriParsingElement?displayProperty=fullName> </xref:System.Configuration.IdnElement> Обработка IRI должна быть включена для обработки возможна IDN. При отключении IRI система обработки IDN значение по умолчанию, где используется поведение платформы .NET Framework 2.0 для обеспечения совместимости и не используются имена IDN.       Параметр конфигурации для <xref:System.Configuration.IdnElement>будет считываться один раз при первой <xref:System.Uri?displayProperty=fullName>создается класс.</xref:System.Uri?displayProperty=fullName> </xref:System.Configuration.IdnElement> Изменения в параметрах конфигурации после этого игнорируются.       Дополнительные сведения о поддержке IRI см. в разделе «Примечания» для <xref:System.Uri?displayProperty=fullName>класса.</xref:System.Uri?displayProperty=fullName>"
  syntax:
    content: public UriIdnScope Enabled { get; set; }
    return:
      type: System.UriIdnScope
      description: "Объект <xref href=&quot;System.UriIdnScope&quot;> </xref> , содержащий текущие параметры конфигурации для обработки IDN."
  overload: System.Configuration.IdnElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IdnElement.Properties
  id: Properties
  parent: System.Configuration.IdnElement
  langs:
  - csharp
  name: Properties
  nameWithType: IdnElement.Properties
  fullName: System.Configuration.IdnElement.Properties
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  syntax:
    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "Для добавления."
  overload: System.Configuration.IdnElement.Properties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.Configuration.IdnElement.#ctor
  parent: System.Configuration.IdnElement
  isExternal: false
  name: IdnElement()
  nameWithType: IdnElement.IdnElement()
  fullName: System.Configuration.IdnElement.IdnElement()
- uid: System.Configuration.IdnElement.Enabled
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Enabled
  nameWithType: IdnElement.Enabled
  fullName: System.Configuration.IdnElement.Enabled
- uid: System.UriIdnScope
  parent: System
  isExternal: false
  name: UriIdnScope
  nameWithType: UriIdnScope
  fullName: System.UriIdnScope
- uid: System.Configuration.IdnElement.Properties
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Properties
  nameWithType: IdnElement.Properties
  fullName: System.Configuration.IdnElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Configuration.IdnElement.#ctor*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: IdnElement
  nameWithType: IdnElement.IdnElement
- uid: System.Configuration.IdnElement.Enabled*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Enabled
  nameWithType: IdnElement.Enabled
- uid: System.Configuration.IdnElement.Properties*
  parent: System.Configuration.IdnElement
  isExternal: false
  name: Properties
  nameWithType: IdnElement.Properties
