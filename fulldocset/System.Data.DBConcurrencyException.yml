### YamlMime:ManagedReference
items:
- uid: System.Data.DBConcurrencyException
  id: DBConcurrencyException
  children:
  - System.Data.DBConcurrencyException.#ctor
  - System.Data.DBConcurrencyException.#ctor(System.String)
  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  - System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  - System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  - System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.DBConcurrencyException.Row
  - System.Data.DBConcurrencyException.RowCount
  langs:
  - csharp
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
  type: Class
  summary: "Исключение, вызванное <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> во время операции вставки, обновления или удаления операции, если число обработанных строк равно нулю."
  remarks: "<xref:System.Data.Common.DataAdapter>Проверяет число строк, затронутых при выполнении каждой инструкции insert, update или операции удаления и выдает исключение, если число равно нулю.</xref:System.Data.Common.DataAdapter> Это исключение обычно вызывается нарушение параллелизма."
  syntax:
    content: 'public sealed class DBConcurrencyException : SystemException'
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor
  id: '#ctor'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException()
  nameWithType: DBConcurrencyException.DBConcurrencyException()
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> класса."
  remarks: "Конструктор по умолчанию инициализирует все поля значениями по умолчанию."
  syntax:
    content: public DBConcurrencyException ();
    parameters: []
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> класса."
  syntax:
    content: public DBConcurrencyException (string message);
    parameters:
    - id: message
      type: System.String
      description: "Текстовая строка с подробными сведениями об исключении."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String,Exception)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> класса."
  remarks: "Можно создать новое исключение, которое перехватывает это исключение. Код, который обрабатывает второе исключение можно использовать дополнительные сведения из предыдущего исключения, также называемого внутренним, чтобы определить причину исходной ошибки."
  syntax:
    content: public DBConcurrencyException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: "Текстовая строка с подробными сведениями об исключении."
    - id: inner
      type: System.Exception
      description: "Ссылка на внутреннее исключение."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  id: '#ctor(System.String,System.Exception,System.Data.DataRow[])'
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: DBConcurrencyException(String,Exception,DataRow[])
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref> класса."
  syntax:
    content: public DBConcurrencyException (string message, Exception inner, System.Data.DataRow[] dataRows);
    parameters:
    - id: message
      type: System.String
      description: "Сообщение об ошибке с объяснением причины исключения."
    - id: inner
      type: System.Exception
      description: "Исключение, вызвавшее текущее исключение, или пустая ссылка (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic), если внутреннее исключение не указано."
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Массив, содержащий <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, сбой обновления которых привел к созданию этого исключения."
  overload: System.Data.DBConcurrencyException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  id: CopyToRows(System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: CopyToRows(DataRow[])
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Копирует <xref href=&quot;System.Data.DataRow&quot;> </xref> сбой обновления которых привел к созданию этого исключения, указанный массив объектов <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов."
  remarks: "При выполнении пакетных обновлений с <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>свойство <xref:System.Data.Common.DataAdapter>значение `true`, это исключение вызывается, если все строки ошибок обновления.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> В этом случае это <xref:System.Data.DBConcurrencyException>содержит <xref:System.Data.DataRow>объектов для всех строк, обновление которых не удалось выполнить, а не только <xref:System.Data.DataRow>объекта в <xref:System.Data.DBConcurrencyException.Row%2A>и затронутых <xref:System.Data.DataRow>объектов можно получить, вызвав <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException.Row%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public void CopyToRows (System.Data.DataRow[] array);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "Одномерный массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов для копирования <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов в."
  overload: System.Data.DBConcurrencyException.CopyToRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  id: CopyToRows(System.Data.DataRow[],System.Int32)
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: CopyToRows(DataRow[],Int32)
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Копирует <xref href=&quot;System.Data.DataRow&quot;> </xref> сбой обновления которых привел к созданию этого исключения, указанный массив объектов <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, начиная с указанного индекса целевого массива."
  remarks: "При выполнении пакетных обновлений с <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>свойство <xref:System.Data.Common.DataAdapter>значение `true`, это исключение вызывается, если все строки ошибок обновления.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> В этом случае это <xref:System.Data.DBConcurrencyException>содержит <xref:System.Data.DataRow>объектов для всех строк, обновление которых не удалось выполнить, а не только <xref:System.Data.DataRow>объекта в <xref:System.Data.DBConcurrencyException.Row%2A>и затронутых <xref:System.Data.DataRow>объектов можно получить, вызвав <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException.Row%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public void CopyToRows (System.Data.DataRow[] array, int arrayIndex);
    parameters:
    - id: array
      type: System.Data.DataRow[]
      description: "Одномерный массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов для копирования <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов в."
    - id: arrayIndex
      type: System.Int32
      description: "Конечный индекс в массиве которого начинается копирование."
  overload: System.Data.DBConcurrencyException.CopyToRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Заполняет данными, необходимыми для сериализации объекта сведений сериализации aprcified <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: si
      type: System.Runtime.Serialization.SerializationInfo
      description: "Объект <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> , содержащий сериализованные данные, связанные с <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>, содержащий источник и назначение сериализованного потока, связанного с <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.DBConcurrencyException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> info </code> Параметра является пустой ссылкой (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.Row
  id: Row
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: Row
  nameWithType: DBConcurrencyException.Row
  fullName: System.Data.DBConcurrencyException.Row
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает значение <xref href=&quot;System.Data.DataRow&quot;> </xref> , создавшего <xref href=&quot;System.Data.DBConcurrencyException&quot;> </xref>."
  remarks: "Использование строки для извлечения значения <xref:System.Data.DataRow>строк, создавшей <xref:System.Data.DBConcurrencyException>.</xref:System.Data.DBConcurrencyException> </xref:System.Data.DataRow> Если значением <xref:System.Data.DataRow>не делает ничего.</xref:System.Data.DataRow>       При выполнении пакетных обновлений с <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>свойство <xref:System.Data.Common.DataAdapter>значение `true`, это исключение вызывается, если все строки ошибок обновления.</xref:System.Data.Common.DataAdapter> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> В этом случае это <xref:System.Data.DBConcurrencyException>содержит <xref:System.Data.DataRow>объекты для всех строк, обновление которых не удалось выполнить, а не только для одного <xref:System.Data.DataRow>объекта в строку и затронутых <xref:System.Data.DataRow>объектов можно получить, вызвав <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.</xref:System.Data.DBConcurrencyException.CopyToRows%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DBConcurrencyException>       Поддержка сериализации не существует для <xref:System.Data.DataRow>объектов.</xref:System.Data.DataRow> Таким образом при сериализации <xref:System.Data.DBConcurrencyException>объекта, значение свойства строки в сериализованная версия объекта задано значение null.</xref:System.Data.DBConcurrencyException>"
  syntax:
    content: public System.Data.DataRow Row { get; set; }
    return:
      type: System.Data.DataRow
      description: "Значение <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DBConcurrencyException.Row*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DBConcurrencyException.RowCount
  id: RowCount
  parent: System.Data.DBConcurrencyException
  langs:
  - csharp
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
  fullName: System.Data.DBConcurrencyException.RowCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает число строк, обновление которых завершилось со сбоем, создает это исключение."
  syntax:
    content: public int RowCount { get; }
    return:
      type: System.Int32
      description: "Значение типа integer, содержащее число строк, обновление которых завершилось со сбоем."
  overload: System.Data.DBConcurrencyException.RowCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException.#ctor
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException()
  nameWithType: DBConcurrencyException.DBConcurrencyException()
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException()
- uid: System.Data.DBConcurrencyException.#ctor(System.String)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String,Exception)
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception)
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException(String,Exception,DataRow[])
  nameWithType: DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
  fullName: System.Data.DBConcurrencyException.DBConcurrencyException(String,Exception,DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows(DataRow[])
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[])
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[])
- uid: System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows(DataRow[],Int32)
  nameWithType: DBConcurrencyException.CopyToRows(DataRow[],Int32)
  fullName: System.Data.DBConcurrencyException.CopyToRows(DataRow[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.DBConcurrencyException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.DBConcurrencyException.Row
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: Row
  nameWithType: DBConcurrencyException.Row
  fullName: System.Data.DBConcurrencyException.Row
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DBConcurrencyException.RowCount
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
  fullName: System.Data.DBConcurrencyException.RowCount
- uid: System.Data.DBConcurrencyException.#ctor*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException.DBConcurrencyException
- uid: System.Data.DBConcurrencyException.CopyToRows*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: CopyToRows
  nameWithType: DBConcurrencyException.CopyToRows
- uid: System.Data.DBConcurrencyException.GetObjectData*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: GetObjectData
  nameWithType: DBConcurrencyException.GetObjectData
- uid: System.Data.DBConcurrencyException.Row*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: Row
  nameWithType: DBConcurrencyException.Row
- uid: System.Data.DBConcurrencyException.RowCount*
  parent: System.Data.DBConcurrencyException
  isExternal: false
  name: RowCount
  nameWithType: DBConcurrencyException.RowCount
