### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Предоставляет сетевые службы протокола UDP (User Datagram)."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class."
  remarks: "Этот конструктор создает новый <xref:System.Net.Sockets.UdpClient>и позволяет основному поставщику услуг присвоить наиболее подходящий локальный IPv4 адрес и номер порта.</xref:System.Net.Sockets.UdpClient> Если используется этот конструктор, <xref:System.Net.Sockets.UdpClient>набор экземпляров с семейству адресов IPv4, который не может быть изменен или перезаписана при вызове метода соединение с целевым IPv6.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       Этот конструктор не годится для объединения группы многоадресной рассылки, так как он не позволяет выполнять привязку сокета. Кроме того он работает только с IPv4-адресами."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> класса и привязывает его к заданным номером локального порта."
  remarks: "Этот конструктор создает основной <xref:System.Net.Sockets.Socket>и связывает его с номером порта, который предполагается использовать для обмена данными.</xref:System.Net.Sockets.Socket> Этот конструктор используется, если нужны только при задании номера локального порта. Основной поставщик услуг присвоит локальный IP-адрес. Если в конструктор передается значение 0, основной поставщик услуг назначит номер порта. Если используется этот конструктор, <xref:System.Net.Sockets.UdpClient>набор экземпляров с семейству адресов IPv4, который не может быть изменен или перезаписана при вызове метода соединение с целевым IPv6.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       Этот конструктор работает только с IPv4-адресами."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "Номер локального порта, который предполагается использовать для обмена данными."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> port </code> Параметра больше <xref:System.Net.IPEndPoint.MaxPort>или меньше, чем <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> </xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> класса и связывает его с заданной локальной конечной точкой."
  remarks: "Этот конструктор создает новый <xref:System.Net.Sockets.UdpClient>и привязывает его к <xref:System.Net.IPEndPoint>заданные `localEP` параметр.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> Перед вызовом этого конструктора необходимо создать <xref:System.Net.IPEndPoint>с помощью IP-номер адреса и порта, который предполагается использовать для отправки и получения данных.</xref:System.Net.IPEndPoint> Необходимо указать локальный IP-адрес и порт номер для отправки и получения данных. Если этого не сделать, основной поставщик услуг присвоит наиболее подходящий локальный IP-адрес и порт номер.       Если используется этот конструктор, <xref:System.Net.Sockets.UdpClient>набор экземпляров с заданные семейство адресов `localEP` параметр, который не может быть изменен или перезаписана при вызове метода connect с семейством другой адрес.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>, Предоставляющий локальную конечную точку, к которой выполняется привязка UDP-подключения.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initializes a new instance of the <xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref> class."
  remarks: "`family` Параметр определяет, является ли прослушиватель использует IP-адрес версии 4 (IPv4) или IP версии 6 (IPv6) адрес. Чтобы использовать адрес IPv4, передайте <xref:System.Net.Sockets.AddressFamily>значение.</xref:System.Net.Sockets.AddressFamily> Чтобы использовать IPv6-адрес, передайте <xref:System.Net.Sockets.AddressFamily>значение.</xref:System.Net.Sockets.AddressFamily> Передача любого другого значения метод создаст исключение <xref:System.ArgumentException>.</xref:System.ArgumentException>       Если используется этот конструктор, <xref:System.Net.Sockets.UdpClient>набор экземпляров с заданные семейство адресов `family` параметр, который не может быть изменен или перезаписана при вызове метода connect с семейством другой адрес.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       Класс UdpClient не годится для объединения группы многоадресной рассылки, так как он не позволяет выполнять привязку сокета."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Один из <xref:System.Net.Sockets.AddressFamily>значений, которое задает схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> класса и привязывает его к заданным номером локального порта."
  remarks: "Этот конструктор создает основной <xref:System.Net.Sockets.Socket>и связывает его с номером порта, который предполагается использовать для обмена данными.</xref:System.Net.Sockets.Socket>       `family` Параметр определяет, является ли прослушиватель использует IP-адрес версии 4 (IPv4) или IP версии 6 (IPv6) адрес. Чтобы использовать адрес IPv4, передайте <xref:System.Net.Sockets.AddressFamily>значение.</xref:System.Net.Sockets.AddressFamily> Чтобы использовать IPv6-адрес, передайте <xref:System.Net.Sockets.AddressFamily>значение.</xref:System.Net.Sockets.AddressFamily> Передача любого другого значения метод создаст исключение <xref:System.ArgumentException>.</xref:System.ArgumentException>       Если используется этот конструктор, <xref:System.Net.Sockets.UdpClient>набор экземпляров с заданные семейство адресов `family` параметр, который не может быть изменен или перезаписана при вызове метода connect с семейством другой адрес.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код, см. Подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "Порт для прослушивания входящих попыток подключения."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Один из <xref:System.Net.Sockets.AddressFamily>значений, которое задает схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>больше, чем <xref:System.Net.IPEndPoint.MaxPort> или меньше, чем <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> класса и устанавливает удаленный узел по умолчанию."
  remarks: "Этот конструктор инициализирует новый <xref:System.Net.Sockets.UdpClient>и устанавливает удаленному узлу, используя `hostname` и `port` параметров.</xref:System.Net.Sockets.UdpClient> Установка удаленный узел по умолчанию является необязательным. При использовании этого конструктора не нужно указывать удаленный хост при каждом обращении к <xref:System.Net.Sockets.UdpClient.Send%2A>метод.</xref:System.Net.Sockets.UdpClient.Send%2A> Указание удаленный узел по умолчанию ограничена только узел. Удаленный узел по умолчанию можно изменить в любое время путем вызова <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> Если вы хотите указать удаленного узла при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода, не используйте этот конструктор.</xref:System.Net.Sockets.UdpClient.Send%2A>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "Имя удаленного DNS-узла, к которому планируется подключение."
    - id: port
      type: System.Int32
      description: "Номер удаленного порта, к которому планируется подключение."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>не находится между <xref:System.Net.IPEndPoint.MinPort> и <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает значение, указывающее, установлен ли удаленный узел по умолчанию."
  remarks: "Классы, производные от <xref:System.Net.Sockets.UdpClient>это свойство можно использовать для определения того, установлен ли удаленный узел по умолчанию.</xref:System.Net.Sockets.UdpClient> Удаленный узел по умолчанию можно установить с помощью соответствующего конструктора или путем вызова <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> Если установить удаленный узел по умолчанию, невозможно указать удаленный узел в вызове <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если подключение активно; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Включает или отключает обход сетевых адресов (NAT) для <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> экземпляра."
  remarks: "Метод AllowNatTraversal используется для включения или отключения прохождения NAT для <xref:System.Net.Sockets.UdpClient>экземпляра.</xref:System.Net.Sockets.UdpClient> Обход NAT может предоставляться Teredo, 6to4 или туннель ISATAP.       Когда `allowed` параметр имеет значение false, <xref:System.Net.Sockets.SocketOptionName>на связанного сокета был установлен в <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Это явно отключает прохождения NAT для <xref:System.Net.Sockets.UdpClient>экземпляра.</xref:System.Net.Sockets.UdpClient>       Когда `allowed` параметр имеет значение true, <xref:System.Net.Sockets.SocketOptionName>для связанного сокета был установлен в <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Это может позволить прохождения NAT для <xref:System.Net.Sockets.UdpClient>в зависимости от правил брандмауэра на месте в системе.</xref:System.Net.Sockets.UdpClient>       Адрес Teredo — IPv6-адрес с префиксом 2001:: / 32. Адреса Teredo можно возвращенные с помощью обычного разрешения имен DNS или перечислены как IPv6-адрес локального интерфейса."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Логическое значение, указывающее, следует ли включить или отключить прохождения NAT."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Получает объем данных, полученных из сети, которая доступна для чтения."
  remarks: "Доступные свойства используется для определения объема данных, помещенных в сетевой буфер для чтения. При наличии данных, вызовите <xref:System.Net.Sockets.NetworkStream.Read%2A>для получения данных.</xref:System.Net.Sockets.NetworkStream.Read%2A> Если данные недоступны, доступных свойств возвращает 0.       Если удаленный узел отключается или закрывает соединение, доступных свойств вызывает <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки и обратитесь к документации Windows Sockets версии 2 API ошибок кода в библиотеке MSDN по [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ подробное описание ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "Число байтов данных, полученных из сети."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при попытке доступа к сокету. Дополнительные сведения см."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.Net.Sockets.Socket>Было закрыто.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно получает датаграмму с удаленного узла."
  remarks: "Асинхронная операция BeginReceive необходимо завершить путем вызова <xref:System.Net.Sockets.UdpClient.EndReceive%2A>метод.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> Как правило, вызывается метод `requestCallback` делегата.       Этот метод не приводит к блокировке до завершения операции. Для блокирования до завершения операции, используйте <xref:System.Net.Sockets.UdpClient.Receive%2A>метод.</xref:System.Net.Sockets.UdpClient.Receive%2A>       Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, который ссылается на метод, который вызывается при завершении операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Определяемые пользователем объект, содержащий сведения об операции получения. Этот объект передается `requestCallback` делегат при завершении операции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, который ссылается на асинхронное получение.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму к удаленному узлу. Назначение был указан ранее вызовом <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*>"
  remarks: "Асинхронная операция BeginSend необходимо завершить путем вызова <xref:System.Net.Sockets.UdpClient.EndSend%2A>метод.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Как правило, вызывается метод `requestCallback` делегата.       Этот метод блокируется до завершения операции. Для блокирования до завершения операции, воспользуйтесь одним из <xref:System.Net.Sockets.UdpClient.Send%2A>перегруженных версий метода.</xref:System.Net.Sockets.UdpClient.Send%2A>       Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Объект <xref:System.Byte>массив, содержащий данные для отправки.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байтов для отправки."
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, который ссылается на метод, который вызывается при завершении операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Определяемые пользователем объект, содержащий сведения об операции отправки. Этот объект передается `requestCallback` делегат при завершении операции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, который ссылается на асинхронную передачу.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму в место назначения. Целевой объект указывается <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint>"
  remarks: "Асинхронная операция BeginSend необходимо завершить путем вызова <xref:System.Net.Sockets.UdpClient.EndSend%2A>метод.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Как правило, вызывается метод `requestCallback` делегата.       Этот метод не приводит к блокировке до завершения операции. Для блокирования до завершения операции, воспользуйтесь одним из <xref:System.Net.Sockets.UdpClient.Send%2A>перегруженных версий метода.</xref:System.Net.Sockets.UdpClient.Send%2A>       Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Объект <xref:System.Byte>массив, содержащий данные для отправки.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байтов для отправки."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.EndPoint>, Представляющий данные.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, который ссылается на метод, который вызывается при завершении операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Определяемые пользователем объект, содержащий сведения об операции отправки. Этот объект передается `requestCallback` делегат при завершении операции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, который ссылается на асинхронную передачу.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму в место назначения. Пункт назначения задается имя узла и номер порта."
  remarks: "Асинхронная операция BeginSend необходимо завершить путем вызова <xref:System.Net.Sockets.UdpClient.EndSend%2A>метод.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Как правило, вызывается метод `requestCallback` делегата.       Этот метод не приводит к блокировке до завершения операции. Для блокирования до завершения операции, воспользуйтесь одним из <xref:System.Net.Sockets.UdpClient.Send%2A>перегруженных версий метода.</xref:System.Net.Sockets.UdpClient.Send%2A>       Подробные сведения об использовании модели асинхронного программирования см. в разделе [асинхронный вызов синхронных методов](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Объект <xref:System.Byte>массив, содержащий данные для отправки.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байтов для отправки."
    - id: hostname
      type: System.String
      description: "Конечный узел."
    - id: port
      type: System.Int32
      description: "Номер порта назначения."
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, который ссылается на метод, который вызывается при завершении операции.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Определяемые пользователем объект, содержащий сведения об операции отправки. Этот объект передается `requestCallback` делегат при завершении операции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, который ссылается на асинхронную передачу.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает основной сетевой <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>Создает <xref:System.Net.Sockets.Socket>используется для отправки и получения данных по сети.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> Классы, производные от <xref:System.Net.Sockets.UdpClient>можно использовать это свойство для получения или задания <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient> Используйте основной <xref:System.Net.Sockets.Socket>возвращается из клиента, если требуется доступ, выходящих за пределы которой <xref:System.Net.Sockets.UdpClient>предоставляет.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> Также можно использовать клиентского задаваемое базовой <xref:System.Net.Sockets.Socket>существующей <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket> Это полезно, если вы хотите воспользоваться преимуществами Простота <xref:System.Net.Sockets.UdpClient>использования существующих <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "Основной сетевой <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Закрывает UDP-подключения."
  remarks: "Закрытие отключает базовых <xref:System.Net.Sockets.Socket>и освобождает все управляемые и неуправляемые ресурсы, связанные с <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Устанавливает удаленный узел по умолчанию, используя указанную сетевую конечную точку."
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>Метод устанавливает удаленный узел по умолчанию, используя значение, указанное в `endPoint` параметр.</xref:System.Net.Sockets.UdpClient.Connect%2A> После установления не нужно указывать удаленный хост при каждом обращении к <xref:System.Net.Sockets.UdpClient.Send%2A>метод.</xref:System.Net.Sockets.UdpClient.Send%2A>       Установка удаленный узел по умолчанию является необязательным. Указание удаленный узел по умолчанию ограничена только узел. Если вы хотите отправить датаграмм другой удаленный хост, необходимо выполнение другого вызова <xref:System.Net.Sockets.UdpClient.Connect%2A>метода или создайте другой <xref:System.Net.Sockets.UdpClient>без удаленный узел по умолчанию.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Если установлено значение по умолчанию удаленного узла и также предоставляют удаленного узла при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода, <xref:System.Net.Sockets.UdpClient.Send%2A>вызывает <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       При вызове <xref:System.Net.Sockets.Socket.Connect%2A>метода, любые датаграммы, поступившие с адреса, отличного от заданного по умолчанию будут потеряны.</xref:System.Net.Sockets.Socket.Connect%2A> Невозможно задать удаленный узел по умолчанию адрес широковещательной рассылки, если не используется наследование от <xref:System.Net.Sockets.UdpClient>, использовать метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Однако вы можете, широковещательных данных по умолчанию широковещательный адрес 255.255.255.255, при указании <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Если приложению требуется больший контроль над широковещательные адреса, можно также можно вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек протокола UDP с момента без установления соединения, <xref:System.Net.Sockets.UdpClient.Connect%2A>метод не блокирует.</xref:System.Net.Sockets.UdpClient.Connect%2A> Не вызывайте <xref:System.Net.Sockets.UdpClient.Connect%2A>метод, если вы собираетесь прием многоадресных датаграмм.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>, Указывающий конечную точку сети, к которому выполняется для отправки данных.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Устанавливает удаленный узел по умолчанию, используя указанный IP-адрес и порт номер."
  remarks: "<xref:System.Net.Sockets.UdpClient.Connect%2A>Метод устанавливает удаленный узел по умолчанию, используя значения, указанные в `addr` и `port` параметров.</xref:System.Net.Sockets.UdpClient.Connect%2A> После установления не нужно указывать удаленный хост при каждом обращении к <xref:System.Net.Sockets.UdpClient.Send%2A>метод.</xref:System.Net.Sockets.UdpClient.Send%2A>       Установка удаленный узел по умолчанию является необязательным. Указание удаленный узел по умолчанию ограничена только узел. Если вы хотите отправить датаграмм другой удаленный хост, необходимо выполнение другого вызова <xref:System.Net.Sockets.UdpClient.Connect%2A>метода или создайте другой <xref:System.Net.Sockets.UdpClient>без удаленный узел по умолчанию.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Если установлено значение по умолчанию удаленного узла и также предоставляют удаленного узла при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода, <xref:System.Net.Sockets.UdpClient.Send%2A>вызывает <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       При вызове <xref:System.Net.Sockets.Socket.Connect%2A>метода, любые датаграммы, поступившие с адреса, отличного от заданного по умолчанию будут потеряны.</xref:System.Net.Sockets.Socket.Connect%2A> Невозможно задать удаленный узел по умолчанию адрес широковещательной рассылки, если не используется наследование от <xref:System.Net.Sockets.UdpClient>, использовать метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Однако вы можете, широковещательных данных по умолчанию широковещательный адрес 255.255.255.255, при указании <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Если приложению требуется больший контроль над широковещательные адреса, можно также можно вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек протокола UDP с момента без установления соединения, <xref:System.Net.Sockets.UdpClient.Connect%2A>метод не блокирует.</xref:System.Net.Sockets.UdpClient.Connect%2A> Не вызывайте <xref:System.Net.Sockets.UdpClient.Connect%2A>метод, если вы собираетесь прием многоадресных датаграмм.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>Удаленного узла, к которому выполняется для отправки данных.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "Номер порта, к которому выполняется отправка данных."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>закрыт."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>не находится между <xref:System.Net.IPEndPoint.MinPort> и <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Устанавливает удаленный узел по умолчанию с помощью указанного узла имя и номер порта."
  remarks: "Метод Connect устанавливает удаленный узел по умолчанию, используя значения, указанные в `port` и `hostname` параметров. После установления не нужно указывать удаленный хост при каждом обращении к <xref:System.Net.Sockets.UdpClient.Send%2A>метод.</xref:System.Net.Sockets.UdpClient.Send%2A>       Установка удаленный узел по умолчанию является необязательным. Указание удаленный узел по умолчанию ограничена только узел. Если вы хотите отправить датаграмм другой удаленный хост, необходимо убедиться в другой вызов метода Connect или создайте другой <xref:System.Net.Sockets.UdpClient>без удаленный узел по умолчанию.</xref:System.Net.Sockets.UdpClient>       Если установлено значение по умолчанию удаленного узла и также предоставляют удаленного узла при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода, <xref:System.Net.Sockets.UdpClient.Send%2A>вызывает <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       При вызове <xref:System.Net.Sockets.Socket.Connect%2A>метода, любые датаграммы, поступившие с адреса, отличного от заданного по умолчанию будут потеряны.</xref:System.Net.Sockets.Socket.Connect%2A> Невозможно задать удаленный узел по умолчанию адрес широковещательной рассылки, если не используется наследование от <xref:System.Net.Sockets.UdpClient>, использовать метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       Однако вы можете, широковещательных данных по умолчанию широковещательный адрес 255.255.255.255, при указании <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>при вызове <xref:System.Net.Sockets.UdpClient.Send%2A>метода.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Если приложению требуется больший контроль над широковещательные адреса, можно также можно вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек протокола UDP, так как является протоколом без установления соединения, метод Connect блокирует. Не вызывайте метод Connect, если вы собираетесь прием многоадресных датаграмм."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "DNS-имя удаленного узла, к которому выполняется отправка данных."
    - id: port
      type: System.Int32
      description: "Номер порта удаленного узла, к которому выполняется для отправки данных."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>не находится между <xref:System.Net.IPEndPoint.MinPort> и <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Освобождает управляемые и неуправляемые ресурсы, используемые <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые `Dispose()`метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> `Dispose()`вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A>вызывает `Dispose` с `disposing` значение `false`.</xref:System.Object.Finalize%2A>       При `disposing` параметр имеет значение true, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Net.Sockets.UdpClient>ссылки.</xref:System.Net.Sockets.UdpClient> Этот метод вызывает `Dispose()` метод для каждого объекта, на который указывает ссылка."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает <xref:System.Boolean>значение, указывающее, является ли <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> позволяет датаграмм Internet Protocol (IP) фрагментация.</xref:System.Boolean>"
  remarks: "Необходима фрагментация датаграмм, когда их размер превышает максимальный передачи единицы (MTU) среды передачи. Может фрагментация датаграмм, отправляющим узлом или промежуточным маршрутизатором. Если необходимо Фрагментировано датаграмм и <xref:System.Net.Sockets.Socket.DontFragment%2A>был установлен, датаграмма отбрасывается и сообщение об ошибке управления сообщений протокола ICMP (Internet) отправляется обратно отправителю датаграммы.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> позволяет фрагментации датаграмм; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Это свойство можно задать только для сокетов, использующих <xref:System.Net.Sockets.AddressFamily>флаг или <xref:System.Net.Sockets.AddressFamily>флаг.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Оставляет группу многоадресной рассылки."
  remarks: "Метод DropMulticastGroup удаления объекта <xref:System.Net.Sockets.UdpClient>из группы многоадресной рассылки, определяемый указанным <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> После вызова метода DropMulticastGroup, базовый <xref:System.Net.Sockets.Socket>отправляет пакет протокола управления группы Интернета (IGMP) на маршрутизатор, удаляя маршрутизатор из группы многоадресной рассылки.</xref:System.Net.Sockets.Socket> После <xref:System.Net.Sockets.UdpClient>удаления объекта из группы, он не будет возможности приема датаграмм, посылаемых в эту группу.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>Группы многоадресной рассылки, чтобы оставить.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-адрес не совместим с <xref:System.Net.Sockets.AddressFamily>значение, которое определяет схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Оставляет группу многоадресной рассылки."
  remarks: "Метод DropMulticastGroup удаления объекта <xref:System.Net.Sockets.UdpClient>из группы многоадресной рассылки, определяемый указанным <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> После вызова метода DropMulticastGroup, базовый <xref:System.Net.Sockets.Socket>отправляет пакет протокола управления группы Интернета (IGMP) на маршрутизатор, удаляя маршрутизатор из группы многоадресной рассылки.</xref:System.Net.Sockets.Socket> После <xref:System.Net.Sockets.UdpClient>удаления объекта из группы, он не будет возможности приема датаграмм, посылаемых в эту группу.</xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек при получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>, чтобы получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>Группы многоадресной рассылки, чтобы оставить.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "Локальный адрес группы многоадресной рассылки, чтобы выйти."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-адрес не совместим с <xref:System.Net.Sockets.AddressFamily>значение, которое определяет схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает <xref:System.Boolean>значение, указывающее, является ли <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> может отправлять или получать широковещательных пакетов.</xref:System.Boolean>"
  remarks: "Широковещательная рассылка ограничена определенной подсети. Можно выполнить рассылку в локальной подсети путем отправки пакета по адресу 255.255.255.255; или можно использовать адрес направленной широковещательной рассылки, который является частью сети Интернет протокола IP-адрес с установлены все биты в часть узла. Например если IP-адреса 192.168.1.40 (это адрес класса C с сетевой части как первые три октета, а часть узла – это последний октет), направленный широковещательный адрес — 192.168.1.255."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> позволяет широковещательных пакетов; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Завершает отложенный асинхронный прием."
  remarks: "Этот метод блокируется до операции завершения.       Для синхронного выполнения этой операции, используйте <xref:System.Net.Sockets.UdpClient.Receive%2A>метод.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, возвращенный вызовом <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> </xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Указанной удаленной конечной точке."
    return:
      type: System.Byte[]
      description: "В случае успешного выполнения количество полученных байтов. Если операция завершилась неудачно, этот метод возвращает 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>не был возвращен вызов <xref:System.Net.Sockets.UdpClient.BeginReceive*> метод."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive был вызван ранее для асинхронного чтения."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при попытке доступа к базовой <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Дополнительные сведения см."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Завершает асинхронную ожидающие отправки."
  remarks: "Этот метод блокируется до операции завершения.       Для синхронного выполнения этой операции, используйте <xref:System.Net.Sockets.UdpClient.Send%2A>метод.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Объект, возвращенный вызовом <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Если успешно, число байт отправлено <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>не был возвращен вызов <xref:System.Net.Sockets.Socket.BeginSend*> метод."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>был вызван ранее для асинхронного чтения.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при попытке доступа к основному сокету. Дополнительные сведения см."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает <xref:System.Boolean>значение, указывающее, является ли <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> позволяет использовать порт только одному клиенту</xref:System.Boolean>"
  remarks: "По умолчанию несколько клиентов могут использовать конкретный порт; Однако только один из клиентов может выполняться на сетевом трафике, отправляемом на порт. Свойство ExclusiveAddressUse предотвратить использование определенного порта несколько клиентов.       Это свойство задается перед привязкой базового сокета с клиентским портом. При вызове метода <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, или <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, порт клиентского привязан как побочный эффект конструктора, и впоследствии невозможно задать свойство ExclusiveAddressUse</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> разрешает только одному клиенту использовать конкретный порт; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> для Windows Server 2003 и Windows XP с пакетом обновления 2 и более поздней версии, и <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для всех остальных версий."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при попытке доступа к основному сокету."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Добавляет <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> в группу многоадресной рассылки."
  remarks: "Метод JoinMulticastGroup подписывается <xref:System.Net.Sockets.UdpClient>на группу многоадресной рассылки с использованием указанного <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> После вызова метода JoinMulticastGroup, базовый <xref:System.Net.Sockets.Socket>отправляет пакет протокола управления группы Интернета (IGMP) на маршрутизатор, запросившего членство в группе многоадресной рассылки.</xref:System.Net.Sockets.Socket> Диапазон адресов многоадресной рассылки: от 224.0.0.0 до 239.255.255.255. Если указан адрес за пределами этого диапазона или маршрутизатор, на который производится запрос не многоадресной рассылки включен, <xref:System.Net.Sockets.UdpClient>вызовет <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN. Один раз <xref:System.Net.Sockets.UdpClient>указана с маршрутизатора в качестве члена группы многоадресной рассылки, будут иметь возможность получать групповых датаграмм, посылаемых на указанный <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек необходимо создать <xref:System.Net.Sockets.UdpClient>с помощью номера портов для многоадресной рассылки; в противном случае нельзя получать групповых датаграмм.</xref:System.Net.Sockets.UdpClient> Не вызывайте <xref:System.Net.Sockets.UdpClient.Connect%2A>метод перед вызовом метода JoinMulticastGroup или <xref:System.Net.Sockets.UdpClient.Receive%2A>метод не будет работать.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Необходимо входить в группу многоадресной рассылки для отправки датаграмм многоадресной IP-адрес.       Перед присоединением к группе многоадресной рассылки, убедитесь, что сокет связан с портом или конечной точки. Для этого вызова одного из конструкторов, принимающих порта или конечной точки в качестве параметра.       Чтобы прекратить прием групповых датаграмм, вызовите <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>метод и предоставить <xref:System.Net.IPAddress>группы, из которого вы хотите отозвать.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      Настроек [!NOTE] настроек в случае IPv6, имеется несколько диапазонов адресов многоадресной рассылки, можно выбрать. Обратитесь к документу IETF RFC 2375.      Настроек [!NOTE] настроек невозможно вызвать <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>на <xref:System.Net.Sockets.UdpClient>созданных без определенного локального порта (то есть с использованием <xref:System.Net.Sockets.UdpClient.%23ctor>или <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>конструктор).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Многоадресная рассылка <xref:System.Net.IPAddress>группы, которые нужно соединить.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-адрес не совместим с <xref:System.Net.Sockets.AddressFamily>значение, которое определяет схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Добавляет <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> в группу многоадресной рассылки."
  remarks: "Перед присоединением к группе многоадресной рассылки, убедитесь, что сокет связан с портом или конечной точки. Это можно сделать путем вызова одного из конструкторов, принимающих порта или конечной точки в качестве параметра.       `infindex` Параметр используется для идентификации аппаратного интерфейса на той же связи.      Настроек [!NOTE] настроек имеется несколько диапазонов адресов многоадресной рассылки для выбора. Обратитесь к документу IETF RFC 2375.      Настроек [!NOTE] настроек невозможно вызвать <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>на <xref:System.Net.Sockets.UdpClient>созданных без определенного локального порта (то есть с использованием <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>или <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>конструктор).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "Индекс интерфейса, связанного с IP-адрес локального объединения группы многоадресной рассылки."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Многоадресная рассылка <xref:System.Net.IPAddress>группы, которые нужно соединить.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Добавляет <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> в группу многоадресной рассылки с заданным временем жизни (TTL)."
  remarks: "<xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>Метод подписывается <xref:System.Net.Sockets.UdpClient>в группу многоадресной рассылки с помощью указанного <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> После вызова метода <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>базовый метод <xref:System.Net.Sockets.Socket>отправляет пакет протокола управления группы Интернета (IGMP) на маршрутизатор, запросившего членство в группе многоадресной рассылки.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Диапазон адресов многоадресной рассылки: от 224.0.0.0 до 239.255.255.255. Если указан адрес за пределами этого диапазона или маршрутизатор, на который производится запрос не многоадресной рассылки включен, <xref:System.Net.Sockets.UdpClient>вызовет <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN. `timeToLive` Параметр указывает, сколько прыжков маршрутизатора может для многоадресной датаграммы уничтожается. Один раз <xref:System.Net.Sockets.UdpClient>указана с маршрутизатора в качестве члена группы многоадресной рассылки, будут иметь возможность получать групповых датаграмм, посылаемых на указанный <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient>      Настроек [!NOTE] настроек необходимо создать <xref:System.Net.Sockets.UdpClient>с помощью номера порта многоадресной рассылки в противном случае вы не сможете получать групповых датаграмм.</xref:System.Net.Sockets.UdpClient> Не вызывайте <xref:System.Net.Sockets.UdpClient.Connect%2A>метод до вызова метода <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>метода или метода получения не будет работать.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Необходимо входить в группу многоадресной рассылки для отправки датаграмм многоадресной IP-адрес.       Перед присоединением к группе многоадресной рассылки убедитесь, что сокет связан с портом или конечной точки. Для этого вызова одного из конструкторов, которые принимают в качестве параметра порта или конечной точки.       Чтобы прекратить прием групповых датаграмм, вызовите <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>метод и предоставить <xref:System.Net.IPAddress>группы, из которого вы хотите отозвать.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      Настроек [!NOTE] настроек невозможно вызвать <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>на <xref:System.Net.Sockets.UdpClient>созданных без определенного локального порта (то есть с использованием <xref:System.Net.Sockets.UdpClient.%23ctor>или <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>конструктор).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>Группы многоадресной рассылки для присоединения.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "Время жизни (TTL), измеряемый в прыжков маршрутизатора."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Значение параметра TTL не от 0 до 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "IP-адрес не совместим с <xref:System.Net.Sockets.AddressFamily>значение, которое определяет схему адресации сокета.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Добавляет <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> в группу многоадресной рассылки."
  remarks: "Перед присоединением группы многоадресной рассылки, убедитесь, что сокет связан с портом или конечной точки. Это можно сделать путем вызова одного из конструкторов, принимающих порта или конечной точки в качестве параметра.      Настроек [!NOTE] настроек имеется несколько диапазонов адресов многоадресной рассылки для выбора. Их можно найти в описание см.      Настроек [!NOTE] настроек невозможно вызвать <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>на <xref:System.Net.Sockets.UdpClient>созданных без определенного локального порта (то есть с использованием <xref:System.Net.Sockets.UdpClient.%23ctor>или <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>конструктор).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "Многоадресная рассылка <xref:System.Net.IPAddress>группы, которые нужно соединить.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "Локальный <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает <xref:System.Boolean>значение, указывающее, доставляются ли исходящих пакетов многоадресной рассылки в передающее приложение.</xref:System.Boolean>"
  remarks: "Многоадресная рассылка — это масштабируемая метод многие ко многим обмен данными через Интернет. Если процесс подписывается на адрес многоадресной рассылки, любые пакеты, отправленные этим процессом, получаются любым другим процессом, который подписался на адрес многоадресной рассылки."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> получает исходящих пакетов многоадресной рассылки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает UDP-датаграмму, которое было отправлено с удаленного узла."
  remarks: "Метод Receive будет блокироваться, пока не получена датаграмма с удаленного узла. При наличии данных метода получения чтение первой датаграммы из очереди и вернет блок данных в виде массива байтов. Этот метод заполняет `remoteEP` параметр с <xref:System.Net.IPAddress>и номер порта отправителя.</xref:System.Net.IPAddress>       Если указан удаленный узел по умолчанию в <xref:System.Net.Sockets.UdpClient.Connect%2A>метода, метод Receive будет принимать датаграмм с этого узла, только.</xref:System.Net.Sockets.UdpClient.Connect%2A> Все остальные датаграммы будут отменены.       При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.      Настроек [!NOTE] настроек, если вы собираетесь прием многоадресных датаграмм, не следует вызывать <xref:System.Net.Sockets.UdpClient.Connect%2A>метод перед вызовом метода Receive.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient>Используется для получения датаграммы должны создаваться с помощью номера портов для многоадресной рассылки.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>, Представляющий удаленный узел, с которого было отправлено данные.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, содержащий данные датаграмм.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает UDP-датаграмму асинхронно, отправленное удаленному узлу."
  remarks: "Эта операция не будет блокирована. Возвращенный <xref:System.Threading.Tasks.Task%601>настроек объекта будет выполнена после получения пакетов UDP.</xref:System.Threading.Tasks.Task%601>       Если указан удаленный узел по умолчанию в <xref:System.Net.Sockets.UdpClient.Connect%2A>метода, этот метод принимает датаграмм с этого узла, только.</xref:System.Net.Sockets.UdpClient.Connect%2A> Все остальные датаграммы будут отменены.       При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.      Настроек [!WARNING] настроек, если вы собираетесь прием многоадресных датаграмм, не следует вызывать <xref:System.Net.Sockets.UdpClient.Connect%2A>метод до вызова этого метода.</xref:System.Net.Sockets.UdpClient.Connect%2A> <xref:System.Net.Sockets.UdpClient>Используется для получения датаграммы должны создаваться с помощью номера портов для многоадресной рассылки.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Возвращает &lt;xref:System.Threading.Tasks.Task%601&gt;.       Объект задачи, представляющий асинхронную операцию."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Базовый <xref:System.Net.Sockets.Socket>было закрыто.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Отправляет датаграмму UDP в удаленный узел."
  remarks: "Эта перегрузка датаграмм удаленного узла, заданного в <xref:System.Net.Sockets.UdpClient.Connect%2A>метод и возвращает число байтов, отправленных.</xref:System.Net.Sockets.UdpClient.Connect%2A> Если не вызывается <xref:System.Net.Sockets.UdpClient.Connect%2A>перед вызовом этой перегрузки, <xref:System.Net.Sockets.UdpClient.Send%2A>метод вызывает исключение <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       Если вы хотите отправить датаграмм другой удаленный хост, необходимо вызвать <xref:System.Net.Sockets.UdpClient.Connect%2A>метод и укажите нужное удаленного узла.</xref:System.Net.Sockets.UdpClient.Connect%2A> Используйте один из других <xref:System.Net.Sockets.UdpClient.Send%2A>перегруженных версий метода для отправки датаграмм адрес широковещательной рассылки.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    return:
      type: System.Int32
      description: "Число отправленных байтов."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Отправляет UDP-датаграмму в узел в указанной удаленной конечной точке."
  remarks: "Метод Send отправляет датаграмм в заданную конечную точку и возвращает количество успешно отправленных байт. Перед вызовом этой перегрузки необходимо сначала создать <xref:System.Net.IPEndPoint>с помощью IP-адреса и порта удаленного узла, на который будут доставляться датаграммы номер.</xref:System.Net.IPEndPoint> Можно посылать датаграммы адрес широковещательной рассылки по умолчанию 255.255.255.255, задав <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>для <xref:System.Net.IPAddress.Address%2A>Свойства <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> После создания этого <xref:System.Net.IPEndPoint>, передать его в качестве метода Send `endPoint` параметр.</xref:System.Net.IPEndPoint>       Если вы хотите отправить датаграмм широковещательный адрес, используйте <xref:System.Net.Sockets.UdpClient.Client%2A>метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Можно также вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек не имеют `endPoint` параметр этого метода, если вы уже установили удаленного узла с <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> В противном случае метод Send вызовет <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить, в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>, Представляющий узел и порт, в который требуется отправить датаграмму.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "Число отправленных байтов."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Отправляет UDP-датаграмму на заданный порт указанного удаленного узла."
  remarks: "<xref:System.Net.Sockets.UdpClient.Send%2A>Метод датаграмм значения, указанные в `hostname` и `port` параметров и возвращает количество успешно переданных байтов.</xref:System.Net.Sockets.UdpClient.Send%2A> Можно посылать датаграммы адрес широковещательной рассылки по умолчанию путем задания значения «255.255.255.255» для `hostname` значение параметра.       Если вы хотите отправить датаграмм широковещательный адрес, используйте <xref:System.Net.Sockets.UdpClient.Client%2A>метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Можно также вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!NOTE] настроек не введите имя узла и номер порта для этого метода, если вы создали удаленного узла с <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> В противном случае <xref:System.Net.Sockets.UdpClient.Send%2A>метод вызывает исключение <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    - id: hostname
      type: System.String
      description: "Имя удаленного узла, на который планируется отправить датаграмму."
    - id: port
      type: System.Int32
      description: "Номер удаленного порта, который планируется для обмена данными."
    return:
      type: System.Int32
      description: "Число отправленных байтов."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму UDP в удаленный узел."
  remarks: "Эта перегрузка датаграмм удаленного узла, заданного в <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> Если не следует вызывать <xref:System.Net.Sockets.UdpClient.Connect%2A>перед вызовом этой перегрузки метода вызовет <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Connect%2A> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN.       Если вы хотите отправить датаграмм другой удаленный хост, необходимо вызвать <xref:System.Net.Sockets.UdpClient.Connect%2A>метод и укажите нужное удаленного узла.</xref:System.Net.Sockets.UdpClient.Connect%2A> Используйте один из других <xref:System.Net.Sockets.UdpClient.SendAsync%2A>перегруженных версий метода для отправки датаграмм адрес широковещательной рассылки.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Возвращает &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму UDP в удаленный узел."
  remarks: "Этот метод отправляет датаграммы на указанную конечную точку. Перед вызовом этой перегрузки необходимо сначала создать <xref:System.Net.IPEndPoint>с помощью IP-адреса и порта удаленного узла, на который будут доставляться датаграммы номер.</xref:System.Net.IPEndPoint> Можно посылать датаграммы адрес широковещательной рассылки по умолчанию 255.255.255.255, задав <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>для <xref:System.Net.IPAddress.Address%2A>Свойства <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> После создания этого <xref:System.Net.IPEndPoint>, передать его этому методу в качестве `endPoint` параметр.</xref:System.Net.IPEndPoint>       Если вы хотите отправить датаграмм широковещательный адрес, используйте <xref:System.Net.Sockets.UdpClient.Client%2A>метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Можно также вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!WARNING] настроек не имеют `endPoint` параметр этого метода, если вы уже установили удаленного узла с <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> В противном случае этот метод вызывает исключение <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>, Представляющий узел и порт, в который требуется отправить датаграмму.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Возвращает &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Асинхронно отправляет датаграмму UDP в удаленный узел."
  remarks: "Этот метод передает датаграммы на значения, указанные в `hostname` и `port` параметров. Можно посылать датаграммы адрес широковещательной рассылки по умолчанию путем задания значения «255.255.255.255» для `hostname` значение параметра.       Если вы хотите отправить датаграмм широковещательный адрес, используйте <xref:System.Net.Sockets.UdpClient.Client%2A>метод, чтобы получить основной <xref:System.Net.Sockets.Socket>и задать параметр сокета для <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> Можно также вернуться к использованию <xref:System.Net.Sockets.Socket>класса.</xref:System.Net.Sockets.Socket>      Настроек [!WARNING] настроек не введите имя узла и номер порта для этого метода, если вы создали удаленного узла с <xref:System.Net.Sockets.UdpClient.Connect%2A>метод.</xref:System.Net.Sockets.UdpClient.Connect%2A> В противном случае этот метод вызывает исключение <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> При получении <xref:System.Net.Sockets.SocketException>, используйте <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>получить конкретный код ошибки.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Получив этот код можно было подробное описание ошибки документации по кодам ошибок API Windows Sockets версии 2 в библиотеке MSDN."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Массив объектов типа <xref:System.Byte>, задающий UDP-датаграмму, которую планируется отправить в виде массива байтов.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Число байт в датаграмме."
    - id: hostname
      type: System.String
      description: "Имя удаленного узла, на который планируется отправить датаграмму."
    - id: port
      type: System.Int32
      description: "Номер удаленного порта, который планируется для обмена данными."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Возвращает &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Уже установил удаленный узел по умолчанию."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> Закрыт."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Произошла ошибка при обращении к сокету. Дополнительные сведения см."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Возвращает или задает значение, указывающее оставшееся время существования (TTL) для пакетов протокола Интернета (IP), отправленных <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  remarks: "Значение TTL указывает максимальное число маршрутизаторов, пакет может пересекать перед маршрутизатор отменяет пакет и протокол управления сообщений протокола ICMP (Internet) «Превышено TTL» отправителю возвращается сообщение об ошибке."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "Значение срока ЖИЗНИ."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
