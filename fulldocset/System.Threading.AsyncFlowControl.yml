### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncFlowControl
  id: AsyncFlowControl
  children:
  - System.Threading.AsyncFlowControl.Dispose
  - System.Threading.AsyncFlowControl.Equals(System.Object)
  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.GetHashCode
  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.Undo
  langs:
  - csharp
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
  type: Struct
  summary: "Предоставляет функциональные возможности для восстановления миграции или поток контекста выполнения между потоками."
  remarks: "Контекст выполнения содержит все данные, касающиеся выполнения логических потоков. Поток контекста выполнения в другие потоки, можно предотвратить с помощью <xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>метод, возвращающий структуру AsyncFlowControl.</xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> <xref:System.Threading.AsyncFlowControl.Undo%2A>Метод возвращаемой структуры AsyncFlowControl можно использовать для отмены потока подавления.</xref:System.Threading.AsyncFlowControl.Undo%2A> Структура AsyncFlowControl должен использоваться в том же потоке, в котором он был создан."
  syntax:
    content: 'public struct AsyncFlowControl : IDisposable'
  inheritance:
  - System.ValueType
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Dispose
  id: Dispose
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Освобождает все ресурсы, используемые текущим экземпляром <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> класса."
  remarks: "Вызовите `Dispose` после использования <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> `Dispose` Метода <xref:System.Threading.AsyncFlowControl>окажется в неработоспособном состоянии.</xref:System.Threading.AsyncFlowControl> После вызова метода `Dispose`, необходимо освободить все ссылки на <xref:System.Threading.AsyncFlowControl>, сборщик мусора мог освободить память, <xref:System.Threading.AsyncFlowControl>занимаемую.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.AsyncFlowControl>       Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [метода](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек вызова всегда `Dispose` перед освобождением последней ссылки на <xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl> В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет метод <xref:System.Threading.AsyncFlowControl>объекта `Finalize` метод.</xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структура не используется в потоке которой он был создан.       - или - <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структура уже используется для вызова Dispose или <xref:System.Threading.AsyncFlowControl.Undo*>.</xref:System.Threading.AsyncFlowControl.Undo*>"
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Определяет, является ли заданный объект текущему объекту <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект для сравнения с текущей структурой."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> obj </code> — <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры и равен текущему <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуру; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  id: Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Определяет ли указанный <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры текущему объекту <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры."
  syntax:
    content: public bool Equals (System.Threading.AsyncFlowControl obj);
    parameters:
    - id: obj
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структура для сравнения с текущей структурой."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <code> obj </code> совпадает с текущим <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуру; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.GetHashCode
  id: GetHashCode
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Возвращает хэш-код для текущего <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для текущего <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры."
  overload: System.Threading.AsyncFlowControl.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Сравнивает два <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры, чтобы определить, равны ли они."
  syntax:
    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структуры."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структуры."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если две структуры равны. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Сравнивает два <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структуры, чтобы определить, не равны ли они."
  syntax:
    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структуры."
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структуры."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если структуры не равны. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Threading.AsyncFlowControl.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Undo
  id: Undo
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Восстанавливает перемещение контекста выполнения между потоками."
  remarks: "<xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>Возвращает <xref:System.Threading.AsyncFlowControl>Структура, используемая для восстановления потока.</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>       Метод отмены должен вызываться только для <xref:System.Threading.AsyncFlowControl>структуры, возвращенный связанный с ним <xref:System.Threading.ExecutionContext.SuppressFlow%2A>метод.</xref:System.Threading.ExecutionContext.SuppressFlow%2A> </xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Undo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> Структура не используется в потоке которой он был создан.       - или - <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref> структура уже используется для вызова <xref:System.Threading.AsyncFlowControl.Dispose*>или отменить.</xref:System.Threading.AsyncFlowControl.Dispose*>"
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.AsyncFlowControl.Dispose
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.AsyncFlowControl.GetHashCode
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.Undo
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
- uid: System.Threading.AsyncFlowControl.Dispose*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose
  nameWithType: AsyncFlowControl.Dispose
- uid: System.Threading.AsyncFlowControl.Equals*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals
  nameWithType: AsyncFlowControl.Equals
- uid: System.Threading.AsyncFlowControl.GetHashCode*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode
  nameWithType: AsyncFlowControl.GetHashCode
- uid: System.Threading.AsyncFlowControl.op_Equality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality
  nameWithType: AsyncFlowControl.op_Equality
- uid: System.Threading.AsyncFlowControl.op_Inequality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality
  nameWithType: AsyncFlowControl.op_Inequality
- uid: System.Threading.AsyncFlowControl.Undo*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo
  nameWithType: AsyncFlowControl.Undo
