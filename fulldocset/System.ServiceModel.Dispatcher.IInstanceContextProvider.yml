### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider
  id: IInstanceContextProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  langs:
  - csharp
  name: IInstanceContextProvider
  nameWithType: IInstanceContextProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider
  type: Interface
  summary: "Реализуйте для участия в создании или выборе объекта &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; объектов, особенно для обеспечения общих сеансов."
  remarks: "Реализуйте интерфейс IInstanceContextProvider для предоставления соответствующего <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>объекта в системе.</xref:System.ServiceModel.InstanceContext?displayProperty=fullName> Как правило этот интерфейс реализуется для поддержки общих сеансов, обеспечения пулов экземпляров служб, контроля времени существования экземпляров служб или группировки контекстов клиентов.       Например, для реализации управления доступом, вставить пользовательские IInstanceContextProvider, чтобы определить, какой сеанс или вызов от клиента связан с <xref:System.ServiceModel.InstanceContext>объекта.</xref:System.ServiceModel.InstanceContext> Пример, демонстрирующий общее использование контекстов экземпляров см. в разделе [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).      Настроек [!NOTE] настроек вставляется при IInstanceContextProvider [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)], обычное свойство, которое контролирует создание <xref:System.ServiceModel.InstanceContext>объектов ( <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>Свойства), больше не проверяется и не оказывает влияния.</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext>       Более универсальным механизмом, с помощью которого можно инициализировать <xref:System.ServiceModel.InstanceContext>объектов при создании (например, для присоединения пользовательских расширений к каждому <xref:System.ServiceModel.InstanceContext>) является <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public interface IInstanceContextProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Вызывается при получении нового сообщения."
  remarks: "Метод GetExistingInstanceContext вызывается при получении сообщения. Возвращает <xref:System.ServiceModel.InstanceContext>, который требуется для обработки сообщения, или `null`.</xref:System.ServiceModel.InstanceContext> В случае использования `null`, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] создает новую <xref:System.ServiceModel.InstanceContext>объект для сообщения, а затем вызывает <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>метод.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> </xref:System.ServiceModel.InstanceContext>       Если возвращается `null`, новый <xref:System.ServiceModel.InstanceContext>объект проходит через систему регулирования количества запросов и увеличивает счетчик <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Входящее сообщение."
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "Канал, получивший сообщение."
    return:
      type: System.ServiceModel.InstanceContext
      description: "&lt;Xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; объект, который будет использоваться для обработки сообщения, возвращают <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для указания [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] для создания нового <xref:System.ServiceModel.InstanceContext>объекта.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Вызывается, когда <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> возвращается из <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>метод.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>"
  remarks: "InitializeInstanceContext вызывается, когда <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>возвращает `null` и новый <xref:System.ServiceModel.InstanceContext>создан объект.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> Этот метод вызывается для уведомления в случае, новый <xref:System.ServiceModel.InstanceContext>был создан.</xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Новый &lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt; объекта."
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "Входящее сообщение."
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "Канал, получивший сообщение."
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  id: IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Вызывается, когда все <xref:System.ServiceModel.InstanceContext>завершения действий, чтобы позволить разработчикам предотвратить <xref:System.ServiceModel.InstanceContext>уничтожение.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  remarks: "При вызове IsIdle [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] собирается закрыть и уничтожить простоя <xref:System.ServiceModel.InstanceContext>таким образом, чтобы сообщить среде выполнения следует ли продолжить выполнение процесса</xref:System.ServiceModel.InstanceContext>       Пример, демонстрирующий общее использование контекстов экземпляров см. в разделе [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)."
  syntax:
    content: public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "<xref:System.ServiceModel.InstanceContext>Объект, который считается бездействующим.</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] должна закрыть и уничтожить <xref:System.ServiceModel.InstanceContext>объекта и изменить значение параметра &lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName&gt;; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  id: NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Вызывается, когда <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>возвращает <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> , чтобы позволить разработчику обеспечить обратный вызов уведомления [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] при <xref:System.ServiceModel.InstanceContext>объект заканчивает.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>"
  remarks: "При вызове метода NotifyIdle <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>возвращает метод `false` для предоставления [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] с <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>, который будет использовать информирует среду выполнения, <xref:System.ServiceModel.InstanceContext>завершил работу.</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> Если <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>объект уведомляет среду выполнения, <xref:System.ServiceModel.InstanceContext>завершил работу, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] вызовы <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>еще раз.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> Этот цикл продолжается, пока <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>возвращает `true` и контекст будет закрыт и уничтожен.</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>"
  syntax:
    content: public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: callback
      type: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.InstanceContextIdleCallback&quot;> </xref> Объект, который уведомляет [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] при <xref:System.ServiceModel.InstanceContext>должен быть закрыт и уничтожен.</xref:System.ServiceModel.InstanceContext>"
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "Текущий <xref:System.ServiceModel.InstanceContext>.</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IContextChannel
  parent: System.ServiceModel
  isExternal: true
  name: IContextChannel
  nameWithType: IContextChannel
  fullName: System.ServiceModel.IContextChannel
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
- uid: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: InstanceContextIdleCallback
  nameWithType: InstanceContextIdleCallback
  fullName: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext
  nameWithType: IInstanceContextProvider.InitializeInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle
  nameWithType: IInstanceContextProvider.IsIdle
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle
  nameWithType: IInstanceContextProvider.NotifyIdle
