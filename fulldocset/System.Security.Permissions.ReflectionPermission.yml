### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermission
  id: ReflectionPermission
  children:
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  - System.Security.Permissions.ReflectionPermission.Copy
  - System.Security.Permissions.ReflectionPermission.Flags
  - System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.ReflectionPermission.IsUnrestricted
  - System.Security.Permissions.ReflectionPermission.ToXml
  - System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: ReflectionPermission
  nameWithType: ReflectionPermission
  fullName: System.Security.Permissions.ReflectionPermission
  type: Class
  summary: "Управляет доступом к закрытым типам и членам через <xref href=&quot;System.Reflection&quot;> </xref> API-интерфейсы. Управляет некоторыми функциями <xref href=&quot;System.Reflection.Emit&quot;> </xref> API-интерфейсы."
  remarks: "Без разрешение ReflectionPermission код может использовать отражение для доступа к открытым членам объектов. Код разрешение ReflectionPermission и соответствующего <xref:System.Security.Permissions.ReflectionPermissionFlag>флаги можно получить доступ к `protected` и `private` члены объектов.</xref:System.Security.Permissions.ReflectionPermissionFlag>      Настроек [!CAUTION] настроек разрешение ReflectionPermission позволяют осуществлять доступ к закрытым типам и членам, поэтому рекомендуется не предоставлять разрешение ReflectionPermission для Интернет-кода, за исключением с <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>флаг.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> <xref:System.Security.Permissions.ReflectionPermissionFlag>Разрешает доступ к закрытым членам, ограничение, согласно которому набор прав, не являющиеся открытыми члены должно быть равно или подмножеством, набор прав код, который получает доступ к закрытым членам.</xref:System.Security.Permissions.ReflectionPermissionFlag>       Некоторые возможности отражения выпустить, таких как выпуск символов отладки, требуется разрешение ReflectionPermission с <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>флаг.</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>       Дополнительные сведения см. в разделе <xref:System.Security.Permissions.ReflectionPermissionFlag>перечисления.</xref:System.Security.Permissions.ReflectionPermissionFlag>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> класса с указанным состоянием разрешения: полностью ограниченное или неограниченное."
  remarks: "Создает либо полностью ограниченный (`None`) или `Unrestricted` доступ к метаданным."
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/visualbasic/a6514c98-a52a-4b79-a783-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#7](~/add/codesnippet/csharp/a6514c98-a52a-4b79-a783-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Один из <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> значения."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> Параметр не является допустимым значением для <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  id: '#ctor(System.Security.Permissions.ReflectionPermissionFlag)'
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref> класса с заданным доступом."
  remarks: ''
  example:
  - "The following code example shows the use of the ReflectionPermission constructor. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/d03b017b-73f9-4633-80a5-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/d03b017b-73f9-4633-80a5-_1.cs)]"
  syntax:
    content: public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "Один из <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> значения."
  overload: System.Security.Permissions.ReflectionPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flag </code> Параметр не является допустимым значением для <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Copy
  id: Copy
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает и возвращает идентичную копию текущего разрешения."
  remarks: "Копия разрешения предоставляет такой же доступ к ресурсам, что само разрешение."
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_6_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#5](~/add/codesnippet/csharp/m-system.security.permis_6_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Копия текущего разрешения."
  overload: System.Security.Permissions.ReflectionPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает или задает тип отражения, допустимого для текущего разрешения."
  remarks: ''
  example:
  - "The following code example shows the use of the Flags property. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/p-system.security.permis_7_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/p-system.security.permis_7_1.cs)]"
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "Флаги, заданные для текущего разрешения."
  overload: System.Security.Permissions.ReflectionPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Попытка задать это свойство имеет недопустимое значение. В разделе <xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;> </xref> допустимые значения."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Восстанавливает разрешение с указанным состоянием из кодировки XML."
  remarks: ''
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/31379e48-984f-4b70-8613-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/31379e48-984f-4b70-8613-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "Кодировка XML, используемая для восстановления разрешения."
  overload: System.Security.Permissions.ReflectionPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code> Параметр не является допустимым элементом разрешения.       - или - <code> esd </code> номер версии параметра не является допустимым."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает и возвращает разрешение, представляющее собой пересечение текущего и указанного разрешений."
  remarks: "Пересечение двух разрешений является разрешением, которое описывает набор операций, в обоих разрешениях. Только запрос, передающий оба исходных разрешения, передает их пересечение."
  example:
  - "The following code example shows the behavior of the Intersect method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/visualbasic/0231533f-ad3c-4735-a9a6-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#4](~/add/codesnippet/csharp/0231533f-ad3c-4735-a9a6-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение, пересекающееся с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новое разрешение, представляющее собой пересечение текущего и указанного разрешений. Это новое разрешение равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если пересечение является пустым."
  overload: System.Security.Permissions.ReflectionPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Определяет, является ли текущее разрешение подмножеством указанного разрешения."
  remarks: "Текущее разрешение является подмножеством указанного разрешения, если текущее разрешение задает набор операций, полностью содержащихся в заданном разрешении. Например, разрешение, которое предоставляет доступ к C:\\example.txt является подмножеством разрешения, предоставляющего доступ к C:\\\\. Если этот метод возвращает `true`, текущее разрешение не предоставляет большего доступа к защищенному ресурсу, чем указанное разрешение."
  example:
  - "The following code example shows the behavior of the IsSubsetOf method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/visualbasic/4d20fd34-7dad-48da-8000-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#2](~/add/codesnippet/csharp/4d20fd34-7dad-48da-8000-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение, для которого требуется проверить отношение подмножества. Это разрешение должно быть того же типа, что и текущее разрешение."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущее разрешение является подмножеством указанного разрешения. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает значение, указывающее, является ли текущее разрешение является неограниченным."
  remarks: "Неограниченное разрешение представляет доступ ко всем ресурсам, защищенным с помощью разрешений."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущее разрешение является неограниченным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает кодировку XML для разрешения и его текущего состояния."
  remarks: ''
  example:
  - "The following code example shows the behavior of the ToXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_18_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#6](~/add/codesnippet/csharp/m-system.security.permis_18_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Кодировка XML разрешения, включающая сведения о состоянии."
  overload: System.Security.Permissions.ReflectionPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает разрешение, представляющее собой объединение текущего и указанного разрешений."
  remarks: "Результатом вызова на объединение является разрешение, представляющее все действия, представленные текущего разрешения и указанного разрешений. Любой запрос, передающий любое разрешение, передает их объединение."
  example:
  - "The following code example shows the behavior of the Union method. This example is part of a larger example provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/visualbasic/e04a2468-b512-4092-a730-_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#3](~/add/codesnippet/csharp/e04a2468-b512-4092-a730-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "Разрешение для объединения с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новое разрешение, представляющее собой объединение текущего и указанного разрешений."
  overload: System.Security.Permissions.ReflectionPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(PermissionState)
  nameWithType: ReflectionPermission.ReflectionPermission(PermissionState)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission(ReflectionPermissionFlag)
  nameWithType: ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
  fullName: System.Security.Permissions.ReflectionPermission.ReflectionPermission(ReflectionPermissionFlag)
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermission.Copy
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy()
  nameWithType: ReflectionPermission.Copy()
  fullName: System.Security.Permissions.ReflectionPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermission.Flags
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
  fullName: System.Security.Permissions.ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: ReflectionPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.ReflectionPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: ReflectionPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Intersect(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: ReflectionPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: ReflectionPermission.IsUnrestricted()
  fullName: System.Security.Permissions.ReflectionPermission.IsUnrestricted()
- uid: System.Security.Permissions.ReflectionPermission.ToXml
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml()
  nameWithType: ReflectionPermission.ToXml()
  fullName: System.Security.Permissions.ReflectionPermission.ToXml()
- uid: System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: ReflectionPermission.Union(IPermission)
  fullName: System.Security.Permissions.ReflectionPermission.Union(IPermission)
- uid: System.Security.Permissions.ReflectionPermission.#ctor*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ReflectionPermission
  nameWithType: ReflectionPermission.ReflectionPermission
- uid: System.Security.Permissions.ReflectionPermission.Copy*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Copy
  nameWithType: ReflectionPermission.Copy
- uid: System.Security.Permissions.ReflectionPermission.Flags*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermission.Flags
- uid: System.Security.Permissions.ReflectionPermission.FromXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: FromXml
  nameWithType: ReflectionPermission.FromXml
- uid: System.Security.Permissions.ReflectionPermission.Intersect*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Intersect
  nameWithType: ReflectionPermission.Intersect
- uid: System.Security.Permissions.ReflectionPermission.IsSubsetOf*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: ReflectionPermission.IsSubsetOf
- uid: System.Security.Permissions.ReflectionPermission.IsUnrestricted*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: ReflectionPermission.IsUnrestricted
- uid: System.Security.Permissions.ReflectionPermission.ToXml*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: ToXml
  nameWithType: ReflectionPermission.ToXml
- uid: System.Security.Permissions.ReflectionPermission.Union*
  parent: System.Security.Permissions.ReflectionPermission
  isExternal: false
  name: Union
  nameWithType: ReflectionPermission.Union
