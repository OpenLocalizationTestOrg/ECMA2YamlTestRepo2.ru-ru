### YamlMime:ManagedReference
items:
- uid: System.Reflection.IReflect
  id: IReflect
  children:
  - System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.IReflect.UnderlyingSystemType
  langs:
  - csharp
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
  type: Interface
  summary: "Взаимодействует с [интерфейса IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)."
  remarks: "Интерфейс интерфейса IReflect используется для взаимодействия с [интерфейса IDispatch](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5). Интерфейса IReflect определяет подмножество <xref:System.Type>методов отражения.</xref:System.Type> Реализация этого интерфейса позволяет настроить поведение при доступе к объекту из COM, как тип `IDispatch` объекта. <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>Класс может использоваться для маршалинга объекта, реализующего интерфейса IReflect или <xref:System.Runtime.InteropServices.Expando.IExpando>как COM `IDispatch` объекта и наоборот.</xref:System.Runtime.InteropServices.Expando.IExpando> </xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")]

      public interface IReflect
  implements: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Возвращает <xref:System.Reflection.FieldInfo>объекта, который соответствует указанное поле и флаг привязки.</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Имя поля для поиска."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.FieldInfo
      description: "Объект <xref:System.Reflection.FieldInfo>объект, содержащий данные поля для именованного объекта, который удовлетворяет ограничениям поиска, задаваемым параметром <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Объект реализует несколько полей с тем же именем."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Возвращает массив объектов, <xref:System.Reflection.FieldInfo>которые соответствуют всем полям текущего класса.</xref:System.Reflection.FieldInfo>"
  remarks: "Искомый элемент создается на основе имени. Каждое поле должно иметь уникальное имя. <xref:System.Reflection.BindingFlags?displayProperty=fullName>Флаг указывает, что неоткрытые методы включаются в поиск.</xref:System.Reflection.BindingFlags?displayProperty=fullName> <xref:System.Reflection.BindingFlags?displayProperty=fullName>Флаг указывает, что открытые методы включаются в поиск.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.FieldInfo[]
      description: "Массив <xref:System.Reflection.FieldInfo>объектов, содержащий всю информацию для этого объекта отражения, который удовлетворяет ограничениям поиска, указанного в поле <code> bindingAttr </code>.</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает массив <xref:System.Reflection.MemberInfo>объектов, соответствующих всем открытым членам или всем членам, которые удовлетворяют заданному имени.</xref:System.Reflection.MemberInfo>"
  remarks: "Метод GetMember извлекает массив <xref:System.Reflection.MemberInfo>объектов с помощью имени и атрибуту привязки, которые соответствуют всем открытым членам или всем членам, которые удовлетворяют заданному имени.</xref:System.Reflection.MemberInfo> Регистр указанное имя является соблюдается или не обрабатывается в соответствии с <xref:System.Reflection.BindingFlags?displayProperty=fullName>.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Имя члена, который требуется найти."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Массив <xref:System.Reflection.MemberInfo>объектов сопоставления <code> name </code> параметр.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает массив объектов, <xref:System.Reflection.MemberInfo>которые соответствуют всем открытым членам или всем членам текущего класса.</xref:System.Reflection.MemberInfo>"
  remarks: "Этот метод возвращает массив <xref:System.Reflection.MemberInfo>объектов с помощью привязки атрибута, соответствующего всем открытым членам или всем членам текущего класса.</xref:System.Reflection.MemberInfo> Он возвращает массив всех членов, определенных для данного объекта."
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.MemberInfo[]
      description: "Массив <xref:System.Reflection.MemberInfo>объектов, содержащий все сведения о членстве для этого объекта отражения.</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает <xref:System.Reflection.MethodInfo>объект, соответствующий заданному методу при заданных ограничениях поиска.</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Имя члена, который требуется найти."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.MethodInfo
      description: "Объект <xref:System.Reflection.MethodInfo>объект, содержащий сведения о методе с совпадением, основанного на метод и имя ограничениям, указанным в <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Объект реализует несколько методов с тем же именем."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает <xref:System.Reflection.MethodInfo>объект, соответствующий заданному методу, с помощью <xref:System.Type>массива для выбора из одного из перегруженных методов.</xref:System.Type> </xref:System.Reflection.MethodInfo>"
  remarks: "Возвращает значение на основе имени метода, соответствие <xref:System.Reflection.BindingFlags>член перечисления, вида преобразования типов, заданные `binder` , перегрузки и <xref:System.Reflection.ParameterInfo>, описывающий сигнатуру метода.</xref:System.Reflection.ParameterInfo> </xref:System.Reflection.BindingFlags>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Имя члена, который требуется найти."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    - id: binder
      type: System.Reflection.Binder
      description: "Объект, реализующий интерфейс <xref href=&quot;System.Reflection.Binder&quot;> </xref>, содержащий свойства, связанные с этим методом."
    - id: types
      type: System.Type[]
      description: "Массив, используемый для выбора одного из перегруженных методов."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Массив модификаторов параметров, используемый для работы привязки с подписями параметров, в которых были изменены типы."
    return:
      type: System.Reflection.MethodInfo
      description: "Запрошенный метод, который соответствует указанным параметрам."
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Объект реализует несколько методов с тем же именем."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает массив <xref:System.Reflection.MethodInfo>объектов, содержащих все открытые методы или все методы текущего класса.</xref:System.Reflection.MethodInfo>"
  remarks: "Атрибут неоткрытые `bindingAttr` устанавливается только при возвращении открытых методов."
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.MethodInfo[]
      description: "Массив <xref:System.Reflection.MethodInfo>объектов, содержащий все методы, определенные для этого объекта отражения, который удовлетворяет ограничениям поиска, указанного в <code> bindingAttr </code>.</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает массив объектов, <xref:System.Reflection.PropertyInfo>соответствующих все открытые свойства или все свойства текущего класса.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Атрибут привязки, используемый для управления поиском."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "Массив <xref:System.Reflection.PropertyInfo>объектов для всех свойств, определенных для данного объекта отражения.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает <xref:System.Reflection.PropertyInfo>объект, соответствующий заданному свойству при заданных ограничениях поиска.</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "Имя свойства для поиска."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Привязка атрибутов, используемых для управления поиском."
    return:
      type: System.Reflection.PropertyInfo
      description: "Объект <xref:System.Reflection.PropertyInfo>объекта для найденного свойства, соответствующий ограничениям поиска, указанного в <code> bindingAttr </code>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойство не было найдено.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "Объект реализует несколько полей с тем же именем."
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Извлекает <xref:System.Reflection.PropertyInfo>объект, соответствующий заданному свойству при заданных ограничениях поиска.</xref:System.Reflection.PropertyInfo>"
  remarks: "Этот метод получает <xref:System.Reflection.PropertyInfo>объект, соответствующий заданному свойству при заданных ограничениях поиска.</xref:System.Reflection.PropertyInfo> Массив типов позволяет выбрать один из перегруженных методов."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "Имя члена, который требуется найти."
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "Атрибут привязки, используемый для управления поиском."
    - id: binder
      type: System.Reflection.Binder
      description: "Объект, реализующий интерфейс <xref href=&quot;System.Reflection.Binder&quot;> </xref>, содержащий свойства, связанные с этим методом."
    - id: returnType
      type: System.Type
      description: "Тип свойства."
    - id: types
      type: System.Type[]
      description: "Массив, используемый для выбора одного из перегруженных методов с тем же именем."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "Массив, используемый для выбора модификаторов параметров."
    return:
      type: System.Reflection.PropertyInfo
      description: "Объект <xref:System.Reflection.PropertyInfo>объект для найденного свойства, если свойство с указанным именем был размещен в данном объекте отражения или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойство не было найдено.</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Вызывает указанный член."
  remarks: "Вызываемый метод должен быть доступен и обеспечивать наиболее точное соответствие указанному списку аргументов, с учетом ограничений заданного модуля привязки и атрибутов вызова.       Метод вызывается, если число параметров в объявлении метода равно количеству аргументов в списке аргументов, а тип каждого аргумента может преобразовываться связывателем тип параметра.      Настроек [!NOTE] настроек массив модификаторов параметров, переданного методу методом InvokeMember должен содержать единственный модификатор параметра. Первый модификатор параметра считается при определении аргумента, который должен передаваться по ссылке, если он предоставлен модели COM.       Связыватель находит все подходящие методы, в соответствии с типом связывания (<xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.IReflect.GetProperties%2A>и так далее).</xref:System.Reflection.IReflect.GetProperties%2A> </xref:System.Reflection.BindingFlags?displayProperty=fullName> Набор методов фильтруется по имени, количество аргументов и набор модификаторов поиска, определенных в модуле привязки. После выбора метода он вызывается и в этот момент проверяется доступность. Средство поиска может управлять определения набора методов является поиском на основе связанного с методом атрибута доступности. <xref:System.Reflection.Binder.BindToMethod%2A>Выбор вызываемого метода.</xref:System.Reflection.Binder.BindToMethod%2A> Связыватель по умолчанию выбирает наиболее точное соответствие.       Ограничения доступа игнорируются для полностью доверенный код. То есть закрытые конструкторы, методы, поля и свойства можно получить доступ к и вызываемыми средствами отражения, если полностью доверенный код."
  example:
  - "The following example obtains the value of the <xref:System.DateTime.Now%2A> property.  \n  \n [!code-cs[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/csharp/46b5c0ee-07c6-4491-8e06-_1.cs)]\n [!code-vb[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/visualbasic/46b5c0ee-07c6-4491-8e06-_1.vb)]\n [!code-cpp[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/cpp/46b5c0ee-07c6-4491-8e06-_1.cpp)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "Имя члена, который требуется найти."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "Один из <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> атрибутов вызова. `invokeAttr` Параметр может быть конструктор, метод, свойство или поле. Необходимо указать подходящий атрибут вызова. Вызван член по умолчанию класса, передав пустую строку (&quot;») как имя элемента."
    - id: binder
      type: System.Reflection.Binder
      description: "Один из <xref href=&quot;System.Reflection.BindingFlags&quot;> </xref> битовых флагов. Реализует <xref href=&quot;System.Reflection.Binder&quot;> </xref>, содержащий свойства, связанные с этим методом."
    - id: target
      type: System.Object
      description: "Объект, для которого следует вызвать указанный член. Этот параметр учитывается для статических элементов."
    - id: args
      type: System.Object[]
      description: "Массив объектов, содержащий число, порядок и тип параметров вызываемого члена. Это пустой массив, если нет параметров."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: 'An array of <xref href="System.Reflection.ParameterModifier"></xref> objects. This array has the same length as the `args` parameter, representing the invoked member''s argument attributes in the metadata. A parameter can have the following attributes: <xref uid="langword_csharp_pdIn" name="pdIn" href=""></xref>, <xref uid="langword_csharp_pdOut" name="pdOut" href=""></xref>, <xref uid="langword_csharp_pdRetval" name="pdRetval" href=""></xref>, <xref uid="langword_csharp_pdOptional" name="pdOptional" href=""></xref>, and <xref uid="langword_csharp_pdHasDefault" name="pdHasDefault" href=""></xref>. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.'
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Экземпляр <xref:System.Globalization.CultureInfo>используется для управления приведением типов.</xref:System.Globalization.CultureInfo> Например `culture` преобразует <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> , представляющий 1000, в <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> значение, поскольку при разных языках и региональных параметрах 1000 представляется по-разному. Если этот параметр имеет <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, <xref:System.Globalization.CultureInfo>для текущего потока используется.</xref:System.Globalization.CultureInfo>"
    - id: namedParameters
      type: System.String[]
      description: "Объект <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> массив параметров."
    return:
      type: System.Object
      description: "Указанный член."
  overload: System.Reflection.IReflect.InvokeMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Для поля задано более одного аргумента <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref>."
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "Не удается найти поле или свойство."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "Не удается найти метод."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Закрытый член вызван без необходимого <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>."
  platform:
  - net462
- uid: System.Reflection.IReflect.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Возвращает базовый тип, представляющий <xref href=&quot;System.Reflection.IReflect&quot;> </xref> объекта."
  syntax:
    content: public Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "Базовый тип, представляющий <xref href=&quot;System.Reflection.IReflect&quot;> </xref> объекта."
  overload: System.Reflection.IReflect.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.UnderlyingSystemType
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
- uid: System.Reflection.IReflect.GetField*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField
  nameWithType: IReflect.GetField
- uid: System.Reflection.IReflect.GetFields*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields
  nameWithType: IReflect.GetFields
- uid: System.Reflection.IReflect.GetMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember
  nameWithType: IReflect.GetMember
- uid: System.Reflection.IReflect.GetMembers*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers
  nameWithType: IReflect.GetMembers
- uid: System.Reflection.IReflect.GetMethod*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod
  nameWithType: IReflect.GetMethod
- uid: System.Reflection.IReflect.GetMethods*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods
  nameWithType: IReflect.GetMethods
- uid: System.Reflection.IReflect.GetProperties*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties
  nameWithType: IReflect.GetProperties
- uid: System.Reflection.IReflect.GetProperty*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty
  nameWithType: IReflect.GetProperty
- uid: System.Reflection.IReflect.InvokeMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember
  nameWithType: IReflect.InvokeMember
- uid: System.Reflection.IReflect.UnderlyingSystemType*
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
