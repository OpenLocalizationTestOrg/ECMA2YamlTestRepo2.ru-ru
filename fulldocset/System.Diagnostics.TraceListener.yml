### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.TraceListener
  id: TraceListener
  children:
  - System.Diagnostics.TraceListener.#ctor
  - System.Diagnostics.TraceListener.#ctor(System.String)
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Close
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Dispose(System.Boolean)
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.Flush
  - System.Diagnostics.TraceListener.GetSupportedAttributes
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.String)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  langs:
  - csharp
  name: TraceListener
  nameWithType: TraceListener
  fullName: System.Diagnostics.TraceListener
  type: Class
  summary: "Предоставляет <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> базовый класс для прослушивателей, осуществляющих мониторинг трассировки и выходные данные отладки."
  remarks: "For examples of how to implement a TraceListener, see the <xref:System.Diagnostics.DefaultTraceListener>, <xref:System.Diagnostics.TextWriterTraceListener> and the <xref:System.Diagnostics.EventLogTraceListener> classes.  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In Visual Basic, add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To add a trace listener, edit the configuration file that corresponds to the name of your application. Within this file, you can add a listener, set its type and set its parameter, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted similar to the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"myListener\" type=\"System.Diagnostics.TextWriterTraceListener\" initializeData=\"TextWriterOutput.log\" />  \n        <remove name=\"Default\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n For more information on using configuration files for tracing, see [\\&lt;system.diagnostics\\&gt;](../Topic/%3Csystem.diagnostics%3E%20Element.md)."
  syntax:
    content: 'public abstract class TraceListener : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса."
  remarks: "В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Diagnostics.TraceListener>.</xref:System.Diagnostics.TraceListener>      | Свойство | Значение по умолчанию |   |--------------|-------------------|   | Имя | Пустая строка (»»). | | Отступ | Ноль. |   | IndentSize | Четыре пробела. |"
  syntax:
    content: protected TraceListener ();
    parameters: []
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса, используя указанное имя прослушивателем."
  syntax:
    content: protected TraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Attributes
  id: Attributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Получает настраиваемые атрибуты прослушивателя трассировки определена в файле конфигурации приложения."
  remarks: "Классы, наследующие от <xref:System.Diagnostics.TraceListener>класса можно добавлять настраиваемые атрибуты, переопределив <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>метод и возвращает массив строк имен настраиваемого атрибута.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A> </xref:System.Diagnostics.TraceListener> Свойства атрибутов определяет настраиваемые атрибуты, которые имеются ссылки в файле конфигурации приложения. Например, в следующем фрагменте файла конфигурации <xref:System.Diagnostics.DelimitedListTraceListener>ссылается настраиваемый атрибут «разделитель».</xref:System.Diagnostics.DelimitedListTraceListener> В этом случае свойство Attributes возвращает <xref:System.Collections.Specialized.StringDictionary>содержится строка «разделитель».</xref:System.Collections.Specialized.StringDictionary>      ```   <listeners>     <add name=&quot;delimitedListener&quot;        type=&quot;System.Diagnostics.DelimitedListTraceListener&quot;        delimiter=&quot;:&quot;        initializeData=&quot;delimitedOutput.txt&quot;        traceOutputOptions=&quot;ProcessId, DateTime&quot; />     <remove name=&quot;Default&quot; />   </listeners>   ```Настраиваемые атрибуты, которые отсутствуют ссылки, не перечисляются.  Дополнительные сведения см. в разделе <xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>метод.</xref:System.Diagnostics.TraceListener.GetSupportedAttributes%2A>"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "Объект <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref> содержащий настраиваемые атрибуты для прослушивателя трассировки."
  overload: System.Diagnostics.TraceListener.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Close
  id: Close
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "При переопределении в производном классе, закрывает выходной поток, таким образом, больше не принимает выходные данные трассировки и отладки."
  remarks: "Используйте этот метод при выводе в файл, например на <xref:System.Diagnostics.TextWriterTraceListener>.</xref:System.Diagnostics.TextWriterTraceListener> После вызова этого метода необходимо повторно инициализировать объект."
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose
  id: Dispose
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "Вызов Dispose позволяет ресурсы, используемые <xref:System.Diagnostics.TraceListener>перераспределить для других целей.</xref:System.Diagnostics.TraceListener> Дополнительные сведения о Dispose см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые <xref:System.Diagnostics.TraceListener.Dispose%2A>метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> </xref:System.Diagnostics.TraceListener.Dispose%2A> `Dispose`вызывает защищенный <xref:System.Diagnostics.TraceListener.Dispose%2A>метод с `disposing` равным `true`.</xref:System.Diagnostics.TraceListener.Dispose%2A> <xref:System.Object.Finalize%2A>вызывает `Dispose` с `disposing` значение `false`.</xref:System.Object.Finalize%2A>       При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Diagnostics.TraceListener>ссылки.</xref:System.Diagnostics.TraceListener> Этот метод вызывает `Dispose` метод для каждого объекта, на который указывает ссылка."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Diagnostics.TraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Выдает сообщение об ошибке в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса."
  remarks: "По умолчанию выполняется для отображения указанного сообщения в окне сообщения, когда приложение выполняется в режиме пользовательского интерфейса и <xref:System.Diagnostics.TraceListener>экземпляров в <xref:System.Diagnostics.TraceListenerCollection>коллекции.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> По умолчанию в <xref:System.Diagnostics.TraceListenerCollection>коллекции есть экземпляр <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener>для или удалить одну из коллекции.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "Выдаваемое сообщение."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Выдает ошибку и подробные сведения об ошибке сообщение в прослушиватель создается при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса."
  remarks: "Поведение по умолчанию является отображение сообщением и подробным сообщением в окне сообщения, когда приложение выполняется в режиме пользовательского интерфейса и <xref:System.Diagnostics.TraceListener>экземпляров в <xref:System.Diagnostics.TraceListenerCollection>коллекции.</xref:System.Diagnostics.TraceListenerCollection> </xref:System.Diagnostics.TraceListener> По умолчанию в <xref:System.Diagnostics.TraceListenerCollection>коллекции есть экземпляр <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListenerCollection> Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener>для или удалить одну из коллекции.</xref:System.Diagnostics.TraceListener>"
  syntax:
    content: public virtual void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "Выдаваемое сообщение."
    - id: detailMessage
      type: System.String
      description: "Выдаваемое подробное сообщение."
  overload: System.Diagnostics.TraceListener.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Filter
  id: Filter
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает и задает фильтр трассировки для прослушивателя трассировки."
  remarks: "Можно добавить фильтр трассировки для прослушивателя трассировки для предоставления уровня блокировки, возможности, предоставляемые параметры для источника трассировки. Например <xref:System.Diagnostics.EventTypeFilter>можно добавить прослушиватель трассировки для управления типами событий, выводимых прослушивателем.</xref:System.Diagnostics.EventTypeFilter>  Прослушивателей, которые вызываются из-за условий переключателя можно запрос фильтру, если он имеется, чтобы определить отправку выходных данных трассировки."
  example:
  - "The following code example shows how to use the Filter property to add a source filter to a console trace listener. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#28](~/add/codesnippet/csharp/p-system.diagnostics.tra_6_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#28](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_6_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceFilter Filter { get; set; }
    return:
      type: System.Diagnostics.TraceFilter
      description: "Объект, производный от <xref href=&quot;System.Diagnostics.TraceFilter&quot;> </xref> базового класса."
  overload: System.Diagnostics.TraceListener.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Flush
  id: Flush
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "При переопределении в производном классе, Очищает выходной буфер."
  syntax:
    content: public virtual void Flush ();
    parameters: []
  overload: System.Diagnostics.TraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Получает настраиваемые атрибуты, поддерживаемые прослушивателем трассировки."
  remarks: "Реализация по умолчанию для GetSupportedAttributes возвращает `null`."
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom trace listener.  \n  \n [!code-cs[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_22_1.cs)]\n [!code-vb[System.Diagnostics.TraceListener.CustomAttributes#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_22_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "Строковый массив, именующий настраиваемые атрибуты, поддерживаемые прослушивателем трассировки, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если настраиваемые атрибуты отсутствуют."
  overload: System.Diagnostics.TraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает уровень отступа."
  remarks: "Свойство IndentLevel представляет количество раз, которые определяются отступ <xref:System.Diagnostics.TraceListener.IndentSize%2A>применяется свойство.</xref:System.Diagnostics.TraceListener.IndentSize%2A> Это свойство хранится для каждого потока или для каждого запроса."
  syntax:
    content: public int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "Уровень отступа. Значение по умолчанию равно нулю."
  overload: System.Diagnostics.TraceListener.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IndentSize
  id: IndentSize
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает число пробелов в отступе."
  remarks: "Это свойство хранится для каждого потока или для каждого запроса."
  syntax:
    content: public int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "Число пробелов в отступе. Значение по умолчанию — четыре пробела."
  overload: System.Diagnostics.TraceListener.IndentSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Не удалось выполнить операцию SET, так как значение меньше нуля."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  id: IsThreadSafe
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает значение, указывающее, является ли прослушиватель трассировки потокобезопасным."
  remarks: "Значение IsThreadSafe используется для определения, следует ли использовать глобальную блокировку при записи в прослушиватель. Если значение IsThreadSafe `false`, использовать глобальную блокировку независимо от значения <xref:System.Diagnostics.Trace.UseGlobalLock%2A>.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> Не использовать глобальную блокировку только в том случае, если оно IsThreadSafe `true` и значение <xref:System.Diagnostics.Trace.UseGlobalLock%2A>является `false`.</xref:System.Diagnostics.Trace.UseGlobalLock%2A> Поведение по умолчанию является использование глобальной блокировки каждый раз при записи в прослушиватель."
  syntax:
    content: public virtual bool IsThreadSafe { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если прослушиватель трассировки потокобезопасен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.IsThreadSafe*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Name
  id: Name
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя для данного <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>."
  remarks: "Имя может использоваться для упорядочения и доступа в прослушиватели <xref:System.Diagnostics.TraceListenerCollection>коллекции.</xref:System.Diagnostics.TraceListenerCollection>"
  syntax:
    content: public virtual string Name { get; set; }
    return:
      type: System.String
      description: "Имя для данного <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref>. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.TraceListener.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.NeedIndent
  id: NeedIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает значение, указывающее, следует ли отступ в выходных данных."
  remarks: '**Примечание** <xref:System.Diagnostics.TraceListener.WriteIndent%2A>метод, вызываемый <xref:System.Diagnostics.DefaultTraceListener>и <xref:System.Diagnostics.TextWriterTraceListener>классов, присваивает значение свойства NeedIndent `false` для более поздней версии, предотвратить ненужные отступы.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.TraceListener.WriteIndent%2A> Необходимо задать свойство NeedIndent `true` каждый раз, необходимо создать отступ в выходных данных трассировки.'
  syntax:
    content: protected bool NeedIndent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если требуется отступ; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.NeedIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает трассировки данные, данные объекта и сведения о событиях в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Операции записи в реализации по умолчанию `eventCache`, `source`, `eventType` и `id` параметров в колонтитулы трассировки. `data` Параметр записывается как текст сообщения трассировки. `ToString` Метод объекта данных используется для преобразования объекта в <xref:System.String>.</xref:System.String>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Один из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значения, указывающие тип события, ставшего причиной трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
    - id: data
      type: System.Object
      description: "Выдаваемые данные трассировки."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает сведения трассировки, массив объектов данных и сведения о событиях в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Реализация по умолчанию записывает значения `source`, `eventType` и `id` параметров как заголовок. Объекты данных преобразуются в строки с помощью `ToString` метода каждого объекта. `eventCache` Данные записываются как нижний колонтитул характер выходные данные, зависимые от значения <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>свойство.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Один из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значения, указывающие тип события, ставшего причиной трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
    - id: data
      type: System.Object[]
      description: "Массив объектов для выдачи в качестве данных."
  overload: System.Diagnostics.TraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает трассировки и сведения о событиях в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Реализация по умолчанию записывает значения `source`, `eventType` и `id` параметров как заголовок. `eventCache` Данные записываются как нижний колонтитул характер выходные данные, зависимые от значения <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>свойство.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Один из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значения, указывающие тип события, ставшего причиной трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает сведения трассировки, сообщение и сведения о событиях в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Реализация по умолчанию записывает значения `source`, `eventType` и `id` параметры как заголовок, за которым следует `message` данных. `eventCache` Данные записываются как нижний колонтитул характер выходные данные, зависимые от значения <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>свойство.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Один из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значения, указывающие тип события, ставшего причиной трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
    - id: message
      type: System.String
      description: "Записываемое сообщение."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает сведения трассировки, форматированный массив объектов и сведения о событиях в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       Реализация по умолчанию записывает значения `source`, `eventType` и `id` параметров как заголовок. `args` Объекта он преобразуется в строку с помощью <xref:System.String.Format%2A>метод, передавая `format` строки и `args` массива, чтобы отформатировать строку как часть сообщения трассировки.</xref:System.String.Format%2A> `eventCache` Данные записываются как нижний колонтитул характер выходные данные, зависимые от значения <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>свойство.</xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>"
  syntax:
    content: public virtual void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "Один из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значения, указывающие тип события, ставшего причиной трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
    - id: format
      type: System.String
      description: "Строка формата, содержащая ноль или более элементов формата, связанных с объектами в `args` массива."
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref> Массив, содержащий ноль или более объектов для форматирования."
  overload: System.Diagnostics.TraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  id: TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает параметры выходных данных трассировки."
  remarks: "Свойство TraceOutputOptions определяет необязательное содержимое выходных данных трассировки. Свойство можно задать в файле конфигурации или программными средствами во время выполнения, чтобы включить дополнительные данные для раздела кода. Например, можно задать свойство TraceOutputOptions для прослушивателя трассировки консоли <xref:System.Diagnostics.TraceOptions?displayProperty=fullName>для добавления сведений стека вызовов в выходные данные трассировки.</xref:System.Diagnostics.TraceOptions?displayProperty=fullName>       <xref:System.Diagnostics.TraceOptions>Перечисление не используется следующие классы и методы:- <xref:System.Diagnostics.EventLogTraceListener>класса, так как это может привести к большой объем данных, записываемых в журнал</xref:System.Diagnostics.EventLogTraceListener> </xref:System.Diagnostics.TraceOptions>      - `Write` И `WriteLine` методы <xref:System.Diagnostics.ConsoleTraceListener>, <xref:System.Diagnostics.DefaultTraceListener>, и <xref:System.Diagnostics.TextWriterTraceListener>классы.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener> </xref:System.Diagnostics.ConsoleTraceListener>      - <xref:System.Diagnostics.TraceListener.Write%2A>И <xref:System.Diagnostics.TraceListener.WriteLine%2A>методы <xref:System.Diagnostics.TraceListener>класса, если оно не переопределено в производном классе.</xref:System.Diagnostics.TraceListener> </xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A>"
  example:
  - "The following example shows the setting of the TraceOutputOptions property for a console trace listener. The console trace listener is one of the listeners enumerated in the <xref:System.Diagnostics.TraceSource.Listeners%2A> property of a trace source. This code example is part of a larger example provided for the <xref:System.Diagnostics.TraceSource> class.  \n  \n [!code-cs[System.Diagnostics.TraceSource2#16](~/add/codesnippet/csharp/p-system.diagnostics.tra_9_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource2#16](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public System.Diagnostics.TraceOptions TraceOutputOptions { get; set; }
    return:
      type: System.Diagnostics.TraceOptions
      description: "Побитовое сочетание значений перечисления. Значение по умолчанию — <xref href=&quot;System.Diagnostics.TraceOptions&quot;> </xref>."
  overload: System.Diagnostics.TraceListener.TraceOutputOptions*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Не удалось выполнить операцию SET, из-за недопустимого значения."
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  id: TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает сведения трассировки, сообщение, идентификатор сопутствующего действия и событий сведения в специальные выходные данные прослушивателя."
  remarks: "> [!IMPORTANT]Настроек этот метод не предназначен для вызова непосредственно из кода приложения, но члены <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, и <xref:System.Diagnostics.TraceSource>классы для записи данных трассировки в выходной.</xref:System.Diagnostics.TraceSource> </xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug>       <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>Метод используется для трассировки связанных.</xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> Вызовы метода TraceTransfer <xref:System.Diagnostics.TraceListener.TraceEvent%2A>метод для обработки вызовов, с уровнем eventType <xref:System.Diagnostics.TraceEventType>и `relatedActivityId` <xref:System.Guid>как строка, присоединяется к сообщению.</xref:System.Guid> </xref:System.Diagnostics.TraceEventType> </xref:System.Diagnostics.TraceListener.TraceEvent%2A>"
  syntax:
    content: public virtual void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "Объект <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref> объект, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека."
    - id: source
      type: System.String
      description: "Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки."
    - id: id
      type: System.Int32
      description: "Числовой идентификатор события."
    - id: message
      type: System.String
      description: "Записываемое сообщение."
    - id: relatedActivityId
      type: System.Guid
      description: "Объект <xref:System.Guid>объект, идентифицирующий сопутствующее действие.</xref:System.Guid>"
  overload: System.Diagnostics.TraceListener.TraceTransfer*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает значение объекта <xref:System.Object.ToString*>метод в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Полное имя которого требуется выполнить запись.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "При переопределении в производном классе записывает заданное сообщение прослушиватель, создаваемый в производном классе."
  syntax:
    content: public abstract void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "Записываемое сообщение."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает имя категории и значение объекта <xref:System.Object.ToString*>метод в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса</xref:System.Object.ToString*>"
  syntax:
    content: public virtual void Write (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Полное имя которого требуется выполнить запись.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Имя категории, используемое для систематизации выходных данных."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает имя категории и сообщение в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса."
  syntax:
    content: public virtual void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Записываемое сообщение."
    - id: category
      type: System.String
      description: "Имя категории, используемое для систематизации выходных данных."
  overload: System.Diagnostics.TraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteIndent
  id: WriteIndent
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает отступ в прослушиватель, создаваемый при реализации этого класса и сбрасывает <xref:System.Diagnostics.TraceListener.NeedIndent*>Свойства <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Diagnostics.TraceListener.NeedIndent*>"
  remarks: "Этот метод записывает отступ и сбрасывает <xref:System.Diagnostics.TraceListener.NeedIndent%2A>Свойства `false`.</xref:System.Diagnostics.TraceListener.NeedIndent%2A> Вызовите этот метод, если <xref:System.Diagnostics.TraceListener.NeedIndent%2A>— `true` при переопределении <xref:System.Diagnostics.TraceListener.Write%2A>и <xref:System.Diagnostics.TraceListener.WriteLine%2A>методы.</xref:System.Diagnostics.TraceListener.WriteLine%2A> </xref:System.Diagnostics.TraceListener.Write%2A> </xref:System.Diagnostics.TraceListener.NeedIndent%2A> По умолчанию этот метод использует пробелы для отступа. Размер отступа определяется значениями по <xref:System.Diagnostics.TraceListener.IndentSize%2A>и <xref:System.Diagnostics.TraceListener.IndentLevel%2A>Свойства.</xref:System.Diagnostics.TraceListener.IndentLevel%2A> </xref:System.Diagnostics.TraceListener.IndentSize%2A> <xref:System.Diagnostics.TraceListener.IndentLevel%2A>Свойство представляет количество отступ размер, заданный свойством <xref:System.Diagnostics.TraceListener.IndentSize%2A>применяется свойство.</xref:System.Diagnostics.TraceListener.IndentSize%2A> </xref:System.Diagnostics.TraceListener.IndentLevel%2A> Этот метод вызывается методом <xref:System.Diagnostics.DefaultTraceListener>и <xref:System.Diagnostics.TextWriterTraceListener>классы.</xref:System.Diagnostics.TextWriterTraceListener> </xref:System.Diagnostics.DefaultTraceListener>"
  syntax:
    content: protected virtual void WriteIndent ();
    parameters: []
  overload: System.Diagnostics.TraceListener.WriteIndent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает значение объекта <xref:System.Object.ToString*>метод в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса, с признаком конца строки.</xref:System.Object.ToString*>"
  remarks: "Ограничитель типичные строки, которые могут реализовать — каретки и перевод строки (\\r)."
  syntax:
    content: public virtual void WriteLine (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Полное имя которого требуется выполнить запись.</xref:System.Object>"
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "При переопределении в производном классе записывает сообщение в прослушиватель создаваемый в производном классе, признак конца строки."
  remarks: "Ограничитель типичные строки, которые могут реализовать — каретки и перевод строки (\\r)."
  syntax:
    content: public abstract void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "Записываемое сообщение."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает имя категории и значение объекта <xref:System.Object.ToString*>метод в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса, с признаком конца строки.</xref:System.Object.ToString*>"
  remarks: "Ограничитель типичные строки, которые могут реализовать — каретки и перевод строки (\\r)."
  syntax:
    content: public virtual void WriteLine (object o, string category);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>Полное имя которого требуется выполнить запись.</xref:System.Object>"
    - id: category
      type: System.String
      description: "Имя категории, используемое для систематизации выходных данных."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает имя категории и сообщение в прослушиватель, создаваемый при реализации <xref href=&quot;System.Diagnostics.TraceListener&quot;> </xref> класса, с признаком конца строки."
  remarks: "Ограничитель типичные строки, которые могут реализовать — каретки и перевод строки (\\r)."
  syntax:
    content: public virtual void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "Записываемое сообщение."
    - id: category
      type: System.String
      description: "Имя категории, используемое для систематизации выходных данных."
  overload: System.Diagnostics.TraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Diagnostics.TraceListener.#ctor
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener()
  nameWithType: TraceListener.TraceListener()
  fullName: System.Diagnostics.TraceListener.TraceListener()
- uid: System.Diagnostics.TraceListener.#ctor(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener(String)
  nameWithType: TraceListener.TraceListener(String)
  fullName: System.Diagnostics.TraceListener.TraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.TraceListener.Attributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
  fullName: System.Diagnostics.TraceListener.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.TraceListener.Close
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close()
  nameWithType: TraceListener.Close()
  fullName: System.Diagnostics.TraceListener.Close()
- uid: System.Diagnostics.TraceListener.Dispose
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose()
  nameWithType: TraceListener.Dispose()
  fullName: System.Diagnostics.TraceListener.Dispose()
- uid: System.Diagnostics.TraceListener.Dispose(System.Boolean)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TraceListener.Dispose(Boolean)
  fullName: System.Diagnostics.TraceListener.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.TraceListener.Fail(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String)
  nameWithType: TraceListener.Fail(String)
  fullName: System.Diagnostics.TraceListener.Fail(String)
- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail(String,String)
  nameWithType: TraceListener.Fail(String,String)
  fullName: System.Diagnostics.TraceListener.Fail(String,String)
- uid: System.Diagnostics.TraceListener.Filter
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
  fullName: System.Diagnostics.TraceListener.Filter
- uid: System.Diagnostics.TraceFilter
  parent: System.Diagnostics
  isExternal: false
  name: TraceFilter
  nameWithType: TraceFilter
  fullName: System.Diagnostics.TraceFilter
- uid: System.Diagnostics.TraceListener.Flush
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush()
  nameWithType: TraceListener.Flush()
  fullName: System.Diagnostics.TraceListener.Flush()
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: TraceListener.GetSupportedAttributes()
  fullName: System.Diagnostics.TraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.IndentLevel
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
  fullName: System.Diagnostics.TraceListener.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.TraceListener.IndentSize
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
  fullName: System.Diagnostics.TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
  fullName: System.Diagnostics.TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
  fullName: System.Diagnostics.TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
  fullName: System.Diagnostics.TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: System.Diagnostics.TraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: System.Diagnostics.TraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: System.Diagnostics.TraceListener.TraceOutputOptions
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
  fullName: System.Diagnostics.TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceOptions
  parent: System.Diagnostics
  isExternal: false
  name: TraceOptions
  nameWithType: TraceOptions
  fullName: System.Diagnostics.TraceOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  nameWithType: TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
  fullName: System.Diagnostics.TraceListener.TraceTransfer(TraceEventCache,String,Int32,String,Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.TraceListener.Write(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object)
  nameWithType: TraceListener.Write(Object)
  fullName: System.Diagnostics.TraceListener.Write(Object)
- uid: System.Diagnostics.TraceListener.Write(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String)
  nameWithType: TraceListener.Write(String)
  fullName: System.Diagnostics.TraceListener.Write(String)
- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(Object,String)
  nameWithType: TraceListener.Write(Object,String)
  fullName: System.Diagnostics.TraceListener.Write(Object,String)
- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceListener.Write(String,String)
  fullName: System.Diagnostics.TraceListener.Write(String,String)
- uid: System.Diagnostics.TraceListener.WriteIndent
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent()
  nameWithType: TraceListener.WriteIndent()
  fullName: System.Diagnostics.TraceListener.WriteIndent()
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object)
  nameWithType: TraceListener.WriteLine(Object)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: TraceListener.WriteLine(String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: TraceListener.WriteLine(Object,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(Object,String)
- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: TraceListener.WriteLine(String,String)
  fullName: System.Diagnostics.TraceListener.WriteLine(String,String)
- uid: System.Diagnostics.TraceListener.#ctor*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceListener
  nameWithType: TraceListener.TraceListener
- uid: System.Diagnostics.TraceListener.Attributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Attributes
  nameWithType: TraceListener.Attributes
- uid: System.Diagnostics.TraceListener.Close*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Close
  nameWithType: TraceListener.Close
- uid: System.Diagnostics.TraceListener.Dispose*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Dispose
  nameWithType: TraceListener.Dispose
- uid: System.Diagnostics.TraceListener.Fail*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Fail
  nameWithType: TraceListener.Fail
- uid: System.Diagnostics.TraceListener.Filter*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Filter
  nameWithType: TraceListener.Filter
- uid: System.Diagnostics.TraceListener.Flush*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Flush
  nameWithType: TraceListener.Flush
- uid: System.Diagnostics.TraceListener.GetSupportedAttributes*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: TraceListener.GetSupportedAttributes
- uid: System.Diagnostics.TraceListener.IndentLevel*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentLevel
  nameWithType: TraceListener.IndentLevel
- uid: System.Diagnostics.TraceListener.IndentSize*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IndentSize
  nameWithType: TraceListener.IndentSize
- uid: System.Diagnostics.TraceListener.IsThreadSafe*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: IsThreadSafe
  nameWithType: TraceListener.IsThreadSafe
- uid: System.Diagnostics.TraceListener.Name*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Name
  nameWithType: TraceListener.Name
- uid: System.Diagnostics.TraceListener.NeedIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: NeedIndent
  nameWithType: TraceListener.NeedIndent
- uid: System.Diagnostics.TraceListener.TraceData*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceData
  nameWithType: TraceListener.TraceData
- uid: System.Diagnostics.TraceListener.TraceEvent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: TraceListener.TraceEvent
- uid: System.Diagnostics.TraceListener.TraceOutputOptions*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceOutputOptions
  nameWithType: TraceListener.TraceOutputOptions
- uid: System.Diagnostics.TraceListener.TraceTransfer*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: TraceTransfer
  nameWithType: TraceListener.TraceTransfer
- uid: System.Diagnostics.TraceListener.Write*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: Write
  nameWithType: TraceListener.Write
- uid: System.Diagnostics.TraceListener.WriteIndent*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteIndent
  nameWithType: TraceListener.WriteIndent
- uid: System.Diagnostics.TraceListener.WriteLine*
  parent: System.Diagnostics.TraceListener
  isExternal: false
  name: WriteLine
  nameWithType: TraceListener.WriteLine
