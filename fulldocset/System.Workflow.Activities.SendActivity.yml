### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.SendActivity
  id: SendActivity
  children:
  - System.Workflow.Activities.SendActivity.#ctor
  - System.Workflow.Activities.SendActivity.#ctor(System.String)
  - System.Workflow.Activities.SendActivity.AfterResponse
  - System.Workflow.Activities.SendActivity.AfterResponseEvent
  - System.Workflow.Activities.SendActivity.BeforeSend
  - System.Workflow.Activities.SendActivity.BeforeSendEvent
  - System.Workflow.Activities.SendActivity.ChannelToken
  - System.Workflow.Activities.SendActivity.Context
  - System.Workflow.Activities.SendActivity.CustomAddress
  - System.Workflow.Activities.SendActivity.CustomAddressProperty
  - System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  - System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  - System.Workflow.Activities.SendActivity.InitializeProperties
  - System.Workflow.Activities.SendActivity.ParameterBindings
  - System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  - System.Workflow.Activities.SendActivity.ServiceOperationInfo
  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  langs:
  - csharp
  name: SendActivity
  nameWithType: SendActivity
  fullName: System.Workflow.Activities.SendActivity
  type: Class
  summary: "Действие клиента, моделирующее синхронный вызов [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] операции службы."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]Действия SendActivity позволяет участвовать в диалоге со [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] службы, используя предопределенный шаблон обмена сообщениями.      Настроек [!NOTE] настроек действия SendActivity является блокирующим, это означает, что выполнение рабочего процесса блокируется до завершения этого действия.       Включить шаблоны обмена сообщениями, поддерживаемые действия SendActivity:-односторонняя Отправка сообщения SendActivity действие отправляет сообщение, но не ожидает ответа от службы.      -Отправка запроса — получение ответа SendActivity действие отправляет сообщение и ожидает, пока не получен ответ от службы.      -Отправка запроса — получение ошибки SendActivity действие отправляет сообщение и ждет, пока ответ или ошибка поступает от службы. Во время выполнения действие отправки выбрасывает все ошибки, полученные от сервера. <xref:System.Workflow.ComponentModel.FaultHandlerActivity>действия можно использовать для обработки ошибок в рабочем процессе клиента.</xref:System.Workflow.ComponentModel.FaultHandlerActivity>      Настроек [!NOTE] настроек это действие является частью [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]. Эквивалентные действия в [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], <xref:System.ServiceModel.Activities.Send>.</xref:System.ServiceModel.Activities.Send> см."
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.SendActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.SendActivity), "Design.Resources.SendActivity.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.SendActivityValidator))]

      public sealed class SendActivity : System.Workflow.ComponentModel.Activity
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  implements: []
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SendActivity()
  nameWithType: SendActivity.SendActivity()
  fullName: System.Workflow.Activities.SendActivity.SendActivity()
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> класса."
  remarks: "<xref:System.Workflow.Activities.SendActivity>Конструктор обычно вызывается в файле с кодом, созданном конструктором рабочих процессов.</xref:System.Workflow.Activities.SendActivity>"
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#16](~/add/codesnippet/csharp/m-system.workflow.activi_9_1.cs)]"
  syntax:
    content: public SendActivity ();
    parameters: []
  overload: System.Workflow.Activities.SendActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SendActivity(String)
  nameWithType: SendActivity.SendActivity(String)
  fullName: System.Workflow.Activities.SendActivity.SendActivity(String)
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> класса с заданным <xref uid=&quot;langword_csharp_name&quot; name=&quot;name&quot; href=&quot;&quot;> </xref> свойство."
  remarks: "<xref:System.Workflow.Activities.SendActivity>Конструктор обычно вызывается в файле с кодом, созданном конструктором рабочих процессов.</xref:System.Workflow.Activities.SendActivity>"
  example:
  - "The following example shows how to create a new instance of the <xref:System.Workflow.Activities.SendActivity> class.  \n  \n [!code-cs[SendActivity#17](~/add/codesnippet/csharp/m-system.workflow.activi_17_1.cs)]"
  syntax:
    content: public SendActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "Значение, присваиваемое <xref:System.Workflow.ComponentModel.Activity.Name*>при инициализации действия.</xref:System.Workflow.ComponentModel.Activity.Name*>"
  overload: System.Workflow.Activities.SendActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.AfterResponse
  id: AfterResponse
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: AfterResponse
  nameWithType: SendActivity.AfterResponse
  fullName: System.Workflow.Activities.SendActivity.AfterResponse
  type: Event
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Происходит после получения ответа от службы."
  remarks: "Этот обработчик событий, связанных с этим событием может использоваться для чтения значения, возвращаемого от вызванной операции службы."
  example:
  - "The following example shows how to use the `AfterResponse` event.  \n  \n [!code-cs[SendActivity#2](~/add/codesnippet/csharp/e-system.workflow.activi_4_1.cs)]"
  syntax:
    content: public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> AfterResponse;
    return:
      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent
  id: AfterResponseEvent
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: AfterResponseEvent
  nameWithType: SendActivity.AfterResponseEvent
  fullName: System.Workflow.Activities.SendActivity.AfterResponseEvent
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Представляет <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> , ориентированном <xref href=&quot;System.Workflow.Activities.SendActivity.AfterResponse&quot;> </xref> событий."
  remarks: "Это свойство событий зависимостей может использоваться для привязки действия отправки <xref:System.Workflow.Activities.SendActivity.AfterResponse>событий к обработчику открытых событий для данного класса рабочего процесса.</xref:System.Workflow.Activities.SendActivity.AfterResponse>"
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.BeforeSend
  id: BeforeSend
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: BeforeSend
  nameWithType: SendActivity.BeforeSend
  fullName: System.Workflow.Activities.SendActivity.BeforeSend
  type: Event
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Происходит перед <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> действие отправляет сообщение службе."
  remarks: "Этот обработчик событий, связанных с этим событием можно использовать для установки значений параметров для вызываемой операции службы.      Настроек [!NOTE] настроек контексте <xref:System.Workflow.Activities.SendActivity>нельзя задать в этом обработчике событий.</xref:System.Workflow.Activities.SendActivity>"
  example:
  - "The following example shows how to use the `BeforeSend` event. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#3](~/add/codesnippet/csharp/e-system.workflow.activi_3_1.cs)]"
  syntax:
    content: public event EventHandler<System.Workflow.Activities.SendActivityEventArgs> BeforeSend;
    return:
      type: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent
  id: BeforeSendEvent
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: BeforeSendEvent
  nameWithType: SendActivity.BeforeSendEvent
  fullName: System.Workflow.Activities.SendActivity.BeforeSendEvent
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Представляет <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> , ориентированном <xref href=&quot;System.Workflow.Activities.SendActivity.BeforeSend&quot;> </xref> событий."
  remarks: "Это свойство событий зависимостей может использоваться для привязки действия отправки <xref:System.Workflow.Activities.SendActivity.BeforeSend>событий к обработчику открытых событий для данного класса рабочего процесса.</xref:System.Workflow.Activities.SendActivity.BeforeSend>"
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ChannelToken
  id: ChannelToken
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
  fullName: System.Workflow.Activities.SendActivity.ChannelToken
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "<xref href=&quot;System.Workflow.Activities.ChannelToken&quot;></xref>используемые <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> чтобы связать себя с клиентским каналом."
  remarks: "Маркер канала определяет имя канала, область канала и имя конфигурации конечной точки для использования при установлении канала. Имя конечной точки в файле конфигурации имеет адрес, привязку и информацию контракта для службы, <xref:System.Workflow.Activities.SendActivity>Действие обменивается данными с.</xref:System.Workflow.Activities.SendActivity>       Маркер канала определяет также уникальное имя канала и имя действия-владельца для маркера. Маркер канала может совместно использоваться несколькими действиями отправки, которые хотите использовать ту же конечную точку для взаимодействия со службой."
  example:
  - "The following example shows how to access the `ChannelToken` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#7](~/add/codesnippet/csharp/p-system.workflow.activi_31_1.cs)]"
  syntax:
    content: public System.Workflow.Activities.ChannelToken ChannelToken { get; set; }
    return:
      type: System.Workflow.Activities.ChannelToken
      description: "Объект <xref href=&quot;System.Workflow.Activities.ChannelToken&quot;> </xref> определяющий клиентский канал, <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> использует для взаимодействия со службой."
  overload: System.Workflow.Activities.SendActivity.ChannelToken*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.Context
  id: Context
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: Context
  nameWithType: SendActivity.Context
  fullName: System.Workflow.Activities.SendActivity.Context
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Возвращает словарь, который содержит контекст, используемый для обмена данными между клиентом и службой, которой он взаимодействует, включая такие данные идентификации для корреляции."
  remarks: "Сведения контекста используются для взаимодействия между клиентом и службой, он взаимодействует с и включают, например, данные идентификации для корреляции."
  example:
  - "The following example shows how to access the `Context` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#8](~/add/codesnippet/csharp/p-system.workflow.activi_10_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Context { get; set; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Основанная на словаре коллекция, содержащая <xref:System.Xml.XmlQualifiedName>ключей и связанные с ними <xref:System.String>значения.</xref:System.String> </xref:System.Xml.XmlQualifiedName>"
  overload: System.Workflow.Activities.SendActivity.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.CustomAddress
  id: CustomAddress
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
  fullName: System.Workflow.Activities.SendActivity.CustomAddress
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Возвращает или задает настраиваемый адрес, используемый для взаимодействия со службой."
  remarks: "Если он присутствует, это значение используется для определения адреса конечной точки для операции."
  example:
  - "The following example shows how to access the `CustomAddress` property. This example was adapted from the `CalculatorClient` SDK sample.  \n  \n [!code-cs[SendActivity#9](~/add/codesnippet/csharp/p-system.workflow.activi_11_1.cs)]"
  syntax:
    content: public string CustomAddress { get; set; }
    return:
      type: System.String
      description: "Строковое значение, значение которого является адресом, который прослушивает служба."
  overload: System.Workflow.Activities.SendActivity.CustomAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty
  id: CustomAddressProperty
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: CustomAddressProperty
  nameWithType: SendActivity.CustomAddressProperty
  fullName: System.Workflow.Activities.SendActivity.CustomAddressProperty
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Представляет <xref href=&quot;System.Workflow.ComponentModel.DependencyProperty&quot;> </xref> для <xref:System.Workflow.Activities.SendActivity.CustomAddress*>свойство.</xref:System.Workflow.Activities.SendActivity.CustomAddress*>"
  remarks: "Если он присутствует, это значение используется для определения адреса конечной точки для операции."
  syntax:
    content: public static readonly System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty;
    return:
      type: System.Workflow.ComponentModel.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: SendActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.SendActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "Для добавления."
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "Для добавления."
  overload: System.Workflow.Activities.SendActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: GetContext(Activity,ChannelToken,Type)
  nameWithType: SendActivity.GetContext(Activity,ChannelToken,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,ChannelToken,Type)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Возвращает или задает сведения контекста для операции отправки."
  remarks: "Сведения контекста используются для взаимодействия между клиентом и службой, он взаимодействует с и включают, например, данные идентификации для корреляции."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[SendActivity#12](~/add/codesnippet/csharp/b396dd3f-071b-4a03-8e75-_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Действия, сведения о контексте является обязательным."
    - id: endpoint
      type: System.Workflow.Activities.ChannelToken
      description: "Сведения о конечной точке для корреляции со службой."
    - id: contractType
      type: System.Type
      description: "<xref:System.Type>Контракта, реализуемого службой.</xref:System.Type>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Основанная на словаре коллекция, содержащая <xref:System.Xml.XmlQualifiedName>ключей и связанные с ними <xref:System.String>значения.</xref:System.String> </xref:System.Xml.XmlQualifiedName>"
  overload: System.Workflow.Activities.SendActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  id: GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: GetContext(Activity,String,String,Type)
  nameWithType: SendActivity.GetContext(Activity,String,String,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,String,String,Type)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Статический метод, возвращающий сведения контекста для заданного экземпляра действия, используемое этим действием, имя действия-владельца, имя конечной точки и <xref:System.Type>, представляющий тип контракта.</xref:System.Type>"
  remarks: "Сведения контекста используются для взаимодействия между клиентом и службой, он взаимодействует с и включают, например, данные идентификации для корреляции."
  example:
  - "The following example shows how to use the `GetContext` method.  \n  \n [!code-cs[SendActivity#15](~/add/codesnippet/csharp/3882c89a-5f09-4566-9b94-_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,string> GetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Действия, сведения о контексте является обязательным."
    - id: endpointName
      type: System.String
      description: "Имя конечной точки, используемой для корреляции со службой."
    - id: ownerActivityName
      type: System.String
      description: "Имя действия-владельца."
    - id: contractType
      type: System.Type
      description: "<xref:System.Type>Контракта, реализуемого службой.</xref:System.Type>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Основанная на словаре коллекция, содержащая <xref:System.Xml.XmlQualifiedName>ключей и связанные с ними <xref:System.String>значения.</xref:System.String> </xref:System.Xml.XmlQualifiedName>"
  overload: System.Workflow.Activities.SendActivity.GetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.InitializeProperties
  id: InitializeProperties
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: InitializeProperties()
  nameWithType: SendActivity.InitializeProperties()
  fullName: System.Workflow.Activities.SendActivity.InitializeProperties()
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  syntax:
    content: protected override void InitializeProperties ();
    parameters: []
  overload: System.Workflow.Activities.SendActivity.InitializeProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ParameterBindings
  id: ParameterBindings
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
  fullName: System.Workflow.Activities.SendActivity.ParameterBindings
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Возвращает коллекцию привязываемых параметров, обнаруженных в [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] списке формальных параметров службы."
  remarks: "Можно использовать для задания привязок между параметрами операции службы и открытым полем и свойствами рабочего процесса, который содержит ParameterBindings <xref:System.Workflow.Activities.SendActivity>действия.</xref:System.Workflow.Activities.SendActivity> Когда <xref:System.Workflow.Activities.SendActivity>выполняет действия, соответствующие значения параметров считываются из свойств рабочего процесса, они связаны и отправляются в службу в виде параметров операции службы.</xref:System.Workflow.Activities.SendActivity>       ParameterBindings может также использоваться для получения возвращаемого значения операции службы.       Все параметры операции службы должны быть связаны. Несвязанные параметры операции службы порождают предупреждения компилятора и значения по умолчанию параметра отправляются <xref:System.Workflow.Activities.SendActivity>вызывается.</xref:System.Workflow.Activities.SendActivity>"
  example:
  - "The following example shows how to access the `ParameterBindings` property. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#0](~/add/codesnippet/csharp/p-system.workflow.activi_32_1.cs)]"
  syntax:
    content: public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }
    return:
      type: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
      description: "<xref href=&quot;System.Workflow.ComponentModel.WorkflowParameterBindingCollection&quot;> </xref> Параметров для привязки."
  overload: System.Workflow.Activities.SendActivity.ParameterBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  id: ReturnValuePropertyName
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ReturnValuePropertyName
  nameWithType: SendActivity.ReturnValuePropertyName
  fullName: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  type: Field
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Имя свойства, которое используется для возвращаемого значения, отправленных службой, <xref uid=&quot;langword_csharp_SendActivity&quot; name=&quot;SendActivity&quot; href=&quot;&quot;> </xref> с которым взаимодействует действие."
  remarks: "Эта строка может использоваться для получения возвращаемого значения из <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A>связанных с <xref:System.Workflow.Activities.SendActivity>действия в <xref:System.Workflow.Activities.SendActivity.AfterResponse>обработчика событий.</xref:System.Workflow.Activities.SendActivity.AfterResponse> </xref:System.Workflow.Activities.SendActivity> </xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A>"
  example:
  - "The following example shows how to access the `ReturnValuePropertyName` field.  \n  \n [!code-cs[SendActivity#6](~/add/codesnippet/csharp/f-system.workflow.activi_2_1.cs)]"
  syntax:
    content: public const string ReturnValuePropertyName;
    return:
      type: System.String
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  id: ServiceOperationInfo
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Определяет контракт и операцию службы, <xref uid=&quot;langword_csharp_SendActivity&quot; name=&quot;SendActivity&quot; href=&quot;&quot;> </xref> взаимодействует с действие."
  remarks: "<xref:System.Workflow.Activities.SendActivity>Действие всегда ссылается на существующий контракт и определенных операций.</xref:System.Workflow.Activities.SendActivity> Нет нет средств, которые позволили <xref:System.Workflow.Activities.SendActivity>действия, чтобы определить контракт.</xref:System.Workflow.Activities.SendActivity>"
  example:
  - "The following example shows how to access the `ServiceOperationInfo` property. This example was adapted from the `Conversations` SDK sample.  \n  \n [!code-cs[SendActivity#1](~/add/codesnippet/csharp/p-system.workflow.activi_13_1.cs)]"
  syntax:
    content: public System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo { get; set; }
    return:
      type: System.Workflow.Activities.TypedOperationInfo
      description: "Объект <xref href=&quot;System.Workflow.Activities.TypedOperationInfo&quot;> </xref> , содержащий имя контракта, тип контракта, операция именем (которое может отличаться от фактического имени метода), является ли операция односторонней операции и данные метода, включая параметры, касающиеся операции."
  overload: System.Workflow.Activities.SendActivity.ServiceOperationInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Статический метод, устанавливающий сведения контекста для <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> действия, заданный экземпляр действия, конечную точку, используемую этим действием, <xref:System.Type>, представляющий тип контракта и сами сведения контекста.</xref:System.Type>"
  remarks: "Сведения контекста используются для взаимодействия между клиентом и службой, он взаимодействует с и включают, например, данные идентификации для корреляции."
  example:
  - "The following example shows how to use the `SetContext` method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType, System.Collections.Generic.IDictionary<string,string> context);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Экземпляр действия, чтобы связать сведения о контексте с."
    - id: endpoint
      type: System.Workflow.Activities.ChannelToken
      description: "Конечная точка, используемая для корреляции со службой."
    - id: contractType
      type: System.Type
      description: "<xref:System.Type>Контракта, реализуемого службой.</xref:System.Type>"
    - id: context
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Чтобы задать сведения о контексте."
  overload: System.Workflow.Activities.SendActivity.SetContext*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  langs:
  - csharp
  name: SetContext(Activity,String,String,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.Workflow.Activities
  summary: "Статический метод, устанавливающий сведения контекста для <xref href=&quot;System.Workflow.Activities.SendActivity&quot;> </xref> действия, заданный экземпляр действия, имя конечной точки, используемое этим действием, имя действия-владельца, <xref:System.Type>, представляющий тип контракта и сами сведения контекста.</xref:System.Type>"
  remarks: ''
  example:
  - "The following example shows how to use the `SetContext` method.  \n  \n [!code-cs[SendActivity#15](~/add/codesnippet/csharp/c25fc5a7-578b-454d-aade-_1.cs)]"
  syntax:
    content: public static void SetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType, System.Collections.Generic.IDictionary<string,string> context);
    parameters:
    - id: activity
      type: System.Workflow.ComponentModel.Activity
      description: "Экземпляр действия, чтобы связать сведения о контексте с."
    - id: endpointName
      type: System.String
      description: "Имя конечной точки, используемой для корреляции со службой."
    - id: ownerActivityName
      type: System.String
      description: "Имя действия-владельца"
    - id: contractType
      type: System.Type
      description: "<xref:System.Type>Контракта, реализуемого службой.</xref:System.Type>"
    - id: context
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Чтобы задать сведения о контексте."
  overload: System.Workflow.Activities.SendActivity.SetContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.Activity
  isExternal: false
  name: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Activities.SendActivity.#ctor
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity()
  nameWithType: SendActivity.SendActivity()
  fullName: System.Workflow.Activities.SendActivity.SendActivity()
- uid: System.Workflow.Activities.SendActivity.#ctor(System.String)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity(String)
  nameWithType: SendActivity.SendActivity(String)
  fullName: System.Workflow.Activities.SendActivity.SendActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.SendActivity.AfterResponse
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: AfterResponse
  nameWithType: SendActivity.AfterResponse
  fullName: System.Workflow.Activities.SendActivity.AfterResponse
- uid: System.EventHandler{System.Workflow.Activities.SendActivityEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SendActivityEventArgs>
  nameWithType: EventHandler<SendActivityEventArgs>
  fullName: System.EventHandler<System.Workflow.Activities.SendActivityEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Workflow.Activities.SendActivityEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Activities.SendActivityEventArgs
    name: SendActivityEventArgs
    nameWithType: SendActivityEventArgs
    fullName: SendActivityEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.SendActivity.AfterResponseEvent
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: AfterResponseEvent
  nameWithType: SendActivity.AfterResponseEvent
  fullName: System.Workflow.Activities.SendActivity.AfterResponseEvent
- uid: System.Workflow.ComponentModel.DependencyProperty
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Workflow.ComponentModel.DependencyProperty
- uid: System.Workflow.Activities.SendActivity.BeforeSend
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: BeforeSend
  nameWithType: SendActivity.BeforeSend
  fullName: System.Workflow.Activities.SendActivity.BeforeSend
- uid: System.Workflow.Activities.SendActivity.BeforeSendEvent
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: BeforeSendEvent
  nameWithType: SendActivity.BeforeSendEvent
  fullName: System.Workflow.Activities.SendActivity.BeforeSendEvent
- uid: System.Workflow.Activities.SendActivity.ChannelToken
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
  fullName: System.Workflow.Activities.SendActivity.ChannelToken
- uid: System.Workflow.Activities.ChannelToken
  parent: System.Workflow.Activities
  isExternal: false
  name: ChannelToken
  nameWithType: ChannelToken
  fullName: System.Workflow.Activities.ChannelToken
- uid: System.Workflow.Activities.SendActivity.Context
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Context
  nameWithType: SendActivity.Context
  fullName: System.Workflow.Activities.SendActivity.Context
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Activities.SendActivity.CustomAddress
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
  fullName: System.Workflow.Activities.SendActivity.CustomAddress
- uid: System.Workflow.Activities.SendActivity.CustomAddressProperty
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddressProperty
  nameWithType: SendActivity.CustomAddressProperty
  fullName: System.Workflow.Activities.SendActivity.CustomAddressProperty
- uid: System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: SendActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.SendActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext(Activity,ChannelToken,Type)
  nameWithType: SendActivity.GetContext(Activity,ChannelToken,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,ChannelToken,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext(Activity,String,String,Type)
  nameWithType: SendActivity.GetContext(Activity,String,String,Type)
  fullName: System.Workflow.Activities.SendActivity.GetContext(Activity,String,String,Type)
- uid: System.Workflow.Activities.SendActivity.InitializeProperties
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: InitializeProperties()
  nameWithType: SendActivity.InitializeProperties()
  fullName: System.Workflow.Activities.SendActivity.InitializeProperties()
- uid: System.Workflow.Activities.SendActivity.ParameterBindings
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
  fullName: System.Workflow.Activities.SendActivity.ParameterBindings
- uid: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowParameterBindingCollection
  nameWithType: WorkflowParameterBindingCollection
  fullName: System.Workflow.ComponentModel.WorkflowParameterBindingCollection
- uid: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ReturnValuePropertyName
  nameWithType: SendActivity.ReturnValuePropertyName
  fullName: System.Workflow.Activities.SendActivity.ReturnValuePropertyName
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
  fullName: System.Workflow.Activities.SendActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.TypedOperationInfo
  parent: System.Workflow.Activities
  isExternal: false
  name: TypedOperationInfo
  nameWithType: TypedOperationInfo
  fullName: System.Workflow.Activities.TypedOperationInfo
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,ChannelToken,Type,IDictionary<String,String>)
- uid: System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext(Activity,String,String,Type,IDictionary<String,String>)
  nameWithType: SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
  fullName: System.Workflow.Activities.SendActivity.SetContext(Activity,String,String,Type,IDictionary<String,String>)
- uid: System.Workflow.Activities.SendActivity.#ctor*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SendActivity
  nameWithType: SendActivity.SendActivity
- uid: System.Workflow.Activities.SendActivity.ChannelToken*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ChannelToken
  nameWithType: SendActivity.ChannelToken
- uid: System.Workflow.Activities.SendActivity.Context*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Context
  nameWithType: SendActivity.Context
- uid: System.Workflow.Activities.SendActivity.CustomAddress*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: CustomAddress
  nameWithType: SendActivity.CustomAddress
- uid: System.Workflow.Activities.SendActivity.Execute*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: Execute
  nameWithType: SendActivity.Execute
- uid: System.Workflow.Activities.SendActivity.GetContext*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: GetContext
  nameWithType: SendActivity.GetContext
- uid: System.Workflow.Activities.SendActivity.InitializeProperties*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: InitializeProperties
  nameWithType: SendActivity.InitializeProperties
- uid: System.Workflow.Activities.SendActivity.ParameterBindings*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ParameterBindings
  nameWithType: SendActivity.ParameterBindings
- uid: System.Workflow.Activities.SendActivity.ServiceOperationInfo*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: ServiceOperationInfo
  nameWithType: SendActivity.ServiceOperationInfo
- uid: System.Workflow.Activities.SendActivity.SetContext*
  parent: System.Workflow.Activities.SendActivity
  isExternal: false
  name: SetContext
  nameWithType: SendActivity.SetContext
