### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ErrObject
  id: ErrObject
  children:
  - Microsoft.VisualBasic.ErrObject.Clear
  - Microsoft.VisualBasic.ErrObject.Description
  - Microsoft.VisualBasic.ErrObject.Erl
  - Microsoft.VisualBasic.ErrObject.GetException
  - Microsoft.VisualBasic.ErrObject.HelpContext
  - Microsoft.VisualBasic.ErrObject.HelpFile
  - Microsoft.VisualBasic.ErrObject.LastDllError
  - Microsoft.VisualBasic.ErrObject.Number
  - Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  - Microsoft.VisualBasic.ErrObject.Source
  langs:
  - csharp
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
  type: Class
  summary: "<xref uid=&quot;langword_csharp_ErrObject&quot; name=&quot;ErrObject&quot; href=&quot;&quot;> </xref> Модуль содержит свойства и процедуры, используемые для идентификации и обработки ошибок во время выполнения с помощью <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "`ErrObject` Модуль поддерживает `Err` объекта. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.Information.Err%2A>.</xref:Microsoft.VisualBasic.Information.Err%2A>"
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice what happens when you use the `Clear` method first: When you then generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n```  \nDim Msg As String  \n' If an error occurs, construct an error message.  \nOn Error Resume Next   ' Defer error handling.  \nErr.Clear  \nErr.Raise(6)   ' Generate an \"Overflow\" error.  \n' Check for error, then show message.  \nIf Err.Number <> 0 Then  \n    Msg = \"Error # \" & Str(Err.Number) & \" was generated by \" _  \n        & Err.Source & ControlChars.CrLf & Err.Description  \n    MsgBox(Msg, MsgBoxStyle.Information, \"Error\")  \nEnd If  \n```"
  syntax:
    content: public sealed class ErrObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Clear
  id: Clear
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Очищает все параметры свойства <xref uid=&quot;langword_csharp_Err&quot; name=&quot;Err&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "Используйте `Clear` для явной очистки `Err` объекта после обработки ошибки, например при использовании отложенной обработки ошибок с помощью `On Error Resume Next`. `Clear` Метод автоматически вызывается при выполнении любого из следующих инструкций:-любого типа `Resume` инструкции - `Exit Sub`, `Exit Function`, или `Exit Property` — любой `On Error` заявление — любой `Try...Catch...Finally` инструкции настроек [!NOTE] настроек `On Error Resume Next` конструкция может оказаться предпочтительнее `On Error GoTo` при обработке ошибок, формируемых во время доступа к другим объектам. Проверка `Err` после каждого взаимодействия с объектом позволяет избежать неоднозначности, о том, какие обращения к объекту с помощью кода: можно быть уверенным, какой объект поместил код ошибки в `Err.Number`, а также какой объект первоначально создал ошибку (объект, указанный в `Err.Source`)."
  example:
  - "This example uses the `Err` object's `Clear` method to reset the numeric properties of the `Err` object to zero and its string properties to zero-length strings. Without the call to `Clear`, the second call to `MsgBox` would display the same error message.  \n  \n [!code-vb[VbVbalrErrorHandling#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._141_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.ErrObject.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Description
  id: Description
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, содержащее строку описания, связанную с ошибкой. Чтение и запись."
  remarks: "`Description` Значение свойства состоит из краткого описания ошибки. Используйте это свойство, чтобы предупредить пользователя об ошибке, не может или не хотите обрабатывать. При создании пользовательской ошибки, присвойте краткое описание ошибки для `Description` свойства. Если `Description` свойство не заполнено и значение <xref:Microsoft.VisualBasic.ErrObject.Number%2A>свойство соответствует свойству ошибки времени выполнения Visual Basic, то строка, возвращаемая <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A>функция задается в `Description` свойство, когда происходит ошибка.</xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> </xref:Microsoft.VisualBasic.ErrObject.Number%2A>"
  example:
  - "This example assigns a user-defined message to the `Description` property of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._68_1.vb)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, содержащее строку описания, связанную с ошибкой. Чтение и запись."
  overload: Microsoft.VisualBasic.ErrObject.Description*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Erl
  id: Erl
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает целое число, указывающее номер строки последней инструкции. Только для чтения."
  remarks: "Если Visual Basic не обнаруживает номера строки, она возвращает 0."
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n```  \n10:     On Error Resume Next  \n20:     Err.Raise(60000)  \n' Returns 20.  \n30:     MsgBox(Erl())  \n```"
  syntax:
    content: public int Erl { get; }
    return:
      type: System.Int32
      description: "Возвращает целое число, указывающее номер строки последней инструкции. Только для чтения."
  overload: Microsoft.VisualBasic.ErrObject.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.GetException
  id: GetException
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает исключение, представляющее возникшей ошибки."
  remarks: "`GetException` Функция доступна только из `Err` класс объекта. Она работает с `Exception` свойство `Err` объекта для отображения возникшей ошибки."
  example:
  - "The following code displays the message assigned to the exception in the `Err` object:  \n  \n [!code-vb[VbVbalrCatRef#66](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._226_1.vb)]"
  syntax:
    content: public Exception GetException ();
    parameters: []
    return:
      type: System.Exception
      description: "Возвращает исключение, представляющее возникшей ошибки."
  overload: Microsoft.VisualBasic.ErrObject.GetException*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  id: HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает или задает <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> содержащее идентификатор контекста для раздела в файле справки. Чтение и запись."
  remarks: "`HelpContext` Свойство используется для отображения контекстной справки для приложения. Если файл справки указан в `HelpFile`, `HelpContext` свойство используется для автоматического отображения определенного файла справки. Если оба `HelpFile` и `HelpContext` свойств пусты, значение <xref:Microsoft.VisualBasic.ErrObject.Number%2A>свойство проверяется.</xref:Microsoft.VisualBasic.ErrObject.Number%2A> Если значение `Number` свойство соответствует значению ошибки времени выполнения Visual Basic, то используется идентификатор контекста справки Visual Basic для ошибки. Если значение `Number` свойства не соответствуют ошибка Visual Basic, появится экран содержимое файла справки Visual Basic.      Настроек [!NOTE] настроек следует написать процедуры в приложении для обработки типичных ошибок. При программировании с использованием объекта можно использовать файл справки объекта чтобы улучшить качество обработки ошибок или для отображения значимые сообщения, если ошибка не может быть восстановлен."
  example:
  - "This example uses the `HelpContext` property of the `Err` object to show the Visual Basic Help topic for the `Overflow` error.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._34_1.vb)]"
  syntax:
    content: public int HelpContext { get; set; }
    return:
      type: System.Int32
      description: "Возвращает или задает <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> содержащее идентификатор контекста для раздела в файле справки. Чтение и запись."
  overload: Microsoft.VisualBasic.ErrObject.HelpContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  id: HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, содержащее полный путь к файлу справки. Чтение и запись."
  remarks: "Если файл справки задается `HelpFile` свойство, он вызывается автоматически при нажатии клавиши справки (или клавишу F1) в диалоговом окне сообщения об ошибке. Если `HelpContext` свойство содержит допустимый контекст идентификатора для указанного файла, необходимый раздел отображается автоматически. Если не `HelpFile` указан, откроется файл справки Visual Basic.      Настроек [!NOTE] настроек следует написать процедуры в приложении для обработки типичных ошибок. При программировании с использованием объекта можно использовать файл справки объекта чтобы улучшить качество обработки ошибок или для отображения значимые сообщения, если ошибка не может быть восстановлен."
  example:
  - "This example uses the `HelpFile` property of the `Err` object to start the Help system. By default, the `HelpFile` property contains the name of the Visual Basic Help file.  \n  \n [!code-vb[VbVbalrErrorHandling#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._70_1.vb)]"
  syntax:
    content: public string HelpFile { get; set; }
    return:
      type: System.String
      description: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, содержащее полный путь к файлу справки. Чтение и запись."
  overload: Microsoft.VisualBasic.ErrObject.HelpFile*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  id: LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает код системной ошибки, возникшей при вызове в библиотеке динамической компоновки (DLL). Только для чтения."
  remarks: "Свойство LastDllError применяется только к DLL, вызовы из кода Visual Basic. При такой вызов вызываемая функция обычно возвращает код, обозначающий успешное выполнение или сбой, и свойства LastDllError. Обратитесь к документации для функций DLL определить возвращаемые значения, которые указывают на успешное выполнение или сбой. Каждый раз, когда возвращается код ошибки, приложение Visual Basic немедленно проверьте свойства LastDllError. Исключение возникает, когда задано свойство LastDllError.      Настроек [!NOTE] настроек свойства LastDllError защищен <xref:System.Security.Permissions.SecurityAction>, который помогает защитить его от ненадежного кода.</xref:System.Security.Permissions.SecurityAction> Тем не менее <xref:System.Security.Permissions.SecurityAction>требует только непосредственно вызывающего метода, чтобы <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A>разрешение.</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> </xref:System.Security.Permissions.SecurityAction> Если код можно вызвать из частично доверенного кода, предоставление доступа к значение LastDllError без проверки представляет угрозу безопасности.   >> О важных ограничениях об использовании <xref:System.Security.Permissions.SecurityAction>член, в разделе [требовать и</xref:System.Security.Permissions.SecurityAction> LinkDemand](http://msdn.microsoft.com/en-us/1ab877f2-70f4-4e0d-8116-943999dfe8f5). Дополнительные сведения о разрешениях см. в разделе <xref:System.Security.Permissions.SecurityPermission>и [разрешений доступа к коду](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>       Примечание для смарт-устройств, это свойство всегда возвращает ноль."
  example:
  - "The following example shows how you can use the `LastDllError` property after calling a function in the Windows API. The `PrintWindowCoordinates` procedure takes a handle to a window and calls the `GetWindowRect` function. `GetWindowRect` fills the RECT data structure with the lengths of the sides of the rectangle that make up the window. If you pass an invalid handle, an error occurs, and the error number is available through the `LastDllError` property.  \n  \n [!code-vb[VbVbalrErrorHandling#8](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_1.vb)]  \n[!code-vb[VbVbalrErrorHandling#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_2.vb)]  \n[!code-vb[VbVbalrErrorHandling#10](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_3.vb)]  \n  \n [!code-vb[VbVbalrErrorHandling#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._45_4.vb)]"
  syntax:
    content: public int LastDllError { get; }
    return:
      type: System.Int32
      description: "Возвращает код системной ошибки, возникшей при вызове в библиотеке динамической компоновки (DLL). Только для чтения."
  overload: Microsoft.VisualBasic.ErrObject.LastDllError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Number
  id: Number
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает или задает значение, указывающее ошибку. Чтение и запись."
  remarks: "Все `Raise` аргументы, кроме `Number` являются необязательными. Если опустить необязательные аргументы и параметры свойства `Err` объект содержит значения, которые не были очищены, эти значения являются значениями ошибки.       Поскольку `Err` объект предоставляет больше данных, чем при формировании ошибки, связанные с `Error` инструкции `Raise` может использоваться для создания ошибок при написании модулей класса. Например, с помощью `Raise` метод, можно указать источник, вызвавшего ошибку в `Source` свойство, Справка в Интернете для этой ошибки можно ссылаться и так далее.       При возврате объектом пользовательской ошибки, установите `Err.Number` , добавив число выбранных с кодом ошибки для `VbObjectError` константой. Например, используйте следующий код для возврата количества 1051 с кодом ошибки: [!code-vb [VbVbalrErrorHandling #13](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_1.vb)]"
  example:
  - "This example illustrates a typical use of the `Number` property in an error-handling routine.  \n  \n [!code-vb[VbVbalrErrorHandling#12](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_2.vb)]  \n  \n This example uses the `Err` object's `Raise` method to generate an original error within a function written in Visual Basic. The calling function can catch the error and report it to the user. Notice that procedure `CallingProcedure` contrasts the type of information that you can derive from an `Err` object with the information that you can derive from an `Exception` object.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._83_3.vb)]"
  syntax:
    content: public int Number { get; set; }
    return:
      type: System.Int32
      description: "Возвращает или задает значение, указывающее ошибку. Чтение и запись."
  overload: Microsoft.VisualBasic.ErrObject.Number*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>больше, чем 65535."
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  id: Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Вызывает ошибку во время выполнения; может быть использован вместо <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> инструкции."
  remarks: "Все `Raise` аргументы, кроме `Number` являются необязательными. Если опустить необязательные аргументы и параметры свойства `Err` объект содержит значения, которые не были очищены, эти значения являются значениями ошибки.       Поскольку `Err` объект предоставляет больше данных, чем при формировании ошибки, связанные с `Error` инструкции `Raise` может использоваться для создания ошибок при написании модулей класса. Например, с помощью `Raise` метод, можно указать источник, вызвавшего ошибку в `Source` свойство, Справка в Интернете для этой ошибки можно ссылаться и так далее."
  example:
  - "This example uses the `Err` object's `Raise` method to generate an error within a function written in Visual Basic. The calling function can catch the error and report it to the user with a message box.  \n  \n [!code-vb[VbVbalrErrorHandling#14](~/add/codesnippet/visualbasic/b1f4ec6f-36d3-4787-9987-_1.vb)]"
  syntax:
    content: public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);
    parameters:
    - id: Number
      type: System.Int32
      description: "Обязательный параметр. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>целое число, определяющее тип ошибки. Ошибки Visual Basic находятся в диапазоне от 0 до 65535; диапазон 0-512 зарезервирован для системных ошибок; диапазон 513-65535 доступен для пользовательских ошибок. При задании <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> значение кода ошибки в модуле класса, добавьте номер пользовательского кода ошибки для <xref uid=&quot;langword_csharp_vbObjectError&quot; name=&quot;vbObjectError&quot; href=&quot;&quot;> </xref> константой. Например, для создания ошибки с номером 513, назначьте `vbObjectError + 513` для <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> свойство."
    - id: Source
      type: System.Object
      description: "Необязательный параметр. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>выражение, содержащее имя объекта или приложения, вызвавшего ошибку. При задании этого свойства для объекта, используйте форму `project`.`class`. Если `Source` не указан, используется идентификатор процесса текущего проекта Visual Basic."
    - id: Description
      type: System.Object
      description: "Необязательный параметр. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>выражение, описывающее ошибку. Если не указано, значение в <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> свойство проверяется. Он может быть сопоставлен ошибки времени выполнения Visual Basic, если код, строка, возвращаемая по <xref uid=&quot;langword_csharp_Error&quot; name=&quot;Error&quot; href=&quot;&quot;> </xref> функция используется в качестве <xref uid=&quot;langword_csharp_Description&quot; name=&quot;Description&quot; href=&quot;&quot;> </xref> свойство. Если ошибки не Visual Basic, соответствующий <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> используется свойство сообщения «приложением или объектом ошибка»."
    - id: HelpFile
      type: System.Object
      description: "Необязательный параметр. Полный путь к файлу справки, в котором можно найти справку по этой ошибке. Если не указан, Visual Basic используется полное имя диска, путь и имя файла справки Visual Basic."
    - id: HelpContext
      type: System.Object
      description: "Необязательный параметр. Идентификатор контекста, определяющий темы в пределах `HelpFile` , предоставляет справку для этой ошибки. Если не указано, то идентификатор контекста файла справки Visual Basic для ошибки, соответствующий <xref uid=&quot;langword_csharp_Number&quot; name=&quot;Number&quot; href=&quot;&quot;> </xref> свойство используется, если он существует."
  overload: Microsoft.VisualBasic.ErrObject.Raise*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ErrObject.Source
  id: Source
  parent: Microsoft.VisualBasic.ErrObject
  langs:
  - csharp
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, указывающее имя объекта или приложения, вызвавшего ошибку. Чтение и запись."
  remarks: "`Source` Свойство указывает `String` выражение, представляющее объект, создавший ошибку; выражение обычно является именем класса объекта или идентификатор процесса. Используйте `Source` свойство, чтобы предоставить сведения, если код не может обработать ошибку, сформированную в объекте, к которому осуществляется доступ. Например, при доступе к Microsoft Excel и создает `Division by zero` задает ошибки, Microsoft Excel `Err.Number` его код ошибки для этой ошибки и наборов `Source` для «Excel.Application».       Когда приложение создает ошибку из кода, `Source` является приложения программным идентификатором. В пределах класса `Source` должен содержать имя в форме *проекта*.* Класс*. При возникновении непредвиденной ошибки в коде, `Source` свойство заполняется автоматически. Для ошибок в модуле `Source` содержит имя проекта."
  example:
  - "This example demonstrates the use of the `Source` property in a typical error-handling routine. When an error is raised from `Class1`, the string `\"Class1\"` is assigned to the `Source` property of the `Err` object. This string is then displayed in an informative message indicating the source and number of the error.  \n  \n [!code-vb[VbVbalrErrorHandling#15](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._39_1.vb)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Возвращает или задает <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> выражение, указывающее имя объекта или приложения, вызвавшего ошибку. Чтение и запись."
  overload: Microsoft.VisualBasic.ErrObject.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.ErrObject.Clear
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear()
  nameWithType: ErrObject.Clear()
  fullName: Microsoft.VisualBasic.ErrObject.Clear()
- uid: Microsoft.VisualBasic.ErrObject.Description
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
  fullName: Microsoft.VisualBasic.ErrObject.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ErrObject.Erl
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
  fullName: Microsoft.VisualBasic.ErrObject.Erl
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.ErrObject.GetException
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException()
  nameWithType: ErrObject.GetException()
  fullName: Microsoft.VisualBasic.ErrObject.GetException()
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.ErrObject.HelpContext
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
  fullName: Microsoft.VisualBasic.ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
  fullName: Microsoft.VisualBasic.ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
  fullName: Microsoft.VisualBasic.ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
  fullName: Microsoft.VisualBasic.ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise(Int32,Object,Object,Object,Object)
  nameWithType: ErrObject.Raise(Int32,Object,Object,Object,Object)
  fullName: Microsoft.VisualBasic.ErrObject.Raise(Int32,Object,Object,Object,Object)
- uid: Microsoft.VisualBasic.ErrObject.Source
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
  fullName: Microsoft.VisualBasic.ErrObject.Source
- uid: Microsoft.VisualBasic.ErrObject.Clear*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Clear
  nameWithType: ErrObject.Clear
- uid: Microsoft.VisualBasic.ErrObject.Description*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Description
  nameWithType: ErrObject.Description
- uid: Microsoft.VisualBasic.ErrObject.Erl*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Erl
  nameWithType: ErrObject.Erl
- uid: Microsoft.VisualBasic.ErrObject.GetException*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: GetException
  nameWithType: ErrObject.GetException
- uid: Microsoft.VisualBasic.ErrObject.HelpContext*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpContext
  nameWithType: ErrObject.HelpContext
- uid: Microsoft.VisualBasic.ErrObject.HelpFile*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: HelpFile
  nameWithType: ErrObject.HelpFile
- uid: Microsoft.VisualBasic.ErrObject.LastDllError*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: LastDllError
  nameWithType: ErrObject.LastDllError
- uid: Microsoft.VisualBasic.ErrObject.Number*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Number
  nameWithType: ErrObject.Number
- uid: Microsoft.VisualBasic.ErrObject.Raise*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Raise
  nameWithType: ErrObject.Raise
- uid: Microsoft.VisualBasic.ErrObject.Source*
  parent: Microsoft.VisualBasic.ErrObject
  isExternal: false
  name: Source
  nameWithType: ErrObject.Source
