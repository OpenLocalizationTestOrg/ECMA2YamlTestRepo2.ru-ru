### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataLoadOptions
  id: DataLoadOptions
  children:
  - System.Data.Linq.DataLoadOptions.#ctor
  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
  type: Class
  summary: "Предоставляет немедленную загрузку и фильтрацию связанных данных."
  remarks: "##Если общие запроса для объекта, фактически извлекается только запрошенный объект. *Связанные* объекты не извлекаются автоматически одновременно. (Дополнительные сведения см. в разделе [выполнение запросов в связях](~/add/includes/ajax-current-ext-md.md).)       Класс DataLoadOptions предоставляет два метода для достижения немедленная загрузка указанного взаимосвязанных данных. <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>Метод позволяет немедленно загружать данные, связанные с основными целевыми объектами.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>Метод позволяет для фильтрации связанных объектов.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>      ## Правила Обратите внимание на следующие правила относятся к использованию параметров DataLoadOptions:-назначение DataLoadOptions для <xref:System.Data.Linq.DataContext>после выполнения первого запроса приводит к возникновению исключения.</xref:System.Data.Linq.DataContext>      -Изменение параметров DataLoadOptions после назначения для <xref:System.Data.Linq.DataContext>приводит к возникновению исключения ## цикла обработки <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>и <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>директивы не следует создавать циклы.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> </xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext> Ниже представлены примеры графиков:-пример 1: Self рекурсивные - `dlo.LoadWith<Employee>(e => e.Reports);` -пример 2: назад указатели - `dlo.LoadWith <Customer>(c => C.Orders);`           -    `dlo.LoadWith <Order>(o => o.Customer);` -пример 3: больше циклов несмотря на то, что это не должно происходить в хорошо нормированной модели, это возможно.          - `dlo.LoadWith <A>(a => a.Bs);`           -    `dlo.LoadWith <B>(b => b.Cs);`           -    `dlo.LoadWith <C>(c => c.As);` -Пример 4: Self подзапросы рекурсивное - `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));` -пример 5: более вложенных запросов рекурсивных - `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`           -    `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));` ниже приведены некоторые общие правила, которые помогут понять, что происходит в этих сценариях.       **LoadWith** каждый вызов <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>проверяет, были ли введены циклов в граф.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Если, как показано в примерах 1, 2 и 3, исключение.       **AssociateWith** ядро во время выполнения не применяется для связи внутри выражения существующие предложения вложенный запрос.      -В примере 4 `Where` предложение выполняется для всех `A`, не только те подзапроса отобранные само выражение вложенного запроса (так как это было бы рекурсивной) — в примере 5, первый `Where` предложение применяется ко всем `B`s, даже если существуют вложенные запросы для `B`. Второй `Where` предложение применяется ко всем `A`s несмотря на то что вложенные запросы на `A`."
  example:
  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.
  syntax:
    content: public sealed class DataLoadOptions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.#ctor
  id: '#ctor'
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> класса."
  syntax:
    content: public DataLoadOptions ();
    parameters: []
  overload: System.Data.Linq.DataLoadOptions.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  id: AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Фильтрует объекты, извлеченные для определенной связи."
  remarks: "В следующем примере внутренний цикл выполняет итерацию только тех `Orders` , не были отправлены сегодня."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]
     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]
  syntax:
    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Определяет запрос, используемый для определенного один ко многим поля или свойства. Обратите внимание на следующее: Если выражение не начинается с поле или свойство, которое представляет связь «один ко многим», создается исключение.       Если в выражении оператора, отличного от допустимого оператора, создается исключение. Доступны следующие допустимые операторы: когда OrderBy ThenBy OrderByDescending ThenByDescending выполнить"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Для добавления."
  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  id: LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Извлекает указанные данные, связанные с основными целевыми объектами с помощью лямбда-выражения."
  remarks: "В следующем примере все `Orders` для всех `Customers` , расположенных в Лондоне, извлекаются при выполнении запроса. В результате последующий доступ к `Orders` свойство `Customer` объекта не инициирует новый запрос базы данных."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]
     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]
  syntax:
    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Лямбда-выражение, определяющее связанный материал."
  overload: System.Data.Linq.DataLoadOptions.LoadWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Для добавления."
  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataLoadOptions.#ctor
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
- uid: System.Data.Linq.DataLoadOptions.#ctor*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions.DataLoadOptions
- uid: System.Data.Linq.DataLoadOptions.AssociateWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith
  nameWithType: DataLoadOptions.AssociateWith
- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith<T>
  nameWithType: DataLoadOptions.AssociateWith<T>
- uid: System.Data.Linq.DataLoadOptions.LoadWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith
  nameWithType: DataLoadOptions.LoadWith
- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith<T>
  nameWithType: DataLoadOptions.LoadWith<T>
