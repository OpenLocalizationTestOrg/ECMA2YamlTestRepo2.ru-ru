### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "Определяет объект точки подключения, который позволяет серверный элемент управления, выступающий в роли поставщика для создания соединения с потребителем."
  remarks: "В каждой связи веб-частей между двумя серверными элементами управления каждый элемент управления (помимо прочих требований) должен иметь связанный объект точки подключения, позволяющий его для подключения к другому элементу управления, а также для предоставления или использования данных, в зависимости от того, является ли элемент управления используется в качестве поставщик или потребитель соединения. Объект <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>объект содержит сведения о том, как элемент управления может подключаться к другой элемент управления и типа данных, можно использовать совместно.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Для элемента управления, который выступает в роли поставщика в соединении своей точки подключения должен быть объектом ProviderConnectionPoint. Дополнительные сведения о подключениях веб-частей и точках подключения см. в разделах, перечисленных в подразделе ниже.       Чтобы создать объект ProviderConnectionPoint, требуются несколько шагов: 1.  Создайте интерфейс. Когда поставщик совместно использует данные с потребителем, это происходит, получив экземпляр интерфейса и возвращая этот экземпляр с потребителем.      2.  Реализуйте интерфейс в поставщике. Объект <xref:System.Web.UI.WebControls.WebParts.WebPart>или другого серверного элемента управления (любого типа серверного элемента управления в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>можно использовать зоны), которые будут поставщик должен реализовать интерфейс, созданные на первом шаге.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  Определите метод обратного вызова. Метод в поставщике должно быть идентифицировано как метод обратного вызова для установления соединения. Этот метод возвращает экземпляр реализованного интерфейса потребителю. Веб-частей подход для определения метода обратного вызова в поставщике является добавление `ConnectionProvider` атрибута метаданных (определяется <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>класс) метода, который возвращает экземпляр интерфейса.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> При добавлении атрибута Единственным обязательным параметром является отображаемое имя для точки подключения поставщика. Необязательные параметры можно также добавить, например идентификатор для точки подключения.       После элемента управления начнет действовать в качестве поставщика, элемент управления может участвовать в соединениях, (при условии, что элемент управления потребителя аналогично оборудован). Чтобы создать статическое, объявленное подключение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если `ConnectionProvider` в исходном коде поставщика, который идентифицирует метод обратного вызова указывает идентификатор для точки подключения, то это значение должны быть назначены `ProviderConnectionPointID` атрибут `<asp:webpartconnection>` элемента на странице. Одной из причин, разработчик может указать идентификатор для точки подключения поставщика является, если имеется несколько точек подключения в элементе управления поставщика. Если идентификатор не указан для точки подключения поставщика в элементе управления поставщика, значения не должна назначаться `ProviderConnectionPointID` атрибут на странице, так как соединение будет создаваться с помощью по умолчанию значение, полученное от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>поля.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Для создания подключения в коде, разработчики должны создать объект ProviderConnectionPoint путем вызова <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>метода и передачи в идентификатор элемента управления поставщика, а также идентификатор или индекс объекта ProviderConnectionPoint определенных в элементе управления поставщика.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Возвращаемый объект ProviderConnectionPoint вместе с ссылкой на элемент управления поставщика, ссылку на элемент управления получателя и соответствующим <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>, являются все передаваемые <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объекта.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Несмотря на то, что разработчики могут использовать точки подключения поставщика как часть установления подключения декларативно или программно, пользователи также могут взаимодействовать с точками подключения поставщика для установления подключений через пользовательский интерфейс (UI). Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>элемента управления веб-страницы, он предоставляет пользовательский Интерфейс во время выполнения для создания подключений.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Если пользователь выбрал управления получателя в качестве отправной точки для установления соединения, щелкнув его команду подключения (они могут выбрать поставщик, нет никаких различий результирующего подключения), в пользовательском Интерфейсе, ему будет выдаваться раскрывающемся списке элемента управления с отображаемым именем доступной точки подключения поставщика (или точек, если их несколько). Пользователи должны выбрать точку подключения поставщика, чтобы создать подключение.       Объект ProviderConnectionPoint связывает непосредственно с элементом управления для конкретного поставщика и хранит сведения о соединении в свойствах, которые он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Например, в наследуемого <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Свойства, точка подключения поставщика сохраняет тип интерфейса, возвращенный поставщиком.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Если поставщик и получатель в подключении работают с тем же типом интерфейса, элементы управления являются совместимыми и могут создавать прямое подключение. Если поставщик и получатель не может работать с тем же типом интерфейса, не являются совместимыми и необходимо использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объекта для преобразования точка подключения поставщика <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>значение в тип, который потребитель может работать с.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Другим важным наследуемым свойством является <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>Выберите свойства, которое предоставляет понятное имя для отображения в пользовательском Интерфейсе, пользователи могут выбрать подключения поставщика при создании подключений.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> Отображаемое имя является обязательным при добавлении разработчиками `ConnectionProvider` атрибут в метод обратного вызова в элементе управления поставщика. Наследуемый <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Свойства также является полезным, как указано выше, поскольку она предоставляет уникальный идентификатор для точки подключения поставщика в случае, если поставщик имеет несколько точек подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Поставщик может иметь несколько объектов ProviderConnectionPoint, определенные в нем и в этом случае при добавлении разработчиками `ConnectionProvider` атрибут к методу, следует указать значение идентификатора для различения каждой точки подключения. Один других важных является свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>свойство, которое указывает, является ли точка подключения поставщика можно одновременно подключиться к нескольким получателям.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Это свойство имеет значение `true` по умолчанию для точки подключения поставщика (в то время как значение по умолчанию `false` для точки подключения потребителя).       Класс ProviderConnectionPoint добавляет несколько уникальных методов членам он наследуется от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>Метод получает экземпляр интерфейса, которое будет возвращать метод обратного вызова для потребителей.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>Метод возвращает дополнительные пользовательские интерфейсы, которые являются частью существующего подключения, но не интерфейсы используются для установления соединения.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref> класса."
  remarks: "Конструктор ProviderConnectionPoint <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>классе просто вызывает базовый конструктор, передавая ей различных параметров и инициализации базового класса.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Конструктор базового класса, проверяет число параметров для точки подключения и может создать несколько исключений. Список возможных исключений см. раздел &quot;исключения&quot;.       Можно вызвать конструктор ProviderConnectionPoint для создания экземпляра <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>класса.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Однако в случаях, когда вы просто установления соединения и не расширения класса, должен вызвать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>метод для возврата существующего объекта точки подключения поставщика.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "Метод в элементе управления поставщика, который возвращает экземпляр интерфейса потребителям для установления соединения."
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>Интерфейса, который поставщик предоставляет потребителям.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>Элемента управления поставщика, с которой связана точка подключения поставщика.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Понятное отображаемое имя для точки подключения поставщика, которая отображается для пользователей в пользовательском интерфейсе (UI) подключения."
    - id: id
      type: System.String
      description: "Уникальный идентификатор для точки подключения поставщика."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Логическое значение, указывающее, может ли точка подключения поставщика иметь несколько одновременных подключений с потребителями."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>не совпадает с типом элемента управления поставщика (или допустимый класс, производный от него)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Вызывает метод обратного вызова в элементе управления поставщика, который получает экземпляр интерфейса для возвращения потребителям."
  remarks: "Этот метод возвращает объект из элемента управления поставщика, который является экземпляром интерфейса, используемый для установления соединения. Тип объекта будет тип реализованного интерфейса. Например два интерфейса, которые реализуются для соединения в наборе элементов управления веб-частей <xref:System.Web.UI.WebControls.WebParts.IWebPartField>и <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> При вызове метода GetObject на <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объекта, если связанный поставщик реализует один из этих интерфейсов, возвращаемый объект будет того же типа.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Метод GetObject вызывается <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>объектов, когда соединение активируется.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Это критически важный этап, который фактически инициирует подключение и начинает процесс, который включает два элемента управления для обмена данными.       Элемент управления потребителя в подключении должен быть возможность работать с тем же типом интерфейса, как поставщик. Если этого не произошло, элементы управления несовместимы и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект должен использоваться для установления соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Элемент управления, который выступает в роли поставщика в соединении веб-частей."
    return:
      type: System.Object
      description: "<xref:System.Object>Это экземпляр интерфейса, который поставщик возвращает потребителям для установления соединения.</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Получает дополнительную коллекцию дополнительных интерфейсов, которые могут поддерживаться точкой подключения поставщика."
  remarks: "Объект точки подключения поставщика всегда имеет интерфейс по умолчанию, используемый для установления соединения с потребителями. Экземпляр интерфейса по умолчанию, извлечь, вызвав <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>метод <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объекта.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       Тем не менее некоторые элементы управления поставщика будет реализовывать несколько интерфейсов, чтобы предоставить пользователям в рамках соединения. Эти интерфейсы, которые не по умолчанию используется для установления соединения, называются дополнительными интерфейсами. Метод GetSecondaryInterfaces предоставляет способ для возврата коллекции ссылок на дополнительные интерфейсы, так же как и <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>метод возвращает ссылку на интерфейс по умолчанию.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Элемент управления, который выступает в роли поставщика в соединении веб-частей."
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> дополнительные интерфейсы, предоставляемые элементом управления, выступающий в роли поставщика."
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
