### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsProvider
  id: SettingsProvider
  children:
  - System.Configuration.SettingsProvider.#ctor
  - System.Configuration.SettingsProvider.ApplicationName
  - System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  langs:
  - csharp
  name: SettingsProvider
  nameWithType: SettingsProvider
  fullName: System.Configuration.SettingsProvider
  type: Class
  summary: "Действует как базовый класс для извлечения поставщиков пользовательских параметров в архитектуре параметров приложения."
  remarks: "Поставщик параметров определяет механизм для хранения данных конфигурации, используемых в архитектуре параметров приложения. Платформа .NET Framework содержит поставщик параметров по умолчанию один, <xref:System.Configuration.LocalFileSettingsProvider>, которая хранит данные конфигурации в локальной файловой системе.</xref:System.Configuration.LocalFileSettingsProvider> Тем не менее можно создать путем наследования от абстрактного класса SettingsProvider механизмы хранения альтернативный. Поставщик, который использует класс-оболочку, определяется декорирования класс-оболочку с <xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute> Если этот атрибут не указан, значение по умолчанию <xref:System.Configuration.LocalFileSettingsProvider>, используется.</xref:System.Configuration.LocalFileSettingsProvider>       При создании настраиваемый поставщик параметров, как минимум, необходимо предоставить реализациями для трех методов этого класса: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>и <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.</xref:System.Configuration.SettingsProvider.ApplicationName%2A> </xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> </xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>       Для клиентских приложений, можно добавить более стандартизированные функции для пользовательского поставщика путем реализации также <xref:System.Configuration.IApplicationSettingsProvider>интерфейса.</xref:System.Configuration.IApplicationSettingsProvider> Этот интерфейс отражает методов <xref:System.Configuration.ApplicationSettingsBase>класс, который главным образом включает поддержку управления версиями.</xref:System.Configuration.ApplicationSettingsBase>       Как правило рекомендуется разработать поставщиков параметров в единственном экземпляре, чтобы избежать конфликта ресурсов хранилища. Поставщики должны иметь поточно-, так как они могут быть вызваны одновременно из нескольких экземпляров программы-оболочки в одном домене приложения или из нескольких приложений в различных доменах.       Как минимум, поставщик параметров должен распознать три атрибута,<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>и <xref:System.Configuration.DefaultSettingValueAttribute>.</xref:System.Configuration.DefaultSettingValueAttribute> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute> Полный список атрибутов, которые могут применяться к параметрам приложения см. в разделе [атрибуты параметров приложения](~/add/includes/ajax-current-ext-md.md). Поставщик пользовательских параметров должен разрешать атрибуты, применяемые к свойствам параметров следующим образом: 1.  Если поставщик может выполнить запрос, сделанный атрибутом, очевидно, что оно должно делать это.      2.  Если поставщик не может выполнить запрос, его следует игнорировать без вмешательства пользователя.      3.  В случае конфликта два или несколько свойств; Например свойство, выполняется с помощью обоих <xref:System.Configuration.ApplicationScopedSettingAttribute>и <xref:System.Configuration.UserScopedSettingAttribute>; поставщик должен вызывать <xref:System.Configuration.ConfigurationException>.</xref:System.Configuration.ConfigurationException> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute>"
  syntax:
    content: 'public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Инициализирует новый экземпляр класса <xref href=&quot;System.Configuration.SettingsProvider&quot;> </xref> класса."
  remarks: "Это защищенный конструктор по умолчанию для этого абстрактного класса. Производные пользовательские параметры поставщиков не требуется предоставлять явный конструктор, так как <xref:System.Configuration.Provider.ProviderBase.Initialize%2A>метод обычно выполняет все инициализацию.</xref:System.Configuration.Provider.ProviderBase.Initialize%2A>       Код клиента обычно не создаются напрямую поставщик параметров; Вместо этого использовать следующую процедуру для поиска поставщика параметров для определенных параметров свойства: 1.  Вызовите <xref:System.ComponentModel.Component.GetService%2A>метод на текущей <xref:System.ComponentModel.Component>или <xref:System.ComponentModel.ISite>Получите ссылку на текущий <xref:System.Configuration.ISettingsProviderService>.</xref:System.Configuration.ISettingsProviderService> </xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> </xref:System.ComponentModel.Component.GetService%2A>      2.  Вызовите <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>метод <xref:System.Configuration.ISettingsProviderService>полученные на первом шаге, для возврата поставщика параметров.</xref:System.Configuration.ISettingsProviderService> </xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>"
  syntax:
    content: protected SettingsProvider ();
    parameters: []
  overload: System.Configuration.SettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Возвращает или задает имя текущего выполняемого приложения."
  remarks: "ApplicationName и <xref:System.Configuration.Provider.ProviderBase.Name%2A>Свойства помогают устранить неоднозначность аналогично именованных параметров в разных приложениях.</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public abstract string ApplicationName { get; set; }
    return:
      type: System.String
      description: "Объект <xref:System.String>, содержащее сокращенное имя приложения, которое содержит полный путь или расширение, например, `SimpleAppSettings`.</xref:System.String>"
  overload: System.Configuration.SettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Возвращает коллекцию параметров значения свойств для указанного приложения экземпляра и параметры группы свойств."
  remarks: "Метод GetPropertyValues должен быть реализован для обработки специальные параметры, отмеченные <xref:System.Configuration.SpecialSettingAttribute>, также согласовать приложения и параметры пользователей.</xref:System.Configuration.SpecialSettingAttribute>"
  syntax:
    content: public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "Объект <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref> описывающему текущего приложения."
    - id: collection
      type: System.Configuration.SettingsPropertyCollection
      description: "Объект <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref> содержащий группы свойств параметров, значения которых требуется получить."
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "Объект <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref> содержит значения для группы свойств указанные параметры."
  overload: System.Configuration.SettingsProvider.GetPropertyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "Задает значения указанной группы параметров свойства."
  remarks: "<xref:System.Configuration.ApplicationSettingsBase>содержит <xref:System.Configuration.ApplicationSettingsBase.Save%2A>метод, который вызывается для сохранения значений всех его свойств параметров.</xref:System.Configuration.ApplicationSettingsBase.Save%2A></xref:System.Configuration.ApplicationSettingsBase> Этот метод перечисляет все связанные со свойствами, параметры поставщиков параметров и вызывает метод SetPropertyValues для каждого <xref:System.Configuration.SettingsProvider>для выполнения фактической сериализации операции.</xref:System.Configuration.SettingsProvider>       Метод SetPropertyValues должен быть реализован с учетом безопасности: - только полностью доверенный код может обновлять параметры приложения. Частично доверенный код должно быть разрешено обновлять только параметры приложения пользователя. Ненадежный код обычно не может обновлять параметры приложения.      — Чтобы защититься от атак ресурсов следует рассматривать квот приложений с частичным доверием."
  syntax:
    content: public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "Объект <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref> описания текущего использования приложений."
    - id: collection
      type: System.Configuration.SettingsPropertyValueCollection
      description: "Объект <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref> представляющий группы свойств параметров для установки."
  overload: System.Configuration.SettingsProvider.SetPropertyValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Configuration.SettingsProvider.#ctor
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
- uid: System.Configuration.SettingsProvider.ApplicationName
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.SettingsProvider.#ctor*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider
  nameWithType: SettingsProvider.SettingsProvider
- uid: System.Configuration.SettingsProvider.ApplicationName*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
- uid: System.Configuration.SettingsProvider.GetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: SettingsProvider.GetPropertyValues
- uid: System.Configuration.SettingsProvider.SetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: SettingsProvider.SetPropertyValues
