### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlCommandBuilder
  id: SqlCommandBuilder
  children:
  - System.Data.SqlClient.SqlCommandBuilder.#ctor
  - System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  - System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  - System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  - System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  - System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  - System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  - System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  - System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  - System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  - System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  - System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  - System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  - System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  langs:
  - csharp
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder
  fullName: System.Data.SqlClient.SqlCommandBuilder
  type: Class
  summary: "Автоматически создает однотабличные команды, используемые для согласования изменений, внесенных <xref href=&quot;System.Data.DataSet&quot;> </xref> со связанной базой данных SQL Server. Этот класс не наследуется."
  remarks: "<xref:System.Data.SqlClient.SqlDataAdapter>Не создает автоматически инструкции Transact-SQL, необходимые для согласования изменений, внесенных в <xref:System.Data.DataSet>с связанного экземпляра служб SQL Server.</xref:System.Data.DataSet> </xref:System.Data.SqlClient.SqlDataAdapter> Тем не менее можно создать объект SqlCommandBuilder для автоматического создания инструкции Transact-SQL для отдельных обновлений, если установить <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>свойство <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> После этого любые дополнительные инструкции Transact-SQL, не устанавливайте создаются SqlCommandBuilder.       SqlCommandBuilder регистрирует себя в качестве прослушивателя <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>события всякий раз при установке <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A>свойство.</xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> Можно связать только одну <xref:System.Data.SqlClient.SqlDataAdapter>или объект SqlCommandBuilder друг с другом за один раз.</xref:System.Data.SqlClient.SqlDataAdapter>       Для создания инструкций INSERT, UPDATE или DELETE, использует SqlCommandBuilder <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>свойство для получения требуемого набора метаданных автоматически.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> При изменении <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>после метаданные получения, такие как после первого обновления, необходимо вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>метод для обновления метаданных.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>       `SelectCommand` Должно также возвратить по крайней мере один первичный ключ или уникальный столбец. Если таковые отсутствуют, **InvalidOperation** сгенерировано исключение, и команды не создаются.       Также использует SqlCommandBuilder <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>и <xref:System.Data.SqlClient.SqlCommand.Transaction%2A>Свойства ссылается <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> </xref:System.Data.SqlClient.SqlCommand.Transaction%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.Connection%2A> Пользователь должен вызвать метод <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если одна или несколько из этих свойств будут изменены или <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>выполнена замена.</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, и <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>Свойства сохраняют свои предыдущие значения.</xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>       При вызове метода <xref:System.ComponentModel.Component.Dispose%2A>, SqlCommandBuilder отсоединяется от <xref:System.Data.SqlClient.SqlDataAdapter>, и созданные команды больше не используются.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.ComponentModel.Component.Dispose%2A>"
  example:
  - "The following example uses the <xref:System.Data.SqlClient.SqlCommand>, along <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlConnection>, to select rows from a data source. The example is passed a connection string, a query string that is a Transact-SQL SELECT statement, and a string that is the name of the database table. The example then creates a SqlCommandBuilder.  \n  \n [!code-vb[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._12_1.vb)]\n [!code-cs[Classic WebData SqlCommandBuilder#1](~/add/codesnippet/csharp/t-system.data.sqlclient._12_1.cs)]"
  syntax:
    content: 'public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommandBuilder
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommandBuilder.ConflictOption
  - System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  - System.Data.Common.DbCommandBuilder.RefreshSchema
  - System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbCommandBuilder.SetAllValues
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;></xref> class."
  syntax:
    content: public SqlCommandBuilder ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  id: '#ctor(System.Data.SqlClient.SqlDataAdapter)'
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> класса со связанным <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref> объекта."
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>Регистрирует себя в качестве прослушивателя <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>событий, создаваемых <xref:System.Data.SqlClient.SqlDataAdapter>указанный в этом свойстве.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> </xref:System.Data.SqlClient.SqlCommandBuilder>       При создании нового экземпляра <xref:System.Data.SqlClient.SqlCommandBuilder>, все существующие <xref:System.Data.SqlClient.SqlCommandBuilder>связанный с этим <xref:System.Data.SqlClient.SqlDataAdapter>освобождается.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder>"
  syntax:
    content: public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.SqlClient.SqlDataAdapter
      description: "Имя <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>."
  overload: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  id: ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);
    parameters:
    - id: parameter
      type: System.Data.Common.DbParameter
      description: "Для добавления."
    - id: datarow
      type: System.Data.DataRow
      description: "Для добавления."
    - id: statementType
      type: System.Data.StatementType
      description: "Для добавления."
    - id: whereClause
      type: System.Boolean
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  id: CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.Common.CatalogLocation&quot;> </xref> для экземпляра <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> класса."
  syntax:
    content: public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }
    return:
      type: System.Data.Common.CatalogLocation
      description: "A <xref href=&quot;System.Data.Common.CatalogLocation&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  id: CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Задает или возвращает строку, используемую в качестве разделителя каталогов для экземпляра <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> класса."
  syntax:
    content: public override string CatalogSeparator { get; set; }
    return:
      type: System.String
      description: "Строка, указывающая разделитель каталога для использования с экземпляром <xref href=&quot;System.Data.SqlClient.SqlCommandBuilder&quot;> </xref> класса."
  overload: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  id: DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref> объекта, для которого Transact-SQL, автоматически создаются инструкции."
  remarks: "<xref:System.Data.SqlClient.SqlCommandBuilder>Регистрирует себя в качестве прослушивателя <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating>событий, создаваемых <xref:System.Data.SqlClient.SqlDataAdapter>указанный в этом свойстве.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> </xref:System.Data.SqlClient.SqlCommandBuilder>       При создании нового экземпляра <xref:System.Data.SqlClient.SqlCommandBuilder>, все существующие <xref:System.Data.SqlClient.SqlCommandBuilder>связанный с этим <xref:System.Data.SqlClient.SqlDataAdapter>освобождается.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder>"
  syntax:
    content: public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }
    return:
      type: System.Data.SqlClient.SqlDataAdapter
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  id: DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Получает сведения о параметрах из хранимой процедуры, указанной в <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> и заполняет <xref:System.Data.SqlClient.SqlCommand.Parameters*>коллекции указанного <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlCommand.Parameters*>"
  remarks: "`DeriveParameters`перезаписывает любые существующие данные параметров для `SqlDbCommand`.       `DeriveParameters`требуется дополнительное обращение к базе данных для получения сведений. Если сведения о параметрах известна заранее, более эффективно будет заполнить коллекцию параметров путем задания сведений явным образом.       Можно использовать только `DeriveParameters` с хранимыми процедурами. Нельзя использовать `DeriveParameters` с расширенными хранимыми процедурами. Нельзя использовать `DeriveParameters` для заполнения <xref:System.Data.SqlClient.SqlParameterCollection>произвольными инструкциями Transact-SQL, таких как инструкции SELECT с параметрами.</xref:System.Data.SqlClient.SqlParameterCollection>       Дополнительные сведения см. в разделе [Настройка параметров и типов данных параметров](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);
    parameters:
    - id: command
      type: System.Data.SqlClient.SqlCommand
      description: "<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> Ссылается хранимую процедуру, из которой извлекаются сведения о параметрах. Производные параметры добавляются <xref:System.Data.SqlClient.SqlCommand.Parameters*>коллекцию <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Parameters*>"
  overload: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Текст команды не является допустимым именем хранимой процедуры."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  id: GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, который требуется для выполнения операций удаления в базе данных."
  remarks: "Приложение может использовать метод GetDeleteCommand для информационных и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand>       GetDeleteCommand также можно использовать как основу для измененной команды. Например может вызвать GetDeleteCommand и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>       После первоначального создания инструкции SQL приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае GetDeleteCommand будет по-прежнему использовать сведения из предыдущей инструкции, которые могут быть неправильными. Инструкции SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A>или GetDeleteCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, который требуется для выполнения операций удаления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  id: GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объектов, необходимых для выполнения операций удаления в базе данных."
  remarks: "Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>       Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>в качестве основы для измененной команды.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> Например можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>       После первоначального создания инструкции SQL приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> Инструкции SQL впервые создаются, когда приложение вызывает один <xref:System.Data.Common.DbDataAdapter.Update%2A>или <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder>для создания параметров на основе имен столбцов вместо.</xref:System.Data.OleDb.OleDbCommandBuilder> Он завершается успешно только в том случае, если выполняются следующие условия: - <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>коллекции указан, и его длина меньше, чем имя создаваемого параметра.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>регулярного выражения коллекции.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>задана коллекция.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "Если <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, создания @p1, @p2, и т. д."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объектов, необходимых для выполнения операций удаления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  id: GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объекта, необходимые для выполнения операций вставки в базу данных."
  remarks: "Приложение может использовать метод GetInsertCommand для информационных и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand>       GetInsertCommand также можно использовать как основу для измененной команды. Например может вызвать GetInsertCommand и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>       После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае GetInsertCommand будет по-прежнему использовать сведения из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A>или GetInsertCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, который требуется для выполнения операций вставки."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  id: GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объектов, необходимых для выполнения операций вставки в базе данных."
  remarks: "Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>       Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>в качестве основы для измененной команды.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> Например можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>       После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> Когда приложение вызывает один <xref:System.Data.Common.DbDataAdapter.Update%2A>или <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> впервые создаются инструкции Transact-SQL       Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder>для создания параметров на основе имен столбцов вместо.</xref:System.Data.OleDb.OleDbCommandBuilder> Он завершается успешно только в том случае, если выполняются следующие условия: - <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>коллекции указан, и его длина меньше, чем имя создаваемого параметра.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>регулярного выражения коллекции.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>задана коллекция.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "Если <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, создания @p1, @p2, и т. д."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объектов, необходимых для выполнения операций вставки."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  id: GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "Для добавления."
    return:
      type: System.String
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  id: GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterName (string parameterName);
    parameters:
    - id: parameterName
      type: System.String
      description: "Для добавления."
    return:
      type: System.String
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  id: GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override string GetParameterPlaceholder (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "Для добавления."
    return:
      type: System.String
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  id: GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);
    parameters:
    - id: srcCommand
      type: System.Data.Common.DbCommand
      description: "Для добавления."
    return:
      type: System.Data.DataTable
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  id: GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, необходимый для выполнения обновлений в базе данных."
  remarks: "Приложение может использовать метод GetUpdateCommand для информационных и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand>       GetUpdateCommand также можно использовать как основу для измененной команды. Например может вызвать GetUpdateCommand и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>       После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае GetUpdateCommand будет по-прежнему использовать сведения из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A>или GetUpdateCommand.</xref:System.Data.Common.DbDataAdapter.Update%2A>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объектов, необходимых для выполнения обновлений."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  id: GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает автоматически сгенерированный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, необходимый для выполнения обновлений в базе данных."
  remarks: "Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand>объект для выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>       Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>в качестве основы для измененной команды.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> Например можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>и измените <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>значение, а затем явно установить <xref:System.Data.SqlClient.SqlDataAdapter>.</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>       После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>Если инструкция каким-либо образом была изменена.</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> Когда приложение вызывает один <xref:System.Data.Common.DbDataAdapter.Update%2A>или <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.</xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> впервые создаются инструкции Transact-SQL       Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder>для создания параметров на основе имен столбцов вместо.</xref:System.Data.OleDb.OleDbCommandBuilder> Он завершается успешно только в том случае, если выполняются следующие условия: - <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>коллекции указан, и его длина меньше, чем имя создаваемого параметра.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>регулярного выражения коллекции.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation>задана коллекция.</xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> </xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>       Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "Если <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, создания @p1, @p2, и т. д."
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Автоматически созданный <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, необходимый для выполнения обновлений."
  overload: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  id: InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);
    parameters:
    - id: command
      type: System.Data.Common.DbCommand
      description: "Для добавления."
    return:
      type: System.Data.Common.DbCommand
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  id: QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Данный идентификатор без кавычек в наличии правильного каталога возвращает правильную форму этого идентификатора. Сюда входят корректно исключаются кавычки, внедренные в идентификатор."
  syntax:
    content: public override string QuoteIdentifier (string unquotedIdentifier);
    parameters:
    - id: unquotedIdentifier
      type: System.String
      description: "Исходный идентификатор без кавычек."
    return:
      type: System.String
      description: "Версия заключенный в кавычки идентификатор. Кавычки, внедренные в идентификатор, корректно исключаются."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  id: QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает начальный символ или символы, используемые для указания объектов базы данных SQL Server, например, таблиц или столбцов, имена которых содержат пробелы или зарезервированные маркеры."
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the QuotePrefix or <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> properties after an insert, update, or delete command has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuotePrefix { get; set; }
    return:
      type: System.String
      description: "Начальный символ или символы, используемые. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Это свойство нельзя изменить после вставки, обновления или создана команда DELETE."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  id: QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает конечный символ или символы, используемые для указания объектов базы данных SQL Server, например, таблиц или столбцов, имена которых содержат пробелы или зарезервированные маркеры."
  remarks: >-
    > [!NOTE]

    >  Although you cannot change the <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> or QuoteSuffix properties after an insert, update, or delete operation has been generated, you can change their settings after calling the `Update` method of a DataAdapter.
  syntax:
    content: public override string QuoteSuffix { get; set; }
    return:
      type: System.String
      description: "Конечный символ или символы для использования. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Это свойство нельзя изменить после формирования insert, update или delete команды."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  id: SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает символ, который используется в качестве разделителя между идентификатором схемы и другие идентификаторы."
  remarks: "Как правило серверы баз данных указать схему для идентификатора, имя схемы отделяют от идентификатора определенным символом. Например SQL Server используется период, создание качестве, где «Person» — это имя схемы, а «CustomerName» — идентификатор. Задание этого свойства позволяет разработчикам изменять это поведение."
  syntax:
    content: public override string SchemaSeparator { get; set; }
    return:
      type: System.String
      description: "Символ, используемый в качестве разделителя схемы."
  overload: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  id: SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  id: UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  langs:
  - csharp
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает корректной форме этот идентификатор, заключенный в кавычки идентификатор. Сюда входят правильно учитываются кавычки, внедренные в идентификатор."
  syntax:
    content: public override string UnquoteIdentifier (string quotedIdentifier);
    parameters:
    - id: quotedIdentifier
      type: System.String
      description: "Идентификатор, который будет иметь удалены внедренные кавычки."
    return:
      type: System.String
      description: "Идентификатор без кавычек, в котором встроенные кавычки корректно сохранены."
  overload: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: System.Data.Common.DbCommandBuilder
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder()
  nameWithType: SqlCommandBuilder.SqlCommandBuilder()
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder()
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder(SqlDataAdapter)
  nameWithType: SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SqlCommandBuilder(SqlDataAdapter)
- uid: System.Data.SqlClient.SqlDataAdapter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataAdapter
  nameWithType: SqlDataAdapter
  fullName: System.Data.SqlClient.SqlDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation
- uid: System.Data.Common.CatalogLocation
  parent: System.Data.Common
  isExternal: false
  name: CatalogLocation
  nameWithType: CatalogLocation
  fullName: System.Data.Common.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
  fullName: System.Data.SqlClient.SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters(SqlCommand)
  nameWithType: SqlCommandBuilder.DeriveParameters(SqlCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(SqlCommand)
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand()
  nameWithType: SqlCommandBuilder.GetDeleteCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand()
  nameWithType: SqlCommandBuilder.GetInsertCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(Int32)
  nameWithType: SqlCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName(String)
  nameWithType: SqlCommandBuilder.GetParameterName(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterName(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder(Int32)
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(Int32)
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable(DbCommand)
  nameWithType: SqlCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(DbCommand)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand()
  nameWithType: SqlCommandBuilder.GetUpdateCommand()
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand()
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand(Boolean)
  nameWithType: SqlCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(Boolean)
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand(DbCommand)
  nameWithType: SqlCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(DbCommand)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier(String)
  nameWithType: SqlCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
  fullName: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
  fullName: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier(String)
  nameWithType: SqlCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(String)
- uid: System.Data.SqlClient.SqlCommandBuilder.#ctor*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SqlCommandBuilder
  nameWithType: SqlCommandBuilder.SqlCommandBuilder
- uid: System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: ApplyParameterInfo
  nameWithType: SqlCommandBuilder.ApplyParameterInfo
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogLocation*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: SqlCommandBuilder.CatalogLocation
- uid: System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: SqlCommandBuilder.CatalogSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.DataAdapter*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: SqlCommandBuilder.DataAdapter
- uid: System.Data.SqlClient.SqlCommandBuilder.DeriveParameters*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: DeriveParameters
  nameWithType: SqlCommandBuilder.DeriveParameters
- uid: System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetDeleteCommand
  nameWithType: SqlCommandBuilder.GetDeleteCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetInsertCommand
  nameWithType: SqlCommandBuilder.GetInsertCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterName*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterName
  nameWithType: SqlCommandBuilder.GetParameterName
- uid: System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder
  nameWithType: SqlCommandBuilder.GetParameterPlaceholder
- uid: System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlCommandBuilder.GetSchemaTable
- uid: System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: GetUpdateCommand
  nameWithType: SqlCommandBuilder.GetUpdateCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.InitializeCommand*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: InitializeCommand
  nameWithType: SqlCommandBuilder.InitializeCommand
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteIdentifier
  nameWithType: SqlCommandBuilder.QuoteIdentifier
- uid: System.Data.SqlClient.SqlCommandBuilder.QuotePrefix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: SqlCommandBuilder.QuotePrefix
- uid: System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: SqlCommandBuilder.QuoteSuffix
- uid: System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: SqlCommandBuilder.SchemaSeparator
- uid: System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler
  nameWithType: SqlCommandBuilder.SetRowUpdatingHandler
- uid: System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier*
  parent: System.Data.SqlClient.SqlCommandBuilder
  isExternal: false
  name: UnquoteIdentifier
  nameWithType: SqlCommandBuilder.UnquoteIdentifier
