### YamlMime:ManagedReference
items:
- uid: System.Data.IsolationLevel
  id: IsolationLevel
  children:
  - System.Data.IsolationLevel.Chaos
  - System.Data.IsolationLevel.ReadCommitted
  - System.Data.IsolationLevel.ReadUncommitted
  - System.Data.IsolationLevel.RepeatableRead
  - System.Data.IsolationLevel.Serializable
  - System.Data.IsolationLevel.Snapshot
  - System.Data.IsolationLevel.Unspecified
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
  type: Enum
  summary: "Указывает режим блокировки транзакций для соединения."
  remarks: "IsolationLevel значения используются с помощью поставщика данных .NET Framework, при выполнении транзакции.       IsolationLevel остается в силе, пока не будет явно изменен, но его можно изменить в любое время. Новое значение используется во время выполнения не на этапе синтаксического анализа. Если изменен во время транзакции, ожидаемое поведение сервера является применение нового уровня блокировки ко всем остальным операторам."
  example:
  - "This application demonstrates how to use IsolationLevel in <xref:System.Data.Common.DbTransaction>. The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:  \n  \n-   Dirty reads.  \n  \n-   Non-repeatable reads.  \n  \n-   Phantoms.  \n  \n This application will execute in the following isolation levels:  \n  \n-   ReadUncommitted  \n  \n-   ReadCommitted  \n  \n-   RepeatableRead  \n  \n-   Serializable  \n  \n-   Snapshot  \n  \n The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \n  \n-   In first thread, select the products(All).  \n  \n-   In the second thread, insert a new product.  \n  \n-   Commit the transaction in second thread.  \n  \n-   Select the products again.  \n  \n-   Commit the transaction in first thread.  \n  \n If the transaction allows the behavior, the two Select operations will get the different results.  \n  \n The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \n  \n-   In first thread, select the product(ProductId=1).  \n  \n-   In the second thread, update the Quantity value(ProductId=1).  \n  \n-   Commit the transaction in second thread.  \n  \n-   Select the product again.  \n  \n-   Commit the transaction in first thread.  \n  \n If the transaction allows the behavior, the two Select operations will get the different results.  \n  \n The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction. For the the Serializable transaction, threads will operate in the following order:  \n  \n-   In first thread, get the Price of product(ProductId=2) and store in the variable.  \n  \n-   In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).  \n  \n-   Commit the transaction in first thread.  \n  \n-   In second thread, get the Price of product(ProductId=1) and store in the variable.  \n  \n-   In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).  \n  \n-   Commit the transaction in second thread.  \n  \n Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).  \n  \n For the Snapshot transaction, threads will operate in the following order:  \n  \n-   In first thread, get the Price of product(ProductId=2) and store in the variable;  \n  \n-   In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).  \n  \n-   In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.  \n  \n-   In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).  \n  \n-   Commit the transaction in second thread.  \n  \n-   Commit the transaction in first thread.  \n  \n Now exchange the Price of products(ProductId=1 and ProductId=2).  \n  \n The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior. If the transaction allows the behavior, the threads will operate in the following order:  \n  \n-   In first thread, begin a transaction and add the Quantity value(ProductId=1).  \n  \n-   In the second thread, read the Quantity value and add the value again.  \n  \n-   Commit the transaction in second thread.  \n  \n-   Roll back the transaction in first thread.  \n  \n If the transaction allows the behavior, the Quantity value will be added twice.  \n  \n C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](http://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).  \n  \n [!code-cs[system_data_IsolationLevel#1](~/add/codesnippet/csharp/t-system.data.isolationl_1.cs)]\n [!code-vb[system_data_IsolationLevel#1](~/add/codesnippet/visualbasic/t-system.data.isolationl_1.vb)]"
  syntax:
    content: public enum IsolationLevel
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Data.IsolationLevel.Chaos
  id: Chaos
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: Chaos
  nameWithType: IsolationLevel.Chaos
  fullName: System.Data.IsolationLevel.Chaos
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Ожидающие изменения более изолированных транзакций не может быть перезаписан."
  syntax:
    content: Chaos
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.ReadCommitted
  id: ReadCommitted
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: ReadCommitted
  nameWithType: IsolationLevel.ReadCommitted
  fullName: System.Data.IsolationLevel.ReadCommitted
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Совмещаемые блокировки сохраняются, когда данные считываются для предотвращения чтения «грязных» данных, но данные могут быть изменены до окончания транзакции, что неповторяемое чтение или фантомные данные."
  syntax:
    content: ReadCommitted
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.ReadUncommitted
  id: ReadUncommitted
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: ReadUncommitted
  nameWithType: IsolationLevel.ReadUncommitted
  fullName: System.Data.IsolationLevel.ReadUncommitted
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "«Грязное» чтение — возможно, это означает что разделяемые блокировки и монопольные блокировки не выполняются."
  syntax:
    content: ReadUncommitted
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.RepeatableRead
  id: RepeatableRead
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: RepeatableRead
  nameWithType: IsolationLevel.RepeatableRead
  fullName: System.Data.IsolationLevel.RepeatableRead
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Блокировки помещаются на все данные, используемые в запросе, не позволяя другим пользователям обновлять их. Предотвращает неповторяемое чтение, но фантомных строк по-прежнему возможны."
  syntax:
    content: RepeatableRead
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.Serializable
  id: Serializable
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: Serializable
  nameWithType: IsolationLevel.Serializable
  fullName: System.Data.IsolationLevel.Serializable
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Блокировка диапазона <xref href=&quot;System.Data.DataSet&quot;> </xref>, не позволяя другим пользователям, обновления или вставки строк в набор данных до завершения транзакции."
  syntax:
    content: Serializable
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.Snapshot
  id: Snapshot
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: Snapshot
  nameWithType: IsolationLevel.Snapshot
  fullName: System.Data.IsolationLevel.Snapshot
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Уменьшает блокировку, сохраняя версию данных, приложение может считывать, а другой изменение тех же данных. Указывает, из одной транзакции нельзя увидеть изменения, сделанные в других транзакциях, даже если он запросит их повторно."
  syntax:
    content: Snapshot
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.IsolationLevel.Unspecified
  id: Unspecified
  parent: System.Data.IsolationLevel
  langs:
  - csharp
  name: Unspecified
  nameWithType: IsolationLevel.Unspecified
  fullName: System.Data.IsolationLevel.Unspecified
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Используется уровень изоляции, отличный от указанного, используется, но уровень не может быть определено."
  remarks: "При использовании <xref:System.Data.Odbc.OdbcTransaction>, если IsolationLevel не задано или имеет значение IsolationLevel `Unspecified`, транзакции выполняются в соответствии с уровнем изоляции, определенный драйвером, который используется.</xref:System.Data.Odbc.OdbcTransaction>"
  syntax:
    content: Unspecified
    return:
      type: System.Data.IsolationLevel
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Data.IsolationLevel.Chaos
  parent: System.Data.IsolationLevel
  isExternal: false
  name: Chaos
  nameWithType: IsolationLevel.Chaos
  fullName: System.Data.IsolationLevel.Chaos
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IsolationLevel.ReadCommitted
  parent: System.Data.IsolationLevel
  isExternal: false
  name: ReadCommitted
  nameWithType: IsolationLevel.ReadCommitted
  fullName: System.Data.IsolationLevel.ReadCommitted
- uid: System.Data.IsolationLevel.ReadUncommitted
  parent: System.Data.IsolationLevel
  isExternal: false
  name: ReadUncommitted
  nameWithType: IsolationLevel.ReadUncommitted
  fullName: System.Data.IsolationLevel.ReadUncommitted
- uid: System.Data.IsolationLevel.RepeatableRead
  parent: System.Data.IsolationLevel
  isExternal: false
  name: RepeatableRead
  nameWithType: IsolationLevel.RepeatableRead
  fullName: System.Data.IsolationLevel.RepeatableRead
- uid: System.Data.IsolationLevel.Serializable
  parent: System.Data.IsolationLevel
  isExternal: false
  name: Serializable
  nameWithType: IsolationLevel.Serializable
  fullName: System.Data.IsolationLevel.Serializable
- uid: System.Data.IsolationLevel.Snapshot
  parent: System.Data.IsolationLevel
  isExternal: false
  name: Snapshot
  nameWithType: IsolationLevel.Snapshot
  fullName: System.Data.IsolationLevel.Snapshot
- uid: System.Data.IsolationLevel.Unspecified
  parent: System.Data.IsolationLevel
  isExternal: false
  name: Unspecified
  nameWithType: IsolationLevel.Unspecified
  fullName: System.Data.IsolationLevel.Unspecified
