### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationElementCollection
  id: ConfigurationElementCollection
  children:
  - System.Configuration.ConfigurationElementCollection.#ctor
  - System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)
  - System.Configuration.ConfigurationElementCollection.AddElementName
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)
  - System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseClear
  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)
  - System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseGetAllKeys
  - System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)
  - System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)
  - System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)
  - System.Configuration.ConfigurationElementCollection.ClearElementName
  - System.Configuration.ConfigurationElementCollection.CollectionType
  - System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)
  - System.Configuration.ConfigurationElementCollection.Count
  - System.Configuration.ConfigurationElementCollection.CreateNewElement
  - System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)
  - System.Configuration.ConfigurationElementCollection.ElementName
  - System.Configuration.ConfigurationElementCollection.EmitClear
  - System.Configuration.ConfigurationElementCollection.Equals(System.Object)
  - System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.GetEnumerator
  - System.Configuration.ConfigurationElementCollection.GetHashCode
  - System.Configuration.ConfigurationElementCollection.IsElementName(System.String)
  - System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.IsModified
  - System.Configuration.ConfigurationElementCollection.IsReadOnly
  - System.Configuration.ConfigurationElementCollection.IsSynchronized
  - System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElementCollection.RemoveElementName
  - System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElementCollection.ResetModified
  - System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElementCollection.SetReadOnly
  - System.Configuration.ConfigurationElementCollection.SyncRoot
  - System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
  - System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  langs:
  - csharp
  name: ConfigurationElementCollection
  nameWithType: ConfigurationElementCollection
  fullName: System.Configuration.ConfigurationElementCollection
  type: Class
  summary: "Представляет элемент конфигурации, содержащий коллекцию дочерних элементов."
  remarks: "ConfigurationElementCollection представляет коллекцию элементов в файле конфигурации.      Настроек [!NOTE] настроек в файле конфигурации ссылается на основной XML-элемент или раздел. Простой элемент — XML-тег со связанными атрибутами, если таковые имеются. Простой элемент образует раздел. Сложные разделы могут содержать один или более простых элементов, коллекцию элементов и другие разделы.       Для работы с коллекцией используется ConfigurationElementCollection <xref:System.Configuration.ConfigurationElement>объектов.</xref:System.Configuration.ConfigurationElement> Реализации этого класса, чтобы добавить коллекцию настраиваемых <xref:System.Configuration.ConfigurationElement>элементов на <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following example shows how to use the ConfigurationElementCollection.  \n  \n The first example consists of three classes: `UrlsSection`, `UrlsCollection` and `UrlConfigElement`.The `UrlsSection` class uses the <xref:System.Configuration.ConfigurationCollectionAttribute> to define a custom configuration section. This section contains a URL collection (defined by the `UrlsCollection` class) of URL elements (defined by the `UrlConfigElement` class).  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#1](~/add/codesnippet/visualbasic/t-system.configuration.c_14_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#1](~/add/codesnippet/csharp/t-system.configuration.c_14_1.cs)]  \n  \n This second code example uses the classes specified before. You combine these two examples in a console application project.  \n  \n [!code-cs[System.Configuration.ConfigurationElementCollection#31](~/add/codesnippet/csharp/t-system.configuration.c_14_2.cs)]\n [!code-vb[System.Configuration.ConfigurationElementCollection#31](~/add/codesnippet/visualbasic/t-system.configuration.c_14_2.vb)]  \n  \n When you run the console application, an instance of the `UrlsSection` class is created and the following configuration elements are generated in the application configuration file:  \n  \n```  \n<configuration>  \n    <configSections>  \n        <section name=\"MyUrls\" type=\"UrlsSection,   \n          ConfigurationElementCollection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\" />  \n    </configSections>  \n    <MyUrls>  \n        <urls>  \n           <add name=\"Contoso\" url=\"http://www.contoso.com\" port=\"4040 />  \n        </urls>  \n    </MyUrls>  \n</configuration  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      public abstract class ConfigurationElementCollection : System.Configuration.ConfigurationElement, System.Collections.ICollection
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationElement
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Properties
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.#ctor
  id: '#ctor'
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ConfigurationElementCollection()
  nameWithType: ConfigurationElementCollection.ConfigurationElementCollection()
  fullName: System.Configuration.ConfigurationElementCollection.ConfigurationElementCollection()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> класса."
  remarks: "Создать новый экземпляр <xref:System.Configuration.ConfigurationElementCollection>при в приложении необходимо создать настраиваемый <xref:System.Configuration.ConfigurationElementCollection>.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElementCollection>"
  syntax:
    content: protected ConfigurationElementCollection ();
    parameters: []
  overload: System.Configuration.ConfigurationElementCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ConfigurationElementCollection(IComparer)
  nameWithType: ConfigurationElementCollection.ConfigurationElementCollection(IComparer)
  fullName: System.Configuration.ConfigurationElementCollection.ConfigurationElementCollection(IComparer)
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Создает новый экземпляр <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> класса."
  remarks: "<xref:System.Collections.IComparer>, Используется для настройки сравнения, используемая.</xref:System.Collections.IComparer> Например можно использовать сравнения без учета регистра вносить ключ без учета регистра."
  syntax:
    content: protected ConfigurationElementCollection (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Сравнения, используемая.</xref:System.Collections.IComparer>"
  overload: System.Configuration.ConfigurationElementCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>comparer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.AddElementName
  id: AddElementName
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: AddElementName
  nameWithType: ConfigurationElementCollection.AddElementName
  fullName: System.Configuration.ConfigurationElementCollection.AddElementName
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает имя <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> связанный с операцией добавления в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> при переопределении в производном классе."
  syntax:
    content: protected string AddElementName { get; set; }
    return:
      type: System.String
      description: "Имя элемента."
  overload: System.Configuration.ConfigurationElementCollection.AddElementName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Выбранное значение начинается с зарезервированного префикса «конфигурации» или «lock»."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)
  id: BaseAdd(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseAdd(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseAdd(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Добавляет элемент конфигурации <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  remarks: "Используйте метод BaseAdd для добавления новых <xref:System.Configuration.ConfigurationElement>в коллекцию.</xref:System.Configuration.ConfigurationElement> Переопределите в производном классе, если пользовательское поведение является обязательным, если такой элемент добавляется.       При добавлении элемент считается дубликатом, только если ключи идентичны, но значения различаются. Элементы с идентичными ключами и значениями принимаются без уведомления, поскольку еще не завершены. Тем не менее нельзя добавить элемент с идентичным ключом, но другим значением, так как отсутствует логика для выбора одного из конкурирующих значений должно быть."
  example:
  - "The following code example shows how to override the BaseAdd method and how to call it from an `Add` method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#2](~/add/codesnippet/visualbasic/158cf871-201b-4f7d-bc42-_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#2](~/add/codesnippet/csharp/158cf871-201b-4f7d-bc42-_1.cs)]"
  syntax:
    content: protected virtual void BaseAdd (System.Configuration.ConfigurationElement element);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "The <xref href=&quot;System.Configuration.ConfigurationElement&quot;></xref> to add."
  overload: System.Configuration.ConfigurationElementCollection.BaseAdd*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)
  id: BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseAdd(ConfigurationElement,Boolean)
  nameWithType: ConfigurationElementCollection.BaseAdd(ConfigurationElement,Boolean)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(ConfigurationElement,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Добавляет элемент конфигурации в коллекцию элементов конфигурации."
  remarks: "Использовать необязательный параметр `throwIfExists` создаст <xref:System.Exception>исключения Если указанный <xref:System.Configuration.ConfigurationElement>объект уже существует в <xref:System.Configuration.ConfigurationElementCollection>коллекции.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Exception>       Элемент считается дубликатом, только если ключи идентичны, но значения различаются. Элементы с идентичными ключами и значениями принимаются без уведомления, поскольку еще не завершены. Тем не менее нельзя добавить элемент с идентичным ключом, но другим значением, так как отсутствует логика для выбора одного из конкурирующих значений должно быть."
  syntax:
    content: protected void BaseAdd (System.Configuration.ConfigurationElement element, bool throwIfExists);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "The <xref href=&quot;System.Configuration.ConfigurationElement&quot;></xref> to add."
    - id: throwIfExists
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для создания исключения, если <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> указанного уже содержится в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.BaseAdd*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> Уже существует в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> и <code> throwIfExists </code> параметр <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)
  id: BaseAdd(System.Int32,System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseAdd(Int32,ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseAdd(Int32,ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(Int32,ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Добавляет элемент конфигурации в коллекцию элементов конфигурации."
  remarks: "Используйте `index` параметр для добавления <xref:System.Configuration.ConfigurationElement>объект <xref:System.Configuration.ConfigurationElementCollection>с определенной индексом.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual void BaseAdd (int index, System.Configuration.ConfigurationElement element);
    parameters:
    - id: index
      type: System.Int32
      description: "Индекс, по которому добавляется указанный <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "The <xref href=&quot;System.Configuration.ConfigurationElement&quot;></xref> to add."
  overload: System.Configuration.ConfigurationElementCollection.BaseAdd*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseClear
  id: BaseClear
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseClear()
  nameWithType: ConfigurationElementCollection.BaseClear()
  fullName: System.Configuration.ConfigurationElementCollection.BaseClear()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Удаляет все объекты элементов конфигурации из коллекции."
  remarks: "При вызове метода BaseClear, удаляются все <xref:System.Configuration.ConfigurationElement>объекты из коллекции.</xref:System.Configuration.ConfigurationElement> Он также вставляет `clear` директив в файл конфигурации."
  example:
  - "The following code example shows how to call the BaseClear method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#3](~/add/codesnippet/visualbasic/m-system.configuration.c_3_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#3](~/add/codesnippet/csharp/m-system.configuration.c_3_1.cs)]"
  syntax:
    content: protected void BaseClear ();
    parameters: []
  overload: System.Configuration.ConfigurationElementCollection.BaseClear*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The configuration is read-only.  \n  \n \\- or -  \n  \n A collection item has been locked in a higher-level configuration."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)
  id: BaseGet(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseGet(Int32)
  nameWithType: ConfigurationElementCollection.BaseGet(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGet(Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает элемент конфигурации по указанному индексу."
  remarks: ''
  example:
  - "The following code example shows how to call the BaseGet method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#8](~/add/codesnippet/visualbasic/m-system.configuration.c_6_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#8](~/add/codesnippet/csharp/m-system.configuration.c_6_1.cs)]"
  syntax:
    content: protected System.Configuration.ConfigurationElement BaseGet (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Индекс удаляемого <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для возврата."
    return:
      type: System.Configuration.ConfigurationElement
      description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> По указанному индексу."
  overload: System.Configuration.ConfigurationElementCollection.BaseGet*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>index</code> is less than <xref uid=\"langword_csharp_0\" name=\"0\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n There is no <xref href=\"System.Configuration.ConfigurationElement\"></xref> at the specified <code>index</code>."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)
  id: BaseGet(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseGet(Object)
  nameWithType: ConfigurationElementCollection.BaseGet(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGet(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает элемент конфигурации с указанным ключом."
  remarks: "Возвращает метод BaseGet `null` при наличии не <xref:System.Configuration.ConfigurationElement>объект с указанным ключом в коллекции.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following code example shows how to call the BaseGet method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#9](~/add/codesnippet/visualbasic/m-system.configuration.c_31_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#9](~/add/codesnippet/csharp/m-system.configuration.c_31_1.cs)]"
  syntax:
    content: protected System.Configuration.ConfigurationElement BaseGet (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ возвращаемого элемента."
    return:
      type: System.Configuration.ConfigurationElement
      description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> С указанным ключом; в противном случае — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.BaseGet*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys
  id: BaseGetAllKeys
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseGetAllKeys()
  nameWithType: ConfigurationElementCollection.BaseGetAllKeys()
  fullName: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает массив клавиш для всех элементов конфигурации, содержащихся в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  syntax:
    content: protected object[] BaseGetAllKeys ();
    parameters: []
    return:
      type: System.Object[]
      description: "Массив, содержащий ключи для всех <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объектов, содержащихся в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)
  id: BaseGetKey(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseGetKey(Int32)
  nameWithType: ConfigurationElementCollection.BaseGetKey(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGetKey(Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Получает ключ для <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> по указанному индексу."
  syntax:
    content: protected object BaseGetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Положение индекса для <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
    return:
      type: System.Object
      description: "Ключ для указанного <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.BaseGetKey*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>index</code> is less than <xref uid=\"langword_csharp_0\" name=\"0\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n There is no <xref href=\"System.Configuration.ConfigurationElement\"></xref> at the specified <code>index</code>."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)
  id: BaseIndexOf(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseIndexOf(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseIndexOf(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseIndexOf(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Определяет индекс указанного <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example shows how to call the BaseIndexOf method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#10](~/add/codesnippet/visualbasic/15cdbd2f-44ec-4b04-ad90-_1.vb)]"
  syntax:
    content: protected int BaseIndexOf (System.Configuration.ConfigurationElement element);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> Для указанного индекса."
    return:
      type: System.Int32
      description: "Индекс указанного <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>; в противном случае — значение -1."
  overload: System.Configuration.ConfigurationElementCollection.BaseIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)
  id: BaseIsRemoved(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseIsRemoved(Object)
  nameWithType: ConfigurationElementCollection.BaseIsRemoved(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseIsRemoved(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> с указанным ключом удален из <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  syntax:
    content: protected bool BaseIsRemoved (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ элемента, который требуется проверить."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> с указанным ключом был удален; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.BaseIsRemoved*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)
  id: BaseRemove(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseRemove(Object)
  nameWithType: ConfigurationElementCollection.BaseRemove(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseRemove(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Удаляет <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> из коллекции."
  remarks: "Вставляет метод BaseRemove `<remove>` директив в файл конфигурации для <xref:System.Configuration.ConfigurationElement>с указанным ключом.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following code example shows how to call the BaseRemove method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#3](~/add/codesnippet/visualbasic/m-system.configuration.c_35_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#3](~/add/codesnippet/csharp/m-system.configuration.c_35_1.cs)]"
  syntax:
    content: protected void BaseRemove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для удаления."
  overload: System.Configuration.ConfigurationElementCollection.BaseRemove*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Не <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> с указанным ключ существует в коллекции, элемент уже был удален или не удается удалить элемент, так как значение его <xref:System.Configuration.ConfigurationProperty.Type*>не <xref href=&quot;System.Configuration.ConfigurationElementCollectionType&quot;> </xref>.</xref:System.Configuration.ConfigurationProperty.Type*>"
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)
  id: BaseRemoveAt(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: BaseRemoveAt(Int32)
  nameWithType: ConfigurationElementCollection.BaseRemoveAt(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseRemoveAt(Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Удаляет <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> по указанному индексу."
  remarks: "Вставляет метод BaseRemoveAt `<remove>` директив в файл конфигурации элемента по указанному индексу."
  syntax:
    content: protected void BaseRemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Индекс удаляемого <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для удаления."
  overload: System.Configuration.ConfigurationElementCollection.BaseRemoveAt*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The configuration is read-only.  \n  \n \\- or -  \n  \n <code>index</code> is less than <xref uid=\"langword_csharp_0\" name=\"0\" href=\"\"></xref> or greater than the number of <xref href=\"System.Configuration.ConfigurationElement\"></xref> objects in the collection.  \n  \n \\- or -  \n  \n The <xref href=\"System.Configuration.ConfigurationElement\"></xref> object has already been removed.  \n  \n \\- or -  \n  \n The value of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object has been locked at a higher level.  \n  \n \\- or -  \n  \n The <xref href=\"System.Configuration.ConfigurationElement\"></xref> object was inherited.  \n  \n \\- or -  \n  \n The value of the <xref href=\"System.Configuration.ConfigurationElement\"></xref> object's <xref:System.Configuration.ConfigurationProperty.Type*> is not <xref href=\"System.Configuration.ConfigurationElementCollectionType\"></xref> or <xref href=\"System.Configuration.ConfigurationElementCollectionType\"></xref>."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.ClearElementName
  id: ClearElementName
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ClearElementName
  nameWithType: ConfigurationElementCollection.ClearElementName
  fullName: System.Configuration.ConfigurationElementCollection.ClearElementName
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает имя для <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> связанный с операцией, снимите флажок в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> при переопределении в производном классе."
  syntax:
    content: protected string ClearElementName { get; set; }
    return:
      type: System.String
      description: "Имя элемента."
  overload: System.Configuration.ConfigurationElementCollection.ClearElementName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Выбранное значение начинается с зарезервированного префикса «конфигурации» или «lock»."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.CollectionType
  id: CollectionType
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: CollectionType
  nameWithType: ConfigurationElementCollection.CollectionType
  fullName: System.Configuration.ConfigurationElementCollection.CollectionType
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает тип <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  remarks: "Тип может быть <xref:System.Configuration.ConfigurationElementCollectionType>или <xref:System.Configuration.ConfigurationElementCollectionType>поля.</xref:System.Configuration.ConfigurationElementCollectionType> </xref:System.Configuration.ConfigurationElementCollectionType> Дополнительные сведения см. в разделе <xref:System.Configuration.ConfigurationElementCollectionType>.</xref:System.Configuration.ConfigurationElementCollectionType>"
  example:
  - "The following code example shows how to get the CollectionType property.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#5](~/add/codesnippet/visualbasic/p-system.configuration.c_6_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#5](~/add/codesnippet/csharp/p-system.configuration.c_6_1.cs)]"
  syntax:
    content: public virtual System.Configuration.ConfigurationElementCollectionType CollectionType { get; }
    return:
      type: System.Configuration.ConfigurationElementCollectionType
      description: "<xref href=&quot;System.Configuration.ConfigurationElementCollectionType&quot;> </xref> Этой коллекции."
  overload: System.Configuration.ConfigurationElementCollection.CollectionType*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)
  id: CopyTo(System.Configuration.ConfigurationElement[],System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: CopyTo(ConfigurationElement[],Int32)
  nameWithType: ConfigurationElementCollection.CopyTo(ConfigurationElement[],Int32)
  fullName: System.Configuration.ConfigurationElementCollection.CopyTo(ConfigurationElement[],Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Копирует содержимое <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> в массив."
  syntax:
    content: public void CopyTo (System.Configuration.ConfigurationElement[] array, int index);
    parameters:
    - id: array
      type: System.Configuration.ConfigurationElement[]
      description: "Массив, в который следует скопировать содержимое <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
    - id: index
      type: System.Int32
      description: "Расположение индекса, с которого начинается копирование."
  overload: System.Configuration.ConfigurationElementCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.Count
  id: Count
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: Count
  nameWithType: ConfigurationElementCollection.Count
  fullName: System.Configuration.ConfigurationElementCollection.Count
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает количество элементов в коллекции."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Число элементов в коллекции."
  overload: System.Configuration.ConfigurationElementCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.CreateNewElement
  id: CreateNewElement
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: CreateNewElement()
  nameWithType: ConfigurationElementCollection.CreateNewElement()
  fullName: System.Configuration.ConfigurationElementCollection.CreateNewElement()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "При переопределении в производном классе создает новый <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  remarks: "Переопределите метод CreateNewElement для создания пользовательских <xref:System.Configuration.ConfigurationElement>объектов определенного типа.</xref:System.Configuration.ConfigurationElement> При загрузке коллекции из файла конфигурации, CreateNewElement вызывается для создания отдельных элементов. CreateNewElement должен переопределяться в классах, производных от <xref:System.Configuration.ConfigurationElementCollection>класса.</xref:System.Configuration.ConfigurationElementCollection>"
  example:
  - "The following code example shows how to override the CreateNewElement method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#6](~/add/codesnippet/visualbasic/m-system.configuration.c_38_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#6](~/add/codesnippet/csharp/m-system.configuration.c_38_1.cs)]"
  syntax:
    content: protected abstract System.Configuration.ConfigurationElement CreateNewElement ();
    parameters: []
    return:
      type: System.Configuration.ConfigurationElement
      description: "Только что созданный объект <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.CreateNewElement*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)
  id: CreateNewElement(System.String)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: CreateNewElement(String)
  nameWithType: ConfigurationElementCollection.CreateNewElement(String)
  fullName: System.Configuration.ConfigurationElementCollection.CreateNewElement(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Создает новый <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> при переопределении в производном классе."
  remarks: "Переопределите метод CreateNewElement для создания пользовательских <xref:System.Configuration.ConfigurationElement>объектов определенного типа.</xref:System.Configuration.ConfigurationElement> При загрузке коллекции из файла конфигурации, CreateNewElement вызывается для создания отдельных элементов. CreateNewElement должен переопределяться в классах, производных от <xref:System.Configuration.ConfigurationElementCollection>класса.</xref:System.Configuration.ConfigurationElementCollection>"
  syntax:
    content: protected virtual System.Configuration.ConfigurationElement CreateNewElement (string elementName);
    parameters:
    - id: elementName
      type: System.String
      description: "Имя <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для создания."
    return:
      type: System.Configuration.ConfigurationElement
      description: "Новый <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> с указанным именем."
  overload: System.Configuration.ConfigurationElementCollection.CreateNewElement*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.ElementName
  id: ElementName
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ElementName
  nameWithType: ConfigurationElementCollection.ElementName
  fullName: System.Configuration.ConfigurationElementCollection.ElementName
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает имя, используемое для идентификации данной коллекции элементов в файле конфигурации при переопределении в производном классе."
  remarks: "Переопределите свойство ElementName для имени пользовательского <xref:System.Configuration.ConfigurationElementCollection>.</xref:System.Configuration.ConfigurationElementCollection>"
  syntax:
    content: protected virtual string ElementName { get; }
    return:
      type: System.String
      description: "Имя коллекции. в противном случае — пустая строка. Значение по умолчанию — пустая строка."
  overload: System.Configuration.ConfigurationElementCollection.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.EmitClear
  id: EmitClear
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: EmitClear
  nameWithType: ConfigurationElementCollection.EmitClear
  fullName: System.Configuration.ConfigurationElementCollection.EmitClear
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает значение, указывающее, удаляются ли коллекция."
  remarks: "Свойства EmitClear `true` вызывает `<clear>` директивы для записи в файл конфигурации при сериализации коллекции."
  syntax:
    content: public bool EmitClear { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если коллекция был очищен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.EmitClear*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Конфигурация доступна только для чтения."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ConfigurationElementCollection.Equals(Object)
  fullName: System.Configuration.ConfigurationElementCollection.Equals(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Сравнивает <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> в указанный объект."
  syntax:
    content: public override bool Equals (object compareTo);
    parameters:
    - id: compareTo
      type: System.Object
      description: "Объект для сравнения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если объект, сравниваемый с совпадает с текущим <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> экземпляра; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)
  id: GetElementKey(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: GetElementKey(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.GetElementKey(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.GetElementKey(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает ключ элемента для указанного элемента конфигурации при переопределении в производном классе."
  remarks: ''
  example:
  - "The following code example shows how to override GetElementKey method.  \n  \n [!code-vb[System.Configuration.ConfigurationElementCollection#7](~/add/codesnippet/visualbasic/85b3e1dd-d2ae-4572-b7ba-_1.vb)]\n [!code-cs[System.Configuration.ConfigurationElementCollection#7](~/add/codesnippet/csharp/85b3e1dd-d2ae-4572-b7ba-_1.cs)]"
  syntax:
    content: protected abstract object GetElementKey (System.Configuration.ConfigurationElement element);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> Для возвращается ключ."
    return:
      type: System.Object
      description: "<xref:System.Object>, Выступающий в качестве ключа для указанного <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>.</xref:System.Object>"
  overload: System.Configuration.ConfigurationElementCollection.GetElementKey*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ConfigurationElementCollection.GetEnumerator()
  fullName: System.Configuration.ConfigurationElementCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref:System.Collections.IEnumerator>который используется для итерации по <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Который используется для итерации по <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Configuration.ConfigurationElementCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.GetHashCode
  id: GetHashCode
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ConfigurationElementCollection.GetHashCode()
  fullName: System.Configuration.ConfigurationElementCollection.GetHashCode()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Получает уникальное значение, представляющее <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> экземпляра."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Уникальное значение, представляющее <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> текущего экземпляра."
  overload: System.Configuration.ConfigurationElementCollection.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.IsElementName(System.String)
  id: IsElementName(System.String)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: IsElementName(String)
  nameWithType: ConfigurationElementCollection.IsElementName(String)
  fullName: System.Configuration.ConfigurationElementCollection.IsElementName(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли указанный <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> существует в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  remarks: "Переопределите метод IsElementName к пользовательское поведение."
  syntax:
    content: protected virtual bool IsElementName (string elementName);
    parameters:
    - id: elementName
      type: System.String
      description: "Имя элемента, который требуется проверить."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент существует в коллекции. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.IsElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)
  id: IsElementRemovable(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: IsElementRemovable(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.IsElementRemovable(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.IsElementRemovable(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли указанный <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> могут быть удалены из <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  remarks: "IsElementRemovable запрос перед удалением элемента коллекции."
  syntax:
    content: protected virtual bool IsElementRemovable (System.Configuration.ConfigurationElement element);
    parameters:
    - id: element
      type: System.Configuration.ConfigurationElement
      description: "Элемент для проверки."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> может быть удален из этого <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.IsElementRemovable*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.IsModified
  id: IsModified
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: IsModified()
  nameWithType: ConfigurationElementCollection.IsModified()
  fullName: System.Configuration.ConfigurationElementCollection.IsModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли это <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> был изменен с момента последнего сохранения или загрузки при переопределении в производном классе."
  remarks: "Если <xref:System.Configuration.ConfigurationElement.IsModified%2A>метод любого <xref:System.Configuration.ConfigurationElement>внутри <xref:System.Configuration.ConfigurationElementCollection>возвращает `true`, метод IsModified всей коллекции возвращает `true` также.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationElement.IsModified%2A>"
  syntax:
    content: protected override bool IsModified ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если любой содержащийся элемент был изменен; в противном случае<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>"
  overload: System.Configuration.ConfigurationElementCollection.IsModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: ConfigurationElementCollection.IsReadOnly()
  fullName: System.Configuration.ConfigurationElementCollection.IsReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> объект доступен только для чтения."
  remarks: "Система определяет элементы конфигурации, которые не могут быть изменены. Вызовите этот метод, чтобы определить, можно ли изменять элементы."
  syntax:
    content: public override bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> объект только для чтения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ConfigurationElementCollection.IsSynchronized
  fullName: System.Configuration.ConfigurationElementCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, является ли доступ к коллекции синхронизированным."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> является синхронизированным; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  id: OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String,XmlReader)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Приводит к возникновению исключения."
  remarks: "OnDeserializeUnrecognizedElement вызывается при чтении конфигурации нераспознанный элемент из файла конфигурации.       Переопределите этот метод для предоставления обычной обработки нераспознанных элементов конфигурации из файла конфигурации. Значение по умолчанию возвращает значение, `false`, приводит к возникновению исключения."
  syntax:
    content: protected override bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);
    parameters:
    - id: elementName
      type: System.String
      description: "Имя неопознанного элемента."
    - id: reader
      type: System.Xml.XmlReader
      description: "Входной поток, который считывает XML из файла конфигурации."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если нераспознанный элемент был успешно десериализован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Элемент, заданный в <code> elementName </code> — <xref uid=&quot;langword_csharp_&lt;clear&gt;&quot; name=&quot;&lt;clear&gt;&quot; href=&quot;&quot;> </xref> элемента."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>elementName</code>начинается с зарезервированного префикса «конфигурации» или «lock»."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.RemoveElementName
  id: RemoveElementName
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: RemoveElementName
  nameWithType: ConfigurationElementCollection.RemoveElementName
  fullName: System.Configuration.ConfigurationElementCollection.RemoveElementName
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает имя <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для связи с операции удаления в <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> при переопределении в производном классе."
  syntax:
    content: protected string RemoveElementName { get; set; }
    return:
      type: System.String
      description: "Имя элемента."
  overload: System.Configuration.ConfigurationElementCollection.RemoveElementName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Выбранное значение начинается с зарезервированного префикса «конфигурации» или «lock»."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)
  id: Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.Reset(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Сбрасывает <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> в неизмененное состояние при переопределении в производном классе."
  remarks: "По умолчанию для метода сброса выполняется снимите все измененные элементы <xref:System.Configuration.ConfigurationElementCollection>объект содержит и присваивать измененным элементам значения, указанного в их родительском файле конфигурации.</xref:System.Configuration.ConfigurationElementCollection> Если любой элемент в <xref:System.Configuration.ConfigurationElementCollection>имеет дочерние элементы, называется также сброса для дочерних элементов.</xref:System.Configuration.ConfigurationElementCollection>"
  syntax:
    content: protected override void Reset (System.Configuration.ConfigurationElement parentElement);
    parameters:
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "<xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> Представляющий родительского элемента коллекции, если имеются; в противном случае <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.ResetModified
  id: ResetModified
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ResetModified()
  nameWithType: ConfigurationElementCollection.ResetModified()
  fullName: System.Configuration.ConfigurationElementCollection.ResetModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Сбрасывает значение <xref:System.Configuration.ConfigurationElementCollection.IsModified*>Свойства <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> при переопределении в производном классе.</xref:System.Configuration.ConfigurationElementCollection.IsModified*>"
  remarks: "Метод ResetModified определяет, будут ли элементы данной коллекции будет записываться в файл конфигурации при обновлении конфигурации."
  syntax:
    content: protected override void ResetModified ();
    parameters: []
  overload: System.Configuration.ConfigurationElementCollection.ResetModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElementCollection.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElementCollection.SerializeElement(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Записывает данные конфигурации в элемент XML в файле конфигурации при переопределении в производном классе."
  remarks: "Метод SerializeElement записывает содержимое элементов конфигурации, содержащихся в коллекции и все вложенные элементы, содержащиеся в них в файле конфигурации. Переопределите SerializeElement для предоставления пользовательской записи процедуры из содержимого коллекции и вложенные элементы."
  syntax:
    content: protected override bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "Выходной поток, который записывает XML в файле конфигурации."
    - id: serializeCollectionKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для сериализации ключа коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> была успешно записана в файл конфигурации."
  overload: System.Configuration.ConfigurationElementCollection.SerializeElement*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Один из элементов в коллекции был добавлен или изменен и начинается с зарезервированного префикса «config» или «lock»."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.SetReadOnly
  id: SetReadOnly
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: SetReadOnly()
  nameWithType: ConfigurationElementCollection.SetReadOnly()
  fullName: System.Configuration.ConfigurationElementCollection.SetReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Наборы <xref:System.Configuration.ConfigurationElementCollection.IsReadOnly*>свойство <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> объекта и для всех дочерних элементов.</xref:System.Configuration.ConfigurationElementCollection.IsReadOnly*>"
  remarks: "Этот метод используется внутренне для неизменяемые элементы системы конфигурации, не может быть изменено. Чтобы определить, какие элементы являются изменяемыми, вызовите <xref:System.Configuration.ConfigurationElementCollection.IsReadOnly%2A>метод.</xref:System.Configuration.ConfigurationElementCollection.IsReadOnly%2A>"
  syntax:
    content: protected override void SetReadOnly ();
    parameters: []
  overload: System.Configuration.ConfigurationElementCollection.SetReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.SyncRoot
  id: SyncRoot
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ConfigurationElementCollection.SyncRoot
  fullName: System.Configuration.ConfigurationElementCollection.SyncRoot
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает объект, используемый для синхронизации доступа к <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, используемый для синхронизации доступа к <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConfigurationElementCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Configuration.ConfigurationElementCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Копирует <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> в массив."
  syntax:
    content: void ICollection.CopyTo (Array arr, int index);
    parameters:
    - id: arr
      type: System.Array
      description: "Массив, в который следует скопировать это <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref>."
    - id: index
      type: System.Int32
      description: "Расположение индекса, с которого начинается копирование."
  overload: System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
  id: ThrowOnDuplicate
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: ThrowOnDuplicate
  nameWithType: ConfigurationElementCollection.ThrowOnDuplicate
  fullName: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, является ли исключение попытка добавить дубликат <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> приведет к созданию исключения."
  remarks: "При добавлении дублирующим элементом, создается исключение, если <xref:System.Configuration.ConfigurationElementCollection.CollectionType%2A>значение элемента является либо <xref:System.Configuration.ConfigurationElementCollectionType>или <xref:System.Configuration.ConfigurationElementCollectionType>.</xref:System.Configuration.ConfigurationElementCollectionType> </xref:System.Configuration.ConfigurationElementCollectionType> </xref:System.Configuration.ConfigurationElementCollection.CollectionType%2A>       Обратите внимание, что элементы с идентичными ключами и значениями не считаются дубликатами и принимаются без уведомления. Только элементы с идентичными ключами, но разными значениями, считаются дубликатами. Дополнительные сведения см. в разделе «Примечания» <xref:System.Configuration.ConfigurationElementCollection.BaseAdd%2A>метод.</xref:System.Configuration.ConfigurationElementCollection.BaseAdd%2A>"
  syntax:
    content: protected virtual bool ThrowOnDuplicate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если попытка добавить дубликат <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> к этому <xref href=&quot;System.Configuration.ConfigurationElementCollection&quot;> </xref> вызовет исключение будет вызываться исключение; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  id: Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElementCollection
  langs:
  - csharp
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElementCollection.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElementCollection.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Отменяет эффект слияния данных конфигурации на разных уровнях иерархии конфигурации"
  remarks: "Отменить объединение метод отменяет эффект слияния данных конфигурации на разных уровнях иерархии конфигурации. Это позволяет конфигурацию, заданную на текущем уровне иерархии из, заданной на родительских уровнях, перед выполнением сериализации отличить.       Разделите вызывается системой для нового временного элемента, чтобы сравнить родительский объект и исходный объект. На основе <xref:System.Configuration.ConfigurationSaveMode>значение, метод создает временный объект, содержащий данные, необходимые для сериализации.</xref:System.Configuration.ConfigurationSaveMode> Дополнительные сведения о режимах см. в разделе <xref:System.Configuration.ConfigurationSaveMode>.</xref:System.Configuration.ConfigurationSaveMode>"
  syntax:
    content: protected override void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);
    parameters:
    - id: sourceElement
      type: System.Configuration.ConfigurationElement
      description: "Объект <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект текущего уровня, содержащий объединенное представление свойств."
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "Родительский <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект текущего элемента или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если это верхний уровень."
    - id: saveMode
      type: System.Configuration.ConfigurationSaveMode
      description: "Объект <xref href=&quot;System.Configuration.ConfigurationSaveMode&quot;> </xref> перечислимое значение, которое определяет, какие значения свойств для включения."
  overload: System.Configuration.ConfigurationElementCollection.Unmerge*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationElement
  isExternal: false
  name: System.Configuration.ConfigurationElement
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationElementCollection.#ctor
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ConfigurationElementCollection()
  nameWithType: ConfigurationElementCollection.ConfigurationElementCollection()
  fullName: System.Configuration.ConfigurationElementCollection.ConfigurationElementCollection()
- uid: System.Configuration.ConfigurationElementCollection.#ctor(System.Collections.IComparer)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ConfigurationElementCollection(IComparer)
  nameWithType: ConfigurationElementCollection.ConfigurationElementCollection(IComparer)
  fullName: System.Configuration.ConfigurationElementCollection.ConfigurationElementCollection(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Configuration.ConfigurationElementCollection.AddElementName
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: AddElementName
  nameWithType: ConfigurationElementCollection.AddElementName
  fullName: System.Configuration.ConfigurationElementCollection.AddElementName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseAdd(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseAdd(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(ConfigurationElement)
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement,System.Boolean)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseAdd(ConfigurationElement,Boolean)
  nameWithType: ConfigurationElementCollection.BaseAdd(ConfigurationElement,Boolean)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(ConfigurationElement,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd(System.Int32,System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseAdd(Int32,ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseAdd(Int32,ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseAdd(Int32,ConfigurationElement)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationElementCollection.BaseClear
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseClear()
  nameWithType: ConfigurationElementCollection.BaseClear()
  fullName: System.Configuration.ConfigurationElementCollection.BaseClear()
- uid: System.Configuration.ConfigurationElementCollection.BaseGet(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGet(Int32)
  nameWithType: ConfigurationElementCollection.BaseGet(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGet(Int32)
- uid: System.Configuration.ConfigurationElementCollection.BaseGet(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGet(Object)
  nameWithType: ConfigurationElementCollection.BaseGet(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGet(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGetAllKeys()
  nameWithType: ConfigurationElementCollection.BaseGetAllKeys()
  fullName: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Configuration.ConfigurationElementCollection.BaseGetKey(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGetKey(Int32)
  nameWithType: ConfigurationElementCollection.BaseGetKey(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseGetKey(Int32)
- uid: System.Configuration.ConfigurationElementCollection.BaseIndexOf(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseIndexOf(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.BaseIndexOf(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.BaseIndexOf(ConfigurationElement)
- uid: System.Configuration.ConfigurationElementCollection.BaseIsRemoved(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseIsRemoved(Object)
  nameWithType: ConfigurationElementCollection.BaseIsRemoved(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseIsRemoved(Object)
- uid: System.Configuration.ConfigurationElementCollection.BaseRemove(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseRemove(Object)
  nameWithType: ConfigurationElementCollection.BaseRemove(Object)
  fullName: System.Configuration.ConfigurationElementCollection.BaseRemove(Object)
- uid: System.Configuration.ConfigurationElementCollection.BaseRemoveAt(System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseRemoveAt(Int32)
  nameWithType: ConfigurationElementCollection.BaseRemoveAt(Int32)
  fullName: System.Configuration.ConfigurationElementCollection.BaseRemoveAt(Int32)
- uid: System.Configuration.ConfigurationElementCollection.ClearElementName
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ClearElementName
  nameWithType: ConfigurationElementCollection.ClearElementName
  fullName: System.Configuration.ConfigurationElementCollection.ClearElementName
- uid: System.Configuration.ConfigurationElementCollection.CollectionType
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CollectionType
  nameWithType: ConfigurationElementCollection.CollectionType
  fullName: System.Configuration.ConfigurationElementCollection.CollectionType
- uid: System.Configuration.ConfigurationElementCollectionType
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElementCollectionType
  nameWithType: ConfigurationElementCollectionType
  fullName: System.Configuration.ConfigurationElementCollectionType
- uid: System.Configuration.ConfigurationElementCollection.CopyTo(System.Configuration.ConfigurationElement[],System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CopyTo(ConfigurationElement[],Int32)
  nameWithType: ConfigurationElementCollection.CopyTo(ConfigurationElement[],Int32)
  fullName: System.Configuration.ConfigurationElementCollection.CopyTo(ConfigurationElement[],Int32)
- uid: System.Configuration.ConfigurationElement[]
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement[]
  spec.csharp:
  - uid: System.Configuration.ConfigurationElement
    name: ConfigurationElement
    nameWithType: ConfigurationElement
    fullName: ConfigurationElement[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Configuration.ConfigurationElementCollection.Count
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Count
  nameWithType: ConfigurationElementCollection.Count
  fullName: System.Configuration.ConfigurationElementCollection.Count
- uid: System.Configuration.ConfigurationElementCollection.CreateNewElement
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CreateNewElement()
  nameWithType: ConfigurationElementCollection.CreateNewElement()
  fullName: System.Configuration.ConfigurationElementCollection.CreateNewElement()
- uid: System.Configuration.ConfigurationElementCollection.CreateNewElement(System.String)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CreateNewElement(String)
  nameWithType: ConfigurationElementCollection.CreateNewElement(String)
  fullName: System.Configuration.ConfigurationElementCollection.CreateNewElement(String)
- uid: System.Configuration.ConfigurationElementCollection.ElementName
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ElementName
  nameWithType: ConfigurationElementCollection.ElementName
  fullName: System.Configuration.ConfigurationElementCollection.ElementName
- uid: System.Configuration.ConfigurationElementCollection.EmitClear
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: EmitClear
  nameWithType: ConfigurationElementCollection.EmitClear
  fullName: System.Configuration.ConfigurationElementCollection.EmitClear
- uid: System.Configuration.ConfigurationElementCollection.Equals(System.Object)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Equals(Object)
  nameWithType: ConfigurationElementCollection.Equals(Object)
  fullName: System.Configuration.ConfigurationElementCollection.Equals(Object)
- uid: System.Configuration.ConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetElementKey(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.GetElementKey(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.GetElementKey(ConfigurationElement)
- uid: System.Configuration.ConfigurationElementCollection.GetEnumerator
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ConfigurationElementCollection.GetEnumerator()
  fullName: System.Configuration.ConfigurationElementCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Configuration.ConfigurationElementCollection.GetHashCode
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetHashCode()
  nameWithType: ConfigurationElementCollection.GetHashCode()
  fullName: System.Configuration.ConfigurationElementCollection.GetHashCode()
- uid: System.Configuration.ConfigurationElementCollection.IsElementName(System.String)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsElementName(String)
  nameWithType: ConfigurationElementCollection.IsElementName(String)
  fullName: System.Configuration.ConfigurationElementCollection.IsElementName(String)
- uid: System.Configuration.ConfigurationElementCollection.IsElementRemovable(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsElementRemovable(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.IsElementRemovable(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.IsElementRemovable(ConfigurationElement)
- uid: System.Configuration.ConfigurationElementCollection.IsModified
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsModified()
  nameWithType: ConfigurationElementCollection.IsModified()
  fullName: System.Configuration.ConfigurationElementCollection.IsModified()
- uid: System.Configuration.ConfigurationElementCollection.IsReadOnly
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsReadOnly()
  nameWithType: ConfigurationElementCollection.IsReadOnly()
  fullName: System.Configuration.ConfigurationElementCollection.IsReadOnly()
- uid: System.Configuration.ConfigurationElementCollection.IsSynchronized
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ConfigurationElementCollection.IsSynchronized
  fullName: System.Configuration.ConfigurationElementCollection.IsSynchronized
- uid: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement(String,XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Configuration.ConfigurationElementCollection.RemoveElementName
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: RemoveElementName
  nameWithType: ConfigurationElementCollection.RemoveElementName
  fullName: System.Configuration.ConfigurationElementCollection.RemoveElementName
- uid: System.Configuration.ConfigurationElementCollection.Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElementCollection.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElementCollection.Reset(ConfigurationElement)
- uid: System.Configuration.ConfigurationElementCollection.ResetModified
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ResetModified()
  nameWithType: ConfigurationElementCollection.ResetModified()
  fullName: System.Configuration.ConfigurationElementCollection.ResetModified()
- uid: System.Configuration.ConfigurationElementCollection.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElementCollection.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElementCollection.SerializeElement(XmlWriter,Boolean)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Configuration.ConfigurationElementCollection.SetReadOnly
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SetReadOnly()
  nameWithType: ConfigurationElementCollection.SetReadOnly()
  fullName: System.Configuration.ConfigurationElementCollection.SetReadOnly()
- uid: System.Configuration.ConfigurationElementCollection.SyncRoot
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SyncRoot
  nameWithType: ConfigurationElementCollection.SyncRoot
  fullName: System.Configuration.ConfigurationElementCollection.SyncRoot
- uid: System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConfigurationElementCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Configuration.ConfigurationElementCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ThrowOnDuplicate
  nameWithType: ConfigurationElementCollection.ThrowOnDuplicate
  fullName: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate
- uid: System.Configuration.ConfigurationElementCollection.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElementCollection.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElementCollection.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
- uid: System.Configuration.ConfigurationSaveMode
  parent: System.Configuration
  isExternal: false
  name: ConfigurationSaveMode
  nameWithType: ConfigurationSaveMode
  fullName: System.Configuration.ConfigurationSaveMode
- uid: System.Configuration.ConfigurationElementCollection.#ctor*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ConfigurationElementCollection
  nameWithType: ConfigurationElementCollection.ConfigurationElementCollection
- uid: System.Configuration.ConfigurationElementCollection.AddElementName*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: AddElementName
  nameWithType: ConfigurationElementCollection.AddElementName
- uid: System.Configuration.ConfigurationElementCollection.BaseAdd*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseAdd
  nameWithType: ConfigurationElementCollection.BaseAdd
- uid: System.Configuration.ConfigurationElementCollection.BaseClear*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseClear
  nameWithType: ConfigurationElementCollection.BaseClear
- uid: System.Configuration.ConfigurationElementCollection.BaseGet*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGet
  nameWithType: ConfigurationElementCollection.BaseGet
- uid: System.Configuration.ConfigurationElementCollection.BaseGetAllKeys*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGetAllKeys
  nameWithType: ConfigurationElementCollection.BaseGetAllKeys
- uid: System.Configuration.ConfigurationElementCollection.BaseGetKey*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseGetKey
  nameWithType: ConfigurationElementCollection.BaseGetKey
- uid: System.Configuration.ConfigurationElementCollection.BaseIndexOf*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseIndexOf
  nameWithType: ConfigurationElementCollection.BaseIndexOf
- uid: System.Configuration.ConfigurationElementCollection.BaseIsRemoved*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseIsRemoved
  nameWithType: ConfigurationElementCollection.BaseIsRemoved
- uid: System.Configuration.ConfigurationElementCollection.BaseRemove*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseRemove
  nameWithType: ConfigurationElementCollection.BaseRemove
- uid: System.Configuration.ConfigurationElementCollection.BaseRemoveAt*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: BaseRemoveAt
  nameWithType: ConfigurationElementCollection.BaseRemoveAt
- uid: System.Configuration.ConfigurationElementCollection.ClearElementName*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ClearElementName
  nameWithType: ConfigurationElementCollection.ClearElementName
- uid: System.Configuration.ConfigurationElementCollection.CollectionType*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CollectionType
  nameWithType: ConfigurationElementCollection.CollectionType
- uid: System.Configuration.ConfigurationElementCollection.CopyTo*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CopyTo
  nameWithType: ConfigurationElementCollection.CopyTo
- uid: System.Configuration.ConfigurationElementCollection.Count*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Count
  nameWithType: ConfigurationElementCollection.Count
- uid: System.Configuration.ConfigurationElementCollection.CreateNewElement*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: CreateNewElement
  nameWithType: ConfigurationElementCollection.CreateNewElement
- uid: System.Configuration.ConfigurationElementCollection.ElementName*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ElementName
  nameWithType: ConfigurationElementCollection.ElementName
- uid: System.Configuration.ConfigurationElementCollection.EmitClear*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: EmitClear
  nameWithType: ConfigurationElementCollection.EmitClear
- uid: System.Configuration.ConfigurationElementCollection.Equals*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Equals
  nameWithType: ConfigurationElementCollection.Equals
- uid: System.Configuration.ConfigurationElementCollection.GetElementKey*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetElementKey
  nameWithType: ConfigurationElementCollection.GetElementKey
- uid: System.Configuration.ConfigurationElementCollection.GetEnumerator*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ConfigurationElementCollection.GetEnumerator
- uid: System.Configuration.ConfigurationElementCollection.GetHashCode*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: GetHashCode
  nameWithType: ConfigurationElementCollection.GetHashCode
- uid: System.Configuration.ConfigurationElementCollection.IsElementName*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsElementName
  nameWithType: ConfigurationElementCollection.IsElementName
- uid: System.Configuration.ConfigurationElementCollection.IsElementRemovable*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsElementRemovable
  nameWithType: ConfigurationElementCollection.IsElementRemovable
- uid: System.Configuration.ConfigurationElementCollection.IsModified*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsModified
  nameWithType: ConfigurationElementCollection.IsModified
- uid: System.Configuration.ConfigurationElementCollection.IsReadOnly*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsReadOnly
  nameWithType: ConfigurationElementCollection.IsReadOnly
- uid: System.Configuration.ConfigurationElementCollection.IsSynchronized*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ConfigurationElementCollection.IsSynchronized
- uid: System.Configuration.ConfigurationElementCollection.OnDeserializeUnrecognizedElement*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: OnDeserializeUnrecognizedElement
  nameWithType: ConfigurationElementCollection.OnDeserializeUnrecognizedElement
- uid: System.Configuration.ConfigurationElementCollection.RemoveElementName*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: RemoveElementName
  nameWithType: ConfigurationElementCollection.RemoveElementName
- uid: System.Configuration.ConfigurationElementCollection.Reset*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Reset
  nameWithType: ConfigurationElementCollection.Reset
- uid: System.Configuration.ConfigurationElementCollection.ResetModified*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ResetModified
  nameWithType: ConfigurationElementCollection.ResetModified
- uid: System.Configuration.ConfigurationElementCollection.SerializeElement*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SerializeElement
  nameWithType: ConfigurationElementCollection.SerializeElement
- uid: System.Configuration.ConfigurationElementCollection.SetReadOnly*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SetReadOnly
  nameWithType: ConfigurationElementCollection.SetReadOnly
- uid: System.Configuration.ConfigurationElementCollection.SyncRoot*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: SyncRoot
  nameWithType: ConfigurationElementCollection.SyncRoot
- uid: System.Configuration.ConfigurationElementCollection.System#Collections#ICollection#CopyTo*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConfigurationElementCollection.System.Collections.ICollection.CopyTo
- uid: System.Configuration.ConfigurationElementCollection.ThrowOnDuplicate*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: ThrowOnDuplicate
  nameWithType: ConfigurationElementCollection.ThrowOnDuplicate
- uid: System.Configuration.ConfigurationElementCollection.Unmerge*
  parent: System.Configuration.ConfigurationElementCollection
  isExternal: false
  name: Unmerge
  nameWithType: ConfigurationElementCollection.Unmerge
