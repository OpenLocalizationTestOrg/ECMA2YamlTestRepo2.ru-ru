### YamlMime:ManagedReference
items:
- uid: System.Net.PeerToPeer.PeerNameRegistration
  id: PeerNameRegistration
  children:
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  - System.Net.PeerToPeer.PeerNameRegistration.Cloud
  - System.Net.PeerToPeer.PeerNameRegistration.Comment
  - System.Net.PeerToPeer.PeerNameRegistration.Data
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose
  - System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  - System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  - System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  - System.Net.PeerToPeer.PeerNameRegistration.PeerName
  - System.Net.PeerToPeer.PeerNameRegistration.Port
  - System.Net.PeerToPeer.PeerNameRegistration.Start
  - System.Net.PeerToPeer.PeerNameRegistration.Stop
  - System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.PeerToPeer.PeerNameRegistration.Update
  - System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  langs:
  - csharp
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration
  fullName: System.Net.PeerToPeer.PeerNameRegistration
  type: Class
  summary: "Регистрирует <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>в <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> или набор облаков.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  remarks: "Регистрация создает (или обновляет) все сведения, связанные с <xref:System.Net.PeerToPeer.PeerName>в облаке одноранговых узлов или облака.</xref:System.Net.PeerToPeer.PeerName>       Можно иметь несколько объектов PeerNameRegistration того же имени однорангового узла. В этом случае находится под защитой имени однорангового узла, каждый экземпляр представляет PeerNameRegistration в другом облаке. Тем не менее если имя узла не защищены, его можно зарегистрировать одним из одного облака несколько раз, указав, что каждая регистрация выполняется другой процесс."
  syntax:
    content: 'public class PeerNameRegistration : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  id: '#ctor'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Инициализирует новый экземпляр по умолчанию <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> класса."
  remarks: "Возвращает новый экземпляр по умолчанию типа <xref:System.Net.PeerToPeer.PeerNameRegistration>.</xref:System.Net.PeerToPeer.PeerNameRegistration> Он не выполняет регистрации имени однорангового узла во время построения.       После создания экземпляра объекта с помощью этого конструктора, вызывающий объект должен заполнить с соответствующими полями в экземпляр до вызова метода <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>или <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> класса с заданным именем и номером порта."
  remarks: "Вызов этого конструктора создает экземпляр, который будет использоваться для регистрации всех адресов источников (оба IPv6and IPv4) и указанного порта для всех облаков, в которых в настоящее время участвует одноранговый узел.  Если объект будет создан успешно, указанный <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>и <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>заполняются.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>       Если имя узла защищена и был зарегистрирован в <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>однорангового узла в настоящее время участвует в, <xref:System.Net.PeerToPeer.PeerToPeerException>возникает исключение.</xref:System.Net.PeerToPeer.PeerToPeerException> </xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>       Этот конструктор создает только <xref:System.Net.PeerToPeer.PeerNameRegistration>экземпляра; он не выполняет регистрацию.</xref:System.Net.PeerToPeer.PeerNameRegistration> После создания экземпляра объекта регистрации с помощью этого конструктора и заполнения его полей, то приложение должно вызвать <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>для выполнения фактического регистрации.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> Регистрируемый объект."
    - id: port
      type: System.Int32
      description: "Целочисленное значение, указывающее номер порта для регистрации."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> name </code> Параметр не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанный номер порта меньше нуля.  Номера портов должны быть больше или равно нулю и меньше 65535 (0xFFFF)."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> Указанного уже зарегистрирован для этого узла.      -Удаленный узел не является владельцем <xref:System.Net.PeerToPeer.PeerName.Authority*>для предоставленного <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> объекта.</xref:System.Net.PeerToPeer.PeerName.Authority*>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Инициализирует новый сериализуемые <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  syntax:
    content: protected PeerNameRegistration (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Ссылка на объект, содержащий данные, необходимые для десериализации данного экземпляра."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Контекст, предоставляющий средства для десериализации данных. Также называется источником сериализованных данных."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  id: '#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)'
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> класс с именем указанного однорангового узла, номер порта и <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>."
  remarks: "Вызов этого конструктора создает экземпляр, который будет использоваться для регистрации всех адресов источников (IPv6 и IPv4), указанного порта и указанного <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>  Если объект будет создан успешно, свойства заполняются с указанного <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>и <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>       Если параметр облака `null`, имя регистрируется с помощью <xref:System.Net.PeerToPeer.Cloud.Available>клавиш, которое инициализирует значения по умолчанию для <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>и <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.</xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available>       После создания экземпляра, <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>метод должен вызываться для регистрации <xref:System.Net.PeerToPeer.PeerName>.</xref:System.Net.PeerToPeer.PeerName> </xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port, System.Net.PeerToPeer.Cloud cloud);
    parameters:
    - id: name
      type: System.Net.PeerToPeer.PeerName
      description: "<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> Регистрируемый объект."
    - id: port
      type: System.Int32
      description: "Целочисленное значение, указывающее номер порта для регистрации."
    - id: cloud
      type: System.Net.PeerToPeer.Cloud
      description: "<xref href=&quot;System.Net.PeerToPeer.Cloud&quot;></xref>в котором для регистрации имени однорангового узла."
  overload: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> name </code> Параметр не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанный номер порта меньше нуля.  Номера портов должны быть больше или равно нулю и меньше 65535 (0xFFFF)."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> Указанного уже зарегистрирован для этого узла.      -Удаленный узел не является владельцем <xref:System.Net.PeerToPeer.PeerName.Authority*>для предоставленного <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> объекта.</xref:System.Net.PeerToPeer.PeerName.Authority*>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  id: Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает данные в облаке, в котором эта <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>объект будет зарегистрирован.</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName*>"
  syntax:
    content: public System.Net.PeerToPeer.Cloud Cloud { get; set; }
    return:
      type: System.Net.PeerToPeer.Cloud
      description: "Объект типа <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> , указывающий облаке одноранговых узлов, для которого определен этот регистрации. Это свойство имеет значение <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> по умолчанию."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  id: Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает дополнительные сведения <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> объекта, который будет зарегистрирован с <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>."
  syntax:
    content: public string Comment { get; set; }
    return:
      type: System.String
      description: "Комментарий, который содержит дополнительные сведения о <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> для связи с <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>. Это свойство имеет значение <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> по умолчанию."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  exceptions:
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "Указанное строковое значение больше 39 символов Юникода."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  id: Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает определяемые приложением двоичные данные для <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  remarks: "Максимальный объем данных, который может быть задан равен 4 096 байт."
  syntax:
    content: public byte[] Data { get; set; }
    return:
      type: System.Byte[]
      description: "Массив байтов, содержащий двоичные данные, связанные с записью. Это свойство имеет значение <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> по умолчанию."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Data*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанные данные больше, чем 4096 байт."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  id: Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Освобождает неуправляемые ресурсы, а при необходимости освобождает также управляемые ресурсы, используемые <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  id: EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает коллекцию конечных точек сети, для которых регистрируется связанное имя однорангового узла."
  remarks: "В <xref:System.Net>пространства имен, <xref:System.Net.IPEndPoint>представляет сетевую конечную точку в виде IP-адрес и номер порта.</xref:System.Net.IPEndPoint> </xref:System.Net>  Для протокола PNRP необходимо указать значение IP адрес и номер порта для каждой конечной точки.  Максимальное количество конечных точек, которые можно задать, равно&10;. Автоматический выбор адресов используется в том случае, если этот параметр равен `null`.       Если используется метод регистрации, который автоматически выбирает адресов для регистрации, нет способа определить, регистрируемые, для которого была зарегистрирована имени однорангового узла.  То есть свойство EndPointCollection не обновляется с учетом выбранного адреса.       При регистрации имени однорангового узла для более чем одним узлом каждого <xref:System.Net.PeerToPeer.PeerNameRegistration>отличается и EndPointCollection свойство, определенное для каждого экземпляра регистрации будет другим.</xref:System.Net.PeerToPeer.PeerNameRegistration> Также, когда <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>регистрируется в более чем один <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>, каждой регистрации отличается, и обычно будет отличаться для каждого экземпляра в коллекции конечных точек.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>"
  syntax:
    content: public System.Net.IPEndPointCollection EndPointCollection { get; }
    return:
      type: System.Net.IPEndPointCollection
      description: "<xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*>Объект, содержащий конечные точки сети, для которых регистрируется связанное имя однорангового узла.</xref:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection*> Если не указано явным образом, значение по умолчанию для всех свойств — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для ссылочных типов."
  overload: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Заполняет данными, необходимыми для сериализации объекта сведений сериализации <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> экземпляра."
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Содержит сериализованные данные, связанные с <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Содержит место назначения для сериализованного потока, связанного с <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  overload: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  id: IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает значение, указывающее, задан ли имя узла в <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>регистрируется свойство с конкретным <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref> на узле.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  syntax:
    content: public bool IsRegistered ();
    parameters: []
    return:
      type: System.Boolean
      description: "Если <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, имени однорангового узла зарегистрирована <> </> *настроек для однорангового узла. Если <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, а затем запускается процесс регистрации с <> </> *настроек."
  overload: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Не удается зарегистрировать объект, который уже был удален."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  id: PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает имя узла для регистрации в облаке одноранговых узлов."
  remarks: "Имя узла, которые могут быть зарегистрированы для более чем один узел. Каждый <xref:System.Net.PeerToPeer.PeerNameRegistration>экземпляра отличается.</xref:System.Net.PeerToPeer.PeerNameRegistration> <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>Свойство, связанное с соответствующими <xref:System.Net.PeerToPeer.PeerName>экземпляра отличается.</xref:System.Net.PeerToPeer.PeerName> </xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A> Кроме того можно зарегистрировать имя однорангового узла для нескольких облаков, узел подключен; Каждый из этих регистраций отличается. Имя узла <xref:System.Net.IPEndPointCollection>будет отличаться в каждом из этих экземпляров.</xref:System.Net.IPEndPointCollection>"
  syntax:
    content: public System.Net.PeerToPeer.PeerName PeerName { get; set; }
    return:
      type: System.Net.PeerToPeer.PeerName
      description: "Объект типа <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> , содержащий значения, связанные с этим <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта. Если не указано явным образом, значение по умолчанию для всех свойств — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для ссылочных типов."
  overload: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  id: Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458) номера порта, используемых компьютером, регистрируемого в <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта."
  remarks: "Порт по умолчанию используется <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>метод только в том случае, если конечные точки не заданы.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>"
  syntax:
    content: public int Port { get; set; }
    return:
      type: System.Int32
      description: "Целое число, представляющее номер порта TCP <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> Если не указано явным образом, значение по умолчанию для этого свойства равно нулю (0)."
  overload: System.Net.PeerToPeer.PeerNameRegistration.Port*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанный номер порта меньше нуля.  Номера портов должны быть больше или равно нулю и меньше 65535 (0xFFFF)."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  id: Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Регистрирует <> </> *настроек в <> </> *настроек. Если не <> </> *настроек, автоматический выбор адресов, используется параметр с значения порта, указанного в <> </> *настроек свойств."
  remarks: "Метод регистрирует имя однорангового узла, указанного в <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>свойство адреса всех источника и <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>указанного в конструкторе.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A> Порт по умолчанию используется этот метод только в том случае, если конечные точки не заданы.       Если <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>свойство `null`, этот метод регистрирует имя однорангового узла, указанного в <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>свойство с помощью <xref:System.Net.PeerToPeer.Cloud.Available>поле, которое инициализирует значения по умолчанию для <xref:System.Net.PeerToPeer.Cloud.Name%2A>, <xref:System.Net.PeerToPeer.Cloud.Scope%2A>и <xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.</xref:System.Net.PeerToPeer.Cloud.ScopeId%2A> </xref:System.Net.PeerToPeer.Cloud.Scope%2A> </xref:System.Net.PeerToPeer.Cloud.Name%2A> </xref:System.Net.PeerToPeer.Cloud.Available> </xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>       После <xref:System.Net.PeerToPeer.PeerNameRegistration>запущена объект, <xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>метод используется для прекращения его</xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A> </xref:System.Net.PeerToPeer.PeerNameRegistration>       Для обновления регистрации, <xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>метод должен использоваться.</xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>"
  example:
  - "The following code example creates a <xref:System.Net.PeerToPeer.PeerName> and registers it along with the metadata specified.  \n  \n [!code-cs[NCLPNRPRegisterPeerName#1](~/add/codesnippet/csharp/m-system.net.peertopeer._1_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Start*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>Свойству <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Этого объекта уже был вызван метод Dispose()."
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "-<xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> Указанного уже зарегистрирован. <> </> *Настроек метод должен использоваться для обновления регистрации.      -Удаленный узел не является владельцем <> </> *настроек для <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> указанного.      -Либо <xref href=&quot;System.Net.PeerToPeer.PeerName&quot;> </xref> или <> </> *настроек не указан; хотя бы один должен предоставить.      -Элементы сообщения или данных являются недопустимыми. Или, <> </> *настроек не установлено и нет данные больших двоичных объектов или <xref:System.Net.IPEndPoint>указано.</xref:System.Net.IPEndPoint>"
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  id: Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Отменяет регистрацию имени однорангового узла, указанного в <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>Свойства из всех облаков, в которых она была зарегистрирована.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  remarks: "После остановки процесса регистрации состояние объекта регистрации равно состояние непосредственно после конструируемого конструктором по умолчанию. В этом состоянии все его свойства считаются не имеют значения. <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>Метод может использоваться на ее перезапуск.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>       Можно иметь несколько объектов регистрации того же имени однорангового узла.  В этом случае находится под защитой имени однорангового узла, каждый экземпляр будет представлять регистрацию в облаке PNRP.  Однако если имя узла не защищены, его можно зарегистрировать в том же облаке несколько раз.       Если этот экземпляр уже был остановлен, вызов этого метода не оказывает влияния."
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *Настроек свойства не был зарегистрирован. Это происходит, когда <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> объекта создается с помощью пустого конструктора. <> </> *Настроек свойства должны быть заполнены в этом экземпляре до вызова метода <xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Start*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Этого объекта уже был вызван метод Dispose()."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Реализует <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> интерфейса и возвращает данные, необходимые для сериализации <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> экземпляра."
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Содержит сериализованные данные, связанные с <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> экземпляра."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Содержит место назначения для сериализованного потока, связанного с <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> экземпляра."
  overload: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  id: Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Обновления <xref href=&quot;System.Net.PeerToPeer.PeerNameRegistration&quot;> </xref> для узла, зарегистрированного с определенным <xref href=&quot;System.Net.PeerToPeer.Cloud&quot;> </xref>. Обновление выполняется с помощью сведений, указанных в свойствах."
  remarks: "Все сведения, зарегистрированных в облака для данного <xref:System.Net.PeerToPeer.PeerName>до вызова метода полностью удаляется.</xref:System.Net.PeerToPeer.PeerName>  Новые данные не объединяются с существующей регистрацией.  Чтобы обновить <xref:System.Net.PeerToPeer.PeerNameRegistration>, сначала обновить свойства в данном экземпляре, а затем вызвать этот метод.</xref:System.Net.PeerToPeer.PeerNameRegistration>       После <xref:System.Net.PeerToPeer.PeerNameRecord>зарегистрирован, <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>свойство нельзя обновить.</xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> </xref:System.Net.PeerToPeer.PeerNameRecord>  Все остальные поля в записи могут быть обновлены."
  syntax:
    content: public void Update ();
    parameters: []
  overload: System.Net.PeerToPeer.PeerNameRegistration.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>Свойству <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "-<> </> *Настроек свойства не был зарегистрирован. Метод Update не может быть вызван, пока имя однорангового узла, указанное в <> </> *настроек регистрируется свойство в одно или несколько облаков.      -Однорангового имени, указанному в <xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>свойство была изменена после соответствующего <xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;> </xref> был зарегистрирован.</xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName*>"
  - type: System.Net.PeerToPeer.PeerToPeerException
    commentId: T:System.Net.PeerToPeer.PeerToPeerException
    description: "Не удается зарегистрировать объект, который был удален."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Объект <xref href=&quot;System.Net.PeerToPeer.PeerNameRecord&quot;> </xref> свойству <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  id: UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  langs:
  - csharp
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.PeerToPeer
  summary: "Возвращает или задает значение, указывающее, следует ли использовать автоматический выбор конечных точек при обходе одноранговой сети или <xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud*>"
  remarks: "Если используется автоматический выбор конечной точки (это свойство имеет значение `true`) с нет информации о конечной точке указано до начала <xref:System.Net.PeerToPeer.PeerNameRegistration>, система выбирает отдельные конечные точки и публикует их со связанным именем однорангового узла во всех доступных облаках.</xref:System.Net.PeerToPeer.PeerNameRegistration>  Если порт не указан, автоматический выбор выбирает ноль в качестве <xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>.</xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>       Если задано значение `false`, не выполняется автоматический выбор, как описано выше.  Это позволяет процессу регистрации публикации имени однорангового узла вместе с большой двоичный объект (как указано в <xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A>свойство).</xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A> Нет конечных точек, связанный с именем.       Если используется метод регистрации, который автоматически выбирает адресов для регистрации, нет способа определить, какие адреса, для которого <xref:System.Net.PeerToPeer.PeerName>объект был зарегистрирован.</xref:System.Net.PeerToPeer.PeerName>  То есть <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>свойство не будет обновляться в соответствии с выбранной адреса.</xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>       Обновление этого свойства после запуска регистрации имени однорангового узла не оказывает влияния."
  syntax:
    content: public bool UseAutoEndPointSelection { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если автоматический выбор конечных точек для использования; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> другим методом будет использоваться для определения конечной точки. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.PeerToPeer.PeerToPeerException
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerToPeerException
  nameWithType: PeerToPeerException
  fullName: System.Net.PeerToPeer.PeerToPeerException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration()
  nameWithType: PeerNameRegistration.PeerNameRegistration()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration()
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32)
- uid: System.Net.PeerToPeer.PeerName
  parent: System.Net.PeerToPeer
  isExternal: false
  name: PeerName
  nameWithType: PeerName
  fullName: System.Net.PeerToPeer.PeerName
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration(PeerName,Int32,Cloud)
  nameWithType: PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerNameRegistration(PeerName,Int32,Cloud)
- uid: System.Net.PeerToPeer.Cloud
  parent: System.Net.PeerToPeer
  isExternal: false
  name: Cloud
  nameWithType: Cloud
  fullName: System.Net.PeerToPeer.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Comment
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Data
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose()
  nameWithType: PeerNameRegistration.Dispose()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: PeerNameRegistration.Dispose(Boolean)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection
- uid: System.Net.IPEndPointCollection
  parent: System.Net
  isExternal: false
  name: IPEndPointCollection
  nameWithType: IPEndPointCollection
  fullName: System.Net.IPEndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered()
  nameWithType: PeerNameRegistration.IsRegistered()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered()
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
  fullName: System.Net.PeerToPeer.PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start()
  nameWithType: PeerNameRegistration.Start()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Start()
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop()
  nameWithType: PeerNameRegistration.Stop()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Stop()
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.PeerToPeer.PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update()
  nameWithType: PeerNameRegistration.Update()
  fullName: System.Net.PeerToPeer.PeerNameRegistration.Update()
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
  fullName: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection
- uid: System.Net.PeerToPeer.PeerNameRegistration.#ctor*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerNameRegistration
  nameWithType: PeerNameRegistration.PeerNameRegistration
- uid: System.Net.PeerToPeer.PeerNameRegistration.Cloud*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Cloud
  nameWithType: PeerNameRegistration.Cloud
- uid: System.Net.PeerToPeer.PeerNameRegistration.Comment*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Comment
  nameWithType: PeerNameRegistration.Comment
- uid: System.Net.PeerToPeer.PeerNameRegistration.Data*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Data
  nameWithType: PeerNameRegistration.Data
- uid: System.Net.PeerToPeer.PeerNameRegistration.Dispose*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Dispose
  nameWithType: PeerNameRegistration.Dispose
- uid: System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: EndPointCollection
  nameWithType: PeerNameRegistration.EndPointCollection
- uid: System.Net.PeerToPeer.PeerNameRegistration.GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: GetObjectData
  nameWithType: PeerNameRegistration.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.IsRegistered*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: IsRegistered
  nameWithType: PeerNameRegistration.IsRegistered
- uid: System.Net.PeerToPeer.PeerNameRegistration.PeerName*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: PeerName
  nameWithType: PeerNameRegistration.PeerName
- uid: System.Net.PeerToPeer.PeerNameRegistration.Port*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Port
  nameWithType: PeerNameRegistration.Port
- uid: System.Net.PeerToPeer.PeerNameRegistration.Start*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Start
  nameWithType: PeerNameRegistration.Start
- uid: System.Net.PeerToPeer.PeerNameRegistration.Stop*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Stop
  nameWithType: PeerNameRegistration.Stop
- uid: System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: PeerNameRegistration.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.PeerToPeer.PeerNameRegistration.Update*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: Update
  nameWithType: PeerNameRegistration.Update
- uid: System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection*
  parent: System.Net.PeerToPeer.PeerNameRegistration
  isExternal: false
  name: UseAutoEndPointSelection
  nameWithType: PeerNameRegistration.UseAutoEndPointSelection
