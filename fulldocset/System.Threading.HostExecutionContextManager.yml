### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContextManager
  id: HostExecutionContextManager
  children:
  - System.Threading.HostExecutionContextManager.#ctor
  - System.Threading.HostExecutionContextManager.Capture
  - System.Threading.HostExecutionContextManager.Revert(System.Object)
  - System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  langs:
  - csharp
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager
  fullName: System.Threading.HostExecutionContextManager
  type: Class
  summary: "Предоставляет функцию, которая предоставляет общие хост-среды выполнения языка для участия в поток или миграции контекста выполнения."
  remarks: "Если текущий <xref:System.AppDomainManager>содержит ссылку на HostExecutionContextManager в его <xref:System.AppDomainManager.HostExecutionContextManager%2A>Свойства, а затем общеязыковая среда выполнения вызывает диспетчеру каждый раз, когда вызов <xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName>происходит метод, чтобы разрешить основному приложению участвовать в потоке контекста выполнения.</xref:System.Threading.ExecutionContext.Run%2A?displayProperty=fullName> </xref:System.AppDomainManager.HostExecutionContextManager%2A> </xref:System.AppDomainManager>"
  syntax:
    content: public class HostExecutionContextManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Threading.HostExecutionContextManager&quot;> </xref> класса."
  syntax:
    content: public HostExecutionContextManager ();
    parameters: []
  overload: System.Threading.HostExecutionContextManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Capture
  id: Capture
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Перехватывает контекст выполнения хоста из текущего потока."
  remarks: "<xref:System.Threading.HostExecutionContext>Создается с использованием типа, содержащее безопасный дескриптор `IUnknown` указатель для узла, выполняющего текущий поток.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext Capture ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "Объект <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> объект, представляющий контекст выполнения хоста текущего потока."
  overload: System.Threading.HostExecutionContextManager.Capture*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  id: Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Восстанавливает контекст выполнения хоста в предыдущее состояние."
  remarks: '`previousState`должен быть объектом, возвращенным свойством <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>метод.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A>'
  syntax:
    content: public virtual void Revert (object previousState);
    parameters:
    - id: previousState
      type: System.Object
      description: "Восстановить предыдущее состояние контекста."
  overload: System.Threading.HostExecutionContextManager.Revert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>previousState</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - <code>previousState</code> не был создан в текущем потоке.       - или - <code>previousState</code> не последнее состояние для <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref>."
  platform:
  - net462
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  id: SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  langs:
  - csharp
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Задает контекст выполнения текущего узла контекста выполнения заданного узла."
  remarks: "Метод SetHostExecutionContext устанавливает контекст выполнения хоста для текущего <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext>  Объект <xref:System.Threading.HostExecutionContext>, использовался как аргумент в другой вызов метода SetHostExecutionContext не может быть передана в качестве параметра для этого метода.</xref:System.Threading.HostExecutionContext> Вместо этого используйте <xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>метод для создания копии <xref:System.Threading.HostExecutionContext>объекта, а затем использовать ее для задания контекста выполнения узла.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext.CreateCopy%2A?displayProperty=fullName>       Вызовите <xref:System.Threading.HostExecutionContextManager.Revert%2A>метод, используя объект, возвращаемый этим методом для восстановления <xref:System.Threading.HostExecutionContext>в предыдущее состояние.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContextManager.Revert%2A>"
  syntax:
    content: public virtual object SetHostExecutionContext (System.Threading.HostExecutionContext hostExecutionContext);
    parameters:
    - id: hostExecutionContext
      type: System.Threading.HostExecutionContext
      description: "<xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> Требуется задать."
    return:
      type: System.Object
      description: "Объект для восстановления <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> в предыдущее состояние."
  overload: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>hostExecutionContext</code>не был получен через операции записи.       - или - <code>hostExecutionContext</code> был аргумент предыдущего вызова метода SetHostExecutionContext."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.HostExecutionContextManager.#ctor
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager()
  nameWithType: HostExecutionContextManager.HostExecutionContextManager()
  fullName: System.Threading.HostExecutionContextManager.HostExecutionContextManager()
- uid: System.Threading.HostExecutionContextManager.Capture
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture()
  nameWithType: HostExecutionContextManager.Capture()
  fullName: System.Threading.HostExecutionContextManager.Capture()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContextManager.Revert(System.Object)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert(Object)
  nameWithType: HostExecutionContextManager.Revert(Object)
  fullName: System.Threading.HostExecutionContextManager.Revert(Object)
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext)
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext(HostExecutionContext)
  nameWithType: HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
  fullName: System.Threading.HostExecutionContextManager.SetHostExecutionContext(HostExecutionContext)
- uid: System.Threading.HostExecutionContextManager.#ctor*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: HostExecutionContextManager
  nameWithType: HostExecutionContextManager.HostExecutionContextManager
- uid: System.Threading.HostExecutionContextManager.Capture*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Capture
  nameWithType: HostExecutionContextManager.Capture
- uid: System.Threading.HostExecutionContextManager.Revert*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: Revert
  nameWithType: HostExecutionContextManager.Revert
- uid: System.Threading.HostExecutionContextManager.SetHostExecutionContext*
  parent: System.Threading.HostExecutionContextManager
  isExternal: false
  name: SetHostExecutionContext
  nameWithType: HostExecutionContextManager.SetHostExecutionContext
