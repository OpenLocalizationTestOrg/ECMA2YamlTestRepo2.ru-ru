### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  id: X509Certificate2
  children:
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  langs:
  - csharp
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  type: Class
  summary: "Представляет сертификат X.509."
  remarks: "Структура X.509 берет начало международной организации по стандартизации (ISO) рабочих групп. Эта структура используется для представления различных типов информации, включая удостоверение, прав и владельца атрибуты (разрешения, возраст, пол, местоположение, принадлежность и т. д). Несмотря на то, что спецификации ISO по самой структуры, класса X509Certificate2 предназначен для моделирования сценариев использования, определенных в спецификации, выданный инфраструктура открытого ключа Internet Engineering Task Force (IETF), рабочая группа X.509 (PKIX). Наиболее информативные эти спецификации RFC 3280 является «[сертификата и профиль список ОТЗЫВА сертификатов для отзыва сертификатов](http://go.microsoft.com/fwlink/?LinkId=45286).»      Настроек [!IMPORTANT] настроек начиная с [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)], этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A>метод в `try` / `catch` блока.</xref:System.IDisposable.Dispose%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>   >> Для приложений, предназначенных для [!INCLUDE[net_v452](~/add/includes/net-v452-md.md)] и более ранних версий, не реализует класс X509Certificate2 <xref:System.IDisposable>интерфейсов и поэтому не `Dispose` метод.</xref:System.IDisposable>"
  example:
  - "The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  \n  \n [!code-vb[X509Certificate2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_1.vb)]\n [!code-cs[X509Certificate2#1](~/add/codesnippet/csharp/t-system.security.crypto_122_1.cs)]  \n  \n The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/t-system.security.crypto_122_2.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/t-system.security.crypto_122_2.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/t-system.security.crypto_122_2.vb)]"
  syntax:
    content: 'public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate'
  inheritance:
  - System.Object
  - System.Security.Cryptography.X509Certificates.X509Certificate
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose
  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.Security.SecureString)
  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)
  - System.Security.Cryptography.X509Certificates.X509Certificate.FormatDate(System.DateTime)
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetName
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber
  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString
  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle
  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer
  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Cryptography.X509Certificates.X509Certificate.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса."
  remarks: "Этот конструктор создает пустой <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объект, в отличие от других конструкторов для этого класса, использующие сведения о сертификате из массива байтов, указателя или файла сертификата.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_122_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_122_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_122_1.cpp)]"
  syntax:
    content: public X509Certificate2 ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя сведения из массива байтов."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, используя сведения о сертификате из массива байтов.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Массив байтов может быть бинарные (DER) или данных X.509 в кодировке Base64. Массив байтов может также быть PKCS7 (Authenticode) подписанного файла; сертификат подписавшего используется для создания объекта.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `rawData`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса с помощью неуправляемого дескриптора."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта с помощью дескриптора для контекста сертификата Microsoft Cryptographic API, `PCCERT_CONTEXT`.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Обратите внимание, что непосредственный вызывающий объект этого конструктора требует разрешение неуправляемого кода.      Настроек [!IMPORTANT] настроек конструктор создает копию контекста сертификата. Не следует предполагать, что передаваемая конструктору структура контекста является допустимым; Возможно, он была снята. Можно получить копию текущего `PCCERT_CONTEXT` структуры из <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>, но является допустимым только в течение времени существования <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A>"
  syntax:
    content: public X509Certificate2 (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Указатель на контекст сертификата в неуправляемом коде. Структура C называется <xref uid=&quot;langword_csharp_PCCERT_CONTEXT&quot; name=&quot;PCCERT_CONTEXT&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса с помощью <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> объекта."
  remarks: "Этот метод создает новый экземпляр <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>класса с помощью <xref:System.Security.Cryptography.X509Certificates.X509Certificate>объекта.</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref> Объекта."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя имя файла сертификата."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, используя имя файла сертификата.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Он поддерживает двоичная кодировка (DER) или кодировка Base64.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `fileName`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  id: '#ctor(System.Byte[],System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя массив байтов и пароль."
  remarks: "Этот конструктор используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в контейнер ключа.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate>сертификата, указав хранилища подписанного файла PKCS7 `rawData`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  id: '#ctor(System.Byte[],System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя массив байтов и пароль."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>с помощью массива байтов и пароль, необходимый для доступа к данным сертификата.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Он используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в контейнер ключа.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `rawData`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя указанные сведения о сериализации и потоковый контекст."
  syntax:
    content: protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Сериализация сведений, необходимых для десериализации новый <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Контекстные сведения об источнике десериализуемого потока."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  id: '#ctor(System.String,System.Security.SecureString)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя имя файла сертификата и пароль."
  remarks: "Этот конструктор используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в контейнер ключа.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate>сертификата, указав хранилища подписанного файла PKCS7 `fileName`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя имя файла сертификата и пароль, используемый для доступ к сертификату."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, используя имя файла сертификата и пароль, необходимый для доступ к этому сертификату.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Он используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в контейнер ключа.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `fileName`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName, string password);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя массив байтов, пароль и флаг хранилища ключей."
  remarks: "Этот конструктор используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в Microsoft API криптографических служб шифрования поставщика (CSP).      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate>сертификата, указав хранилища подписанного файла PKCS7 `rawData`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя массив байтов, пароль и флаг хранилища ключей."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта с помощью байтовый массив, пароль, который необходим для доступа к данным сертификата и флаг хранилища ключей.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> Он используется с файлами PKCS12 (PFX), содержащими закрытый ключ сертификата. При вызове конструктора с правильным паролем расшифровывается закрытый ключ и сохраняет его в Microsoft API криптографических служб шифрования поставщика (CSP).      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `rawData`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, используя имя файла сертификата, пароль и флаг хранилища ключей."
  remarks: "Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate>сертификата, указав хранилища подписанного файла PKCS7 `fileName`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate> </xref:System.Security.Cryptography.X509Certificates.X509Certificate>"
  syntax:
    content: public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> имя класса, используя файл сертификата, пароль, используемый для доступа к сертификату, а флаг хранилища ключей."
  remarks: "Этот конструктор создает новый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>имя объекта, с помощью файла сертификата, пароль, необходимый для доступа к сертификату, а флаг хранилища ключей.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.       Если вы создаете <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>сертификата, указав хранилища подписанного файла PKCS7 `fileName`, <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>создается для сертификата, который подписал хранилище, а не для всех сертификатов в хранилище.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>"
  syntax:
    content: public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Возникает ошибка с сертификатом. Например:-файл сертификата не существует.      — Сертификат является недействительным.      -Неправильный пароль сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  id: Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает или задает значение, указывающее, архивируется ли сертификат X.509."
  remarks: "Это свойство имеет значение только для сертификата, связанного с хранилищем. Если свойство имеет значение и добавить сертификат в хранилище сертификатов, то значение сохраняется. Если свойство имеет значение для сертификата, извлекаются из хранилища, то значение сохраняется немедленно.       В хранилище X.509 архив сертификатов, не включаются в возвращаемый <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection>только если архив является свойство `true`.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> При значении архивирован задания или не выполняется никаких физического архивных действий."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_26_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_26_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public bool Archived { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если сертификат архивируется, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Если сертификат не архивирован."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  id: Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает коллекцию <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Extension&quot;> </xref> объектов."
  remarks: "Расширения, определенные в формате сертификата X.509 v3 разрешить дополнительные данные, которые будут включены в сертификате. Число расширений определяются ISO в определении X.509 v3, а также PKIX в RFC 3280 &quot;[сертификата и профиль список ОТЗЫВА сертификатов для отзыва сертификатов](http://go.microsoft.com/fwlink/?LinkId=45286).» Общие расширения включают в себя сведения, касающиеся использования ключа (<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>), ключевые идентификаторы (<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>), сертификатов политики, сведения об отзыве (с расширением точка распространения CRL) и других целей.</xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension> </xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_97_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_97_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_97_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ExtensionCollection&quot;> </xref> Объекта."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  id: FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает или задает связанный псевдоним для сертификата."
  remarks: "Понятные имена являются свойствами в хранилище сертификатов X.509, которое может быть установлено. Они используются, чтобы пользователь мог связать псевдонимы с сертификатами, поэтому их можно было легко идентифицировать.       Если существует отсутствует понятное имя для сертификата, пустая строка (&quot;») возвращается."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_16_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_16_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_16_1.vb)]"
  syntax:
    content: public string FriendlyName { get; set; }
    return:
      type: System.String
      description: "Понятное имя сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  id: GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Указывает тип сертификата, содержащегося в массиве байтов."
  remarks: "Этот метод позволяет определить тип сертификата в файле."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/a34c0539-d23c-4bd1-9b29-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/a34c0539-d23c-4bd1-9b29-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/a34c0539-d23c-4bd1-9b29-_1.cpp)]"
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref> Объекта."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>rawData</code>длина равна нулю, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  id: GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Указывает тип сертификата, содержащегося в файле."
  remarks: "Этот метод позволяет определить тип сертификата в файле."
  syntax:
    content: public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    return:
      type: System.Security.Cryptography.X509Certificates.X509ContentType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509ContentType&quot;> </xref> Объекта."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Получает субъекта и издателя имена из сертификата."
  remarks: "Этот метод следует всегда использовать вместо разбора сертификата, так как многие значения имени могут быть расположены в нескольких местах. С помощью этого метода гарантирует, что будет возвращено соответствующее имя."
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/3126ffa7-3ffc-4612-bfb2-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/3126ffa7-3ffc-4612-bfb2-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/3126ffa7-3ffc-4612-bfb2-_1.cpp)]"
  syntax:
    content: public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);
    parameters:
    - id: nameType
      type: System.Security.Cryptography.X509Certificates.X509NameType
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509NameType&quot;> </xref> Значение субъекта."
    - id: forIssuer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для включения имени поставщика; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Имя сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  id: HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект содержит закрытый ключ."
  syntax:
    content: public bool HasPrivateKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект содержит закрытый ключ; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Недопустимый контекст сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  id: Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект с данными из массива байтов."
  remarks: "Этот метод можно использовать массив необработанных байтов сертификата X.509 и заполнить <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, связанные с ним значения.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       Так как этот метод принимает массив байтов, он может использоваться только для типов сертификатов, не требует пароля, включая кодировке DER или Base64-кодировке X.509 сертификат или сертификат PFX/PKCS12. Обратите внимание, что сертификат PFX/PKCS12 может содержать более одного сертификата. В этом случае используется первый сертификат, связанный с закрытым ключом, или, если закрытый ключ не найден, используется первый сертификат."
  syntax:
    content: public override void Import (byte[] rawData);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  id: Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект с данными из файла сертификата."
  remarks: "Этот метод использует файл сертификата, например файл с расширением CER-файл, который представляет сертификат X.509 и заполняет <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта с помощью сертификата, содержатся в файле.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       Этот метод можно использовать с несколькими типами сертификатов, включая сертификаты X.509 в кодировке DER или Base64-кодировке, сертификаты PFX/PKCS12 и сертификатами подписавшего, например Authenticode. Обратите внимание, что сертификат PFX/PKCS12 может содержать более одного сертификата. В этом случае используется первый сертификат, связанный с закрытым ключом, или, если закрытый ключ не найден, используется первый сертификат."
  syntax:
    content: public override void Import (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объекта, используя данные из массива байтов, пароль и флаг хранилища ключей."
  remarks: "Этот метод можно использовать для типов сертификатов, такие как сертификаты X.509 в кодировке DER или Base64-кодированном или сертификаты PFX/PKCS12. Обратите внимание, что сертификат PFX/PKCS12 может содержать более одного сертификата. В этом случае используется первый сертификат, связанный с закрытым ключом, или, если закрытый ключ не найден, используется первый сертификат.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe."
  syntax:
    content: public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объекта, используя данные из массива байтов, пароль и флаги для определения Импорт закрытого ключа."
  remarks: "Этот метод можно использовать для заполнения <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта с помощью пароля для сертификата, представленного массива байтов.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2> <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>Значение может использоваться для управления, где и как импорт закрытого ключа.</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>       Этот метод принимает массив байтов и может использоваться для типов сертификатов, такие как сертификаты X.509 в кодировке DER или Base64-кодированном или сертификаты PFX/PKCS12. Обратите внимание, что сертификат PFX/PKCS12 может содержать более одного сертификата. В этом случае используется первый сертификат, связанный с закрытым ключом, или, если закрытый ключ не найден, используется первый сертификат.      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/af855297-61a6-47ed-8dcb-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/af855297-61a6-47ed-8dcb-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/af855297-61a6-47ed-8dcb-_1.vb)]"
  syntax:
    content: public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий данные сертификата X.509."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект с данными из файла сертификата, пароль и флаг хранилища ключей."
  remarks: '**Примечание по безопасности** никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe.'
  syntax:
    content: public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.Security.SecureString
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  id: Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Заполняет <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объект с данными из файла сертификата, пароля и <xref href=&quot;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags&quot;> </xref> значение."
  remarks: "Этот метод можно использовать заполнение <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объект с данными из файла сертификата, пароля и <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags>значение.</xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>      Настроек [!IMPORTANT] настроек никогда не вписывать пароль в исходный код.  Жестко запрограммированные пароли можно извлечь из сборки с помощью [Ildasm.exe (дизассемблер IL)](~/add/includes/ajax-current-ext-md.md), или шестнадцатеричного редактора, либо открыв сборку в текстовом редакторе, например Notepad.exe."
  syntax:
    content: public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);
    parameters:
    - id: fileName
      type: System.String
      description: "Имя файла сертификата."
    - id: password
      type: System.String
      description: "Пароль, необходимый для доступа к данным сертификата X.509."
    - id: keyStorageFlags
      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
      description: "Побитовое сочетание перечисления значения этого элемента управления, где и как для импорта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  id: IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает различающееся имя издателя сертификата."
  remarks: "Это свойство содержит имя сертификата центром сертификации (ЦС), выдавшего сертификат. Чтобы получить имя сертификата, используйте <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>метод.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A>       Различающееся имя для сертификата является текстовым представлением субъекта сертификата или издателя. Это представление состоит из имени атрибутов (например, «CN = MyName, OU = MyOrgUnit, C = US»)."
  example:
  - "The following code example creates a command-line executable file that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_20_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_20_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_20_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref> , Содержащий имя издателя сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Недопустимый контекст сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  id: NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Получает дату в формате местного времени, после чего сертификат является допустимым."
  remarks: "Это свойство указывает дату окончания срока действия, в которой сертификат становится недействительным."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_116_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_116_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_116_1.vb)]"
  syntax:
    content: public DateTime NotAfter { get; }
    return:
      type: System.DateTime
      description: "Объект <xref:System.DateTime>, представляющий дату истечения срока действия сертификата.</xref:System.DateTime>"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  id: NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Получает дату в формате местного времени, в которой сертификат становится действительным."
  remarks: "Это свойство указывает дату, на котором срока действия сертификата."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_85_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_85_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_85_1.vb)]"
  syntax:
    content: public DateTime NotBefore { get; }
    return:
      type: System.DateTime
      description: "Объект <xref:System.DateTime>объект, представляющий дату вступления в силу сертификата.</xref:System.DateTime>"
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  id: PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает или задает <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> , представляющий закрытый ключ, связанный с сертификатом."
  remarks: "В настоящее время это свойство поддерживает только RSA и DSA ключи, чтобы он возвращал либо <xref:System.Security.Cryptography.RSACryptoServiceProvider>или <xref:System.Security.Cryptography.DSACryptoServiceProvider>объекта.</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider> Если закрытый ключ, связанный с сертификатом, возвращается `null`.      Настроек [!WARNING] настроек Если присвойте этому свойству значение `null` или для другого ключа, не удаляя его, файл закрытого ключа остается на диске.       Чтобы правильно удалить закрытый ключ, связанный с этим свойством, задайте `PersistKeyInCsp` для `false`, а затем вызвать <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A>метод.</xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_115_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_115_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_115_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> Объект, представляющий поставщик служб шифрования RSA или DSA."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Значение ключа не является ключом RSA и DSA, или ключ не может быть прочитан."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Задаваемое значение для этого свойства равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Алгоритм ключа для этого закрытого ключа не поддерживается."
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "Ключи X.509 не совпадают."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Ключ поставщика служб шифрования является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает объект PublicKey, связанный с сертификатом."
  remarks: "Это свойство возвращает объект &quot;PublicKey&quot;, который содержит идентификатор объекта (<xref:System.Security.Cryptography.Oid>) представляет алгоритм открытого ключа, кодировке ASN.1 параметров и значение ключа в кодировке ASN.1.</xref:System.Security.Cryptography.Oid>       Вы также можете получить ключ как <xref:System.Security.Cryptography.AsymmetricAlgorithm>объекта с помощью ссылки на свойство PublicKey.</xref:System.Security.Cryptography.AsymmetricAlgorithm> Это свойство поддерживает только RSA и DSA ключи, чтобы он возвращал либо <xref:System.Security.Cryptography.RSACryptoServiceProvider>или <xref:System.Security.Cryptography.DSACryptoServiceProvider>, представляющий открытый ключ.</xref:System.Security.Cryptography.DSACryptoServiceProvider> </xref:System.Security.Cryptography.RSACryptoServiceProvider>"
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_120_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_120_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_120_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.PublicKey
      description: "Объект PublicKey."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Значение ключа не является ключом RSA и DSA, или ключ не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  id: RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает необработанные данные сертификата."
  remarks: ''
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/p-system.security.crypto_59_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/p-system.security.crypto_59_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/p-system.security.crypto_59_1.cpp)]"
  syntax:
    content: public byte[] RawData { get; }
    return:
      type: System.Byte[]
      description: "Необработанные данные сертификата в виде массива байтов."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  id: Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Сбрасывает состояние <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> объекта."
  remarks: "Этот метод можно использовать для сброса состояния сертификата. Она также освобождает все ресурсы, связанные с сертификатом."
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  id: SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает серийный номер сертификата."
  remarks: "Серийный номер сертификата является частью исходного протокола X.509. Серийный номер имеет уникальный номер, выданный поставщиком сертификата, который также называется центром сертификации (ЦС)."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_114_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_114_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_114_1.vb)]"
  syntax:
    content: public string SerialNumber { get; }
    return:
      type: System.String
      description: "Серийный номер сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает алгоритм, используемый для создания подписи сертификата."
  remarks: "Идентификатор объекта (<xref:System.Security.Cryptography.Oid>) определяет тип алгоритма подписи, примененный к сертификату.</xref:System.Security.Cryptography.Oid>"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/6cab3ad3-94fb-4ecd-9a6c-_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/6cab3ad3-94fb-4ecd-9a6c-_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/6cab3ad3-94fb-4ecd-9a6c-_1.cpp)]"
  syntax:
    content: public System.Security.Cryptography.Oid SignatureAlgorithm { get; }
    return:
      type: System.Security.Cryptography.Oid
      description: "Возвращает идентификатор объекта (<xref href=&quot;System.Security.Cryptography.Oid&quot;></xref>) алгоритма подписи."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  id: SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает различающееся имя субъекта из сертификата."
  remarks: "Различающееся имя субъекта является имя пользователя сертификата. Различающееся имя для сертификата является текстовым представлением субъекта или издателя сертификата. Это представление состоит из атрибуты имени, например, «CN = MyName, OU = MyOrgUnit, C = US»."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_80_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_80_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_80_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X500DistinguishedName&quot;> </xref> Объект, который представляет имя субъекта сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Недопустимый контекст сертификата."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  id: Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает отпечаток сертификата."
  remarks: "Отпечаток динамически создается с помощью алгоритма SHA1 и физически не существует в сертификате. Поскольку отпечатка — это уникальное значение для сертификата, обычно используется для поиска определенного сертификата в хранилище сертификатов."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_51_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_51_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_51_1.vb)]"
  syntax:
    content: public string Thumbprint { get; }
    return:
      type: System.String
      description: "Отпечаток сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  id: ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Сертификат X.509 в текстовом формате."
  remarks: "Как и во всех `ToString` методов, выходные данные могут не совпадать во всех версиях платформы .NET Framework, поэтому не следует разбирать результаты метода для содержимого. Используйте свойства <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, чтобы получить точные сведения о содержимом или используйте <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A>метод, чтобы получить сведения о сертификате.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> </xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       Этот метод отображает сертификат в текстовом формате."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/m-system.security.crypto_81_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/m-system.security.crypto_81_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/m-system.security.crypto_81_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Сведения о сертификате."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  id: ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Сертификат X.509 в текстовом формате."
  remarks: "Как и во всех `ToString` методов, выходные данные могут не совпадать во всех версиях платформы .NET Framework, поэтому не следует разбирать результаты метода для содержимого. Используйте свойства <xref:System.Security.Cryptography.X509Certificates.X509Certificate2>объекта, чтобы получить точные сведения.</xref:System.Security.Cryptography.X509Certificates.X509Certificate2>       Этот метод отображает сертификат в текстовом формате. Если `verbose` параметр имеет значение `true`, текстовое отображение включает открытый ключ, закрытый ключ и расширения. Если `verbose` равно `false`, текстовое отображение включает поля, доступные в сертификате X.509, включая отпечаток, серийный номер, имена субъекта и издателя сертификата и правильность сведений о дате."
  example:
  - "The following code example creates a command line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/38d69126-bcaf-4cee-a89b-_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/38d69126-bcaf-4cee-a89b-_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/38d69126-bcaf-4cee-a89b-_1.vb)]"
  syntax:
    content: public override string ToString (bool verbose);
    parameters:
    - id: verbose
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для отображения открытого ключа, закрытый ключ, расширения и т. д.; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для отображения сведений об ошибке <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref> класса, включая отпечаток, серийный номер, имена субъекта и издателя и т. д."
    return:
      type: System.String
      description: "Сведения о сертификате."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  id: Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
  type: Method
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Выполняет проверку цепочки X.509 с помощью базовой проверки политики."
  remarks: "Этот метод создает простую цепочку для сертификата и применяет базовую политику к этой цепочке. Если требуются дополнительные сведения о сбое, проверку сертификата непосредственно с помощью <xref:System.Security.Cryptography.X509Certificates.X509Chain>объекта.</xref:System.Security.Cryptography.X509Certificates.X509Chain>       Обратите внимание, что цепочки обработчик по умолчанию можно переопределить с помощью <xref:System.Security.Cryptography.CryptoConfig>класса.</xref:System.Security.Cryptography.CryptoConfig> В Microsoft Windows Server 2003, модуль по умолчанию соответствует спецификации, описанной в RFC3280, «[сертификата и профиль список ОТЗЫВА сертификатов для отзыва сертификатов](http://go.microsoft.com/fwlink/?LinkId=45286).»"
  example:
  - "The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  \n  \n [!code-vb[CertSelect#1](~/add/codesnippet/visualbasic/m-system.security.crypto_98_1.vb)]\n [!code-cs[CertSelect#1](~/add/codesnippet/csharp/m-system.security.crypto_98_1.cs)]\n [!code-cpp[CertSelect#1](~/add/codesnippet/cpp/m-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public bool Verify ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если проверка прошла успешно; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> проверка завершается неудачно."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  id: Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  langs:
  - csharp
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  type: Property
  assemblies:
  - System
  namespace: System.Security.Cryptography.X509Certificates
  summary: "Возвращает версию формата сертификата X.509."
  remarks: "Существует несколько версий сертификатов X.509. Это свойство определяет формат использует сертификат. Например «3» возвращается для сертификата версии 3."
  example:
  - "The following code example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  \n  \n [!code-cpp[CertInfo#1](~/add/codesnippet/cpp/p-system.security.crypto_37_1.cpp)]\n [!code-cs[CertInfo#1](~/add/codesnippet/csharp/p-system.security.crypto_37_1.cs)]\n [!code-vb[CertInfo#1](~/add/codesnippet/visualbasic/p-system.security.crypto_37_1.vb)]"
  syntax:
    content: public int Version { get; }
    return:
      type: System.Int32
      description: "Формат сертификата."
  overload: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Сертификат не может быть прочитан."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  isExternal: false
  name: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2()
  nameWithType: X509Certificate2.X509Certificate2()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[])
  nameWithType: X509Certificate2.X509Certificate2(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(IntPtr)
  nameWithType: X509Certificate2.X509Certificate2(IntPtr)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(X509Certificate)
  nameWithType: X509Certificate2.X509Certificate2(X509Certificate)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String)
  nameWithType: X509Certificate2.X509Certificate2(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(SerializationInfo,StreamingContext)
  nameWithType: X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String)
  nameWithType: X509Certificate2.X509Certificate2(String,String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509KeyStorageFlags
  nameWithType: X509KeyStorageFlags
  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ExtensionCollection
  nameWithType: X509ExtensionCollection
  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(Byte[])
  nameWithType: X509Certificate2.GetCertContentType(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509ContentType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509ContentType
  nameWithType: X509ContentType
  fullName: System.Security.Cryptography.X509Certificates.X509ContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType(String)
  nameWithType: X509Certificate2.GetCertContentType(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo(X509NameType,Boolean)
  nameWithType: X509Certificate2.GetNameInfo(X509NameType,Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(X509NameType,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509NameType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509NameType
  nameWithType: X509NameType
  fullName: System.Security.Cryptography.X509Certificates.X509NameType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[])
  nameWithType: X509Certificate2.Import(Byte[])
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[])
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String)
  nameWithType: X509Certificate2.Import(String)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(Byte[],String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(Byte[],String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,SecureString,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,SecureString,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import(String,String,X509KeyStorageFlags)
  nameWithType: X509Certificate2.Import(String,String,X509KeyStorageFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Import(String,String,X509KeyStorageFlags)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X500DistinguishedName
  nameWithType: X500DistinguishedName
  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.PublicKey
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: PublicKey
  nameWithType: PublicKey
  fullName: System.Security.Cryptography.X509Certificates.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset()
  nameWithType: X509Certificate2.Reset()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.Oid
  parent: System.Security.Cryptography
  isExternal: false
  name: Oid
  nameWithType: Oid
  fullName: System.Security.Cryptography.Oid
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString()
  nameWithType: X509Certificate2.ToString()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString(Boolean)
  nameWithType: X509Certificate2.ToString(Boolean)
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify()
  nameWithType: X509Certificate2.Verify()
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify()
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2.X509Certificate2
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Archived
  nameWithType: X509Certificate2.Archived
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Extensions
  nameWithType: X509Certificate2.Extensions
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: FriendlyName
  nameWithType: X509Certificate2.FriendlyName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetCertContentType
  nameWithType: X509Certificate2.GetCertContentType
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: GetNameInfo
  nameWithType: X509Certificate2.GetNameInfo
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: HasPrivateKey
  nameWithType: X509Certificate2.HasPrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Import*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Import
  nameWithType: X509Certificate2.Import
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: IssuerName
  nameWithType: X509Certificate2.IssuerName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotAfter
  nameWithType: X509Certificate2.NotAfter
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: NotBefore
  nameWithType: X509Certificate2.NotBefore
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PrivateKey
  nameWithType: X509Certificate2.PrivateKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: PublicKey
  nameWithType: X509Certificate2.PublicKey
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: RawData
  nameWithType: X509Certificate2.RawData
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Reset*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Reset
  nameWithType: X509Certificate2.Reset
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SerialNumber
  nameWithType: X509Certificate2.SerialNumber
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: X509Certificate2.SignatureAlgorithm
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: SubjectName
  nameWithType: X509Certificate2.SubjectName
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Thumbprint
  nameWithType: X509Certificate2.Thumbprint
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: ToString
  nameWithType: X509Certificate2.ToString
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Verify*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Verify
  nameWithType: X509Certificate2.Verify
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version*
  parent: System.Security.Cryptography.X509Certificates.X509Certificate2
  isExternal: false
  name: Version
  nameWithType: X509Certificate2.Version
