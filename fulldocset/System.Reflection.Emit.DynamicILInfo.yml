### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Обеспечивает поддержку альтернативных методов для создания промежуточного языка Майкрософт (MSIL) и метаданных для динамического метода, включая методы создания маркеров и вставки кода, обработки исключений и больших двоичных объектов подписи локальной переменной."
  remarks: "Класс DynamicILInfo позволяет разработчикам создавать свои собственные генераторы MSIL вместо использования <xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator>       Чтобы создать экземпляры других типов, вызывать методы и т. д, созданный MSIL должен включать маркеры для этих сущностей. Класс DynamicILInfo предоставляет несколько перегрузок <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>метод, который будет возвращать маркеры допустимый в области текущего DynamicILInfo.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> Например, если необходимо вызвать перегрузку <xref:System.Console.WriteLine%2A?displayProperty=fullName>метода, вы можете получить <xref:System.RuntimeMethodHandle>для перегрузки и передать его в <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>метод, чтобы получить маркер для внедрения в ваш код MSIL.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       После создания <xref:System.Byte>массивы для подписи локальной переменной, исключения и тело кода, можно использовать <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, и <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>методы для вставки их в <xref:System.Reflection.Emit.DynamicMethod>связанные с объектом DynamicILInfo.</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       Создание собственных метаданных и MSIL требует знакомстве с документацией по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III набору инструкций CIL». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International.      Настроек [!NOTE] настроек DynamicILInfo не следует использовать для создания кода, который создает делегат для другой динамический метод путем вызова конструктора делегата непосредственно. Вместо этого используйте <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>метод для создания делегата.</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> Делегат, который создается с помощью конструктора делегата имеет ссылку на целевой динамический метод. Динамический метод может быть сборщиком мусора, когда делегат по-прежнему используется."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает динамический метод, тело которого создается в текущем экземпляре."
  remarks: "Объект <xref:System.Reflection.Emit.DynamicILInfo>объект всегда связан с динамического метода.</xref:System.Reflection.Emit.DynamicILInfo> Назначение <xref:System.Reflection.Emit.DynamicILInfo>класса является предоставление альтернативного способа вставки потока MSIL, обработки исключений и подписи локальных переменных в динамический метод, для разработчиков, которым требуется создать MSIL без использования <xref:System.Reflection.Emit.ILGenerator>класса.</xref:System.Reflection.Emit.ILGenerator> </xref:System.Reflection.Emit.DynamicILInfo>"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "Объект <xref:System.Reflection.Emit.DynamicMethod>объект, представляющий динамический метод, для которого текущий <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта создание кода.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющая подпись для связанного динамического метода."
  remarks: 'Сведения о больших двоичных объектов подписи см. в документации Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "Массив, содержащий сигнатуру."
    return:
      type: System.Int32
      description: "Токен, который может быть внедрен в метаданные и поток MSIL для связанного динамического метода."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющего динамический метод, вызываемый из связанного метода."
  remarks: "Токен, возвращенный перегрузка метода позволяет вызвать динамический метод из динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo> Чтобы вызвать рекурсивно связанного динамического метода, передайте значение <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>Свойства.</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "Динамический метод для вызова."
    return:
      type: System.Int32
      description: "Токен, который может быть встроен в поток MSIL для связанного динамического метода в качестве назначения инструкции MSIL."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющий поле должен быть получен из связанного динамического метода."
  remarks: "Необходимо получить маркер для любого поля, будут доступны для динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo> Используйте <xref:System.Type.GetField%2A?displayProperty=fullName>метод, чтобы получить <xref:System.Reflection.FieldInfo>поля, которое требуется доступ, а затем с помощью <xref:System.Reflection.FieldInfo.FieldHandle%2A>Свойства <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Поле для доступа."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, который обращается к поля в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющего метод, который должен быть получен из связанного динамического метода."
  remarks: "Необходимо получить маркер для любого метода, будут доступны для динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo> Используйте <xref:System.Type.GetMethod%2A?displayProperty=fullName>метод для получения <xref:System.Reflection.MethodInfo>метода, который требуется открыть и затем с помощью <xref:System.Reflection.MethodBase.MethodHandle%2A>Свойства <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>      Настроек [!NOTE] настроек для метода, принадлежащего к универсальному типу, используйте <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>перегрузки метода и укажите <xref:System.RuntimeTypeHandle>для универсального типа.</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Метод для доступа."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, который обращается к методы, такие как <xref:System.Reflection.Emit.OpCodes.Call>или <xref:System.Reflection.Emit.OpCodes.Ldtoken>, в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющий тип, используемый в связанного динамического метода."
  remarks: "Токен, возвращенный перегрузка метода позволяет определить тип локальной переменной и выпустить MSIL для создания экземпляра типа в динамический метод, связанный с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo>       Для получения <xref:System.RuntimeTypeHandle>представляет тип, используйте <xref:System.Type.TypeHandle%2A?displayProperty=fullName>свойство.</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "Тип, который будет использоваться."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, требуется тип в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющее строковый литерал для использования в связанного динамического метода."
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "Строка для использования."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, на котором требуется строка, в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющий поле должен быть получен из связанного динамического метода; поле находится на указанного универсального типа."
  remarks: "Необходимо получить маркер для любого поля, будут доступны для динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo> Используйте <xref:System.Type.GetField%2A?displayProperty=fullName>метод, чтобы получить <xref:System.Reflection.FieldInfo>поля, которое нужно открыть и затем с помощью <xref:System.Reflection.FieldInfo.FieldHandle%2A>Свойства <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> </xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Поле для доступа."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Универсальный тип, к которому принадлежит поле."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, который обращается к поля в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Возвращает токен, допустимый в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, представляющего метод, для универсального типа."
  remarks: "Необходимо получить маркер для любого метода, который будет вызываться динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo>объекта.</xref:System.Reflection.Emit.DynamicILInfo> Используйте <xref:System.Type.GetMethod%2A?displayProperty=fullName>метод для получения <xref:System.Reflection.MethodInfo>метода, который вы хотите вызвать, а затем использовать <xref:System.Reflection.MethodBase.MethodHandle%2A>свойство для получения <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> </xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "Метод."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Универсальный тип, к которому принадлежит метод."
    return:
      type: System.Int32
      description: "Маркер, который может использоваться в качестве операнда инструкции MSIL, который обращается к методы, такие как <xref:System.Reflection.Emit.OpCodes.Call>или <xref:System.Reflection.Emit.OpCodes.Ldtoken>, в области текущего <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> объекта.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает текст кода связанного динамического метода."
  remarks: "Проверка допустимости не выполняется в потоке MSIL.       Второй вызов этого метода во второй раз заменяет первый поток MSIL.       Создание собственных метаданных и MSIL требует знакомстве с документацией по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III набору инструкций CIL». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "Массив, содержащий поток MSIL."
    - id: maxStackSize
      type: System.Int32
      description: "Максимальное количество элементов в стеке операторов при выполнении метода."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает текст кода связанного динамического метода."
  remarks: "Проверка допустимости не выполняется в потоке MSIL.       Второй вызов этого метода во второй раз заменяет первый поток MSIL.       Создание собственных метаданных и MSIL требует знакомства с документацией по Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика» и «раздел III: набор инструкций CIL.» Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International."
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "Указатель на массив байтов, содержащий поток MSIL."
    - id: codeSize
      type: System.Int32
      description: "Число байтов в поток MSIL."
    - id: maxStackSize
      type: System.Int32
      description: "Максимальное количество элементов в стеке операторов при выполнении метода."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и <code>codeSize</code> больше 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>меньше 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает метаданные исключения для связанного динамического метода."
  remarks: 'Метаданные исключения для метода определяют расположение и размер всех `try`, `catch`, `finally`, фильтра и сбойных блоков. Сведения о макете этих метаданных см. в документации Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "Массив, содержащий метаданные исключения."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает метаданные исключения для связанного динамического метода."
  remarks: 'Метаданные исключения для метода определяют расположение и размер всех `try`, `catch`, `finally`, фильтра и сбойных блоков. Сведения о макете этих метаданных см. в документации Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III набору инструкций CIL». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International.'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "Указатель на массив байтов, содержащий метаданные исключения."
    - id: exceptionsSize
      type: System.Int32
      description: "Число байтов в метаданных исключения."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и <code>exceptionSize</code> больше 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>меньше 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода."
  remarks: "Подпись локальной переменной описывает структуру локальных переменных метода. Чтобы упростить процесс создания подписи локальной переменной, используйте `static` (`Shared` в Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>метода <xref:System.Reflection.Emit.SignatureHelper>для подписи локальной.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Дополнительные сведения о подписях локальных переменных см. в документации Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "Массив, содержащий структуру локальных переменных для связанного <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода."
  remarks: "Подпись локальной переменной описывает структуру локальных переменных метода. Чтобы упростить процесс создания подписи локальной переменной, используйте `static` (`Shared` в Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>метода <xref:System.Reflection.Emit.SignatureHelper>для подписи локальной.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Дополнительные сведения о подписях локальных переменных см. в документации Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика». Документация доступна через Интернет; в разделе [ECMA C# и общий стандарты инфраструктуры языка](http://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [стандарту ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) на сайте Ecma International."
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "Массив, содержащий структуру локальных переменных для связанного <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
    - id: signatureSize
      type: System.Int32
      description: "Число байтов в сигнатуре."
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и <code>signatureSize</code> больше 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>меньше 0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
