### YamlMime:ManagedReference
items:
- uid: System.Windows.ContentElement
  id: ContentElement
  children:
  - System.Windows.ContentElement.#ctor
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.AllowDrop
  - System.Windows.ContentElement.AllowDropProperty
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.AreAnyTouchesCaptured
  - System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  - System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  - System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.ContentElement.AreAnyTouchesOver
  - System.Windows.ContentElement.AreAnyTouchesOverProperty
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.ContentElement.CaptureMouse
  - System.Windows.ContentElement.CaptureStylus
  - System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.CommandBindings
  - System.Windows.ContentElement.DragEnter
  - System.Windows.ContentElement.DragEnterEvent
  - System.Windows.ContentElement.DragLeave
  - System.Windows.ContentElement.DragLeaveEvent
  - System.Windows.ContentElement.DragOver
  - System.Windows.ContentElement.DragOverEvent
  - System.Windows.ContentElement.Drop
  - System.Windows.ContentElement.DropEvent
  - System.Windows.ContentElement.Focus
  - System.Windows.ContentElement.Focusable
  - System.Windows.ContentElement.FocusableChanged
  - System.Windows.ContentElement.FocusableProperty
  - System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.ContentElement.GetUIParentCore
  - System.Windows.ContentElement.GiveFeedback
  - System.Windows.ContentElement.GiveFeedbackEvent
  - System.Windows.ContentElement.GotFocus
  - System.Windows.ContentElement.GotFocusEvent
  - System.Windows.ContentElement.GotKeyboardFocus
  - System.Windows.ContentElement.GotKeyboardFocusEvent
  - System.Windows.ContentElement.GotMouseCapture
  - System.Windows.ContentElement.GotMouseCaptureEvent
  - System.Windows.ContentElement.GotStylusCapture
  - System.Windows.ContentElement.GotStylusCaptureEvent
  - System.Windows.ContentElement.GotTouchCapture
  - System.Windows.ContentElement.GotTouchCaptureEvent
  - System.Windows.ContentElement.HasAnimatedProperties
  - System.Windows.ContentElement.InputBindings
  - System.Windows.ContentElement.IsEnabled
  - System.Windows.ContentElement.IsEnabledChanged
  - System.Windows.ContentElement.IsEnabledCore
  - System.Windows.ContentElement.IsEnabledProperty
  - System.Windows.ContentElement.IsFocused
  - System.Windows.ContentElement.IsFocusedProperty
  - System.Windows.ContentElement.IsInputMethodEnabled
  - System.Windows.ContentElement.IsKeyboardFocused
  - System.Windows.ContentElement.IsKeyboardFocusedChanged
  - System.Windows.ContentElement.IsKeyboardFocusedProperty
  - System.Windows.ContentElement.IsKeyboardFocusWithin
  - System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  - System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  - System.Windows.ContentElement.IsMouseCaptured
  - System.Windows.ContentElement.IsMouseCapturedChanged
  - System.Windows.ContentElement.IsMouseCapturedProperty
  - System.Windows.ContentElement.IsMouseCaptureWithin
  - System.Windows.ContentElement.IsMouseCaptureWithinChanged
  - System.Windows.ContentElement.IsMouseCaptureWithinProperty
  - System.Windows.ContentElement.IsMouseDirectlyOver
  - System.Windows.ContentElement.IsMouseDirectlyOverChanged
  - System.Windows.ContentElement.IsMouseDirectlyOverProperty
  - System.Windows.ContentElement.IsMouseOver
  - System.Windows.ContentElement.IsMouseOverProperty
  - System.Windows.ContentElement.IsStylusCaptured
  - System.Windows.ContentElement.IsStylusCapturedChanged
  - System.Windows.ContentElement.IsStylusCapturedProperty
  - System.Windows.ContentElement.IsStylusCaptureWithin
  - System.Windows.ContentElement.IsStylusCaptureWithinChanged
  - System.Windows.ContentElement.IsStylusCaptureWithinProperty
  - System.Windows.ContentElement.IsStylusDirectlyOver
  - System.Windows.ContentElement.IsStylusDirectlyOverChanged
  - System.Windows.ContentElement.IsStylusDirectlyOverProperty
  - System.Windows.ContentElement.IsStylusOver
  - System.Windows.ContentElement.IsStylusOverProperty
  - System.Windows.ContentElement.KeyDown
  - System.Windows.ContentElement.KeyDownEvent
  - System.Windows.ContentElement.KeyUp
  - System.Windows.ContentElement.KeyUpEvent
  - System.Windows.ContentElement.LostFocus
  - System.Windows.ContentElement.LostFocusEvent
  - System.Windows.ContentElement.LostKeyboardFocus
  - System.Windows.ContentElement.LostKeyboardFocusEvent
  - System.Windows.ContentElement.LostMouseCapture
  - System.Windows.ContentElement.LostMouseCaptureEvent
  - System.Windows.ContentElement.LostStylusCapture
  - System.Windows.ContentElement.LostStylusCaptureEvent
  - System.Windows.ContentElement.LostTouchCapture
  - System.Windows.ContentElement.LostTouchCaptureEvent
  - System.Windows.ContentElement.MouseDown
  - System.Windows.ContentElement.MouseDownEvent
  - System.Windows.ContentElement.MouseEnter
  - System.Windows.ContentElement.MouseEnterEvent
  - System.Windows.ContentElement.MouseLeave
  - System.Windows.ContentElement.MouseLeaveEvent
  - System.Windows.ContentElement.MouseLeftButtonDown
  - System.Windows.ContentElement.MouseLeftButtonDownEvent
  - System.Windows.ContentElement.MouseLeftButtonUp
  - System.Windows.ContentElement.MouseLeftButtonUpEvent
  - System.Windows.ContentElement.MouseMove
  - System.Windows.ContentElement.MouseMoveEvent
  - System.Windows.ContentElement.MouseRightButtonDown
  - System.Windows.ContentElement.MouseRightButtonDownEvent
  - System.Windows.ContentElement.MouseRightButtonUp
  - System.Windows.ContentElement.MouseRightButtonUpEvent
  - System.Windows.ContentElement.MouseUp
  - System.Windows.ContentElement.MouseUpEvent
  - System.Windows.ContentElement.MouseWheel
  - System.Windows.ContentElement.MouseWheelEvent
  - System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.ContentElement.OnCreateAutomationPeer
  - System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.ContentElement.PreviewDragEnter
  - System.Windows.ContentElement.PreviewDragEnterEvent
  - System.Windows.ContentElement.PreviewDragLeave
  - System.Windows.ContentElement.PreviewDragLeaveEvent
  - System.Windows.ContentElement.PreviewDragOver
  - System.Windows.ContentElement.PreviewDragOverEvent
  - System.Windows.ContentElement.PreviewDrop
  - System.Windows.ContentElement.PreviewDropEvent
  - System.Windows.ContentElement.PreviewGiveFeedback
  - System.Windows.ContentElement.PreviewGiveFeedbackEvent
  - System.Windows.ContentElement.PreviewGotKeyboardFocus
  - System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewKeyDown
  - System.Windows.ContentElement.PreviewKeyDownEvent
  - System.Windows.ContentElement.PreviewKeyUp
  - System.Windows.ContentElement.PreviewKeyUpEvent
  - System.Windows.ContentElement.PreviewLostKeyboardFocus
  - System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  - System.Windows.ContentElement.PreviewMouseDown
  - System.Windows.ContentElement.PreviewMouseDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonDown
  - System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseLeftButtonUp
  - System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseMove
  - System.Windows.ContentElement.PreviewMouseMoveEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonDown
  - System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  - System.Windows.ContentElement.PreviewMouseRightButtonUp
  - System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  - System.Windows.ContentElement.PreviewMouseUp
  - System.Windows.ContentElement.PreviewMouseUpEvent
  - System.Windows.ContentElement.PreviewMouseWheel
  - System.Windows.ContentElement.PreviewMouseWheelEvent
  - System.Windows.ContentElement.PreviewQueryContinueDrag
  - System.Windows.ContentElement.PreviewQueryContinueDragEvent
  - System.Windows.ContentElement.PreviewStylusButtonDown
  - System.Windows.ContentElement.PreviewStylusButtonDownEvent
  - System.Windows.ContentElement.PreviewStylusButtonUp
  - System.Windows.ContentElement.PreviewStylusButtonUpEvent
  - System.Windows.ContentElement.PreviewStylusDown
  - System.Windows.ContentElement.PreviewStylusDownEvent
  - System.Windows.ContentElement.PreviewStylusInAirMove
  - System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  - System.Windows.ContentElement.PreviewStylusInRange
  - System.Windows.ContentElement.PreviewStylusInRangeEvent
  - System.Windows.ContentElement.PreviewStylusMove
  - System.Windows.ContentElement.PreviewStylusMoveEvent
  - System.Windows.ContentElement.PreviewStylusOutOfRange
  - System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  - System.Windows.ContentElement.PreviewStylusSystemGesture
  - System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  - System.Windows.ContentElement.PreviewStylusUp
  - System.Windows.ContentElement.PreviewStylusUpEvent
  - System.Windows.ContentElement.PreviewTextInput
  - System.Windows.ContentElement.PreviewTextInputEvent
  - System.Windows.ContentElement.PreviewTouchDown
  - System.Windows.ContentElement.PreviewTouchDownEvent
  - System.Windows.ContentElement.PreviewTouchMove
  - System.Windows.ContentElement.PreviewTouchMoveEvent
  - System.Windows.ContentElement.PreviewTouchUp
  - System.Windows.ContentElement.PreviewTouchUpEvent
  - System.Windows.ContentElement.QueryContinueDrag
  - System.Windows.ContentElement.QueryContinueDragEvent
  - System.Windows.ContentElement.QueryCursor
  - System.Windows.ContentElement.QueryCursorEvent
  - System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.ContentElement.ReleaseAllTouchCaptures
  - System.Windows.ContentElement.ReleaseMouseCapture
  - System.Windows.ContentElement.ReleaseStylusCapture
  - System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.ContentElement.ShouldSerializeCommandBindings
  - System.Windows.ContentElement.ShouldSerializeInputBindings
  - System.Windows.ContentElement.StylusButtonDown
  - System.Windows.ContentElement.StylusButtonDownEvent
  - System.Windows.ContentElement.StylusButtonUp
  - System.Windows.ContentElement.StylusButtonUpEvent
  - System.Windows.ContentElement.StylusDown
  - System.Windows.ContentElement.StylusDownEvent
  - System.Windows.ContentElement.StylusEnter
  - System.Windows.ContentElement.StylusEnterEvent
  - System.Windows.ContentElement.StylusInAirMove
  - System.Windows.ContentElement.StylusInAirMoveEvent
  - System.Windows.ContentElement.StylusInRange
  - System.Windows.ContentElement.StylusInRangeEvent
  - System.Windows.ContentElement.StylusLeave
  - System.Windows.ContentElement.StylusLeaveEvent
  - System.Windows.ContentElement.StylusMove
  - System.Windows.ContentElement.StylusMoveEvent
  - System.Windows.ContentElement.StylusOutOfRange
  - System.Windows.ContentElement.StylusOutOfRangeEvent
  - System.Windows.ContentElement.StylusSystemGesture
  - System.Windows.ContentElement.StylusSystemGestureEvent
  - System.Windows.ContentElement.StylusUp
  - System.Windows.ContentElement.StylusUpEvent
  - System.Windows.ContentElement.TextInput
  - System.Windows.ContentElement.TextInputEvent
  - System.Windows.ContentElement.TouchDown
  - System.Windows.ContentElement.TouchDownEvent
  - System.Windows.ContentElement.TouchEnter
  - System.Windows.ContentElement.TouchEnterEvent
  - System.Windows.ContentElement.TouchesCaptured
  - System.Windows.ContentElement.TouchesCapturedWithin
  - System.Windows.ContentElement.TouchesDirectlyOver
  - System.Windows.ContentElement.TouchesOver
  - System.Windows.ContentElement.TouchLeave
  - System.Windows.ContentElement.TouchLeaveEvent
  - System.Windows.ContentElement.TouchMove
  - System.Windows.ContentElement.TouchMoveEvent
  - System.Windows.ContentElement.TouchUp
  - System.Windows.ContentElement.TouchUpEvent
  langs:
  - csharp
  name: ContentElement
  nameWithType: ContentElement
  fullName: System.Windows.ContentElement
  type: Class
  summary: "Предоставляет базовый класс уровня ядра WPF для элементов содержимого. Элементы содержимого разработаны для представления в стиле потока с помощью модели интуитивно макета разметки и намеренно простой объектной модели."
  remarks: "ContentElement определяет следующие общие характеристики содержимого: - ввода: все ContentElement производные классы обеспечивают поддержку базовый ввод с клавиатуры, мыши, операции перетаскивания и вставки, сенсорного экрана и сочетания клавиш.      -Фокус: Все ContentElement производные классы могут потенциально может получить фокус. (Тем не менее, может иметь фокус состояние по умолчанию для базового класса ContentElement — `false`. Дополнительные сведения о том, как сделать ContentElement может иметь фокус в разделе <xref:System.Windows.ContentElement.Focusable%2A>.)</xref:System.Windows.ContentElement.Focusable%2A> Кроме того, этот класс содержит [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] , можно использовать для перемещения фокуса между связанных элементов.      -События: ContentElement включает события, связанные с входными и фокус; Он также включает события для изменений в состоянии. Во многих случаях события ContentElement — перенаправленного события. В некоторых случаях перенаправленные события имеют нисходящей и восходящей маршрутизации стратегии возникновения как отдельные события в ответ на том же состоянии или условие. Кроме того, определяет ContentElement [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] , можно вызвать направлено события, которые можно добавлять и удалять обработчики событий.       ContentElement использует многие распространенные [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> Эти Общие [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] поставляются наследования из общего класса. Но они совместно используют общие названия, аналогичное поведение и внутреннее применение [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] в каждом классе. Сходство вызвано ContentElement и <xref:System.Windows.UIElement>являются каждого классы, которые являются основе элемента, несмотря на то, что использует другой подход к модели поведения объекта разметки.</xref:System.Windows.UIElement>       В частности <xref:System.Windows.UIElement>потомком <xref:System.Windows.Media.Visual>, который предоставляет графики более низкого уровня поддержку для визуализации ContentElement прямоугольной области окна составных, тогда как ContentElement откладывает подготовки отчетов, чтобы легче поддерживаются основные понятия, чаще всего документа сценариев, таких как переноса и поток.</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement> Также эти связанные классы реализуют общие интерфейсы <xref:System.Windows.IInputElement>и <xref:System.Windows.Media.Animation.IAnimatable>.</xref:System.Windows.Media.Animation.IAnimatable> </xref:System.Windows.IInputElement>"
  syntax:
    content: 'public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.ContentElement.#ctor
  id: '#ctor'
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.ContentElement&quot;> </xref> класса."
  syntax:
    content: public ContentElement ();
    parameters: []
  overload: System.Windows.ContentElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента."
  remarks: "Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.       Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события."
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор для перенаправленного события для обработки."
    - id: handler
      type: System.Delegate
      description: "Ссылка на реализацию обработчика."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента. Укажите <code> handledEventsToo </code> как <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> чтобы предоставленный обработчик вызывался для перенаправленного события, которое уже было отмечено как обработанное другим элементом на маршруте события."
  remarks: "Обработка событий низкоуровневого ввода практическая является сложной задачей. Многие элементы управления реализуют поведение, определенное событие помечено как обработанное куда заменяется более интуитивным событием. Как правило элемент управления только отметит событие ввода платформы как обработанное при наличии намеренной таким образом. В некоторых сценариях желаемого возможно способа обработки входных событий. Он предназначен для этих сценариев, Регистрация обработчиков с `handledEventsToo` как `true` подходит. Однако не следует это регулярно. Вызов обработчиков в ответ на все события, даже в случае обработки усложнит собственную логику обработки событий в приложении. Снижение производительности могут появиться, если логику обработки является существенным. Необходимо зарезервировать использование присоединения обработчиков для уже обработанных событий для ситуаций, где были обнаружены в процессе разработки, некоторые элементы управления обработки событий, которые по-прежнему необходимо обработать с логикой приложения.       Предотвращение классов определенные сочетания элементов управления другим способом является использование события предварительного просмотра. Например если <xref:System.Windows.ContentElement.MouseLeftButtonDown>помечено как обработанное обработкой классов, можно добавить обработчики для <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>вместо.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown>       Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.       Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события."
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор обрабатываемого перенаправленного события."
    - id: handler
      type: System.Delegate
      description: "Ссылка на реализацию обработчика."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для регистрации обработчика таким образом, чтобы он вызывался даже в том случае, если перенаправленное событие помечено как обработанное в его данных события. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для регистрации обработчика с условием по умолчанию, что он не будет вызван, если перенаправленное событие уже помечено как обработанное.       Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.       Не следует постоянно прибегать к повторной обработке перенаправленного события. Дополнительные сведения см. заметки."
  overload: System.Windows.ContentElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет указанный обработчики <xref href=&quot;System.Windows.EventRoute&quot;> </xref> для текущего <xref href=&quot;System.Windows.ContentElement&quot;> </xref> коллекции обработчиков событий."
  remarks: "Используйте этот метод для элементов (независимо от того, является ли они реализуют <xref:System.Windows.IContentHost>) чтобы добавить обработчики для дочерних элементов в узле <xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost>"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "Маршрут события, обработчики добавляются."
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Данные события, используемый для добавления обработчиков. Этот метод использует <xref:System.Windows.RoutedEventArgs.RoutedEvent*>свойство аргументов для создания обработчиков.</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.ContentElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, является ли этот элемент может использоваться как целевой объект операции перетаскивания и вставки."
  remarks: "Операции перетаскивания и вставки не включены по умолчанию и необходимо включить, задав значение AllowDrop намеренно `true`. Кроме данной базовой настройки, и перетащите поведение зависит от способа реализации и не определяется <xref:System.Windows.ContentElement>или других класса. базовый элемент</xref:System.Windows.ContentElement> Некоторые элементы управления, например, <xref:System.Windows.Controls.RichTextBox>, есть ли у поведение по умолчанию, но это не <xref:System.Windows.ContentElement>производные классы имеют такие расширения функциональности.</xref:System.Windows.ContentElement> </xref:System.Windows.Controls.RichTextBox> Дополнительные сведения об операции перетаскивания см. в разделе [Drop Обзор и перетащите](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.FrameworkContentElement>переопределяет метаданные для этого свойства зависимостей в своей реализации.</xref:System.Windows.FrameworkContentElement> В частности <xref:System.Windows.FrameworkContentElement>обозначает, что это свойство позволяет наследование значения свойства (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> — `true` в метаданных).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkContentElement> Наследование значения свойства в данном контексте означает, что если существуют дочерние элементы и не имеет значения для AllowDrop, назначенного с помощью локальных значений или стилей, значение ближайшего родительского элемента с назначенным данным значением (опять же, либо в стилях, с помощью значений по умолчанию или локальное значение), то значение из этого родительского элемента назначен всем неназначенным дочерним элементам системой свойств. Это означает, что можно указать, следует ли разрешить операции удаления в корневом элементе и затем передавать значение для всех <xref:System.Windows.FrameworkContentElement>дочерние элементы, не назначенные специально его значение `false`.</xref:System.Windows.FrameworkContentElement>      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.AllowDropProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.AllowDropProperty>"
  example:
  - "The following example sets AllowDrop in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].  \n  \n [!code-xml[ContentElementsSmorgasbord#AllowDrop](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#allowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент может использоваться в качестве целевого объекта для операции перетаскивания и вставки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.AllowDrop*>свойство зависимостей.</xref:System.Windows.ContentElement.AllowDrop*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Применяет анимацию к указанному свойству зависимостей для этого элемента. Все существующие анимации останавливаются и заменена новой анимацией."
  remarks: "Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Идентификатор для свойства, для которого должна начаться анимация."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Таймер анимации, контролирующий и объявляющий анимацию."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Применяет анимацию к указанному свойству зависимостей для этого элемента, с возможностью указать, что произойдет, если у свойства уже имеется запущенная анимация."
  remarks: "Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Таймер анимации, контролирующий и объявляющий анимацию."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Значение перечисления. Значение по умолчанию — <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, который останавливает все существующие анимации и заменить новым."
  overload: System.Windows.ContentElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает значение, указывающее, захвачена ли к данному элементу по крайней мере одним касанием."
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один touch выделяется для этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.AreAnyTouchesCaptured*>свойство зависимостей.</xref:System.Windows.ContentElement.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает значение, указывающее, захвачена ли хотя бы одна операция сенсорного ввода для этого элемента или для всех дочерних элементов в визуальном дереве."
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один touch выделяется для этого элемента или дочерние элементы в визуальном дереве; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*>свойство зависимостей.</xref:System.Windows.ContentElement.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, нажата ли хотя бы одним касанием над данным элементом."
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один сенсорное нажатие этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*>свойство зависимостей.</xref:System.Windows.ContentElement.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, нажата ли хотя бы одним касанием данного элемента или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если хотя бы одно сенсорное нажатие данного элемента или дочерние элементы в визуальном дереве; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.AreAnyTouchesOver*>свойство зависимостей.</xref:System.Windows.ContentElement.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Запускает анимацию для указанного свойства данного элемента."
  remarks: "При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.       Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>для `animation` — `null`, любые текущие анимации будут удалены и текущее значение свойства удерживается.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство, указанное как идентификатор свойства зависимостей."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Временная шкала должна начинаться анимация."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Запускает указанную анимацию для указанного свойства данного элемента, с параметром, указывающим, что произойдет, если у свойства уже имеется запущенная анимация."
  remarks: "При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.       Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>для `animation` — `null`, любые текущие анимации будут удалены и текущее значение свойства удерживается.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска."
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство, заданное в качестве идентификатора свойства зависимости."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Временная шкала для применения анимации."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Значение перечисления, которое указывает, как новая анимация взаимодействует с любыми текущими анимациями, которые уже влияют на значение свойства."
  overload: System.Windows.ContentElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку принудительного захвата мыши данным элементом."
  remarks: "Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.ContentElement.IsEnabled%2A>— `true` перед вызовом метода CaptureMouse.</xref:System.Windows.ContentElement.IsEnabled%2A>       Если вызов возвращает CaptureMouse `true`, затем <xref:System.Windows.ContentElement.IsMouseCaptured%2A>также `true`.</xref:System.Windows.ContentElement.IsMouseCaptured%2A>       Если вызов возвращает CaptureMouse `true`, то <xref:System.Windows.ContentElement.GotMouseCapture>и <xref:System.Windows.ContentElement.IsMouseCapturedChanged>событий, с <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>событий данные выводятся как элемент, в котором вызывается метод CaptureMouse.</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.IsMouseCapturedChanged> </xref:System.Windows.ContentElement.GotMouseCapture> При попытке захвата, возможен конфликт с уже существующим захватом, особенно с относящимися к перетаскивания и вставки с помощью мыши.       Чтобы очистить захват мыши из всех элементов, вызовите <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>с `element` указанный параметр как `null`.</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>"
  example:
  - "The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element. Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=fullName> method. Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>. The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>. This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если успешно захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку захвата пера данным элементом."
  remarks: "Реализация по умолчанию, на основании основным устройством пера всегда возвращает `true`. Тем не менее при расширении устройств ввода, которые обеспечивают реализацию устройств для системы ввода, имеется возможность создать систему с альтернативной реализацией перьевого устройства, могут возвращать разные результаты.       При захвате пера элементом, он получает ввод от пера, даже если перо находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.       Вызов этого метода вызывает базовый статический <xref:System.Windows.Input.Stylus>метод <xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> Поведение самого захвата реализуется с помощью реализации устройства пера active.       Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.ContentElement.IsEnabled%2A>— `true` возвращают перед вызовом метода CaptureStylus.</xref:System.Windows.ContentElement.IsEnabled%2A>       Если вызов возвращает CaptureStylus `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A>также `true`.</xref:System.Windows.ContentElement.IsStylusCaptured%2A>"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если перо успешно захвачено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку принудительного получения операции сенсорного ввода для этого элемента."
  remarks: "Возвращает CaptureTouch `false` Если <xref:System.Windows.Input.TouchDevice>записывается в настоящее время в другой элемент.</xref:System.Windows.Input.TouchDevice>       Возвращает CaptureTouch `true`, то <xref:System.Windows.ContentElement.GotTouchCapture>события.</xref:System.Windows.ContentElement.GotTouchCapture>       Чтобы освободить записи одним нажатием из этого элемента, используйте <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A>метод и указать устройство сенсорного ввода для освобождения.</xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> Чтобы освободить все изменения из этого элемента, используйте <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A>метод.</xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "Устройство для записи."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанная операция сенсорного ввода выделяется для этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает коллекцию <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> объектов, связанных с этим элементом."
  remarks: "Объект <xref:System.Windows.Input.CommandBinding>включает обработку команд для определенной команды для данного элемента и объявляет компоновку между командой, ее событиями и обработчики, подключенные с помощью данного элемента.</xref:System.Windows.Input.CommandBinding>       Другой способ заполнения коллекции поддержкой CommandBinding является использование <xref:System.Windows.Input.CommandManager>методы программным путем.</xref:System.Windows.Input.CommandManager>      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a>## Использование элемента свойства XAML ```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings  </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> ## значений XAML *oneOrMoreCommandBindings* один или несколько <xref:System.Windows.Input.CommandBinding>элементы.</xref:System.Windows.Input.CommandBinding>       Каждый из них должен иметь <xref:System.Windows.Input.CommandBinding.Command%2A>атрибуту присвоено известной командой, и набор атрибутов для <xref:System.Windows.Input.CommandBinding.CanExecute>и <xref:System.Windows.Input.CommandBinding.Executed>реализаций обработчиков.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> Дополнительные сведения см. <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "Коллекция всех <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> объектов."
  overload: System.Windows.ContentElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnter
  id: DragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве цели перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragEnter часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> Обработчики событий, подключенные к событие DragEnter подключены к основному <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.DragEnterEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewDragEnter>.</xref:System.Windows.ContentElement.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragEnterEvent>      -Переопределить <xref:System.Windows.ContentElement.OnDragEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.DragEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeave
  id: DragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragLeave часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию DragLeave присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.DragLeaveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.DragDrop.PreviewDragLeave>.</xref:System.Windows.DragDrop.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragLeaveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnDragLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.DragLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOver
  id: DragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели."
  remarks: "Это событие возникает, даже если источник перетаскивания находится в границах элемента. Если перетаскивание начинается за пределами границ, а затем перемещается, это событие также возникает, а также <xref:System.Windows.ContentElement.DragEnter>и связанные события предварительного просмотра.</xref:System.Windows.ContentElement.DragEnter>       Это событие создает псевдоним <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragOver часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> Обработчики событий, присоединенные к события DragOver присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragOver&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.DragOverEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.DragDrop.PreviewDragOver>.</xref:System.Windows.DragDrop.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DragOverEvent>      -Переопределить <xref:System.Windows.ContentElement.OnDragOver%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.DragOver&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Drop
  id: Drop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве конечного расположения сброса."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>вложенное событие для этого класса, так что Drop входит в состав класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> Обработчики событий, подключенные к удалить событие подключены к основному <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>      <a name=&quot;routedEventInfo_Drop&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.DropEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewDrop>.</xref:System.Windows.ContentElement.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.DropEvent>      -Переопределить <xref:System.Windows.ContentElement.OnDrop%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.DropEvent
  id: DropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.Drop&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focus
  id: Focus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимается попытка установить фокус на этом элементе."
  remarks: "Необходимо получить фокус, <xref:System.Windows.ContentElement.Focusable%2A>и <xref:System.Windows.ContentElement.IsEnabled%2A>должны быть `true`.</xref:System.Windows.ContentElement.IsEnabled%2A> </xref:System.Windows.ContentElement.Focusable%2A> Обратите внимание, что почти все <xref:System.Windows.ContentElement>производные классы не являются <xref:System.Windows.ContentElement.Focusable%2A>по умолчанию.</xref:System.Windows.ContentElement.Focusable%2A> </xref:System.Windows.ContentElement>       Даже если элемент является обработка событий может иметь фокус и включена, в составе определенного дерева, (например, для составного элемента управления) может реагировать на события предварительного просмотра фокуса, не позволяя фокус, таким образом этот метод вернет `false`.       Фокус в общем случае характеризуется два разных понятия: фокус клавиатуры и логический фокус, которые не всегда совпадают. Этот метод устанавливает логический фокус. Имеется программный способ задать фокус клавиатуры; фокус клавиатуры, определяется пользователем. Дополнительные сведения см. в разделе [фокус Обзор](~/add/includes/ajax-current-ext-md.md) и [фокусе](~/add/includes/ajax-current-ext-md.md).       Если вызов возвращает фокус `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A>и <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A>также `true`.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.ContentElement.IsKeyboardFocused%2A>       Если связанные свойства еще не `true`, при вызове фокус, один или несколько из следующих событий вызываются в следующем порядке: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>(источник — новый целевой фокус), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus>(источник — новый целевой фокус).</xref:System.Windows.ContentElement.GotKeyboardFocus> </xref:System.Windows.ContentElement.LostKeyboardFocus> </xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> </xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> </xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> </xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>"
  example:
  - "The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it. Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.  \n  \n [!code-cs[ContentElementsSmorgasbord#Focus](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#focus)]\n [!code-vb[ContentElementsSmorgasbord#Focus](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#focus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если фокус клавиатуры может принимать значение этого элемента; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> при вызове этого метода не получил фокус."
  overload: System.Windows.ContentElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.Focusable
  id: Focusable
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, может ли элемент получать фокус."
  remarks: "Получать только элемент фокус ввода с клавиатуры.       Определенные производные классы могут переопределять метаданные этого свойства зависимостей, таким образом, чтобы производный класс может иметь фокус по умолчанию.       Если наследуемые <xref:System.Windows.Documents.Hyperlink>или его производных классов <xref:System.Windows.Documents.Hyperlink>переопределяет метаданные для этого свойства зависимостей и переопределяет значение по умолчанию этого свойства было `true`.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Documents.Hyperlink>      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.FocusableProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.FocusableProperty>"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данный элемент может иметь фокус; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, однако см. заметки."
  overload: System.Windows.ContentElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.Focusable*>изменения свойств.</xref:System.Windows.ContentElement.Focusable*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.Focusable*>свойство зависимостей.</xref:System.Windows.ContentElement.Focusable*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение базового свойства для указанного свойства данного элемента, без учета возможного анимированного значения из запущенной или остановленной анимации."
  remarks: "Если бы анимации не присоединялись к свойству, то возвращаемое значение GetAnimationBaseValue идентична всегда <xref:System.Windows.DependencyObject.GetValue%2A>возвращаемое значение.</xref:System.Windows.DependencyObject.GetValue%2A> При наличии анимированные, затем все возможные производные значения, включая начальные и остановки, игнорируются, и значение свойства определяется в зависимости от всех других возможных входных значений. Дополнительные сведения см. в разделе [приоритет значения свойства зависимости](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Свойство зависимостей для проверки."
    return:
      type: System.Object
      description: "Значение свойства, как если бы анимации не присоединялись к указанному свойству зависимостей."
  overload: System.Windows.ContentElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе, возвращает альтернативный [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] родительским для данного элемента, если существует визуального родительского объекта."
  remarks: "Виртуальная реализация по умолчанию этот метод возвращает `null`. <xref:System.Windows.FrameworkContentElement>предоставляет практической реализации.</xref:System.Windows.FrameworkContentElement>       Альтернативные родительские элементы используются для маршрутизации событий, в случаях, когда элемент создает альтернативную родительскую структуру, чтобы его события, в результате которого отличается от стандартного шаблона маршрутизации вверх по визуальному дереву родительскому элементу, или вниз к просмотру маршрутизации."
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "Объект, если реализация производного класса имеет соединение альтернативный родительский отчет."
  overload: System.Windows.ContentElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания и вставки, в котором участвует данный элемент."
  remarks: "Событие GiveFeedback позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки. Визуальную обратную связь для более глубокого, операции перетаскивания и вставки находится в процессе.       Это событие создает псевдоним <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы GiveFeedback часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> Обработчики событий, присоединенные к событию GiveFeedback присоединяются к базовому объекту <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GiveFeedbackEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.GiveFeedbackEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewGiveFeedback>.</xref:System.Windows.ContentElement.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.ContentElement.GiveFeedbackEvent>      -Переопределить <xref:System.Windows.ContentElement.OnGiveFeedback%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GiveFeedback&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocus
  id: GotFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом логического фокуса."
  remarks: "Логический фокус отличается от фокуса, если он является результатом вызова метода, в на другом уровне существует предыдущий фокус клавиатуры. В этом случае фокус остается там, где это и элемент где <xref:System.Windows.ContentElement.Focus%2A>вызывается метод по-прежнему возвращает логический фокус.</xref:System.Windows.ContentElement.Focus%2A>       Точнее Интерпретация этого события является что он вызывается, когда значение <xref:System.Windows.ContentElement.IsFocused%2A>Свойства элемента в маршруте изменяется с `false` для `true`.</xref:System.Windows.ContentElement.IsFocused%2A>       Вследствие этого события восходящей маршрутизации, элемент, который получает фокус, может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, полученные фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_GotFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GotFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.RoutedEventHandler>|      -Нет соответствующего события нисходящей.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.ContentElement.GotFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnGotFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>имеет такое же событие, которое отслеживает изменения состояния в свойство, которое поддерживает состояния фокуса для элемента; событие GotKeyboardFocus возникает в тех же условиях.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>       Вследствие этого события восходящей маршрутизации, элемент, имеющий фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, имеющий фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы GotKeyboardFocus часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию GotKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.</xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.GotKeyboardFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GotKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при захвате мыши данным элементом."
  remarks: "При захвате мыши элементом, он получает ввод от мыши, даже если указатель мыши находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки и остается захваченной, пока не произойдет действие операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>событий системы отслеживания измененных данных, чтобы определить фактический элемент, имеющий мыши.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы GotMouseCapture часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию GotMouseCapture присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GotMouseCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.GotMouseCaptureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnGotMouseCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GotMouseCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при захвате пера данным элементом."
  remarks: "При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки и сохраняет захват, пока не произойдет действие операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, захвативший.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним для вложенного события для этого класса, чтобы GotStylusCapture входит в состав класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> Обработчики событий, присоединенные к событию GotStylusCapture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GotStylusCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.GotStylusCaptureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnGotStylusCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GotStylusCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда сенсорного этого элемента."
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.GotTouchCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.ContentElement.OnGotTouchCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли этот элемент имеет анимированные свойства."
  remarks: "Это свойство возвращает `true` для постоянных анимаций (без часов, всегда запущенной) или для анимаций, имеющих определенный график."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет анимированные свойства; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.InputBindings
  id: InputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает коллекцию привязок ввода, связанных с этим элементом."
  remarks: "Привязки ввода поддерживают привязку команд к устройствам ввода. Например <xref:System.Windows.Input.MouseBinding>реализует входных привязок, которые включают свойства, которые относятся к устройствам мыши.</xref:System.Windows.Input.MouseBinding>       Коллекция привязок ввода включает как привязки ввода, относящиеся к типу, а также привязки ввода, объявленные в экземпляре.       Связанное свойство <xref:System.Windows.ContentElement.CommandBindings%2A>, поддерживает коллекцию привязок команд.</xref:System.Windows.ContentElement.CommandBindings%2A> Эти привязки отличаются от привязок ввода, в том, что они представляют следующего уровня вниз обработки команд - действий, которые связаны с известным командами и обработчиками данного класса для них.      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a>## Использование элемента свойства XAML ```   <object>     <object.InputBindings>       oneOrMoreInputBindings  </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> ## значений XAML *oneOrMoreInputBindings* один или несколько <xref:System.Windows.Input.InputBinding>элементов (обычно <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>производных классах).</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       Каждый из них должен иметь <xref:System.Windows.Input.InputBinding.Command%2A>и <xref:System.Windows.Input.InputBinding.Gesture%2A>набором атрибутов.</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "Коллекция привязок ввода."
  overload: System.Windows.ContentElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, включен ли этот элемент в [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsEnabledProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsEnabledProperty>"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to IsEnabled `false`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент включен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsEnabled*>Свойства для данного элемента.</xref:System.Windows.ContentElement.IsEnabled*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, возвращаемое значение становится <xref:System.Windows.ContentElement.IsEnabled*>в производных классах.</xref:System.Windows.ContentElement.IsEnabled*>"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент включен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsEnabled*>свойство зависимостей.</xref:System.Windows.ContentElement.IsEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocused
  id: IsFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, является ли этот элемент имеет логический фокус."
  remarks: "Логический фокус могут отличаться от фокус клавиатуры, если приложение имеет несколько фокусных секций, например между содержанием меню и остальной частью приложения. В этом случае фокус клавиатуры можно только на одном элементе пользовательского интерфейса приложения, но некоторые элементы в других разделах фокуса могут сохранять логический фокус. Дополнительные сведения о логическом фокусе см [фокусе](~/add/includes/ajax-current-ext-md.md) и [фокус Обзор](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsFocusedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsFocusedProperty>"
  example:
  - "The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \n  \n [!code-xml[ContentElementsSmorgasbord#Focusable](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#focusable)]"
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет логический фокус; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsFocused*>свойство зависимостей.</xref:System.Windows.ContentElement.IsFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее ли в системе метода ввода, такие как [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)], активирована для обработки входных данных для этого элемента."
  remarks: "Это свойство возвращает значение, которое возвращается вложенное свойство <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>для в настоящий момент разрешенные методы ввода (клавиатуры, речи и других устройств ввода).</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если метод ввода активен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию базового прикрепленного свойства — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, однако это значение влияет состояние методов ввода во время выполнения."
  overload: System.Windows.ContentElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли данный элемент фокус клавиатуры."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет фокус клавиатуры; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsKeyboardFocused*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsKeyboardFocused*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsKeyboardFocused*>свойство зависимостей.</xref:System.Windows.ContentElement.IsKeyboardFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли фокус клавиатуры элементом или дочерними элементами."
  remarks: "Изменения значения этого свойства обычно вызывают <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>событие, если производный класс не переопределяет <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A>Отключение событие.</xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>       Это свойство не задано непосредственно, но можно перевести фокус на элемент, вызвав <xref:System.Windows.ContentElement.Focus%2A>, или путем создания <xref:System.Windows.ContentElement.MoveFocus%2A>запроса.</xref:System.Windows.ContentElement.MoveFocus%2A> </xref:System.Windows.ContentElement.Focus%2A> Одно из этих вызовов метода может изменить значение этого свойства.      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если фокус клавиатуры находится на элементе или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении значения свойства IsKeyboardFocusWithinChanged данного элемента."
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsKeyboardFocusWithin*>свойство зависимостей.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает значение, указывающее, захвачена ли мышь данным элементом."
  remarks: "Состояние захвата мыши соотносится с операции перетаскивания и вставки в процессе.      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsMouseCapturedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsMouseCapturedProperty>"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.  \n  \n [!code-cs[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#ismousecaptured)]\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент имеет захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsMouseCaptured*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsMouseCaptured*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsMouseCaptured*>свойство зависимостей.</xref:System.Windows.ContentElement.IsMouseCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, удерживается ли захват мыши данным элементом или дочерними элементами в его дереве элементов."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент или содержащийся в нем элемент получил захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinProperty&quot;> </xref> изменений для этого элемента."
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsMouseCaptureWithin*>свойство зависимостей.</xref:System.Windows.ContentElement.IsMouseCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, соответствует ли позиция указателя мыши результатам проверки нажатия, которой учитывается компоновка элемента."
  remarks: "В отличие от <xref:System.Windows.ContentElement.IsMouseOver%2A>, это свойство доступно только `true` если указатель мыши находится над элемент literal, как и для попаданий тест.</xref:System.Windows.ContentElement.IsMouseOver%2A> Если указатель мыши находится над дочерним элементом, в частности по элементам, которые являются частью глубокого шаблона элемента и его композиции, это свойство будет `false`. Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.ContentElement.IsMouseOver%2A>вместо.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Если мышь захвачена элементом, и это свойство является `true` во время записи, это свойство будет продолжать возвращать `true` пока захват мыши не будет потерян и указатель не выйдет за границы элемента.      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указатель мыши находится над тем же элементом проверки нажатия; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsMouseDirectlyOver*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsMouseDirectlyOver*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsMouseDirectlyOver*>свойство зависимостей.</xref:System.Windows.ContentElement.IsMouseDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли указатель мыши над данным элементом (включая визуальные дочерние элементы и композицию элемента управления)."
  remarks: "Несмотря на то, что аналогичные события «IsMouseOverChanged» не существует, выполните несколько схожих событий. Например, можно использовать <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>и <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> </xref:System.Windows.ContentElement.MouseMove> </xref:System.Windows.ContentElement.MouseEnter>       При захвате мыши данным элементом, это свойство остается `true` пока захват мыши не будет потерян и указатель мыши покидает границы элемента.      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsMouseOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsMouseOverProperty>"
  example:
  - "The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports IsMouseOver `true`.  \n  \n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/add/codesnippet/xaml/ContentElementsSmorgasbord/page1.xaml#isenabledismouseover)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указатель мыши находится над элементом или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsMouseOver*>свойство зависимостей.</xref:System.Windows.ContentElement.IsMouseOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, захвачено ли перо к данному элементу."
  remarks: "Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsStylusCapturedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент имеет захват пера; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsStylusCaptured*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsStylusCaptured*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsStylusCaptured*>свойство зависимостей.</xref:System.Windows.ContentElement.IsStylusCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, удерживается ли захват пера данным элементом, включая дочерние элементы и композицию элемента управления."
  remarks: "Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если захват пера удерживается внутри этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsStylusCaptureWithin*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsStylusCaptureWithin*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsStylusCaptureWithin*>свойство зависимостей.</xref:System.Windows.ContentElement.IsStylusCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, соответствует ли позиция пера результатам проверки нажатия, которой учитывается компоновка элемента."
  remarks: "В отличие от <xref:System.Windows.ContentElement.IsStylusOver%2A>, это свойство доступно только `true` если перо находится над элементом.</xref:System.Windows.ContentElement.IsStylusOver%2A> Если перо находится над дочерним элементом или над элементами, которые являются частью глубокой композиции элемента, это свойство будет `false`.       Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.ContentElement.IsStylusOver%2A>вместо.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Если этот элемент имеет захват пера, и это свойство является `true` во время записи, это свойство остается `true` пока не будет освобождено и перо не выйдет за границы элемента.       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если перо находится над тем же элементом, проверки нажатия; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.ContentElement.IsStylusDirectlyOver*>изменения свойств для этого элемента.</xref:System.Windows.ContentElement.IsStylusDirectlyOver*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsStylusDirectlyOver*>свойство зависимостей.</xref:System.Windows.ContentElement.IsStylusDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли перо над данным элементом (включая визуальные дочерние элементы)."
  remarks: "Если этот элемент имеет захват пера, это свойство остается `true` пока не будет освобождено и указатель мыши выходит за его границы.       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.IsStylusOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.ContentElement.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если перо находится над элементом или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.ContentElement.IsStylusOver*>свойство зависимостей.</xref:System.Windows.ContentElement.IsStylusOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDown
  id: KeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. События KeyDown является событием входной текст нижнего уровня, которое может работать некорректно, в некоторых элементах управления. Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы KeyDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> Обработчики событий, подключенные к событием KeyDown подключены к основному <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.KeyDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewKeyDown>.</xref:System.Windows.ContentElement.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.KeyDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnKeyDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.KeyDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUp
  id: KeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы KeyUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> Обработчики событий, присоединенные к событию KeyUp присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.KeyUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewKeyUp>.</xref:System.Windows.ContentElement.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.KeyUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnKeyUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.KeyUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocus
  id: LostFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере данным элементом логического фокуса."
  remarks: "Логический фокус отличается от фокуса, если фокус был намеренно вытеснен посредством вызова метода, но на другом уровне существует предыдущий фокус клавиатуры. В этом сценарии, остается фокус клавиатуры, там, где это и элемент где <xref:System.Windows.ContentElement.Focus%2A>вызывается метод по-прежнему возвращает логический фокус.</xref:System.Windows.ContentElement.Focus%2A>       Точнее Интерпретация этого события является что он вызывается, когда значение <xref:System.Windows.ContentElement.IsFocused%2A>изменяет свойства элемента в маршруте с `true` для `false`.</xref:System.Windows.ContentElement.IsFocused%2A>       Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, полученные фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_LostFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.LostFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.RoutedEventHandler>|      -Нет соответствующего события нисходящей.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.ContentElement.LostFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnLostFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда на этот элемент больше не фокус ввода с клавиатуры."
  remarks: "Вследствие этого события восходящей маршрутизации, элемент, который потерял фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostKeyboardFocus часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию LostKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.</xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.LostKeyboardFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.LostKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата мыши."
  remarks: "При захвате мыши элементом, он получает ввод от мыши, даже если указатель находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, который теряет захват может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял захват.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostMouseCapture часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию LostMouseCapture присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.LostMouseCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.LostMouseCaptureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnLostMouseCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.LostMouseCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата пера."
  remarks: "При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostStylusCapture часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию LostStylusCapture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.LostStylusCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.LostStylusCaptureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnLostStylusCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.LostStylusCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата сенсорный ввод."
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.LostTouchCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.ContentElement.OnLostTouchCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDown
  id: MouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии любой кнопки мыши в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Обработчики событий, подключенные к MouseDown-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       MouseDown-событие часто возникает вместе с либо <xref:System.Windows.ContentElement.MouseLeftButtonDown>или <xref:System.Windows.ContentElement.MouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown> <xref:System.Windows.ContentElement.MouseLeftButtonDown>и <xref:System.Windows.ContentElement.MouseRightButtonDown>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.MouseRightButtonDown></xref:System.Windows.ContentElement.MouseLeftButtonDown> См. Примечания <xref:System.Windows.ContentElement.MouseLeftButtonDown>или <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement.MouseLeftButtonDown>      Настроек [!IMPORTANT] настроек несколько <xref:System.Windows.ContentElement>производным классам, характеризующимся наличием поведение элемента управления, например, <xref:System.Windows.Documents.Hyperlink>, может быть реализована собственная обработка событий кнопки мыши.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.ContentElement> Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse>класс событие как обработанное.</xref:System.Windows.Input.Mouse> Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.       Можно устранить проблему, которая описана в Важном и продолжать получать события MouseDown для левой кнопки мыши событий в производном классе с обработкой класса с помощью любого из следующих решений:-присоединения обработчиков <xref:System.Windows.ContentElement.PreviewMouseDown>события, который не помечен как обработанное в элементах управления.</xref:System.Windows.ContentElement.PreviewMouseDown> Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.      -Регистрация обработчика в элементе управления с помощью процедур, вызвав <xref:System.Windows.ContentElement.AddHandler%2A>и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.</xref:System.Windows.ContentElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewMouseDown>.</xref:System.Windows.ContentElement.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnMouseDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда указатель мыши попадает внутрь границ данного элемента."
  remarks: "MouseEnter — [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) , использующий прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       Несмотря на то, что MouseEnter отслеживает, когда указатель мыши попадает внутрь границ элемента, это событие более буквально о том, что <xref:System.Windows.ContentElement.IsMouseOver%2A>значение свойства было изменено с `false` для `true` для этого элемента.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseEnter часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> Обработчики событий, присоединенные к событие MouseEnter присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда указатель мыши покидает границы данного элемента."
  remarks: "MouseLeave — [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) , использующий прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       MouseLeave отслеживает, когда указатель мыши покидает элемент, это событие более буквально о том, что <xref:System.Windows.ContentElement.IsMouseOver%2A>значение свойства было изменено с `true` для `false` для этого элемента.</xref:System.Windows.ContentElement.IsMouseOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseLeave часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> Обработчики событий, подключенные к MouseLeave-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии левой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      Настроек [!IMPORTANT] настроек несколько <xref:System.Windows.ContentElement>производным классам, характеризующимся наличием поведение элемента управления, например, <xref:System.Windows.Documents.Hyperlink>, может быть реализована собственная обработка событий кнопки мыши.</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.ContentElement> Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse>класс событие как обработанное.</xref:System.Windows.Input.Mouse> Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.       Можно устранить проблему, которая описана в Важном и продолжать получать события MouseLeftButtonDown для левой кнопки мыши событий в производном классе с обработкой класса с помощью любого из следующих решений:-присоединения обработчиков <xref:System.Windows.ContentElement.PreviewMouseDown>события, который не помечен как обработанное в элементах управления.</xref:System.Windows.ContentElement.PreviewMouseDown> Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.      -Регистрация обработчика в элементе управления с помощью процедур, вызвав <xref:System.Windows.ContentElement.AddHandler%2A>и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.</xref:System.Windows.ContentElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании левой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMove
  id: MouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении указателя мыши над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> Обработчики событий, присоединенные события MouseMove присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewMouseMove>.</xref:System.Windows.ContentElement.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.MouseMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnMouseMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии правой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>       Часто сценарии приложений имеют обработчики для событий правой кнопки мыши. Например правой кнопкой мыши вниз может отображаться контекстное меню. В разделе [Обзор ContextMenu](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании правой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUp
  id: MouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании любой кнопки мыши над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Обработчики событий, подключенные к MouseUp-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       MouseUp-событие часто возникает вместе с либо <xref:System.Windows.ContentElement.MouseLeftButtonUp>или <xref:System.Windows.ContentElement.MouseRightButtonUp>, которые соответствуют выпуск одну из двух кнопок стандартных действий мыши.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement.MouseLeftButtonUp> <xref:System.Windows.ContentElement.MouseLeftButtonUp>и <xref:System.Windows.ContentElement.MouseRightButtonUp>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.MouseRightButtonUp></xref:System.Windows.ContentElement.MouseLeftButtonUp> См. Примечания <xref:System.Windows.ContentElement.MouseLeftButtonUp>или <xref:System.Windows.ContentElement.MouseRightButtonUp>.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement.MouseLeftButtonUp>      <a name=&quot;routedEventInfo_MouseUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewMouseUp>.</xref:System.Windows.ContentElement.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.MouseUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnMouseUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при вращении колесика мыши в момент, когда указатель мыши находится над данным элементом."
  remarks: "Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении события колесика мыши от элемента, или получившего, указатель мыши может быть фактически над другим элементом.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>присоединенные события для этого класса, чтобы колесика мыши входит в состав класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> Обработчики событий, присоединенные к событию колесика мыши присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseWheel&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.MouseWheelEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseWheelEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewMouseWheel>.</xref:System.Windows.ContentElement.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.ContentElement.MouseWheelEvent>      -Переопределить <xref:System.Windows.ContentElement.OnMouseWheel%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.MouseWheel&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Пытается переместить фокус с данного элемента в другой элемент. Направление перемещения фокуса задается указанием направления, которое интерпретируется в организации визуального родителя данного элемента."
  remarks: "Убедитесь, что проверяйте возвращаемое значение этого метода. Возвращаемое значение `false` может быть возвращено, если затребована остановки вкладку и запрос обхода не запрашивали программы-оболочки."
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "Запрос обхода, который содержит свойство, которое определяет способ перемещения в порядке, или направление для визуального перемещения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если запрос на перемещение было выполнено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает характерные для класса <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> реализации для [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] инфраструктуры."
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "Конкретного типа <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> реализации."
  overload: System.Windows.ContentElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> перенаправленного события с помощью предоставленных данных события."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные события. Данные о событии должны содержать идентификатор для <xref href=&quot;System.Windows.ContentElement.GotFocus&quot;> </xref> событий."
  overload: System.Windows.ContentElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.GotTouchCapture&quot;> </xref> перенаправленное событие, возникающее при сенсорного этого элемента."
  remarks: "Метод OnGotTouchCapture имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnGotTouchCapture <xref:System.Windows.ContentElement.GotTouchCapture>событий.</xref:System.Windows.ContentElement.GotTouchCapture> Необходимо вызвать метод OnGotTouchCapture базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsKeyboardFocused%2A>изменения свойств зависимостей.</xref:System.Windows.ContentElement.IsKeyboardFocused%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Обратите внимание, что <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>событие не является маршрутизируемым.</xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается непосредственно перед <xref href=&quot;System.Windows.ContentElement.IsKeyboardFocusWithinChanged&quot;> </xref> события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Обратите внимание, что <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>событие не является маршрутизируемым.</xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsMouseCapturedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsMouseCaptured%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsMouseCaptured%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsMouseCapturedChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsMouseCapturedChanged> Обратите внимание, что <xref:System.Windows.ContentElement.IsMouseCapturedChanged>событие не является маршрутизируемым.</xref:System.Windows.ContentElement.IsMouseCapturedChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsMouseCaptureWithinChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsMouseDirectlyOverChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Обратите внимание, что <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>событие не является маршрутизируемым.</xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsStylusCapturedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsStylusCaptured%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsStylusCaptured%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsStylusCapturedChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsStylusCapturedChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsStylusCaptureWithinChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.IsStylusDirectlyOverChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A>свойств зависимостей изменяется значение.</xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged>события с этого же экземпляра данных события.</xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> перенаправленного события с помощью предоставленных данных события."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные события. Данные о событии должны содержать идентификатор для <xref href=&quot;System.Windows.ContentElement.LostFocus&quot;> </xref> событий."
  overload: System.Windows.ContentElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.LostTouchCapture&quot;> </xref> перенаправленного события, которое происходит при потере элементом захвата сенсорный ввод."
  remarks: "Метод OnLostTouchCapture имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnLostTouchCapture <xref:System.Windows.ContentElement.LostTouchCapture>событий.</xref:System.Windows.ContentElement.LostTouchCapture> Необходимо вызвать метод OnLostTouchCapture базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии содержат сведения о нажатой кнопке мыши и состоянии обработки."
  overload: System.Windows.ContentElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; вложенное событие возникает для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; вложенное событие возникает для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonDown&quot;> </xref> перенаправленного события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.MouseLeftButtonDown>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.ContentElement.MouseLeftButtonDown>.</xref:System.Windows.ContentElement.MouseLeftButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.MouseLeftButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.MouseLeftButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnMouseLeftButtonDown.</xref:System.Windows.ContentElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnMouseLeftButtonDown. Например, можно получить из <xref:System.Windows.Controls.Button>и переопределять OnMouseLeftButtonDown в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click>событий.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата левая кнопка мыши."
  overload: System.Windows.ContentElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.MouseLeftButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.MouseLeftButtonUp>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.ContentElement.MouseLeftButtonUp>.</xref:System.Windows.ContentElement.MouseLeftButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.MouseLeftButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.MouseLeftButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnMouseLeftButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии левой кнопки мыши."
  overload: System.Windows.ContentElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.MouseRightButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.MouseRightButtonDown>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.MouseRightButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.MouseRightButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnMouseRightButtonDown.</xref:System.Windows.ContentElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnMouseRightButtonDown. Например, можно получить из <xref:System.Windows.Controls.Control>и переопределения в производном классе без вызова базы OnMouseRightButtonDown; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control>поведение по умолчанию.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата правая кнопка мыши."
  overload: System.Windows.ContentElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.MouseRightButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.MouseRightButtonUp>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.ContentElement.MouseRightButtonUp>.</xref:System.Windows.ContentElement.MouseRightButtonUp> </xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.MouseRightButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.MouseRightButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnMouseRightButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии правой кнопки мыши."
  overload: System.Windows.ContentElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии кнопки мыши."
  overload: System.Windows.ContentElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; вложенное перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии информируют о нажатии одной или нескольких кнопок мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> перенаправленное событие</xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnPreviewMouseLeftButtonDown.</xref:System.Windows.ContentElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnPreviewMouseLeftButtonDown. Например, можно получить из <xref:System.Windows.Controls.Button>и переопределять OnPreviewMouseLeftButtonDown в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click>событий.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата левая кнопка мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> перенаправленное событие</xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnPreviewMouseLeftButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии левой кнопки мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.ContentElement.MouseRightButtonDown>.</xref:System.Windows.ContentElement.MouseRightButtonDown> перенаправленное событие</xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnPreviewMouseRightButtonDown.</xref:System.Windows.ContentElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnPreviewMouseRightButtonDown. Например, можно получить из <xref:System.Windows.Controls.Control>и переопределения в производном классе без вызова базы OnPreviewMouseRightButtonDown; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control>поведение по умолчанию.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата правая кнопка мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.ContentElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> перенаправленное событие</xref:System.Windows.ContentElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.ContentElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.ContentElement>путем переопределения OnPreviewMouseRightButtonUp.</xref:System.Windows.ContentElement>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии правой кнопки мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии одной или нескольких кнопок мыши."
  overload: System.Windows.ContentElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;> </xref> перенаправленное событие, возникающее при сенсорном нажатии этого элемента."
  remarks: "Метод OnPreviewTouchDown имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchDown <xref:System.Windows.ContentElement.PreviewTouchDown>событий.</xref:System.Windows.ContentElement.PreviewTouchDown> Необходимо вызвать метод OnPreviewTouchDown базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутри этого элемента."
  remarks: "Метод OnPreviewTouchMove имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchMove <xref:System.Windows.ContentElement.PreviewTouchMove>событий.</xref:System.Windows.ContentElement.PreviewTouchMove> Необходимо вызвать метод OnPreviewTouchMove базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;> </xref> перенаправленного события, которое происходит при отпускании касания внутри этого элемента."
  remarks: "Метод OnPreviewTouchUp имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchUp <xref:System.Windows.ContentElement.PreviewTouchUp>событий.</xref:System.Windows.ContentElement.PreviewTouchUp> Необходимо вызвать метод OnPreviewTouchUp базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "<xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; присоединенные события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; присоединенные события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.ContentElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;> </xref> перенаправленное событие, возникающее при сенсорном нажатии внутри этого элемента."
  remarks: "Метод OnTouchDown имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchDown <xref:System.Windows.ContentElement.TouchDown>событий.</xref:System.Windows.ContentElement.TouchDown> Необходимо вызвать метод OnTouchDown базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутрь границ данного элемента."
  remarks: "Метод OnTouchEnter имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchEnter <xref:System.Windows.ContentElement.TouchEnter>событий.</xref:System.Windows.ContentElement.TouchEnter> Необходимо вызвать метод OnTouchEnter базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;> </xref> перенаправленного события, которое происходит при перемещении касания за границы данного элемента."
  remarks: "Метод OnTouchLeave имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchLeave <xref:System.Windows.ContentElement.TouchLeave>событий.</xref:System.Windows.ContentElement.TouchLeave> Необходимо вызвать метод OnTouchLeave базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутри этого элемента."
  remarks: "Метод OnTouchMove имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchMove <xref:System.Windows.ContentElement.TouchMove>событий.</xref:System.Windows.ContentElement.TouchMove> Необходимо вызвать метод OnTouchMove базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;> </xref> перенаправленного события, которое происходит при отпускании касания внутри этого элемента."
  remarks: "Метод OnTouchUp имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchUp <xref:System.Windows.ContentElement.TouchUp>событий.</xref:System.Windows.ContentElement.TouchUp> Необходимо вызвать метод OnTouchUp базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.ContentElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе, возвращает элемент, который должен получить фокус для указанного направления перемещения фокуса, без перемещения фокуса на этот элемент."
  remarks: "Реализация по умолчанию этого метода в данном классе является неполной и всегда возвращает `null`."
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "Направление запроса на перемещение фокуса."
    return:
      type: System.Windows.DependencyObject
      description: "Элемент, который будет получил фокус, если <xref:System.Windows.ContentElement.MoveFocus*>были фактически вызывается.</xref:System.Windows.ContentElement.MoveFocus*>"
  overload: System.Windows.ContentElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве цели перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragEnter часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragEnter присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewDragEnterEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.DragEnter>.</xref:System.Windows.ContentElement.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragEnterEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewDragEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragLeave часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragLeave присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.DragLeave>.</xref:System.Windows.ContentElement.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragLeaveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewDragLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragOver часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragOver присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewDragOverEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.DragOver>.</xref:System.Windows.ContentElement.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDragOverEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewDragOver%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewDragOver&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве конечного расположения сброса."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDrop часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDrop присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewDropEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.Drop>.</xref:System.Windows.ContentElement.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.ContentElement.PreviewDropEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewDrop%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewDrop&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при начале операции перетаскивания и вставки."
  remarks: "Событие PreviewGiveFeedback позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewGiveFeedback часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewGiveFeedback присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.GiveFeedbackEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.GiveFeedback>.</xref:System.Windows.ContentElement.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewGiveFeedback&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "Так как это событие нисходящей маршрутизации элемент, имеющий фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, имеющий фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewGotKeyboardFocus часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewGotKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.GotKeyboardFocus>.</xref:System.Windows.ContentElement.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewGotKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии клавиши, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.ContentElement.KeyDown>Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления.</xref:System.Windows.ContentElement.KeyDown> Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewKeyDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewKeyDown присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewKeyDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.KeyDown>.</xref:System.Windows.ContentElement.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.PreviewKeyDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewKeyDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании клавиши, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.ContentElement.KeyUp>Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления.</xref:System.Windows.ContentElement.KeyUp> Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события. Дополнительные сведения обратитесь к документации для отдельных элементов управления.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewKeyUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewKeyUp присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewKeyUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.KeyUp>.</xref:System.Windows.ContentElement.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.ContentElement.PreviewKeyUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewKeyUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда на этот элемент больше не фокус ввода с клавиатуры."
  remarks: "Так как это событие нисходящей маршрутизации элемент, который потерял фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewLostKeyboardFocus часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewLostKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.LostKeyboardFocus>.</xref:System.Windows.ContentElement.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewLostKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии любой кнопки мыши в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseDown присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Событие PreviewMouseDown часто возникает вместе с либо <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>или <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>и <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseRightButtonDown></xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> См. Примечания <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>или <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.MouseDown>.</xref:System.Windows.ContentElement.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии левой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) вероятно, нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании левой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) вероятно, нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseLeftButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении указателя мыши, когда указатель мыши находится над данным элементом."
  remarks: "Это событие происходит, и когда указатель мыши входит в пределы элемента, а также при перемещении указателя мыши оставаясь в пределах границ элемента.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseMove присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.MouseMove>.</xref:System.Windows.ContentElement.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.ContentElement.PreviewMouseMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии правой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) вероятно, нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании правой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то что это [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) вероятно, нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Аргументы события предоставляют аргументов базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.ContentElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.ContentElement.AddHandler%2A>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.ContentElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.ContentElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseRightButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании любой кнопки мыши, если указатель мыши находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseUp присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Событие PreviewMouseUp часто возникает вместе с либо <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>или <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>и <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseRightButtonUp></xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> См. Примечания <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>или <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.</xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> </xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.MouseUp>.</xref:System.Windows.ContentElement.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.ContentElement.PreviewMouseUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при вращении колесика мыши в момент, когда указатель мыши находится над данным элементом."
  remarks: "Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении этого события из элемента или получившего, указатель мыши может быть фактически над другим элементом.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>вложенное событие для этого класса, чтобы <xref:System.Windows.ContentElement.PreviewMouseMove>входит в состав класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.ContentElement.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> Обработчики событий, присоединенные к <xref:System.Windows.ContentElement.PreviewMouseMove>событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewMouseMove>      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseWheelEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.MouseWheel>.</xref:System.Windows.ContentElement.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.ContentElement.PreviewMouseWheelEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewMouseWheel&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении состояния клавиатуры или мыши кнопки во время операции перетаскивания и вставки."
  remarks: "Событие PreviewQueryContinueDrag позволяет источнику перетаскивания для объявления, должна ли быть отменена операция перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewQueryContinueDrag часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewQueryContinueDrag присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.QueryContinueDragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.QueryContinueDrag>.</xref:System.Windows.ContentElement.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewQueryContinueDrag&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusButtonDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusButtonDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusButtonDown>.</xref:System.Windows.ContentElement.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании кнопки пера, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusButtonUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusButtonUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusButtonUp>.</xref:System.Windows.ContentElement.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо касается дигитайзера, когда оно находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusDownEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusDown>.</xref:System.Windows.ContentElement.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.ContentElement.PreviewStylusDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом без касания дигитайзера."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusInAirMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> Обработчики событий, подключенные к событие PreviewStylusInAirMove подключены к основному <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusInAirMove>.</xref:System.Windows.ContentElement.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится достаточно близко от дигитайзера, чтобы быть обнаруженным, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusInRange часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusInRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusInRange>.</xref:System.Windows.ContentElement.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusInRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом. Перемещаемое перо должно обнаруживаться дигитайзером для вызова этого события, в противном случае <xref href=&quot;System.Windows.ContentElement.PreviewStylusInAirMove&quot;> </xref> вызывается событие."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusMove присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusMove>.</xref:System.Windows.ContentElement.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится слишком далеко от дигитайзера, чтобы быть обнаруженным."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusOutOfRange часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusOutOfRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusOutOfRange>.</xref:System.Windows.ContentElement.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusOutOfRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при использовании пользователем одного из жестов пером."
  remarks: "Сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusSystemGesture часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusSystemGesture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusSystemGesture>.</xref:System.Windows.ContentElement.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusSystemGesture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда пользователь отрывает перо от планшета, когда перо находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>вложенное событие для этого класса, чтобы <xref:System.Windows.ContentElement.PreviewStylusDown>входит в состав класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.ContentElement.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> Обработчики событий, присоединенные к <xref:System.Windows.ContentElement.PreviewStylusDown>событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewStylusDown>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewStylusUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.StylusUp>.</xref:System.Windows.ContentElement.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.PreviewStylusUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewStylusUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом текста аппаратно независимым способом."
  remarks: "Событие PreviewTextInput позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством PreviewTextInput; Однако речи, рукописного ввода и других устройств ввода можно также создавать PreviewTextInput.       Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.       Это событие создает псевдоним <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewTextInput часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewTextInput присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewTextInputEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.TextCompositionEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.TextInput>.</xref:System.Windows.ContentElement.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.ContentElement.PreviewTextInputEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewTextInput%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewTextInput&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при касании пальцем экрана, когда палец находится над данным элементом."
  remarks: "По умолчанию, PreviewTouchDown и <xref:System.Windows.ContentElement.TouchDown>событий не выполняется до пальцем экрана касается и перемещает.</xref:System.Windows.ContentElement.TouchDown> Пальца на экране необходимо удерживать нажатой его без его перемещения нажатие и удерживайте поведение <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.       Вызвать PreviewTouchDown и <xref:System.Windows.ContentElement.TouchDown>события к как можно скорее касании пальцем экрана, задать <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>присоединенному свойству `false` для этого элемента.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewTouchDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.TouchDown>.</xref:System.Windows.ContentElement.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewTouchDown&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении пальца на экране, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.TouchMove>.</xref:System.Windows.ContentElement.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewTouchMove&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда палец отрывается экрана, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.PreviewTouchUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.ContentElement.TouchUp>.</xref:System.Windows.ContentElement.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.PreviewTouchUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.PreviewTouchUp&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении состояния клавиатуры или мыши кнопки во время операции перетаскивания и вставки."
  remarks: "Событие QueryContinueDrag позволяет источнику перетаскивания определить, должна ли быть отменена операция перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы QueryContinueDrag часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> Обработчики событий, присоединенные к событию QueryContinueDrag присоединяются к базовому объекту <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.QueryContinueDragEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.QueryContinueDragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.</xref:System.Windows.ContentElement.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.ContentElement.QueryContinueDragEvent>      -Переопределить <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.QueryContinueDrag&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при запросе отображения курсора. Это событие возникает для элемента каждый раз, что указатель мыши перемещается в новое положение, что означает, что может потребоваться изменить объекта курсора на новое место."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы QueryCursor часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> Обработчики событий, присоединенные к событию QueryCursor присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       Курсор, который ссылается данное имя события не обязательно текстового курсора (которую иногда называют курсора). Вместо этого в данном контексте курсор является объект, который объявляет графическое отображение на экране, связанные с несколькими возможными устройствами ввода или концепциями в [!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)] программирования. Этот объект представляется <xref:System.Windows.Input.Cursor>в класс [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Input.Cursor> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] Система ввода позволяет изменять этот курсор, когда он представляет экранную позицию указателя мыши. Можно использовать стандартные значения из <xref:System.Windows.Input.Cursors>перечисления, либо можно объявить пользовательский курсор в файл изображения.</xref:System.Windows.Input.Cursors>       Прослушивание события QueryCursor не является эффективным методика управления курсора. Вместо этого каждый элемент должен определить свое поведение курсора, и <xref:System.Windows.FrameworkContentElement.Cursor%2A> <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> Только следует полагаться на QueryCursor, если не используются базовые элементы уровня платформы WPF или в непредвиденных случаях когда определение работы курсоров, на основе каждого элемента не соответствует вашим потребностям. Дополнительные сведения о реализации поведение курсора в ответ на QueryCursor см. в разделе <xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>      <a name=&quot;routedEventInfo_QueryCursor&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.QueryCursorEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.QueryCursorEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.ContentElement.QueryCursorEvent>      -Переопределить <xref:System.Windows.ContentElement.OnQueryCursor%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.QueryCursor&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает определенное перенаправленное событие. <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> Вызываемого идентифицируется в <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> экземпляр, который предоставляется (как <xref:System.Windows.RoutedEventArgs.RoutedEvent*>свойство данных этого события).</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "`e` Параметр типизируется как общий базовый тип для всех данных маршрутизируемого события; тем не менее, данные о событии должны быть предоставлены как наиболее конкретный тип данных события, доступные для события, так как <xref:System.Windows.RoutedEventArgs>производные классы содержат определенные свойства данных, предназначенные для конкретного события, инициируемого.</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>не только свойства состояния события; Он также определяет какие перенаправленного события.</xref:System.Windows.RoutedEventArgs> Данный шаблон генерации событий и данные о событии и отличаться от [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] классы событий и данных, которые обычно содержат свойства, относящиеся к событию."
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/csharp/ContentElementsSmorgasbord/page1.xaml.cs#raiseevent)]\n [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/add/codesnippet/visualbasic/contentelementssmorgasbord/page1.xaml.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные о событии, а также определяет события."
  overload: System.Windows.ContentElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает все полученные сенсорные устройства из этого элемента."
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает захват мыши, если элемент произвел захват."
  remarks: "Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.ContentElement.IsMouseCaptured%2A>перед вызовом этого метода.</xref:System.Windows.ContentElement.IsMouseCaptured%2A>"
  example:
  - "The following handler captures or releases mouse capture according to mouse button states. The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)].  \n  \n [!code-cs[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/csharp/ContentElementsSmorgasbord/Trackball.cs#uielementmousecapture)]\n [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/add/codesnippet/visualbasic/contentelementssmorgasbord/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает перо, если элемент произвел захват."
  remarks: "Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.ContentElement.IsStylusCaptured%2A>перед вызовом этого метода.</xref:System.Windows.ContentElement.IsStylusCaptured%2A>"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.ContentElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку освободить заданное сенсорное устройство из этого элемента."
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "Устройство, чтобы освободить."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если устройство сенсорного ввода освободить; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.ContentElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Удаляет указанный обработчик маршрутизируемого события из этого элемента."
  remarks: "Наиболее распространенный сценарий с помощью этого [!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)] — при реализации [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] «программу-оболочку» события, связанный с пользовательских перенаправленных событий, особенно при реализовать логику «удалить» для обработчиков [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] уровне. Это в следующем примере иллюстрируются сценарием примечания.       Вызов этого метода имеет смысл, если обработчики, зарегистрированные с критериями, соответствующие входным параметрам для вызова данного метода, отсутствуют.       Если более чем один обработчик присоединяется, соответствующих критериям, только первый обработчик в случае, когда обработчик хранилище будет удалено. Такое поведение согласуется с [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] поведение `-=` оператор.       Ни `routedEvent` , ни `handler` может быть `null`. Попытка присвоить значение, либо как `null` вызовет исключение.       Этот метод игнорирует `handledEventsToo` добавлены сведения о параметрах, который предоставляется, если обработчик был первоначально с <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>подпись, которая включает обработку событий уже обработана.</xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Любой из типов обработчика удаляется."
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор перенаправленного события, к которому присоединен обработчик."
    - id: handler
      type: System.Delegate
      description: "Конкретная реализация обработчика для удаления из коллекции обработчиков событий для этого элемента."
  overload: System.Windows.ContentElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает, должны ли процессы сериализации сериализовать содержимое <xref:System.Windows.ContentElement.CommandBindings*>Свойства для экземпляров этого класса.</xref:System.Windows.ContentElement.CommandBindings*>"
  remarks: "Будет возвращен `true` Если <xref:System.Windows.ContentElement.CommandBindings%2A>установлено локально.</xref:System.Windows.ContentElement.CommandBindings%2A>       Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.CommandBindings%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.UIElement.CommandBindings%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при разработке либо конструктора, либо собственного элемента управления, включающего <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.ContentElement.CommandBindings*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.ContentElement.CommandBindings*>"
  overload: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает, должны ли процессы сериализации сериализовать содержимое <xref:System.Windows.ContentElement.InputBindings*>Свойства для экземпляров этого класса.</xref:System.Windows.ContentElement.InputBindings*>"
  remarks: "Будет возвращен `true` Если <xref:System.Windows.ContentElement.InputBindings%2A>установлено локально.</xref:System.Windows.ContentElement.InputBindings%2A>       Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.InputBindings%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.UIElement.InputBindings%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при разработке либо конструктора, либо собственного элемента управления, включающего <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.ContentElement.InputBindings*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.ContentElement.InputBindings*>"
  overload: System.Windows.ContentElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusButtonDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusButtonDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusButtonDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.</xref:System.Windows.ContentElement.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.StylusButtonDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании кнопки пера, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusButtonUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusButtonUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusButtonUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.</xref:System.Windows.ContentElement.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.ContentElement.StylusButtonUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDown
  id: StylusDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо касается дигитайзера, когда перо находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusDown часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusDownEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusDown>.</xref:System.Windows.ContentElement.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.ContentElement.StylusDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо попадает внутрь границ данного элемента."
  remarks: "— StylusEnter [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) , использующий прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       StylusEnter отслеживает, когда перо попадает внутрь границ элемента, это событие более буквально о том, что <xref:System.Windows.ContentElement.IsStylusOver%2A>значение свойства было изменено с `false` для `true` для этого элемента.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusEnter часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusEnter присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnStylusEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом без касания дигитайзера."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusInAirMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> Обработчики событий, подключенные к событие StylusInAirMove подключены к основному <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusInAirMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.</xref:System.Windows.ContentElement.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusInAirMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusInAirMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится достаточно близко от дигитайзера, чтобы быть обнаруженным, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusInRange часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusInRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusInRangeEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusInRange>.</xref:System.Windows.ContentElement.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusInRangeEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusInRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusInRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо покидает границы элемента."
  remarks: "— StylusLeave [направлено Общие сведения о событиях](~/add/includes/ajax-current-ext-md.md) , использующий прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       StylusLeave отслеживает, когда перо покидает границы элемента, это событие более буквально о том, что <xref:System.Windows.ContentElement.IsStylusOver%2A>значение свойства было изменено с `true` для `false` для этого элемента.</xref:System.Windows.ContentElement.IsStylusOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusLeave часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusLeave присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Переопределить <xref:System.Windows.ContentElement.OnStylusLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMove
  id: StylusMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над данным элементом. Перо должно перемещаться по дигитайзеру для порождения этого события. В противном случае <xref href=&quot;System.Windows.ContentElement.StylusInAirMove&quot;> </xref> вызывается событие."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusMove часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusMove присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusMove>.</xref:System.Windows.ContentElement.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится слишком далеко от дигитайзера для обнаружения, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusOutOfRange часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusOutOfRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.</xref:System.Windows.ContentElement.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusOutOfRangeEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusOutOfRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при использовании пользователем одного из жестов пером."
  remarks: "Дополнительные сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusSystemGesture часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusSystemGesture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusSystemGestureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.</xref:System.Windows.ContentElement.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.ContentElement.StylusSystemGestureEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusSystemGesture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUp
  id: StylusUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда пользователь отрывает перо от планшета, когда оно находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusUp часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.StylusUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewStylusUp>.</xref:System.Windows.ContentElement.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.ContentElement.StylusUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnStylusUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.StylusUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInput
  id: TextInput
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом текста аппаратно независимым способом."
  remarks: "> [!IMPORTANT]Настроек это событие уже может быть помечено как обработанное внутренними реализациями составных элементов управления. См. примечания ниже.       Событие TextInput уже могут быть помечены как обработанное внутренними реализациями составных элементов управления. Например <xref:System.Windows.Controls.TextBox>является составной элемент управления, где TextInput событие уже помечено как обработанное; внутри элемента.</xref:System.Windows.Controls.TextBox> Элементы управления этого, так как он должен определять некоторые виды ввода, например клавиши со стрелками, как имеющие специальное значение для этого элемента управления. Если вы используете <xref:System.Windows.ContentElement.PreviewTextInput>как событий, где присоединение обработчиков для ввода текста, может получать более точные результаты.</xref:System.Windows.ContentElement.PreviewTextInput> Этот прием позволяет обойти большинство случаях данное событие уже помечено как обработанное и предотвращает получение событий на маршруте события обработчиком композиции элемента управления.       Событие TextInput позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством TextInput, но речи, рукописного текста и других устройств ввода также могут вызывать TextInput.       Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.       Это событие создает псевдоним <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы TextInput часть класса список членов, когда <xref:System.Windows.ContentElement>наследуется от базового элемента.</xref:System.Windows.ContentElement> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> Обработчики событий, присоединенные к событию TextInput присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_TextInput&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TextInputEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.TextCompositionEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewTextInput>.</xref:System.Windows.ContentElement.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.ContentElement.TextInputEvent>      -Переопределить <xref:System.Windows.ContentElement.OnTextInput%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TextInput&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDown
  id: TouchDown
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при касании пальцем экрана, когда палец находится над данным элементом."
  remarks: "По умолчанию <xref:System.Windows.ContentElement.PreviewTouchDown>и TouchDown событий не выполняется до пальцем экрана соприкасается и перемещает.</xref:System.Windows.ContentElement.PreviewTouchDown> Пальца на экране необходимо удерживать нажатой его без его перемещения нажатие и удерживайте поведение <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.       Чтобы вызвать <xref:System.Windows.ContentElement.PreviewTouchDown>и события TouchDown к как можно скорее касании пальцем экрана, установите <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>присоединенного свойства для `false` для этого элемента.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TouchDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewTouchDown>.</xref:System.Windows.ContentElement.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchDownEvent>      -Переопределить <xref:System.Windows.ContentElement.OnTouchDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TouchDown&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении касания внутрь границ данного элемента."
  remarks: "Это событие всегда возникает, независимо от захвата сенсорного устройства элементом пользовательского интерфейса.      <a name=&quot;routedEventInfo_TouchEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TouchEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.ContentElement.OnTouchEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TouchEnter&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, переданные в этот элемент."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, переданные в этот элемент."
  overload: System.Windows.ContentElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, переданные в этот элемент или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, переданные в этот элемент или всех дочерних элементов в визуальном дереве."
  overload: System.Windows.ContentElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, находящиеся над данным элементом."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, которые являются над данным элементом."
  overload: System.Windows.ContentElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, находящиеся над данным элементом или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, которые являются данного элемента или всех дочерних элементов в визуальном дереве."
  overload: System.Windows.ContentElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении касания за границы данного элемента."
  remarks: "<a name=&quot;routedEventInfo_TouchLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TouchLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.ContentElement.OnTouchLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TouchLeave&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMove
  id: TouchMove
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении пальца на экране, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TouchMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewTouchMove>.</xref:System.Windows.ContentElement.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchMoveEvent>      -Переопределить <xref:System.Windows.ContentElement.OnTouchMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TouchMove&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUp
  id: TouchUp
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда палец отрывается экрана, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.ContentElement.TouchUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.ContentElement.PreviewTouchUp>.</xref:System.Windows.ContentElement.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.ContentElement.TouchUpEvent>      -Переопределить <xref:System.Windows.ContentElement.OnTouchUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.ContentElement.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ContentElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.ContentElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.ContentElement.TouchUp&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.ContentElement.#ctor
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement()
  nameWithType: ContentElement.ContentElement()
  fullName: System.Windows.ContentElement.ContentElement()
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.ContentElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.ContentElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.ContentElement.AllowDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
  fullName: System.Windows.ContentElement.AllowDrop
- uid: System.Windows.ContentElement.AllowDropProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: ContentElement.AllowDropProperty
  fullName: System.Windows.ContentElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.ContentElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
  fullName: System.Windows.ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.ContentElement.AreAnyTouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
  fullName: System.Windows.ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: ContentElement.AreAnyTouchesOverProperty
  fullName: System.Windows.ContentElement.AreAnyTouchesOverProperty
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.ContentElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.ContentElement.CaptureMouse
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: ContentElement.CaptureMouse()
  fullName: System.Windows.ContentElement.CaptureMouse()
- uid: System.Windows.ContentElement.CaptureStylus
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: ContentElement.CaptureStylus()
  fullName: System.Windows.ContentElement.CaptureStylus()
- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: ContentElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.ContentElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.ContentElement.CommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
  fullName: System.Windows.ContentElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.ContentElement.DragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnter
  nameWithType: ContentElement.DragEnter
  fullName: System.Windows.ContentElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.ContentElement.DragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: ContentElement.DragEnterEvent
  fullName: System.Windows.ContentElement.DragEnterEvent
- uid: System.Windows.ContentElement.DragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeave
  nameWithType: ContentElement.DragLeave
  fullName: System.Windows.ContentElement.DragLeave
- uid: System.Windows.ContentElement.DragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: ContentElement.DragLeaveEvent
  fullName: System.Windows.ContentElement.DragLeaveEvent
- uid: System.Windows.ContentElement.DragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOver
  nameWithType: ContentElement.DragOver
  fullName: System.Windows.ContentElement.DragOver
- uid: System.Windows.ContentElement.DragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DragOverEvent
  nameWithType: ContentElement.DragOverEvent
  fullName: System.Windows.ContentElement.DragOverEvent
- uid: System.Windows.ContentElement.Drop
  parent: System.Windows.ContentElement
  isExternal: false
  name: Drop
  nameWithType: ContentElement.Drop
  fullName: System.Windows.ContentElement.Drop
- uid: System.Windows.ContentElement.DropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: DropEvent
  nameWithType: ContentElement.DropEvent
  fullName: System.Windows.ContentElement.DropEvent
- uid: System.Windows.ContentElement.Focus
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus()
  nameWithType: ContentElement.Focus()
  fullName: System.Windows.ContentElement.Focus()
- uid: System.Windows.ContentElement.Focusable
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
  fullName: System.Windows.ContentElement.Focusable
- uid: System.Windows.ContentElement.FocusableChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableChanged
  nameWithType: ContentElement.FocusableChanged
  fullName: System.Windows.ContentElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.ContentElement.FocusableProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: FocusableProperty
  nameWithType: ContentElement.FocusableProperty
  fullName: System.Windows.ContentElement.FocusableProperty
- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.ContentElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ContentElement.GetUIParentCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: ContentElement.GetUIParentCore()
  fullName: System.Windows.ContentElement.GetUIParentCore()
- uid: System.Windows.ContentElement.GiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedback
  nameWithType: ContentElement.GiveFeedback
  fullName: System.Windows.ContentElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.ContentElement.GiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: ContentElement.GiveFeedbackEvent
  fullName: System.Windows.ContentElement.GiveFeedbackEvent
- uid: System.Windows.ContentElement.GotFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocus
  nameWithType: ContentElement.GotFocus
  fullName: System.Windows.ContentElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.ContentElement.GotFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: ContentElement.GotFocusEvent
  fullName: System.Windows.ContentElement.GotFocusEvent
- uid: System.Windows.ContentElement.GotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: ContentElement.GotKeyboardFocus
  fullName: System.Windows.ContentElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.ContentElement.GotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: ContentElement.GotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.GotKeyboardFocusEvent
- uid: System.Windows.ContentElement.GotMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: ContentElement.GotMouseCapture
  fullName: System.Windows.ContentElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.ContentElement.GotMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: ContentElement.GotMouseCaptureEvent
  fullName: System.Windows.ContentElement.GotMouseCaptureEvent
- uid: System.Windows.ContentElement.GotStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: ContentElement.GotStylusCapture
  fullName: System.Windows.ContentElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.ContentElement.GotStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: ContentElement.GotStylusCaptureEvent
  fullName: System.Windows.ContentElement.GotStylusCaptureEvent
- uid: System.Windows.ContentElement.GotTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: ContentElement.GotTouchCapture
  fullName: System.Windows.ContentElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.GotTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: ContentElement.GotTouchCaptureEvent
  fullName: System.Windows.ContentElement.GotTouchCaptureEvent
- uid: System.Windows.ContentElement.HasAnimatedProperties
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
  fullName: System.Windows.ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
  fullName: System.Windows.ContentElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.ContentElement.IsEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
  fullName: System.Windows.ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: ContentElement.IsEnabledChanged
  fullName: System.Windows.ContentElement.IsEnabledChanged
- uid: System.Windows.ContentElement.IsEnabledCore
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
  fullName: System.Windows.ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsEnabledProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: ContentElement.IsEnabledProperty
  fullName: System.Windows.ContentElement.IsEnabledProperty
- uid: System.Windows.ContentElement.IsFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
  fullName: System.Windows.ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: ContentElement.IsFocusedProperty
  fullName: System.Windows.ContentElement.IsFocusedProperty
- uid: System.Windows.ContentElement.IsInputMethodEnabled
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
  fullName: System.Windows.ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
  fullName: System.Windows.ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: ContentElement.IsKeyboardFocusedChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: ContentElement.IsKeyboardFocusedProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusedProperty
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: ContentElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: ContentElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.ContentElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.ContentElement.IsMouseCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
  fullName: System.Windows.ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: ContentElement.IsMouseCapturedChanged
  fullName: System.Windows.ContentElement.IsMouseCapturedChanged
- uid: System.Windows.ContentElement.IsMouseCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: ContentElement.IsMouseCapturedProperty
  fullName: System.Windows.ContentElement.IsMouseCapturedProperty
- uid: System.Windows.ContentElement.IsMouseCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
  fullName: System.Windows.ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: ContentElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: ContentElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsMouseCaptureWithinProperty
- uid: System.Windows.ContentElement.IsMouseDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
  fullName: System.Windows.ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: ContentElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: ContentElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsMouseDirectlyOverProperty
- uid: System.Windows.ContentElement.IsMouseOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
  fullName: System.Windows.ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsMouseOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: ContentElement.IsMouseOverProperty
  fullName: System.Windows.ContentElement.IsMouseOverProperty
- uid: System.Windows.ContentElement.IsStylusCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
  fullName: System.Windows.ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCapturedChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: ContentElement.IsStylusCapturedChanged
  fullName: System.Windows.ContentElement.IsStylusCapturedChanged
- uid: System.Windows.ContentElement.IsStylusCapturedProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: ContentElement.IsStylusCapturedProperty
  fullName: System.Windows.ContentElement.IsStylusCapturedProperty
- uid: System.Windows.ContentElement.IsStylusCaptureWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
  fullName: System.Windows.ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: ContentElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: ContentElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.ContentElement.IsStylusCaptureWithinProperty
- uid: System.Windows.ContentElement.IsStylusDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
  fullName: System.Windows.ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: ContentElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: ContentElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.ContentElement.IsStylusDirectlyOverProperty
- uid: System.Windows.ContentElement.IsStylusOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
  fullName: System.Windows.ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.IsStylusOverProperty
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: ContentElement.IsStylusOverProperty
  fullName: System.Windows.ContentElement.IsStylusOverProperty
- uid: System.Windows.ContentElement.KeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDown
  nameWithType: ContentElement.KeyDown
  fullName: System.Windows.ContentElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.ContentElement.KeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: ContentElement.KeyDownEvent
  fullName: System.Windows.ContentElement.KeyDownEvent
- uid: System.Windows.ContentElement.KeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUp
  nameWithType: ContentElement.KeyUp
  fullName: System.Windows.ContentElement.KeyUp
- uid: System.Windows.ContentElement.KeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: ContentElement.KeyUpEvent
  fullName: System.Windows.ContentElement.KeyUpEvent
- uid: System.Windows.ContentElement.LostFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocus
  nameWithType: ContentElement.LostFocus
  fullName: System.Windows.ContentElement.LostFocus
- uid: System.Windows.ContentElement.LostFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: ContentElement.LostFocusEvent
  fullName: System.Windows.ContentElement.LostFocusEvent
- uid: System.Windows.ContentElement.LostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: ContentElement.LostKeyboardFocus
  fullName: System.Windows.ContentElement.LostKeyboardFocus
- uid: System.Windows.ContentElement.LostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: ContentElement.LostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.LostKeyboardFocusEvent
- uid: System.Windows.ContentElement.LostMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: ContentElement.LostMouseCapture
  fullName: System.Windows.ContentElement.LostMouseCapture
- uid: System.Windows.ContentElement.LostMouseCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: ContentElement.LostMouseCaptureEvent
  fullName: System.Windows.ContentElement.LostMouseCaptureEvent
- uid: System.Windows.ContentElement.LostStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: ContentElement.LostStylusCapture
  fullName: System.Windows.ContentElement.LostStylusCapture
- uid: System.Windows.ContentElement.LostStylusCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: ContentElement.LostStylusCaptureEvent
  fullName: System.Windows.ContentElement.LostStylusCaptureEvent
- uid: System.Windows.ContentElement.LostTouchCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: ContentElement.LostTouchCapture
  fullName: System.Windows.ContentElement.LostTouchCapture
- uid: System.Windows.ContentElement.LostTouchCaptureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: ContentElement.LostTouchCaptureEvent
  fullName: System.Windows.ContentElement.LostTouchCaptureEvent
- uid: System.Windows.ContentElement.MouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDown
  nameWithType: ContentElement.MouseDown
  fullName: System.Windows.ContentElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.ContentElement.MouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: ContentElement.MouseDownEvent
  fullName: System.Windows.ContentElement.MouseDownEvent
- uid: System.Windows.ContentElement.MouseEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnter
  nameWithType: ContentElement.MouseEnter
  fullName: System.Windows.ContentElement.MouseEnter
- uid: System.Windows.ContentElement.MouseEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: ContentElement.MouseEnterEvent
  fullName: System.Windows.ContentElement.MouseEnterEvent
- uid: System.Windows.ContentElement.MouseLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeave
  nameWithType: ContentElement.MouseLeave
  fullName: System.Windows.ContentElement.MouseLeave
- uid: System.Windows.ContentElement.MouseLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: ContentElement.MouseLeaveEvent
  fullName: System.Windows.ContentElement.MouseLeaveEvent
- uid: System.Windows.ContentElement.MouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: ContentElement.MouseLeftButtonDown
  fullName: System.Windows.ContentElement.MouseLeftButtonDown
- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: ContentElement.MouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.MouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: ContentElement.MouseLeftButtonUp
  fullName: System.Windows.ContentElement.MouseLeftButtonUp
- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: ContentElement.MouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.MouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.MouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMove
  nameWithType: ContentElement.MouseMove
  fullName: System.Windows.ContentElement.MouseMove
- uid: System.Windows.ContentElement.MouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: ContentElement.MouseMoveEvent
  fullName: System.Windows.ContentElement.MouseMoveEvent
- uid: System.Windows.ContentElement.MouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: ContentElement.MouseRightButtonDown
  fullName: System.Windows.ContentElement.MouseRightButtonDown
- uid: System.Windows.ContentElement.MouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: ContentElement.MouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.MouseRightButtonDownEvent
- uid: System.Windows.ContentElement.MouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: ContentElement.MouseRightButtonUp
  fullName: System.Windows.ContentElement.MouseRightButtonUp
- uid: System.Windows.ContentElement.MouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: ContentElement.MouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.MouseRightButtonUpEvent
- uid: System.Windows.ContentElement.MouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUp
  nameWithType: ContentElement.MouseUp
  fullName: System.Windows.ContentElement.MouseUp
- uid: System.Windows.ContentElement.MouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: ContentElement.MouseUpEvent
  fullName: System.Windows.ContentElement.MouseUpEvent
- uid: System.Windows.ContentElement.MouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheel
  nameWithType: ContentElement.MouseWheel
  fullName: System.Windows.ContentElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.ContentElement.MouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: ContentElement.MouseWheelEvent
  fullName: System.Windows.ContentElement.MouseWheelEvent
- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: ContentElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.ContentElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.ContentElement.OnCreateAutomationPeer
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: ContentElement.OnCreateAutomationPeer()
  fullName: System.Windows.ContentElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: ContentElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: ContentElement.OnDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.ContentElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.ContentElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.ContentElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.ContentElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.ContentElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.ContentElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.ContentElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.ContentElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.ContentElement.PreviewDragEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: ContentElement.PreviewDragEnter
  fullName: System.Windows.ContentElement.PreviewDragEnter
- uid: System.Windows.ContentElement.PreviewDragEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: ContentElement.PreviewDragEnterEvent
  fullName: System.Windows.ContentElement.PreviewDragEnterEvent
- uid: System.Windows.ContentElement.PreviewDragLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: ContentElement.PreviewDragLeave
  fullName: System.Windows.ContentElement.PreviewDragLeave
- uid: System.Windows.ContentElement.PreviewDragLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: ContentElement.PreviewDragLeaveEvent
  fullName: System.Windows.ContentElement.PreviewDragLeaveEvent
- uid: System.Windows.ContentElement.PreviewDragOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: ContentElement.PreviewDragOver
  fullName: System.Windows.ContentElement.PreviewDragOver
- uid: System.Windows.ContentElement.PreviewDragOverEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: ContentElement.PreviewDragOverEvent
  fullName: System.Windows.ContentElement.PreviewDragOverEvent
- uid: System.Windows.ContentElement.PreviewDrop
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDrop
  nameWithType: ContentElement.PreviewDrop
  fullName: System.Windows.ContentElement.PreviewDrop
- uid: System.Windows.ContentElement.PreviewDropEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: ContentElement.PreviewDropEvent
  fullName: System.Windows.ContentElement.PreviewDropEvent
- uid: System.Windows.ContentElement.PreviewGiveFeedback
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: ContentElement.PreviewGiveFeedback
  fullName: System.Windows.ContentElement.PreviewGiveFeedback
- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: ContentElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.ContentElement.PreviewGiveFeedbackEvent
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: ContentElement.PreviewGotKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewKeyDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: ContentElement.PreviewKeyDown
  fullName: System.Windows.ContentElement.PreviewKeyDown
- uid: System.Windows.ContentElement.PreviewKeyDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: ContentElement.PreviewKeyDownEvent
  fullName: System.Windows.ContentElement.PreviewKeyDownEvent
- uid: System.Windows.ContentElement.PreviewKeyUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: ContentElement.PreviewKeyUp
  fullName: System.Windows.ContentElement.PreviewKeyUp
- uid: System.Windows.ContentElement.PreviewKeyUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: ContentElement.PreviewKeyUpEvent
  fullName: System.Windows.ContentElement.PreviewKeyUpEvent
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: ContentElement.PreviewLostKeyboardFocus
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.ContentElement.PreviewMouseDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: ContentElement.PreviewMouseDown
  fullName: System.Windows.ContentElement.PreviewMouseDown
- uid: System.Windows.ContentElement.PreviewMouseDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: ContentElement.PreviewMouseDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: ContentElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: ContentElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: ContentElement.PreviewMouseMove
  fullName: System.Windows.ContentElement.PreviewMouseMove
- uid: System.Windows.ContentElement.PreviewMouseMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: ContentElement.PreviewMouseMoveEvent
  fullName: System.Windows.ContentElement.PreviewMouseMoveEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: ContentElement.PreviewMouseRightButtonDown
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: ContentElement.PreviewMouseRightButtonUp
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.ContentElement.PreviewMouseUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: ContentElement.PreviewMouseUp
  fullName: System.Windows.ContentElement.PreviewMouseUp
- uid: System.Windows.ContentElement.PreviewMouseUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: ContentElement.PreviewMouseUpEvent
  fullName: System.Windows.ContentElement.PreviewMouseUpEvent
- uid: System.Windows.ContentElement.PreviewMouseWheel
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: ContentElement.PreviewMouseWheel
  fullName: System.Windows.ContentElement.PreviewMouseWheel
- uid: System.Windows.ContentElement.PreviewMouseWheelEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: ContentElement.PreviewMouseWheelEvent
  fullName: System.Windows.ContentElement.PreviewMouseWheelEvent
- uid: System.Windows.ContentElement.PreviewQueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: ContentElement.PreviewQueryContinueDrag
  fullName: System.Windows.ContentElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: ContentElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.ContentElement.PreviewQueryContinueDragEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: ContentElement.PreviewStylusButtonDown
  fullName: System.Windows.ContentElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: ContentElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonDownEvent
- uid: System.Windows.ContentElement.PreviewStylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: ContentElement.PreviewStylusButtonUp
  fullName: System.Windows.ContentElement.PreviewStylusButtonUp
- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: ContentElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusButtonUpEvent
- uid: System.Windows.ContentElement.PreviewStylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: ContentElement.PreviewStylusDown
  fullName: System.Windows.ContentElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.ContentElement.PreviewStylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: ContentElement.PreviewStylusDownEvent
  fullName: System.Windows.ContentElement.PreviewStylusDownEvent
- uid: System.Windows.ContentElement.PreviewStylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: ContentElement.PreviewStylusInAirMove
  fullName: System.Windows.ContentElement.PreviewStylusInAirMove
- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: ContentElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: ContentElement.PreviewStylusInRange
  fullName: System.Windows.ContentElement.PreviewStylusInRange
- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: ContentElement.PreviewStylusInRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusInRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: ContentElement.PreviewStylusMove
  fullName: System.Windows.ContentElement.PreviewStylusMove
- uid: System.Windows.ContentElement.PreviewStylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: ContentElement.PreviewStylusMoveEvent
  fullName: System.Windows.ContentElement.PreviewStylusMoveEvent
- uid: System.Windows.ContentElement.PreviewStylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: ContentElement.PreviewStylusOutOfRange
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRange
- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.ContentElement.PreviewStylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: ContentElement.PreviewStylusSystemGesture
  fullName: System.Windows.ContentElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: ContentElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.ContentElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.ContentElement.PreviewStylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: ContentElement.PreviewStylusUp
  fullName: System.Windows.ContentElement.PreviewStylusUp
- uid: System.Windows.ContentElement.PreviewStylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: ContentElement.PreviewStylusUpEvent
  fullName: System.Windows.ContentElement.PreviewStylusUpEvent
- uid: System.Windows.ContentElement.PreviewTextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: ContentElement.PreviewTextInput
  fullName: System.Windows.ContentElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.ContentElement.PreviewTextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: ContentElement.PreviewTextInputEvent
  fullName: System.Windows.ContentElement.PreviewTextInputEvent
- uid: System.Windows.ContentElement.PreviewTouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: ContentElement.PreviewTouchDown
  fullName: System.Windows.ContentElement.PreviewTouchDown
- uid: System.Windows.ContentElement.PreviewTouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: ContentElement.PreviewTouchDownEvent
  fullName: System.Windows.ContentElement.PreviewTouchDownEvent
- uid: System.Windows.ContentElement.PreviewTouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: ContentElement.PreviewTouchMove
  fullName: System.Windows.ContentElement.PreviewTouchMove
- uid: System.Windows.ContentElement.PreviewTouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: ContentElement.PreviewTouchMoveEvent
  fullName: System.Windows.ContentElement.PreviewTouchMoveEvent
- uid: System.Windows.ContentElement.PreviewTouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: ContentElement.PreviewTouchUp
  fullName: System.Windows.ContentElement.PreviewTouchUp
- uid: System.Windows.ContentElement.PreviewTouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: ContentElement.PreviewTouchUpEvent
  fullName: System.Windows.ContentElement.PreviewTouchUpEvent
- uid: System.Windows.ContentElement.QueryContinueDrag
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: ContentElement.QueryContinueDrag
  fullName: System.Windows.ContentElement.QueryContinueDrag
- uid: System.Windows.ContentElement.QueryContinueDragEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: ContentElement.QueryContinueDragEvent
  fullName: System.Windows.ContentElement.QueryContinueDragEvent
- uid: System.Windows.ContentElement.QueryCursor
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursor
  nameWithType: ContentElement.QueryCursor
  fullName: System.Windows.ContentElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.ContentElement.QueryCursorEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: ContentElement.QueryCursorEvent
  fullName: System.Windows.ContentElement.QueryCursorEvent
- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.ContentElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: ContentElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.ContentElement.ReleaseAllTouchCaptures()
- uid: System.Windows.ContentElement.ReleaseMouseCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: ContentElement.ReleaseMouseCapture()
  fullName: System.Windows.ContentElement.ReleaseMouseCapture()
- uid: System.Windows.ContentElement.ReleaseStylusCapture
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: ContentElement.ReleaseStylusCapture()
  fullName: System.Windows.ContentElement.ReleaseStylusCapture()
- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.ContentElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: ContentElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.ContentElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: ContentElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeCommandBindings()
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: ContentElement.ShouldSerializeInputBindings()
  fullName: System.Windows.ContentElement.ShouldSerializeInputBindings()
- uid: System.Windows.ContentElement.StylusButtonDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: ContentElement.StylusButtonDown
  fullName: System.Windows.ContentElement.StylusButtonDown
- uid: System.Windows.ContentElement.StylusButtonDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: ContentElement.StylusButtonDownEvent
  fullName: System.Windows.ContentElement.StylusButtonDownEvent
- uid: System.Windows.ContentElement.StylusButtonUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: ContentElement.StylusButtonUp
  fullName: System.Windows.ContentElement.StylusButtonUp
- uid: System.Windows.ContentElement.StylusButtonUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: ContentElement.StylusButtonUpEvent
  fullName: System.Windows.ContentElement.StylusButtonUpEvent
- uid: System.Windows.ContentElement.StylusDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDown
  nameWithType: ContentElement.StylusDown
  fullName: System.Windows.ContentElement.StylusDown
- uid: System.Windows.ContentElement.StylusDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: ContentElement.StylusDownEvent
  fullName: System.Windows.ContentElement.StylusDownEvent
- uid: System.Windows.ContentElement.StylusEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnter
  nameWithType: ContentElement.StylusEnter
  fullName: System.Windows.ContentElement.StylusEnter
- uid: System.Windows.ContentElement.StylusEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: ContentElement.StylusEnterEvent
  fullName: System.Windows.ContentElement.StylusEnterEvent
- uid: System.Windows.ContentElement.StylusInAirMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: ContentElement.StylusInAirMove
  fullName: System.Windows.ContentElement.StylusInAirMove
- uid: System.Windows.ContentElement.StylusInAirMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: ContentElement.StylusInAirMoveEvent
  fullName: System.Windows.ContentElement.StylusInAirMoveEvent
- uid: System.Windows.ContentElement.StylusInRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRange
  nameWithType: ContentElement.StylusInRange
  fullName: System.Windows.ContentElement.StylusInRange
- uid: System.Windows.ContentElement.StylusInRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: ContentElement.StylusInRangeEvent
  fullName: System.Windows.ContentElement.StylusInRangeEvent
- uid: System.Windows.ContentElement.StylusLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeave
  nameWithType: ContentElement.StylusLeave
  fullName: System.Windows.ContentElement.StylusLeave
- uid: System.Windows.ContentElement.StylusLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: ContentElement.StylusLeaveEvent
  fullName: System.Windows.ContentElement.StylusLeaveEvent
- uid: System.Windows.ContentElement.StylusMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMove
  nameWithType: ContentElement.StylusMove
  fullName: System.Windows.ContentElement.StylusMove
- uid: System.Windows.ContentElement.StylusMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: ContentElement.StylusMoveEvent
  fullName: System.Windows.ContentElement.StylusMoveEvent
- uid: System.Windows.ContentElement.StylusOutOfRange
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: ContentElement.StylusOutOfRange
  fullName: System.Windows.ContentElement.StylusOutOfRange
- uid: System.Windows.ContentElement.StylusOutOfRangeEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: ContentElement.StylusOutOfRangeEvent
  fullName: System.Windows.ContentElement.StylusOutOfRangeEvent
- uid: System.Windows.ContentElement.StylusSystemGesture
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: ContentElement.StylusSystemGesture
  fullName: System.Windows.ContentElement.StylusSystemGesture
- uid: System.Windows.ContentElement.StylusSystemGestureEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: ContentElement.StylusSystemGestureEvent
  fullName: System.Windows.ContentElement.StylusSystemGestureEvent
- uid: System.Windows.ContentElement.StylusUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUp
  nameWithType: ContentElement.StylusUp
  fullName: System.Windows.ContentElement.StylusUp
- uid: System.Windows.ContentElement.StylusUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: ContentElement.StylusUpEvent
  fullName: System.Windows.ContentElement.StylusUpEvent
- uid: System.Windows.ContentElement.TextInput
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInput
  nameWithType: ContentElement.TextInput
  fullName: System.Windows.ContentElement.TextInput
- uid: System.Windows.ContentElement.TextInputEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TextInputEvent
  nameWithType: ContentElement.TextInputEvent
  fullName: System.Windows.ContentElement.TextInputEvent
- uid: System.Windows.ContentElement.TouchDown
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDown
  nameWithType: ContentElement.TouchDown
  fullName: System.Windows.ContentElement.TouchDown
- uid: System.Windows.ContentElement.TouchDownEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: ContentElement.TouchDownEvent
  fullName: System.Windows.ContentElement.TouchDownEvent
- uid: System.Windows.ContentElement.TouchEnter
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnter
  nameWithType: ContentElement.TouchEnter
  fullName: System.Windows.ContentElement.TouchEnter
- uid: System.Windows.ContentElement.TouchEnterEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: ContentElement.TouchEnterEvent
  fullName: System.Windows.ContentElement.TouchEnterEvent
- uid: System.Windows.ContentElement.TouchesCaptured
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
  fullName: System.Windows.ContentElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.ContentElement.TouchesCapturedWithin
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
  fullName: System.Windows.ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
  fullName: System.Windows.ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
  fullName: System.Windows.ContentElement.TouchesOver
- uid: System.Windows.ContentElement.TouchLeave
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeave
  nameWithType: ContentElement.TouchLeave
  fullName: System.Windows.ContentElement.TouchLeave
- uid: System.Windows.ContentElement.TouchLeaveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: ContentElement.TouchLeaveEvent
  fullName: System.Windows.ContentElement.TouchLeaveEvent
- uid: System.Windows.ContentElement.TouchMove
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMove
  nameWithType: ContentElement.TouchMove
  fullName: System.Windows.ContentElement.TouchMove
- uid: System.Windows.ContentElement.TouchMoveEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: ContentElement.TouchMoveEvent
  fullName: System.Windows.ContentElement.TouchMoveEvent
- uid: System.Windows.ContentElement.TouchUp
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUp
  nameWithType: ContentElement.TouchUp
  fullName: System.Windows.ContentElement.TouchUp
- uid: System.Windows.ContentElement.TouchUpEvent
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: ContentElement.TouchUpEvent
  fullName: System.Windows.ContentElement.TouchUpEvent
- uid: System.Windows.ContentElement.#ctor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ContentElement
  nameWithType: ContentElement.ContentElement
- uid: System.Windows.ContentElement.AddHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddHandler
  nameWithType: ContentElement.AddHandler
- uid: System.Windows.ContentElement.AddToEventRoute*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: ContentElement.AddToEventRoute
- uid: System.Windows.ContentElement.AllowDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AllowDrop
  nameWithType: ContentElement.AllowDrop
- uid: System.Windows.ContentElement.ApplyAnimationClock*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: ContentElement.ApplyAnimationClock
- uid: System.Windows.ContentElement.AreAnyTouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: ContentElement.AreAnyTouchesCaptured
- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: ContentElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: ContentElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.ContentElement.AreAnyTouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: ContentElement.AreAnyTouchesOver
- uid: System.Windows.ContentElement.BeginAnimation*
  parent: System.Windows.ContentElement
  isExternal: false
  name: BeginAnimation
  nameWithType: ContentElement.BeginAnimation
- uid: System.Windows.ContentElement.CaptureMouse*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureMouse
  nameWithType: ContentElement.CaptureMouse
- uid: System.Windows.ContentElement.CaptureStylus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureStylus
  nameWithType: ContentElement.CaptureStylus
- uid: System.Windows.ContentElement.CaptureTouch*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CaptureTouch
  nameWithType: ContentElement.CaptureTouch
- uid: System.Windows.ContentElement.CommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: CommandBindings
  nameWithType: ContentElement.CommandBindings
- uid: System.Windows.ContentElement.Focus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focus
  nameWithType: ContentElement.Focus
- uid: System.Windows.ContentElement.Focusable*
  parent: System.Windows.ContentElement
  isExternal: false
  name: Focusable
  nameWithType: ContentElement.Focusable
- uid: System.Windows.ContentElement.GetAnimationBaseValue*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: ContentElement.GetAnimationBaseValue
- uid: System.Windows.ContentElement.GetUIParentCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: ContentElement.GetUIParentCore
- uid: System.Windows.ContentElement.HasAnimatedProperties*
  parent: System.Windows.ContentElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: ContentElement.HasAnimatedProperties
- uid: System.Windows.ContentElement.InputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: InputBindings
  nameWithType: ContentElement.InputBindings
- uid: System.Windows.ContentElement.IsEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabled
  nameWithType: ContentElement.IsEnabled
- uid: System.Windows.ContentElement.IsEnabledCore*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: ContentElement.IsEnabledCore
- uid: System.Windows.ContentElement.IsFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsFocused
  nameWithType: ContentElement.IsFocused
- uid: System.Windows.ContentElement.IsInputMethodEnabled*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: ContentElement.IsInputMethodEnabled
- uid: System.Windows.ContentElement.IsKeyboardFocused*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: ContentElement.IsKeyboardFocused
- uid: System.Windows.ContentElement.IsKeyboardFocusWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: ContentElement.IsKeyboardFocusWithin
- uid: System.Windows.ContentElement.IsMouseCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: ContentElement.IsMouseCaptured
- uid: System.Windows.ContentElement.IsMouseCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: ContentElement.IsMouseCaptureWithin
- uid: System.Windows.ContentElement.IsMouseDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: ContentElement.IsMouseDirectlyOver
- uid: System.Windows.ContentElement.IsMouseOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsMouseOver
  nameWithType: ContentElement.IsMouseOver
- uid: System.Windows.ContentElement.IsStylusCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: ContentElement.IsStylusCaptured
- uid: System.Windows.ContentElement.IsStylusCaptureWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: ContentElement.IsStylusCaptureWithin
- uid: System.Windows.ContentElement.IsStylusDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: ContentElement.IsStylusDirectlyOver
- uid: System.Windows.ContentElement.IsStylusOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: IsStylusOver
  nameWithType: ContentElement.IsStylusOver
- uid: System.Windows.ContentElement.MoveFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: MoveFocus
  nameWithType: ContentElement.MoveFocus
- uid: System.Windows.ContentElement.OnCreateAutomationPeer*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: ContentElement.OnCreateAutomationPeer
- uid: System.Windows.ContentElement.OnDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragEnter
  nameWithType: ContentElement.OnDragEnter
- uid: System.Windows.ContentElement.OnDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragLeave
  nameWithType: ContentElement.OnDragLeave
- uid: System.Windows.ContentElement.OnDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDragOver
  nameWithType: ContentElement.OnDragOver
- uid: System.Windows.ContentElement.OnDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnDrop
  nameWithType: ContentElement.OnDrop
- uid: System.Windows.ContentElement.OnGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: ContentElement.OnGiveFeedback
- uid: System.Windows.ContentElement.OnGotFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotFocus
  nameWithType: ContentElement.OnGotFocus
- uid: System.Windows.ContentElement.OnGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: ContentElement.OnGotKeyboardFocus
- uid: System.Windows.ContentElement.OnGotMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: ContentElement.OnGotMouseCapture
- uid: System.Windows.ContentElement.OnGotStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: ContentElement.OnGotStylusCapture
- uid: System.Windows.ContentElement.OnGotTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: ContentElement.OnGotTouchCapture
- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: ContentElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: ContentElement.OnIsMouseCapturedChanged
- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: ContentElement.OnIsStylusCapturedChanged
- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.ContentElement.OnKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyDown
  nameWithType: ContentElement.OnKeyDown
- uid: System.Windows.ContentElement.OnKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnKeyUp
  nameWithType: ContentElement.OnKeyUp
- uid: System.Windows.ContentElement.OnLostFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostFocus
  nameWithType: ContentElement.OnLostFocus
- uid: System.Windows.ContentElement.OnLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: ContentElement.OnLostKeyboardFocus
- uid: System.Windows.ContentElement.OnLostMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: ContentElement.OnLostMouseCapture
- uid: System.Windows.ContentElement.OnLostStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: ContentElement.OnLostStylusCapture
- uid: System.Windows.ContentElement.OnLostTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: ContentElement.OnLostTouchCapture
- uid: System.Windows.ContentElement.OnMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseDown
  nameWithType: ContentElement.OnMouseDown
- uid: System.Windows.ContentElement.OnMouseEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: ContentElement.OnMouseEnter
- uid: System.Windows.ContentElement.OnMouseLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: ContentElement.OnMouseLeave
- uid: System.Windows.ContentElement.OnMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: ContentElement.OnMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: ContentElement.OnMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseMove
  nameWithType: ContentElement.OnMouseMove
- uid: System.Windows.ContentElement.OnMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: ContentElement.OnMouseRightButtonDown
- uid: System.Windows.ContentElement.OnMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: ContentElement.OnMouseRightButtonUp
- uid: System.Windows.ContentElement.OnMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseUp
  nameWithType: ContentElement.OnMouseUp
- uid: System.Windows.ContentElement.OnMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: ContentElement.OnMouseWheel
- uid: System.Windows.ContentElement.OnPreviewDragEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: ContentElement.OnPreviewDragEnter
- uid: System.Windows.ContentElement.OnPreviewDragLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: ContentElement.OnPreviewDragLeave
- uid: System.Windows.ContentElement.OnPreviewDragOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: ContentElement.OnPreviewDragOver
- uid: System.Windows.ContentElement.OnPreviewDrop*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: ContentElement.OnPreviewDrop
- uid: System.Windows.ContentElement.OnPreviewGiveFeedback*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: ContentElement.OnPreviewGiveFeedback
- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: ContentElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewKeyDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: ContentElement.OnPreviewKeyDown
- uid: System.Windows.ContentElement.OnPreviewKeyUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: ContentElement.OnPreviewKeyUp
- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: ContentElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.ContentElement.OnPreviewMouseDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: ContentElement.OnPreviewMouseDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: ContentElement.OnPreviewMouseMove
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: ContentElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: ContentElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.ContentElement.OnPreviewMouseUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: ContentElement.OnPreviewMouseUp
- uid: System.Windows.ContentElement.OnPreviewMouseWheel*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: ContentElement.OnPreviewMouseWheel
- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: ContentElement.OnPreviewQueryContinueDrag
- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: ContentElement.OnPreviewStylusButtonDown
- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: ContentElement.OnPreviewStylusButtonUp
- uid: System.Windows.ContentElement.OnPreviewStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: ContentElement.OnPreviewStylusDown
- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: ContentElement.OnPreviewStylusInAirMove
- uid: System.Windows.ContentElement.OnPreviewStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: ContentElement.OnPreviewStylusInRange
- uid: System.Windows.ContentElement.OnPreviewStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: ContentElement.OnPreviewStylusMove
- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: ContentElement.OnPreviewStylusOutOfRange
- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: ContentElement.OnPreviewStylusSystemGesture
- uid: System.Windows.ContentElement.OnPreviewStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: ContentElement.OnPreviewStylusUp
- uid: System.Windows.ContentElement.OnPreviewTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: ContentElement.OnPreviewTextInput
- uid: System.Windows.ContentElement.OnPreviewTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: ContentElement.OnPreviewTouchDown
- uid: System.Windows.ContentElement.OnPreviewTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: ContentElement.OnPreviewTouchMove
- uid: System.Windows.ContentElement.OnPreviewTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: ContentElement.OnPreviewTouchUp
- uid: System.Windows.ContentElement.OnQueryContinueDrag*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: ContentElement.OnQueryContinueDrag
- uid: System.Windows.ContentElement.OnQueryCursor*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: ContentElement.OnQueryCursor
- uid: System.Windows.ContentElement.OnStylusButtonDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: ContentElement.OnStylusButtonDown
- uid: System.Windows.ContentElement.OnStylusButtonUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: ContentElement.OnStylusButtonUp
- uid: System.Windows.ContentElement.OnStylusDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusDown
  nameWithType: ContentElement.OnStylusDown
- uid: System.Windows.ContentElement.OnStylusEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: ContentElement.OnStylusEnter
- uid: System.Windows.ContentElement.OnStylusInAirMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: ContentElement.OnStylusInAirMove
- uid: System.Windows.ContentElement.OnStylusInRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: ContentElement.OnStylusInRange
- uid: System.Windows.ContentElement.OnStylusLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: ContentElement.OnStylusLeave
- uid: System.Windows.ContentElement.OnStylusMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusMove
  nameWithType: ContentElement.OnStylusMove
- uid: System.Windows.ContentElement.OnStylusOutOfRange*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: ContentElement.OnStylusOutOfRange
- uid: System.Windows.ContentElement.OnStylusSystemGesture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: ContentElement.OnStylusSystemGesture
- uid: System.Windows.ContentElement.OnStylusUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnStylusUp
  nameWithType: ContentElement.OnStylusUp
- uid: System.Windows.ContentElement.OnTextInput*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTextInput
  nameWithType: ContentElement.OnTextInput
- uid: System.Windows.ContentElement.OnTouchDown*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchDown
  nameWithType: ContentElement.OnTouchDown
- uid: System.Windows.ContentElement.OnTouchEnter*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: ContentElement.OnTouchEnter
- uid: System.Windows.ContentElement.OnTouchLeave*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: ContentElement.OnTouchLeave
- uid: System.Windows.ContentElement.OnTouchMove*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchMove
  nameWithType: ContentElement.OnTouchMove
- uid: System.Windows.ContentElement.OnTouchUp*
  parent: System.Windows.ContentElement
  isExternal: false
  name: OnTouchUp
  nameWithType: ContentElement.OnTouchUp
- uid: System.Windows.ContentElement.PredictFocus*
  parent: System.Windows.ContentElement
  isExternal: false
  name: PredictFocus
  nameWithType: ContentElement.PredictFocus
- uid: System.Windows.ContentElement.RaiseEvent*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RaiseEvent
  nameWithType: ContentElement.RaiseEvent
- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: ContentElement.ReleaseAllTouchCaptures
- uid: System.Windows.ContentElement.ReleaseMouseCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: ContentElement.ReleaseMouseCapture
- uid: System.Windows.ContentElement.ReleaseStylusCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: ContentElement.ReleaseStylusCapture
- uid: System.Windows.ContentElement.ReleaseTouchCapture*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: ContentElement.ReleaseTouchCapture
- uid: System.Windows.ContentElement.RemoveHandler*
  parent: System.Windows.ContentElement
  isExternal: false
  name: RemoveHandler
  nameWithType: ContentElement.RemoveHandler
- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: ContentElement.ShouldSerializeCommandBindings
- uid: System.Windows.ContentElement.ShouldSerializeInputBindings*
  parent: System.Windows.ContentElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: ContentElement.ShouldSerializeInputBindings
- uid: System.Windows.ContentElement.TouchesCaptured*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: ContentElement.TouchesCaptured
- uid: System.Windows.ContentElement.TouchesCapturedWithin*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: ContentElement.TouchesCapturedWithin
- uid: System.Windows.ContentElement.TouchesDirectlyOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: ContentElement.TouchesDirectlyOver
- uid: System.Windows.ContentElement.TouchesOver*
  parent: System.Windows.ContentElement
  isExternal: false
  name: TouchesOver
  nameWithType: ContentElement.TouchesOver
