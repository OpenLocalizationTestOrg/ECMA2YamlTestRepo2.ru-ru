### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.PageRouteHandler
  id: PageRouteHandler
  children:
  - System.Web.Routing.PageRouteHandler.#ctor(System.String)
  - System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  - System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  - System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  - System.Web.Routing.PageRouteHandler.VirtualPath
  langs:
  - csharp
  name: PageRouteHandler
  nameWithType: PageRouteHandler
  fullName: System.Web.Routing.PageRouteHandler
  type: Class
  summary: "Предоставляет свойства и методы для определения того, как URL-адрес сопоставляется физического файла."
  remarks: "Передать экземпляр PageRouteHandler для <xref:System.Web.Routing.Route>конструктор для сопоставления URL-адреса физического файла.</xref:System.Web.Routing.Route> Объект PageRouteHandler указывает виртуальный путь файла и определяет, установлен ли флажок для правила авторизации для физический URL-адрес."
  syntax:
    content: 'public class PageRouteHandler : System.Web.Routing.IRouteHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.Routing.IRouteHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;></xref> class."
  remarks: "При использовании этого конструктора <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>свойству `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>"
  syntax:
    content: public PageRouteHandler (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Виртуальный путь для данного физического файла <xref:System.Web.Routing.RouteData.Route*>объекта.</xref:System.Web.Routing.RouteData.Route*> Файл должен быть расположен в текущем приложении. Таким образом путь должен начинаться с тильды (~)."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой или не начинается с «~ /»."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Initializes a new instance of the <xref href=&quot;System.Web.Routing.PageRouteHandler&quot;></xref> class."
  remarks: "По умолчанию <xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A>свойство `true`.</xref:System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A> Таким образом, если требуется, чтобы правила авторизации, применяемые для обоих URL-адрес физической страницы и URL-адрес маршрута, можно использовать <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>Конструктор вместо этого конструктора.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%29>"
  syntax:
    content: public PageRouteHandler (string virtualPath, bool checkPhysicalUrlAccess);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Виртуальный путь в физический файл <xref:System.Web.Routing.RouteData.Route*>объекта.</xref:System.Web.Routing.RouteData.Route*> Файл должен быть расположен в текущем приложении. Таким образом путь должен начинаться с тильды (~)."
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: "Если это свойство имеет значение <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, будут применяться правила авторизации URL-АДРЕСЕ запроса, а не URL-адрес физической страницы. Если это свойство имеет значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, правила авторизации будут применяться для обоих URL-АДРЕСЕ запроса и URL-адрес физической страницы."
  overload: System.Web.Routing.PageRouteHandler.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> virtualPath </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой или не начинается с «~ /»."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  id: CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Возвращает значение, определяющее, применяются ли правила авторизации URL-адрес физического файла."
  remarks: "Можно задать свойство CheckPhysicalUrlAccess, при использовании <xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>конструктор.</xref:System.Web.Routing.PageRouteHandler.%23ctor%28System.String%2CSystem.Boolean%29>       Значение свойства CheckPhysicalUrlAccess определяет, является ли <xref:System.Web.Routing.PageRouteHandler>объект выполняет проверку разрешений безопасности для URL-адрес маршрута или физической страницы и URL-адрес маршрута.</xref:System.Web.Routing.PageRouteHandler>       Если значение свойства CheckPhysicalUrlAccess `true` (который является значением по умолчанию), пользователь должен иметь разрешение на доступ к URL-адрес маршрута и физический URL-адрес. Если значение свойства CheckPhysicalUrlAccess `false`, пользователю требуется только разрешение на доступ к URL-адрес маршрута и разрешения для физического URL-адреса не проверяются.       Разрешения определяются в файле Web.config, как показано в следующем примере: ```   <configuration>     <location path=&quot;categoriespage.aspx&quot;>       <system.web>         <authorization>           <allow roles=&quot;admin&quot;/>           <deny users=&quot;*&quot;/>         </authorization>       </system.web>     </location>     <location path=&quot;category&quot;>       <system.web>         <authorization>           <allow users=&quot;*&quot;/>         </authorization>       </system.web>     </location>   </configuration>   ``` для URL-АДРЕСЕ запроса, который содержит `Category/food/show` после имени домена, если шаблон URL-адрес маршрута `Category/{action}/{categoryName}` и физической страницы странице Categoriespage.aspx, [!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)] применение разрешений, определенных в предыдущем примере в одном из следующих способов: — Если свойство CheckPhysicalUrlAccess `false`, всем пользователям предоставляется доступ, так как все пользователи являются предоставил доступ к шаблону URL-адрес, начинающийся с `category`.      -Если CheckPhysicalUrlAccess свойство `true`только `admin` пользователям разрешен доступ. Все пользователи имеют доступ к шаблону URL-адрес, начинающийся с `category`, но только `admin` пользователи имеют доступ к странице Categoriespage.aspx физической страницы."
  syntax:
    content: public bool CheckPhysicalUrlAccess { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот флажок установлен авторизации URL-адреса физического файла, связанного с маршрутом; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  id: GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Возвращает объект, который обрабатывает запрос."
  syntax:
    content: public virtual System.Web.IHttpHandler GetHttpHandler (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Объект, инкапсулирующий сведения о запросе."
    return:
      type: System.Web.IHttpHandler
      description: "Объект, который обрабатывает запрос."
  overload: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  id: GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Возвращает виртуальный путь к физическому файлу для маршрута после применения подстановок ко всем параметрам замещения."
  remarks: "Если <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>значение не содержит все параметры замены, метод GetSubstitutedVirtualPath возвращает то же значение, что <xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>свойство.</xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A> </xref:System.Web.Routing.PageRouteHandler.VirtualPath%2A>"
  syntax:
    content: public string GetSubstitutedVirtualPath (System.Web.Routing.RequestContext requestContext);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: "Объект, инкапсулирующий сведения о запросе."
    return:
      type: System.String
      description: "URL-адрес физического файла, который был создан из маршрута."
  overload: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  id: VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  langs:
  - csharp
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Routing
  summary: "Получает виртуальный путь веб-страницы, связанный с данным маршрутом."
  remarks: "Задайте свойство VirtualPath в <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>конструктора или в <xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>конструктор.</xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName> </xref:System.Web.Routing.PageRouteHandler.%23ctor%2A?displayProperty=fullName>"
  syntax:
    content: public string VirtualPath { get; }
    return:
      type: System.String
      description: "URL-адрес веб-страницы, перед применением замены для замены параметров."
  overload: System.Web.Routing.PageRouteHandler.VirtualPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String)
  nameWithType: PageRouteHandler.PageRouteHandler(String)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.PageRouteHandler.#ctor(System.String,System.Boolean)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler(String,Boolean)
  nameWithType: PageRouteHandler.PageRouteHandler(String,Boolean)
  fullName: System.Web.Routing.PageRouteHandler.PageRouteHandler(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
  fullName: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler(RequestContext)
  nameWithType: PageRouteHandler.GetHttpHandler(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetHttpHandler(RequestContext)
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: true
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(System.Web.Routing.RequestContext)
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath(RequestContext)
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
  fullName: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath(RequestContext)
- uid: System.Web.Routing.PageRouteHandler.VirtualPath
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
  fullName: System.Web.Routing.PageRouteHandler.VirtualPath
- uid: System.Web.Routing.PageRouteHandler.#ctor*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: PageRouteHandler
  nameWithType: PageRouteHandler.PageRouteHandler
- uid: System.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: CheckPhysicalUrlAccess
  nameWithType: PageRouteHandler.CheckPhysicalUrlAccess
- uid: System.Web.Routing.PageRouteHandler.GetHttpHandler*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetHttpHandler
  nameWithType: PageRouteHandler.GetHttpHandler
- uid: System.Web.Routing.PageRouteHandler.GetSubstitutedVirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: GetSubstitutedVirtualPath
  nameWithType: PageRouteHandler.GetSubstitutedVirtualPath
- uid: System.Web.Routing.PageRouteHandler.VirtualPath*
  parent: System.Web.Routing.PageRouteHandler
  isExternal: false
  name: VirtualPath
  nameWithType: PageRouteHandler.VirtualPath
