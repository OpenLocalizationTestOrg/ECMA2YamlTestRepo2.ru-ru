### YamlMime:ManagedReference
items:
- uid: System.Runtime.ConstrainedExecution.Cer
  id: Cer
  children:
  - System.Runtime.ConstrainedExecution.Cer.MayFail
  - System.Runtime.ConstrainedExecution.Cer.None
  - System.Runtime.ConstrainedExecution.Cer.Success
  langs:
  - csharp
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
  type: Enum
  summary: "Задает поведение метода при вызове в области ограниченного выполнения."
  remarks: "Перечисление Cer определяет поведение метода, типа или сборки в области ограниченного исполнения (CER). Воспользуйтесь одним из трех доступных значений для указания, что сущность будет выполнен успешно, не имеет сведений о CER или может (детерминированно) для сообщения об успешном или неуспешном.       CER предоставляет гарантирует, что область кода будет выполняться без перерыва даже в случае возникновении асинхронного исключения, например прерванный поток исключение нехватки памяти или переполнение стека."
  example:
  - "The following code example demonstrates the use of the Cer enumeration when specifying a constrained execution region for a method. This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.  \n  \n [!code-vb[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/visualbasic/t-system.runtime.constra_2_1.vb)]\n [!code-cs[System.Runtime.ConstrainedExecution#3](~/add/codesnippet/csharp/t-system.runtime.constra_2_1.cs)]"
  syntax:
    content: public enum Cer
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  id: MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "При возникновении исключительных условий метод может завершиться ошибкой. В этом случае метод сообщит обратно в вызывающий метод он успешно ли выполнено. Метод должен иметь конструкцию CER тело метода, чтобы убедиться, что она может передать возвращаемое значение."
  syntax:
    content: MayFail
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.None
  id: None
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: 'Метод, тип или сборка имеет отсутствует понятие CER. Не позволяет воспользоваться преимуществами гарантии CER. Это подразумевает следующее:'
  remarks: "-При возникновении исключительных условий метод может завершиться ошибкой.      -Метод может или не включаются в отчет, он не может (является недетерминированным).      -Метод написан без CER в виду (это наиболее вероятный сценарий).       Если метод, тип или сборка не помечен явно для успешного выполнения, неявным образом помечается как `Cer.None`."
  syntax:
    content: None
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  id: Success
  parent: System.Runtime.ConstrainedExecution.Cer
  langs:
  - csharp
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.ConstrainedExecution
  summary: "При возникновении исключительных условий метод гарантированно завершиться успешно. Всегда следует создавать CER метод, который вызывается, даже если он вызывается из области CER не используется. Метод является успешным, если ожидаемым. Например, <xref:System.Collections.ArrayList.Count*>с `ReliabilityContractAttribute(Cer.Success)` подразумевает, что при запуске из CER, он всегда возвращает число элементов в <xref href=&quot;System.Collections.ArrayList&quot;> </xref> и не может покидать внутренних полей в неопределенном состоянии.</xref:System.Collections.ArrayList.Count*>"
  syntax:
    content: Success
    return:
      type: System.Runtime.ConstrainedExecution.Cer
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Runtime.ConstrainedExecution.Cer.MayFail
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: MayFail
  nameWithType: Cer.MayFail
  fullName: System.Runtime.ConstrainedExecution.Cer.MayFail
- uid: System.Runtime.ConstrainedExecution.Cer
  parent: System.Runtime.ConstrainedExecution
  isExternal: false
  name: Cer
  nameWithType: Cer
  fullName: System.Runtime.ConstrainedExecution.Cer
- uid: System.Runtime.ConstrainedExecution.Cer.None
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: None
  nameWithType: Cer.None
  fullName: System.Runtime.ConstrainedExecution.Cer.None
- uid: System.Runtime.ConstrainedExecution.Cer.Success
  parent: System.Runtime.ConstrainedExecution.Cer
  isExternal: false
  name: Success
  nameWithType: Cer.Success
  fullName: System.Runtime.ConstrainedExecution.Cer.Success
