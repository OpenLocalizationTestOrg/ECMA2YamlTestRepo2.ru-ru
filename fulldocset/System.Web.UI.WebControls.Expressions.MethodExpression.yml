### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.Expressions.MethodExpression
  id: MethodExpression
  children:
  - System.Web.UI.WebControls.Expressions.MethodExpression.#ctor
  - System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)
  - System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound
  - System.Web.UI.WebControls.Expressions.MethodExpression.MethodName
  - System.Web.UI.WebControls.Expressions.MethodExpression.TypeName
  langs:
  - csharp
  name: MethodExpression
  nameWithType: MethodExpression
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression
  type: Class
  summary: "Предоставляет способ задания пользовательского запроса LINQ, определенного в методе."
  remarks: "<xref:System.Web.UI.WebControls.QueryExtender>Элемент управления поддерживает пользовательские запросы LINQ.</xref:System.Web.UI.WebControls.QueryExtender> Можно определить пользовательского запроса LINQ в методе и параметр для ввода запроса в фильтр MethodExpression <xref:System.Web.UI.WebControls.QueryExtender>управления.</xref:System.Web.UI.WebControls.QueryExtender>       Метод, содержащий пользовательский запрос LINQ должен удовлетворять следующим требованиям:-метод должен быть статическим (`Shared` в Visual Basic). Первый параметр должен быть <xref:System.Linq.IQueryable%601>или <xref:System.Collections.Generic.IEnumerable%601>объекта.</xref:System.Collections.Generic.IEnumerable%601> </xref:System.Linq.IQueryable%601> Метод может иметь более одного параметра.      -Невозможно изменить возвращаемое значение <xref:System.Linq.IQueryable%601>или <xref:System.Collections.Generic.IEnumerable%601>тип, который запрашивается.</xref:System.Collections.Generic.IEnumerable%601> </xref:System.Linq.IQueryable%601>       Поиск MethodExpression для метода, который содержит запрос в следующем порядке: 1.  Если <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>свойство указано в <xref:System.Web.UI.WebControls.QueryExtender>элемента управления, объект MethodExpression ищет метод в указанном типе.</xref:System.Web.UI.WebControls.QueryExtender> </xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A>      2.  Если источник данных реализует <xref:System.Web.DynamicData.IDynamicDataSource>, метод выполняет поиск метода в типе контекста (<xref:System.Data.Linq.DataContext> или <xref:System.Data.Objects.ObjectContext>объекта.)</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Linq.DataContext> </xref:System.Web.DynamicData.IDynamicDataSource>      3.  Метод ищет метод в элементе управления шаблона, в базовом классе для страницы или в пользовательском элементе управления.       Класс MethodExpression аналогичен <xref:System.Web.UI.WebControls.Expressions.CustomExpression>класса, за исключением того, что выражение метод выполняется в ответ на вызов метода, а пользовательское выражение выполняется в ответ на событие.</xref:System.Web.UI.WebControls.Expressions.CustomExpression>"
  example:
  - "The following example shows how to search the ListPrice field of the Products table in the AdventureWorks database for products that have a list price of 400 or more. This example shows how to create a custom LINQ query in a method in page code and how to invoke the method in the <xref:System.Web.UI.WebControls.QueryExtender> control.  \n  \n [Visual Basic]  \n  \n```  \nPublic Shared Function FilterStandardPrice(ByVal query As _  \n        IQueryable(Of Product)) As IQueryable(Of Product)  \n        Return From p In query _  \n            Where p.ListPrice >= 400 _  \n            Select p  \n    End Function  \n```  \n  \n [C#]  \n  \n```  \npublic static IQueryable<Product>   \n        FilterStandardPrice(IQueryable<Product> query)  \n{  \n        return from p in query  \n                  where p.ListPrice >= 400  \n                  select p;  \n  \n    }  \n```  \n  \n The following example shows how to call the method in the page.  \n  \n```  \n<html>  \n<head runat=\"server\">  \n  <title>Custom Filter</title>  \n</head>  \n<body>  \n  <form id=\"form1\" runat=\"server\">  \n    <asp:LinqDataSource ID=\"LinqDataSource1\" runat=\"server\"   \n        ContextTypeName=\"AdventureworksDataContext\" EntityTypeName=\"\"   \n        TableName=\"Products\">  \n    </asp:LinqDataSource>  \n  \n    <asp:QueryExtender ID=\"QueryExtender1\" runat=\"server\"   \n        TargetControlID=\"LinqDataSource1\">  \n      <asp:MethodExpression MethodName=\"FilterStandardPrice\" >  \n      </asp:MethodExpression>  \n    </asp:QueryExtender>  \n  \n    <asp:GridView ID=\"GridView1\" runat=\"server\"   \n        DataSourceID=\"LinqDataSource1\"   \n        DataKeyNames=\"ProductID\"   \n    </asp:GridView>  \n  </form>  \n</body>  \n</html>  \n```"
  syntax:
    content: 'public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.Expressions.DataSourceExpression
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.Parameters
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SaveViewState
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  - System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression.TrackViewState
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  langs:
  - csharp
  name: MethodExpression()
  nameWithType: MethodExpression.MethodExpression()
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodExpression()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.Expressions.MethodExpression&quot;> </xref> класса."
  syntax:
    content: public MethodExpression ();
    parameters: []
  overload: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)
  id: GetQueryable(System.Linq.IQueryable)
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  langs:
  - csharp
  name: GetQueryable(IQueryable)
  nameWithType: MethodExpression.GetQueryable(IQueryable)
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(IQueryable)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Разрешает выражение с помощью указанного <xref:System.Linq.IQueryable>объекта.</xref:System.Linq.IQueryable>"
  syntax:
    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "Элемент управления для использования источника данных."
    return:
      type: System.Linq.IQueryable
      description: "Экземпляр <xref:System.Linq.IQueryable>объект, который был использован для вычисления выражения.</xref:System.Linq.IQueryable>"
  overload: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Элемент управления источником данных является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод не найден.       - или - метод не является статическим.       - или - тип переданного <xref uid=&quot;langword_csharp_IQuerable&lt;T&gt;&quot; name=&quot;IQuerable&lt;T&gt;&quot; href=&quot;&quot;> </xref> объект был изменен."
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound
  id: IgnoreIfNotFound
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  langs:
  - csharp
  name: IgnoreIfNotFound
  nameWithType: MethodExpression.IgnoreIfNotFound
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Возвращает или задает значение, указывающее, следует ли игнорировать выражение."
  remarks: "<xref:System.Web.UI.WebControls.Expressions.MethodExpression>Выполняет поиск метода, содержащего запрос с помощью поиска в конкретных расположениях и поиска в определенном порядке.</xref:System.Web.UI.WebControls.Expressions.MethodExpression> Это свойство можно задать `false` для создания исключения, если <xref:System.Web.UI.WebControls.Expressions.CustomExpression>объекта не найден метод, содержащий LINQ.</xref:System.Web.UI.WebControls.Expressions.CustomExpression>"
  syntax:
    content: public bool IgnoreIfNotFound { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если выражение игнорируется; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName
  id: MethodName
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  langs:
  - csharp
  name: MethodName
  nameWithType: MethodExpression.MethodName
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Возвращает или задает имя метода, который содержит пользовательского запроса LINQ."
  remarks: "<xref:System.Web.UI.WebControls.Expressions.MethodExpression>Позволяет вызвать пользовательского запроса LINQ, определенного в методе.</xref:System.Web.UI.WebControls.Expressions.MethodExpression> Укажите метод в <xref:System.Web.UI.WebControls.QueryExtender>управления на странице.</xref:System.Web.UI.WebControls.QueryExtender>"
  example:
  - "The following example shows how to specify the `FilterStandardPrice` method in the <xref:System.Web.UI.WebControls.QueryExtender> control. The custom LINQ query is defined in a `FilterStandardPrice` method.  \n  \n```  \n<asp:QueryExtender ID=\"QueryExtender1\" runat=\"server\"   \n    TargetControlID=\"LinqDataSource1\">  \n  <asp:MethodExpression MethodName=\"FilterStandardPrice\">  \n  </asp:MethodExpression>  \n  </asp:QueryExtender>  \n```"
  syntax:
    content: public string MethodName { get; set; }
    return:
      type: System.String
      description: "Имя метода, который содержит пользовательского запроса LINQ."
  overload: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  langs:
  - csharp
  name: TypeName
  nameWithType: MethodExpression.TypeName
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls.Expressions
  summary: "Возвращает или задает класс, метод которого содержит пользовательский запрос."
  remarks: "<xref:System.Web.UI.WebControls.Expressions.MethodExpression>Позволяет задать пользовательское выражение для источника данных в <xref:System.Web.UI.WebControls.QueryExtender>управления.</xref:System.Web.UI.WebControls.QueryExtender> </xref:System.Web.UI.WebControls.Expressions.MethodExpression> Свойство TypeName можно использовать для указания класса, к которому относится метод."
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "Класс, членом которого является метод."
  overload: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
  isExternal: false
  name: System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: MethodExpression()
  nameWithType: MethodExpression.MethodExpression()
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodExpression()
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: GetQueryable(IQueryable)
  nameWithType: MethodExpression.GetQueryable(IQueryable)
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(IQueryable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: IgnoreIfNotFound
  nameWithType: MethodExpression.IgnoreIfNotFound
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: MethodName
  nameWithType: MethodExpression.MethodName
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: TypeName
  nameWithType: MethodExpression.TypeName
  fullName: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.#ctor*
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: MethodExpression
  nameWithType: MethodExpression.MethodExpression
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable*
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: GetQueryable
  nameWithType: MethodExpression.GetQueryable
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound*
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: IgnoreIfNotFound
  nameWithType: MethodExpression.IgnoreIfNotFound
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.MethodName*
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: MethodName
  nameWithType: MethodExpression.MethodName
- uid: System.Web.UI.WebControls.Expressions.MethodExpression.TypeName*
  parent: System.Web.UI.WebControls.Expressions.MethodExpression
  isExternal: false
  name: TypeName
  nameWithType: MethodExpression.TypeName
