### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.PropertyDescriptor
  id: PropertyDescriptor
  children:
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.ComponentType
  - System.ComponentModel.PropertyDescriptor.Converter
  - System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  - System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  - System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  - System.ComponentModel.PropertyDescriptor.GetHashCode
  - System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  - System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  - System.ComponentModel.PropertyDescriptor.IsLocalizable
  - System.ComponentModel.PropertyDescriptor.IsReadOnly
  - System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  - System.ComponentModel.PropertyDescriptor.PropertyType
  - System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SerializationVisibility
  - System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  - System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  langs:
  - csharp
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
  type: Class
  summary: "Предоставляет краткое описание свойства в классе."
  remarks: "Описание свойства состоит из имени, его атрибуты, класс компонента, с которым связано и тип свойства.       Дескриптор свойства предоставляет следующие свойства и методы:- <xref:System.ComponentModel.PropertyDescriptor.Converter%2A>содержит <xref:System.ComponentModel.TypeConverter>для этого свойства.</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.PropertyDescriptor.Converter%2A>      - <xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>Указывает, является ли это свойство должно быть локализовано.</xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>      - <xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>Возвращает редактор указанного типа.</xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>       Дескриптор свойства также предоставляет следующие `abstract` свойства и методы:- <xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A>содержит тип компонента, это свойство привязано к.</xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A>      - <xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>Указывает, является ли это свойство только для чтения.</xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>      - <xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>возвращает тип свойства.</xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>      - <xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>Указывает, изменяет ли сброс компонента значение компонента.</xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>      - <xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>возвращает текущее значение свойства компонента.</xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>      - <xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>сбрасывает значение для этого свойства компонента.</xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>      - <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>задает значение компонента другое значение.</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>      - <xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>Указывает, нужно ли значение этого свойства необходимо сохранить.</xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>       Как правило `abstract` члены реализуются с помощью отражения. Дополнительные сведения об отражении см. в разделах в [отражения](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is built upon the example in the <xref:System.ComponentModel.PropertyDescriptorCollection> class. It prints the information (category, description, display name) of the text of a button in a text box. It assumes that `button1` and `textbox1` have been instantiated on a form.  \n  \n [!code-cpp[PropertyDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._4_1.cpp)]\n [!code-vb[PropertyDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._4_1.vb)]\n [!code-cs[PropertyDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._4_1.cs)]  \n  \n The following code example shows how to implement a custom property descriptor that provides a read-only wrapper around a property. The `SerializeReadOnlyPropertyDescriptor` is used in a custom designer to provide a read-only property descriptor for the control's <xref:System.Windows.Forms.Control.Size%2A> property.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/SerializeReadOnlyPropertyDescriptor.cs#1)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/SerializeReadOnlyPropertyDescriptor.vb#1)]  \n  \n The following code examples show how to use the The `SerializeReadOnlyPropertyDescriptor` in a custom designer.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControlDesigner.cs#10)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControlDesigner.vb#10)]  \n[!code-vb[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControl.vb#100)]\n[!code-cs[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControl.cs#100)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class PropertyDescriptor : System.ComponentModel.MemberDescriptor
  inheritance:
  - System.Object
  - System.ComponentModel.MemberDescriptor
  implements: []
  inheritedMembers:
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> класс с именем и атрибутами в указанном <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>."
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> , содержащее имя свойства и его атрибуты."
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> класс с именем в указанном <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> и атрибутами в <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> и <xref:System.Attribute>массива.</xref:System.Attribute>"
  remarks: "Этот конструктор добавляет атрибуты в <xref:System.Attribute>массиве с атрибутами в <xref:System.ComponentModel.MemberDescriptor>.</xref:System.ComponentModel.MemberDescriptor> </xref:System.Attribute>"
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> содержит имя элемента и его атрибуты."
    - id: attrs
      type: System.Attribute[]
      description: "<xref:System.Attribute>Массив, содержащий атрибуты, которые нужно связать со свойством.</xref:System.Attribute>"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> класса с заданным именем и атрибутами."
  syntax:
    content: protected PropertyDescriptor (string name, Attribute[] attrs);
    parameters:
    - id: name
      type: System.String
      description: "Имя свойства."
    - id: attrs
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>, содержащий атрибуты свойства.</xref:System.Attribute>"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  id: AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Позволяет другим объектам получать уведомления об изменении этого свойства."
  syntax:
    content: public virtual void AddValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, чтобы добавить обработчик."
    - id: handler
      type: System.EventHandler
      description: "Делегат, который добавляется в качестве прослушивателя."
  overload: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  id: CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе, возвращает ли сброс объекта изменяет его значение."
  remarks: "Как правило этот метод реализуется с помощью отражения."
  syntax:
    content: public abstract bool CanResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент для проверки возможности сброса."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если сброс компонента изменяет его значение; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.CanResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  id: ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе возвращает тип компонента, с которым связано это свойство."
  remarks: "Как правило это свойство реализуется с помощью отражения."
  syntax:
    content: public abstract Type ComponentType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип компонента, это свойство привязано к.</xref:System.Type> Когда <> </> *настроек или <> </> *настроек методы вызываются, объект может быть экземпляр этого типа."
  overload: System.ComponentModel.PropertyDescriptor.ComponentType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Converter
  id: Converter
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает преобразователь типов для этого свойства."
  syntax:
    content: public virtual System.ComponentModel.TypeConverter Converter { get; }
    return:
      type: System.ComponentModel.TypeConverter
      description: "Объект <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> , используемый для преобразования <xref:System.Type>этого свойства.</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает экземпляр указанного типа."
  remarks: "CreateInstance ищет конструктор, который имеет указанный тип. При обнаружении конструктор в передается тип свойства.       Преобразователи типов и редакторы используйте этот метод для создания версий компонента. Этот метод позволяет один компонент для повторного использования для более чем один тип."
  syntax:
    content: protected object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип создаваемого.</xref:System.Type>"
    return:
      type: System.Object
      description: "Новый экземпляр типа."
  overload: System.ComponentModel.PropertyDescriptor.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Сравнивает другой объект для просмотра, если они равны."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект для сравнения с <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значения эквивалентны; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  id: FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Добавляет атрибуты <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref> в указанный список атрибутов в родительском классе."
  remarks: "Повторяющиеся атрибуты будут храниться последним добавлен в список."
  syntax:
    content: protected override void FillAttributes (System.Collections.IList attributeList);
    parameters:
    - id: attributeList
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>, В которой перечислены атрибуты родительского класса.</xref:System.Collections.IList> Изначально он пуст."
  overload: System.ComponentModel.PropertyDescriptor.FillAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  id: GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение по умолчанию <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>."
  remarks: "Этот метод передает `null` для обоих `instance` параметр и `filter` параметра.       Свойства `instance` параметра могут отличаться от свойств класса, поскольку контейнер может добавлять или удалять свойства, если `instance` задан параметр.       `filter` Параметра могут быть использованы смешанные <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак: он соответствует любое свойство, имеющее <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>, свойство должно быть точным совпадением включаться в возвращаемый массив.</xref:System.Attribute>      -При указании <xref:System.Attribute>и это свойство по умолчанию, он включается в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties ();
    parameters: []
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Коллекция дескриптор свойства."
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  id: GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> используя заданный массив атрибутов в качестве фильтра."
  remarks: "Этот метод передает `null` для `instance` параметра.       Свойства `instance` параметра могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `instance` задан параметр.       `filter` Параметра могут быть использованы смешанные <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак: он соответствует любое свойство, имеющее <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>, свойство должно быть точным совпадением включаться в возвращаемый массив.</xref:System.Attribute>      -При указании <xref:System.Attribute>экземпляра и является свойством по умолчанию, его будут включены в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (Attribute[] filter);
    parameters:
    - id: filter
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, которые совпадают с указанными атрибутами."
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  id: GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> для данного объекта."
  remarks: "Этот метод передает `null` для `filter` параметра.       Свойства `instance` параметра могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `instance` задан параметр.       `filter` Параметра могут быть использованы смешанные <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак: он соответствует любое свойство, имеющее <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>, свойство должно быть точным совпадением включаться в возвращаемый массив.</xref:System.Attribute>      -При указании <xref:System.Attribute>экземпляра и является свойством по умолчанию, его будут включены в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "Компонент для получения свойства."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами для указанного компонента."
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  id: GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> для данного объекта, используя заданный массив атрибутов в качестве фильтра."
  remarks: "Свойства `instance` параметра могут отличаться от свойств класса, поскольку узел может добавлять или удалять свойства, если `instance` задан параметр.       `filter` Параметра могут быть использованы смешанные <xref:System.Type>и <xref:System.Attribute>объекты.</xref:System.Attribute> </xref:System.Type> Фильтрация определяется следующими правилами: - <xref:System.Type>рассматривается как подстановочный знак: он соответствует любое свойство, имеющее <xref:System.Type>среди атрибутов.</xref:System.Type> </xref:System.Type>      -Если свойство не имеет <xref:System.Attribute>того же класса, свойство не включается в возвращаемый массив.</xref:System.Attribute>      -Если атрибут является экземпляром класса <xref:System.Attribute>, свойство должно быть точным совпадением включаться в возвращаемый массив.</xref:System.Attribute>      -При указании <xref:System.Attribute>экземпляра и является свойством по умолчанию, его будут включены в возвращаемый массив, даже если ни один экземпляр <xref:System.Attribute>в свойстве.</xref:System.Attribute> </xref:System.Attribute>       Как правило, должны быть возвращены дочерние свойства путем реализации <xref:System.ComponentModel.TypeConverter.GetProperties%2A>членом <xref:System.ComponentModel.TypeConverter>возвращаемого этим свойством.</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.TypeConverter.GetProperties%2A>"
  syntax:
    content: public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance, Attribute[] filter);
    parameters:
    - id: instance
      type: System.Object
      description: "Компонент для получения свойства."
    - id: filter
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>для использования в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, которые совпадают с указанными атрибутами для заданного компонента."
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  id: GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает редактор указанного типа."
  syntax:
    content: public virtual object GetEditor (Type editorBaseType);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "Базовый тип редактора, который используется для различения нескольких редакторов, которые поддерживает свойство."
    return:
      type: System.Object
      description: "Экземпляр запрошенного типа редактора, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если редактор не найден."
  overload: System.ComponentModel.PropertyDescriptor.GetEditor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает хэш-код для этого объекта."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для этого объекта."
  overload: System.ComponentModel.PropertyDescriptor.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  id: GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Этот метод возвращает объект, который должен использоваться при вызове членов."
  remarks: "Как правило, возвращаемое значение будет таким же, как `instance` переданный. Если кто-то другого объекта, связанный с этим экземпляром, или если экземпляр является настраиваемым дескриптором типа, метод GetInvocationTarget могут возвращать разные значения."
  syntax:
    content: protected override object GetInvocationTarget (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Целевого объекта вызова.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Возможный адресат вызова."
    return:
      type: System.Object
      description: "<xref:System.Object>Должен использоваться при вызове членов.</xref:System.Object>"
  overload: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  id: GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает тип, используя его имя."
  remarks: "Чтобы найти соответствующий тип, этот метод сначала проверяет сборку типа этим <xref:System.ComponentModel.PropertyDescriptor>ссылки.</xref:System.ComponentModel.PropertyDescriptor> Если он не находит тип в сборке, он вызывает <xref:System.Type.GetType%2A?displayProperty=fullName>.</xref:System.Type.GetType%2A?displayProperty=fullName>"
  syntax:
    content: protected Type GetTypeFromName (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "Имя сборки типа для получения."
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, соответствующий заданному имени типа, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , если совпадение не найдено.</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе, возвращает текущее значение свойства компонента."
  remarks: "Как правило этот метод реализуется с помощью отражения.       Этот метод автоматически вызывает неизмененный метод <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>и последующее изменение метода <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>, <xref:System.ComponentModel.Design.IComponentChangeService>.</xref:System.ComponentModel.Design.IComponentChangeService> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>"
  syntax:
    content: public abstract object GetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент со свойством, для которого требуется извлечь значение."
    return:
      type: System.Object
      description: "Значение свойства для данного компонента."
  overload: System.ComponentModel.PropertyDescriptor.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  id: GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Извлекает текущий набор `ValueChanged` обработчики событий для указанного компонента"
  syntax:
    content: protected EventHandler GetValueChangedHandler (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, для которого требуется извлечь обработчики событий."
    return:
      type: System.EventHandler
      description: "Обработчик групповых событий в сочетании A или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если обработчики событий в настоящее время назначен <code> component </code>."
  overload: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  id: IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, является ли это свойство должно быть локализовано, как указано в <xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;> </xref>."
  remarks: "Если свойство помечено с <xref:System.ComponentModel.LocalizableAttribute>значение `true` и используется в визуальном конструкторе, его значения сохраняются в файле ресурсов.</xref:System.ComponentModel.LocalizableAttribute> Если пометить свойство с атрибутом, а затем задать свойство в коде, не используются файлы ресурсов."
  syntax:
    content: public virtual bool IsLocalizable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент помечен <xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;> </xref> значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе получает значение, указывающее, является ли это свойство доступно только для чтения."
  syntax:
    content: public abstract bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если свойство доступно только для чтения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  id: OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Вызывает `ValueChanged` событий, который можно реализовать."
  remarks: "Этот метод должен вызываться реализацией дескриптора свойства при изменении значения свойства."
  syntax:
    content: protected virtual void OnValueChanged (object component, EventArgs e);
    parameters:
    - id: component
      type: System.Object
      description: "Объект, который вызывает событие."
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>, Содержащий данные события.</xref:System.EventArgs>"
  overload: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  id: PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе возвращает тип свойства."
  remarks: "Как правило это свойство реализуется с помощью отражения."
  syntax:
    content: public abstract Type PropertyType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип свойства.</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.PropertyType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  id: RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Позволяет другим объектам получать уведомления об изменении этого свойства."
  syntax:
    content: public virtual void RemoveValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "Удаляет обработчик для компонента."
    - id: handler
      type: System.EventHandler
      description: "Делегат, удаляемый как прослушиватель."
  overload: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  id: ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе сбрасывает значение для этого свойства компонента в значение по умолчанию."
  remarks: "Как правило этот метод реализуется с помощью отражения.       Этот метод определяет значение, чтобы сбросить значение в следующем порядке приоритетов: 1.  Нет теневое значение этого свойства.      2.  Отсутствует <xref:System.ComponentModel.DefaultValueAttribute>для этого свойства.</xref:System.ComponentModel.DefaultValueAttribute>      3.  Отсутствует метод «ResetMyProperty», который был реализован, где «MyProperty» — это имя свойства, которое можно передать.       Этот метод создает <xref:System.ComponentModel.Design.DesignerTransaction>автоматически в следующем порядке: 1.</xref:System.ComponentModel.Design.DesignerTransaction>  Вызовы метода <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>метод для создания нового <xref:System.ComponentModel.Design.DesignerTransaction>для изменения представления.</xref:System.ComponentModel.Design.DesignerTransaction> </xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>      2.  Вызовы метода <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>метод, чтобы указать, что начала транзакции, и изменения будут внесены.</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>      3.  Метод сбрасывает свойство в значение, определенное в порядке проверки, этот метод.      4.  Вызовы метода <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>метод для указания, что произошли изменения.</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>      5.  Вызовы метода <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>для указания, что транзакция завершена.</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>       Транзакция предназначена для поддержки `Undo` и `Redo` функциональные возможности."
  syntax:
    content: public abstract void ResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент со значением свойства, необходимо сбросить значение по умолчанию."
  overload: System.ComponentModel.PropertyDescriptor.ResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  id: SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, является ли это свойство должно быть сериализовано, как указано в <xref href=&quot;System.ComponentModel.DesignerSerializationVisibilityAttribute&quot;> </xref>."
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "Один из <xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref> значений перечисления, определяющее, является ли это свойство должно быть сериализовано."
  overload: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе задает значение компонента другое значение."
  remarks: "Как правило этот метод реализуется с помощью отражения.       Этот метод создает <xref:System.ComponentModel.Design.DesignerTransaction>автоматически в следующем порядке: 1.</xref:System.ComponentModel.Design.DesignerTransaction>  Вызовы метода <xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>метод для создания нового <xref:System.ComponentModel.Design.DesignerTransaction>для изменения представления.</xref:System.ComponentModel.Design.DesignerTransaction> </xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>      2.  Вызовы метода <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>метод, чтобы указать, что начала транзакции, и изменения будут внесены.</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>      3.  Метод сбрасывает свойство в значение, определенное в порядке проверки, этот метод.      4.  Вызовы метода <xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>метод для указания, что произошли изменения.</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>      5.  Вызовы метода <xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>для указания, что транзакция завершена.</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>       Транзакция предназначена для поддержки `Undo` и `Redo` функциональные возможности."
  syntax:
    content: public abstract void SetValue (object component, object value);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент со значением свойства, которое требуется задать."
    - id: value
      type: System.Object
      description: "Новое значение."
  overload: System.ComponentModel.PropertyDescriptor.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  id: ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе определяет значение, указывающее, нужно ли значение этого свойства необходимо сохранить."
  remarks: "Как правило этот метод реализуется с помощью отражения."
  syntax:
    content: public abstract bool ShouldSerializeValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент со свойством, которого нужно проверить сохраняемость."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если необходимо сохранить свойства; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  id: SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, является ли уведомления об изменении значения данного свойства могут быть получены из дескриптора свойств."
  remarks: "Свойство SupportsChangeEvents указывает ли уведомления об изменении значения этого свойства могут инициироваться вне дескриптора свойства, такие как из компонента, или ли уведомления будут поступать из прямые вызовы только внесенные <xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>метод.</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> Например, может реализовывать компонент <xref:System.ComponentModel.INotifyPropertyChanged>интерфейс или может иметь явный `name``Changed` событий для этого свойства.</xref:System.ComponentModel.INotifyPropertyChanged>"
  syntax:
    content: public virtual bool SupportsChangeEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если уведомления об изменении значения могут быть получены из дескриптора свойств; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: System.ComponentModel.MemberDescriptor
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.PropertyDescriptor.Converter
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
- uid: System.ComponentModel.PropertyDescriptor.#ctor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor.PropertyDescriptor
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged
  nameWithType: PropertyDescriptor.AddValueChanged
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue
  nameWithType: PropertyDescriptor.CanResetValue
- uid: System.ComponentModel.PropertyDescriptor.ComponentType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
- uid: System.ComponentModel.PropertyDescriptor.Converter*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: PropertyDescriptor.CreateInstance
- uid: System.ComponentModel.PropertyDescriptor.Equals*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals
  nameWithType: PropertyDescriptor.Equals
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes
  nameWithType: PropertyDescriptor.FillAttributes
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties
  nameWithType: PropertyDescriptor.GetChildProperties
- uid: System.ComponentModel.PropertyDescriptor.GetEditor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: PropertyDescriptor.GetEditor
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode
  nameWithType: PropertyDescriptor.GetHashCode
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget
  nameWithType: PropertyDescriptor.GetInvocationTarget
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName
  nameWithType: PropertyDescriptor.GetTypeFromName
- uid: System.ComponentModel.PropertyDescriptor.GetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue
  nameWithType: PropertyDescriptor.GetValue
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler
  nameWithType: PropertyDescriptor.GetValueChangedHandler
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged
  nameWithType: PropertyDescriptor.OnValueChanged
- uid: System.ComponentModel.PropertyDescriptor.PropertyType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged
  nameWithType: PropertyDescriptor.RemoveValueChanged
- uid: System.ComponentModel.PropertyDescriptor.ResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue
  nameWithType: PropertyDescriptor.ResetValue
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue
  nameWithType: PropertyDescriptor.SetValue
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue
  nameWithType: PropertyDescriptor.ShouldSerializeValue
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
