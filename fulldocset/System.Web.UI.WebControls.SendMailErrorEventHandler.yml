### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SendMailErrorEventHandler
  id: SendMailErrorEventHandler
  langs:
  - csharp
  name: SendMailErrorEventHandler
  nameWithType: SendMailErrorEventHandler
  fullName: System.Web.UI.WebControls.SendMailErrorEventHandler
  type: Delegate
  summary: "Представляет метод, обрабатывающий <xref uid=&quot;langword_csharp_SendMailError&quot; name=&quot;SendMailError&quot; href=&quot;&quot;> </xref> события элементов управления, таких как <xref href=&quot;System.Web.UI.WebControls.ChangePassword&quot;> </xref> управления <xref href=&quot;System.Web.UI.WebControls.CreateUserWizard&quot;> </xref> управления и <xref href=&quot;System.Web.UI.WebControls.PasswordRecovery&quot;> </xref> управления."
  remarks: "При создании делегата SendMailErrorEventHandler, необходимо указать метод, обрабатывающий событие. Чтобы связать событие с обработчиком событий, добавьте в событие экземпляр делегата. Обработчик событий вызывается всякий раз, когда происходит событие, пока не будет удален делегат из события. Дополнительные сведения о делегатах-обработчиках событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](~/add/includes/ajax-current-ext-md.md).       Обработка `SendMailError` событий позволяет продолжать выполнение, даже если исключение возникает при попытке отправить сообщение электронной почты веб-приложения. Например это полезно, если исключение возникает, когда пользователь работает в нескольких шагов мастера. Предпочтительнее записать ошибку в журнал, отобразить информационное сообщение для пользователя и позволить пользователю завершите работу мастера, а не вышел из приложения.       Если не создать обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError>события, или при создании обработчика событий, но оставить <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A>свойство `false`, веб-приложение перестанет работать, если произошла ошибка при отправке сообщения электронной почты и ASP.NET отображает сообщение об ошибке.</xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> </xref:System.Web.UI.WebControls.ChangePassword.SendMailError>       <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A>Метод также позволяет производным классам обрабатывать событие, а не SendMailErrorEventHandler.</xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> Это предпочтительная методика обработки событий в класс, производный от <xref:System.Web.UI.WebControls.ChangePassword>или <xref:System.Web.UI.WebControls.CreateUserWizard>.</xref:System.Web.UI.WebControls.CreateUserWizard> </xref:System.Web.UI.WebControls.ChangePassword>       Дополнительные сведения об обработке событий см. в разделе [обработка событий сервера на страницах Web Forms ASP.NET](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md)."
  example:
  - "The following code example demonstrates an ASP.NET page that uses a <xref:System.Web.UI.WebControls.ChangePassword> Web control, and includes an event handler for the <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> event named `SendMailError`. The code example assumes that the ASP.NET Web site has been configured to use ASP.NET membership and Forms authentication, and that a user has been created whose name and password are known to you. For more information, see [How to: Implement Simple Forms Authentication](~/add/includes/ajax-current-ext-md.md).  \n  \n If the password change succeeds, the code attempts to use SMTP to send an e-mail message to the user to confirm the change. This is done in the `SendingMail` event handler. For information about how to configure an SMTP server, see [NIB: How to: Install and Configure SMTP Virtual Servers in IIS 6.0](http://msdn.microsoft.com/en-us/ed204b58-24af-47d0-9687-60e5df5f17f8). For the purposes of this example, it is not necessary to configure an SMTP server; the example is constructed to test for a failure to send an e-mail message.  \n  \n If a mail server is not configured correctly or some other error occurs and the e-mail message cannot be sent, the `SendMailError` function is called. A message is displayed to the user. In addition, an event is logged to the Windows Application event log with the assumption that an event source named MySamplesSite already exists. See the code example below to create the specified event source. For more information about creating an event source, see [Server Event Handling in ASP.NET Web Forms Pages](../Topic/Server%20Event%20Handling%20in%20ASP.NET%20Web%20Forms%20Pages.md). The <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> property of the <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> object is set to `true` to indicate that the error has been handled.  \n  \n [!code-cs[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_1.aspx)]  \n  \n Use the following code example if you need to programmatically add the event source named MySamplesSite to your Application log. This event source must exist in order for the first code example to work correctly. The following code example requires Administrator privileges.  \n  \n [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_389_2.vb)]\n [!code-cs[System.Diagnostics.EventLog.CreateEventSource#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_389_2.cs)]"
  syntax:
    content: public delegate void SendMailErrorEventHandler(object sender, SendMailErrorEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
