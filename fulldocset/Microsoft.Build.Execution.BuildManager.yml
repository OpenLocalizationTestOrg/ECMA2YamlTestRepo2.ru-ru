### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Execution.BuildManager
  id: BuildManager
  children:
  - Microsoft.Build.Execution.BuildManager.#ctor
  - Microsoft.Build.Execution.BuildManager.#ctor(System.String)
  - Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)
  - Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)
  - Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)
  - Microsoft.Build.Execution.BuildManager.CancelAllSubmissions
  - Microsoft.Build.Execution.BuildManager.DefaultBuildManager
  - Microsoft.Build.Execution.BuildManager.Dispose
  - Microsoft.Build.Execution.BuildManager.EndBuild
  - Microsoft.Build.Execution.BuildManager.Finalize
  - Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)
  - Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)
  - Microsoft.Build.Execution.BuildManager.ResetCaches
  langs:
  - csharp
  name: BuildManager
  nameWithType: BuildManager
  fullName: Microsoft.Build.Execution.BuildManager
  type: Class
  summary: "Этот класс является открытую точку входа для выполнения сборки."
  syntax:
    content: 'public class BuildManager : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: BuildManager()
  nameWithType: BuildManager.BuildManager()
  fullName: Microsoft.Build.Execution.BuildManager.BuildManager()
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Получает новый диспетчер построения без указания имени."
  syntax:
    content: public BuildManager ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: BuildManager(String)
  nameWithType: BuildManager.BuildManager(String)
  fullName: Microsoft.Build.Execution.BuildManager.BuildManager(String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Создает новую сборку без имени диспетчера."
  remarks: "Создайте новый BuildManager. Создание нескольких многопроцессорной виду построения диспетчеров из-за конфликтов в NodeManager не поддерживается."
  syntax:
    content: public BuildManager (string hostName);
    parameters:
    - id: hostName
      type: System.String
      description: "Узел для диспетчера построения."
  overload: Microsoft.Build.Execution.BuildManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)
  id: BeginBuild(Microsoft.Build.Execution.BuildParameters)
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: BeginBuild(BuildParameters)
  nameWithType: BuildManager.BeginBuild(BuildParameters)
  fullName: Microsoft.Build.Execution.BuildManager.BeginBuild(BuildParameters)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Подготавливает BuildManager к получению запросов на построение."
  syntax:
    content: public void BeginBuild (Microsoft.Build.Execution.BuildParameters parameters);
    parameters:
    - id: parameters
      type: Microsoft.Build.Execution.BuildParameters
      description: "Параметры сборки. Может принимать значение null."
  overload: Microsoft.Build.Execution.BuildManager.BeginBuild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Возникает, если сборка уже выполняется."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)
  id: Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: Build(BuildParameters,BuildRequestData)
  nameWithType: BuildManager.Build(BuildParameters,BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.Build(BuildParameters,BuildRequestData)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Передает запрос на построение и выполняет блокировку, пока не станут доступны результаты."
  remarks: "Удобный метод."
  syntax:
    content: public Microsoft.Build.Execution.BuildResult Build (Microsoft.Build.Execution.BuildParameters parameters, Microsoft.Build.Execution.BuildRequestData requestData);
    parameters:
    - id: parameters
      type: Microsoft.Build.Execution.BuildParameters
      description: "Параметры построения."
    - id: requestData
      type: Microsoft.Build.Execution.BuildRequestData
      description: "Построение данных запроса."
    return:
      type: Microsoft.Build.Execution.BuildResult
      description: "Возвращает результат сборки."
  overload: Microsoft.Build.Execution.BuildManager.Build*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Возникает, если сборка уже выполняется."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)
  id: BuildRequest(Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: BuildRequest(BuildRequestData)
  nameWithType: BuildManager.BuildRequest(BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.BuildRequest(BuildRequestData)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Передает запрос на построение и выполняет блокировку, пока не станут доступны результаты."
  remarks: "Удобный метод."
  syntax:
    content: public Microsoft.Build.Execution.BuildResult BuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);
    parameters:
    - id: requestData
      type: Microsoft.Build.Execution.BuildRequestData
      description: "Запрос на сборку."
    return:
      type: Microsoft.Build.Execution.BuildResult
      description: "Возвращает результат сборки."
  overload: Microsoft.Build.Execution.BuildManager.BuildRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Возникает, если не был вызван StartBuild или если был вызван метод EndBuild."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions
  id: CancelAllSubmissions
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: CancelAllSubmissions()
  nameWithType: BuildManager.CancelAllSubmissions()
  fullName: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Отменяет все незавершенные передачи асинхронно."
  syntax:
    content: public void CancelAllSubmissions ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager
  id: DefaultBuildManager
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: DefaultBuildManager
  nameWithType: BuildManager.DefaultBuildManager
  fullName: Microsoft.Build.Execution.BuildManager.DefaultBuildManager
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Возвращает одноэлементный экземпляр диспетчера построения."
  syntax:
    content: public static Microsoft.Build.Execution.BuildManager DefaultBuildManager { get; }
    return:
      type: Microsoft.Build.Execution.BuildManager
      description: "Возвращает одноэлементный экземпляр диспетчера построения."
  overload: Microsoft.Build.Execution.BuildManager.DefaultBuildManager*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.Dispose
  id: Dispose
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: Dispose()
  nameWithType: BuildManager.Dispose()
  fullName: Microsoft.Build.Execution.BuildManager.Dispose()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Dispose менеджером построений."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.EndBuild
  id: EndBuild
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: EndBuild()
  nameWithType: BuildManager.EndBuild()
  fullName: Microsoft.Build.Execution.BuildManager.EndBuild()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Сообщает, что нет дополнительные запросы на сборку являются ожидается (или разрешено) и что BuildManager может очистить."
  remarks: "Этот вызов блокируется до всех текущих ожидающих запросов являются полными."
  syntax:
    content: public void EndBuild ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.EndBuild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Если построение не выполняется, создается исключение."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.Finalize
  id: Finalize
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: Finalize()
  nameWithType: BuildManager.Finalize()
  fullName: Microsoft.Build.Execution.BuildManager.Finalize()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Завершение диспетчера построения."
  syntax:
    content: ~BuildManager ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.Finalize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)
  id: GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: GetProjectInstanceForBuild(Project)
  nameWithType: BuildManager.GetProjectInstanceForBuild(Project)
  fullName: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Project)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Получает сопоставления ProjectInstance в кэше BuildManager ранее созданных проектов."
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance GetProjectInstanceForBuild (Microsoft.Build.Evaluation.Project project);
    parameters:
    - id: project
      type: Microsoft.Build.Evaluation.Project
      description: "Проект, для которого требуется извлечь экземпляр."
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "Возвращает сопоставления ProjectInstance в кэше BuildManager ранее созданных проектов. Если нет ни одного из указанного проекта создается новый экземпляр проекта."
  overload: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)
  id: PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: PendBuildRequest(BuildRequestData)
  nameWithType: BuildManager.PendBuildRequest(BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.PendBuildRequest(BuildRequestData)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Передает запрос на построение в текущее построение, но не запускает его немедленно. Позволяет пользователю выполнять асинхронно или получить доступ к ИД передачи перед выполнением запроса."
  syntax:
    content: public Microsoft.Build.Execution.BuildSubmission PendBuildRequest (Microsoft.Build.Execution.BuildRequestData requestData);
    parameters:
    - id: requestData
      type: Microsoft.Build.Execution.BuildRequestData
      description: "Построение данных запроса."
    return:
      type: Microsoft.Build.Execution.BuildSubmission
      description: "Возвращает отправки, которая будет выполнена сборка."
  overload: Microsoft.Build.Execution.BuildManager.PendBuildRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Возникает, если не был вызван StartBuild или если был вызван метод EndBuild."
  platform:
  - net462
- uid: Microsoft.Build.Execution.BuildManager.ResetCaches
  id: ResetCaches
  parent: Microsoft.Build.Execution.BuildManager
  langs:
  - csharp
  name: ResetCaches()
  nameWithType: BuildManager.ResetCaches()
  fullName: Microsoft.Build.Execution.BuildManager.ResetCaches()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "Удаляет все диспетчера построения кэшированные сведения."
  syntax:
    content: public void ResetCaches ();
    parameters: []
  overload: Microsoft.Build.Execution.BuildManager.ResetCaches*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: Microsoft.Build.Execution.BuildManager.#ctor
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BuildManager()
  nameWithType: BuildManager.BuildManager()
  fullName: Microsoft.Build.Execution.BuildManager.BuildManager()
- uid: Microsoft.Build.Execution.BuildManager.#ctor(System.String)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BuildManager(String)
  nameWithType: BuildManager.BuildManager(String)
  fullName: Microsoft.Build.Execution.BuildManager.BuildManager(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BeginBuild(BuildParameters)
  nameWithType: BuildManager.BeginBuild(BuildParameters)
  fullName: Microsoft.Build.Execution.BuildManager.BeginBuild(BuildParameters)
- uid: Microsoft.Build.Execution.BuildParameters
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildParameters
  nameWithType: BuildParameters
  fullName: Microsoft.Build.Execution.BuildParameters
- uid: Microsoft.Build.Execution.BuildManager.Build(Microsoft.Build.Execution.BuildParameters,Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Build(BuildParameters,BuildRequestData)
  nameWithType: BuildManager.Build(BuildParameters,BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.Build(BuildParameters,BuildRequestData)
- uid: Microsoft.Build.Execution.BuildResult
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildResult
  nameWithType: BuildResult
  fullName: Microsoft.Build.Execution.BuildResult
- uid: Microsoft.Build.Execution.BuildRequestData
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildRequestData
  nameWithType: BuildRequestData
  fullName: Microsoft.Build.Execution.BuildRequestData
- uid: Microsoft.Build.Execution.BuildManager.BuildRequest(Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BuildRequest(BuildRequestData)
  nameWithType: BuildManager.BuildRequest(BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.BuildRequest(BuildRequestData)
- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: CancelAllSubmissions()
  nameWithType: BuildManager.CancelAllSubmissions()
  fullName: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions()
- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: DefaultBuildManager
  nameWithType: BuildManager.DefaultBuildManager
  fullName: Microsoft.Build.Execution.BuildManager.DefaultBuildManager
- uid: Microsoft.Build.Execution.BuildManager
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildManager
  nameWithType: BuildManager
  fullName: Microsoft.Build.Execution.BuildManager
- uid: Microsoft.Build.Execution.BuildManager.Dispose
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Dispose()
  nameWithType: BuildManager.Dispose()
  fullName: Microsoft.Build.Execution.BuildManager.Dispose()
- uid: Microsoft.Build.Execution.BuildManager.EndBuild
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: EndBuild()
  nameWithType: BuildManager.EndBuild()
  fullName: Microsoft.Build.Execution.BuildManager.EndBuild()
- uid: Microsoft.Build.Execution.BuildManager.Finalize
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Finalize()
  nameWithType: BuildManager.Finalize()
  fullName: Microsoft.Build.Execution.BuildManager.Finalize()
- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Microsoft.Build.Evaluation.Project)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: GetProjectInstanceForBuild(Project)
  nameWithType: BuildManager.GetProjectInstanceForBuild(Project)
  fullName: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild(Project)
- uid: Microsoft.Build.Execution.ProjectInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
- uid: Microsoft.Build.Evaluation.Project
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: Project
  nameWithType: Project
  fullName: Microsoft.Build.Evaluation.Project
- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest(Microsoft.Build.Execution.BuildRequestData)
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: PendBuildRequest(BuildRequestData)
  nameWithType: BuildManager.PendBuildRequest(BuildRequestData)
  fullName: Microsoft.Build.Execution.BuildManager.PendBuildRequest(BuildRequestData)
- uid: Microsoft.Build.Execution.BuildSubmission
  parent: Microsoft.Build.Execution
  isExternal: false
  name: BuildSubmission
  nameWithType: BuildSubmission
  fullName: Microsoft.Build.Execution.BuildSubmission
- uid: Microsoft.Build.Execution.BuildManager.ResetCaches
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: ResetCaches()
  nameWithType: BuildManager.ResetCaches()
  fullName: Microsoft.Build.Execution.BuildManager.ResetCaches()
- uid: Microsoft.Build.Execution.BuildManager.#ctor*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BuildManager
  nameWithType: BuildManager.BuildManager
- uid: Microsoft.Build.Execution.BuildManager.BeginBuild*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BeginBuild
  nameWithType: BuildManager.BeginBuild
- uid: Microsoft.Build.Execution.BuildManager.Build*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Build
  nameWithType: BuildManager.Build
- uid: Microsoft.Build.Execution.BuildManager.BuildRequest*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: BuildRequest
  nameWithType: BuildManager.BuildRequest
- uid: Microsoft.Build.Execution.BuildManager.CancelAllSubmissions*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: CancelAllSubmissions
  nameWithType: BuildManager.CancelAllSubmissions
- uid: Microsoft.Build.Execution.BuildManager.DefaultBuildManager*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: DefaultBuildManager
  nameWithType: BuildManager.DefaultBuildManager
- uid: Microsoft.Build.Execution.BuildManager.Dispose*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Dispose
  nameWithType: BuildManager.Dispose
- uid: Microsoft.Build.Execution.BuildManager.EndBuild*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: EndBuild
  nameWithType: BuildManager.EndBuild
- uid: Microsoft.Build.Execution.BuildManager.Finalize*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: Finalize
  nameWithType: BuildManager.Finalize
- uid: Microsoft.Build.Execution.BuildManager.GetProjectInstanceForBuild*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: GetProjectInstanceForBuild
  nameWithType: BuildManager.GetProjectInstanceForBuild
- uid: Microsoft.Build.Execution.BuildManager.PendBuildRequest*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: PendBuildRequest
  nameWithType: BuildManager.PendBuildRequest
- uid: Microsoft.Build.Execution.BuildManager.ResetCaches*
  parent: Microsoft.Build.Execution.BuildManager
  isExternal: false
  name: ResetCaches
  nameWithType: BuildManager.ResetCaches
