### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlConnection
  id: SqlConnection
  children:
  - System.Data.SqlClient.SqlConnection.#ctor
  - System.Data.SqlClient.SqlConnection.#ctor(System.String)
  - System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  - System.Data.SqlClient.SqlConnection.AccessToken
  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  - System.Data.SqlClient.SqlConnection.ClearAllPools
  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlConnection.ClientConnectionId
  - System.Data.SqlClient.SqlConnection.Close
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  - System.Data.SqlClient.SqlConnection.ConnectionString
  - System.Data.SqlClient.SqlConnection.ConnectionTimeout
  - System.Data.SqlClient.SqlConnection.CreateCommand
  - System.Data.SqlClient.SqlConnection.CreateDbCommand
  - System.Data.SqlClient.SqlConnection.Credential
  - System.Data.SqlClient.SqlConnection.Database
  - System.Data.SqlClient.SqlConnection.DataSource
  - System.Data.SqlClient.SqlConnection.DbProviderFactory
  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  - System.Data.SqlClient.SqlConnection.GetSchema
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  - System.Data.SqlClient.SqlConnection.InfoMessage
  - System.Data.SqlClient.SqlConnection.Open
  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlConnection.PacketSize
  - System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  - System.Data.SqlClient.SqlConnection.ResetStatistics
  - System.Data.SqlClient.SqlConnection.RetrieveStatistics
  - System.Data.SqlClient.SqlConnection.ServerVersion
  - System.Data.SqlClient.SqlConnection.State
  - System.Data.SqlClient.SqlConnection.StatisticsEnabled
  - System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  - System.Data.SqlClient.SqlConnection.WorkstationId
  langs:
  - csharp
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
  type: Class
  summary: "Представляет открытое соединение с [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] базы данных. Этот класс не наследуется."
  remarks: "A SqlConnection object represents a unique session to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. For all third-party [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] products, and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.  \n  \n When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  \n  \n See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.  \n  \n If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.  \n  \n> [!NOTE]\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \n  \n To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  \n  \n```vb#  \nUsing connection As New SqlConnection(connectionString)  \n    connection.Open()  \n    ' Do work here; connection closed on following line.  \nEnd Using  \n  \n```  \n  \n```c#  \nusing (SqlConnection connection = new SqlConnection(connectionString))  \n    {  \n        connection.Open();  \n        // Do work here; connection closed on following line.  \n    }  \n```  \n  \n> [!NOTE]\n>  To deploy high-performance applications, you must use connection pooling. When you use the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see [SQL Server Connection Pooling (ADO.NET)](../Topic/SQL%20Server%20Connection%20Pooling%20\\(ADO.NET\\).md).  \n  \n If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  \n  \n An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md). For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about handling warning and informational messages from the server, see [Connection Events](~/add/includes/ajax-current-ext-md.md). [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine errors and error messages are documented in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \n  \n> [!CAUTION]\n>  You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a SqlConnection. The SqlConnection is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] INSERT statement. The connection is closed automatically when the code exits the using block.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._4_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> класса."
  remarks: "При создании нового экземпляра объекта <xref:System.Data.SqlClient.SqlConnection>создается для чтения записи свойствам присваиваются следующие начальные значения, если они заданы особым образом соответствующими ключевыми словами в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| пустая строка (»») |   | <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.SqlClient.SqlConnection.Database%2A>| пустая строка (»») |   | <xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| пустая строка (»») |       Значение этих свойств можно изменить только с помощью <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnectionStringBuilder>Класс предоставляет функциональные возможности для создания и управления содержимым строки соединения.</xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._17_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._17_1.cs)]"
  syntax:
    content: public SqlConnection ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> класс после получения строки, содержащее строку подключения."
  remarks: "При создании нового экземпляра объекта <xref:System.Data.SqlClient.SqlConnection>создается для чтения записи свойствам присваиваются следующие начальные значения, если они заданы особым образом соответствующими ключевыми словами в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| `connectionString`|   | <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |   | <xref:System.Data.SqlClient.SqlConnection.Database%2A>| пустая строка (»») |   | <xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| пустая строка (»») |       Значение этих свойств можно изменить только с помощью <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnection>Класс предоставляет функциональные возможности для создания и управления содержимым строки соединения.</xref:System.Data.SqlClient.SqlConnection>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._38_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._38_1.cs)]"
  syntax:
    content: public SqlConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "Соединение, используемое для открытия [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] базы данных."
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  id: '#ctor(System.String,System.Data.SqlClient.SqlCredential)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> класса, используя строку подключения, который не использует <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref> и <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> , содержащий идентификатор пользователя и пароль."
  syntax:
    content: public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);
    parameters:
    - id: connectionString
      type: System.String
      description: 'Строка подключения, не используйте любой из следующих ключевых слов строки подключения: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, или <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; или который не использует <xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>.'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object. Если `credential` имеет значение null, SqlConnection является функциональным эквивалентом &lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;."
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  id: AccessToken
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает токен доступа для подключения."
  syntax:
    content: public string AccessToken { get; set; }
    return:
      type: System.String
      description: "Токен доступа для подключения."
  overload: System.Data.SqlClient.SqlConnection.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Для добавления."
    return:
      type: System.Data.Common.DbTransaction
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Начинает транзакцию базы данных."
  remarks: "Эта команда сопоставляется [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] реализации BEGIN TRANSACTION.       Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Чтобы убедиться в том, что [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] правильную работу модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      Настроек [!NOTE] настроек Если уровень изоляции не указан, используется уровень изоляции по умолчанию. Для указания уровня изоляции с <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>метода, используйте перегрузку, которая принимает `iso` параметра (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>).</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> Уровень изоляции транзакции сохраняется после завершения транзакции, и до подключения закрыт или удален. Выбранный уровень изоляции для **моментального снимка** в базе данных, где не включена уровень изоляции моментального снимка не вызывает исключение. Транзакция будет выполнена с использованием уровня изоляции по умолчанию.      Настроек [!CAUTION] настроек запуска транзакции, уровень 16 или выше ошибка возникает на сервере будет не выполнен откат транзакции до <xref:System.Data.SqlClient.SqlDataReader.Read%2A>вызывается метод.</xref:System.Data.SqlClient.SqlDataReader.Read%2A> Исключение не возникает **ExecuteReader**.      Настроек [!CAUTION] настроек при запросе возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>создается потому, что [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] параллельные транзакции не допускаются при использовании режима MARS.</xref:System.Data.SqlClient.SqlException> Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения.       Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] транзакции, в разделе «Явных транзакций» и «кодированию эффективных транзакций, в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the BeginTransaction, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Параллельные транзакции не разрешены при использовании нескольких активные результирующие наборы (MARS)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Параллельные транзакции не поддерживаются."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Начинает транзакцию базы данных с указанным уровнем изоляции."
  remarks: "Эта команда сопоставляется [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] реализации BEGIN TRANSACTION.       Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Чтобы убедиться в том, что [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] правильную работу модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      Настроек [!NOTE] настроек после фиксации или отката транзакции уровень изоляции транзакции сохраняется для всех последующих команд, которые находятся в режиме автоматической фиксации ( [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] по умолчанию). Это может привести к непредвиденным результатам, например уровня изоляции REPEATABLE READ, сохранение и блокировка других пользователей вне строки. Чтобы восстановить уровень изоляции по умолчанию (READ COMMITTED), выполните [!INCLUDE[tsql](~/add/includes/tsql-md.md)] НАБОР ТРАНЗАКЦИЙ ИЗОЛЯЦИИ УРОВНЯ READ COMMITTED инструкции или вызов <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>немедленно следуют <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] уровни изоляции, в разделе «Изоляции уровни в Database Engine» в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.       Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] транзакции, в разделе «Явных транзакций» и «кодированию эффективных транзакций, в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.      Настроек [!CAUTION] настроек при запросе возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>создается потому, что [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] параллельные транзакции не допускаются при использовании режима MARS.</xref:System.Data.SqlClient.SqlException> Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/b09ea924-5f89-4203-b010-_1.vb)]\n [!code-cs[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/b09ea924-5f89-4203-b010-_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "Уровень изоляции, с которым должна выполняться транзакция."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Параллельные транзакции не разрешены при использовании нескольких активные результирующие наборы (MARS)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Параллельные транзакции не поддерживаются."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  id: BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Начинает транзакцию базы данных с указанным уровнем изоляции."
  remarks: "Эта команда сопоставляется [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] реализации BEGIN TRANSACTION.       Длина `transactionName` параметра не должна превышать 32 символов; в противном случае будет создано исключение.       Значение в `transactionName` параметр может использоваться в последующих вызовах <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>и в `savePoint` параметр <xref:System.Data.SqlClient.SqlTransaction.Save%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Чтобы убедиться в том, что [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] правильную работу модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].       Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] транзакции, в разделе «Явных транзакций» и «кодированию эффективных транзакций, в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.      Настроек [!CAUTION] настроек при запросе возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>создается потому, что [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] параллельные транзакции не допускаются при использовании режима MARS.</xref:System.Data.SqlClient.SqlException> Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._36_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._36_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "Имя транзакции."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Параллельные транзакции не разрешены при использовании нескольких активные результирующие наборы (MARS)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Параллельные транзакции не поддерживаются."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  id: BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Начинает транзакцию базы данных с именем уровня и транзакции изоляции."
  remarks: "Эта команда сопоставляется [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] реализации BEGIN TRANSACTION.       Значение в `transactionName` параметр может использоваться в последующих вызовах <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>и в `savePoint` параметр <xref:System.Data.SqlClient.SqlTransaction.Save%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>метод.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Чтобы убедиться в том, что [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] правильную работу модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      Настроек [!NOTE] настроек после фиксации или отката транзакции уровень изоляции транзакции сохраняется для всех последующих команд, которые находятся в режиме автоматической фиксации ( [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] по умолчанию). Это может привести к непредвиденным результатам, например уровня изоляции REPEATABLE READ, сохранение и блокировка других пользователей вне строки. Чтобы восстановить уровень изоляции по умолчанию (READ COMMITTED), выполните [!INCLUDE[tsql](~/add/includes/tsql-md.md)] НАБОР ТРАНЗАКЦИЙ ИЗОЛЯЦИИ УРОВНЯ READ COMMITTED инструкции или вызов <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>немедленно следуют <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] уровни изоляции, в разделе «Изоляции уровни в Database Engine» в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.       Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] транзакции, в разделе «Явных транзакций» и «кодированию эффективных транзакций, в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.      Настроек [!CAUTION] настроек при запросе возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException>создается потому, что [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] параллельные транзакции не допускаются при использовании режима MARS.</xref:System.Data.SqlClient.SqlException> Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/csharp/1f00ab5d-aff7-46ea-8f1d-_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/visualbasic/1f00ab5d-aff7-46ea-8f1d-_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "Уровень изоляции, с которым должна выполняться транзакция."
    - id: transactionName
      type: System.String
      description: "Имя транзакции."
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Параллельные транзакции не разрешены при использовании нескольких активные результирующие наборы (MARS)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Параллельные транзакции не поддерживаются."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Изменяет текущую базу данных для открытого <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "Значение, указанное в `database` параметр должен быть действительным именем базы данных. `database` Параметр не может содержать значение null, пустой строкой или строкой, содержащей только из пустых символов."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string database);
    parameters:
    - id: database
      type: System.String
      description: "Имя базы данных для использования вместо текущей базы данных."
  overload: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимое имя базы данных."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Соединение не открыто."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Не удается изменить базу данных."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Изменения [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] пароль для пользователя, указанного в строке подключения к заданным новым паролем."
  remarks: "При использовании [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] в Windows Server, разработчики могут использовать преимущества функциональности, позволяющей клиентскому приложению задать текущий и новый пароль для изменения существующего пароля. Приложения могут реализовывать функции, такие как подтверждения от пользователя ввести новый пароль во время первого входа, если старый истек, и эта операция может выполняться без вмешательства администратора.       Изменение метода ChangePassword [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] пароль для пользователя, указанного в предоставленном `connectionString` параметр значению, переданному в `newPassword` параметра. Если строка подключения содержит параметр для использования встроенной безопасности (т. е «Integrated Security = True» или его эквивалент), создается исключение.       Чтобы определить, что действия пароля истек, вызвав <xref:System.Data.SqlClient.SqlConnection.Open%2A>метод выдает <xref:System.Data.SqlClient.SqlException>.</xref:System.Data.SqlClient.SqlException> </xref:System.Data.SqlClient.SqlConnection.Open%2A> Чтобы указать, что необходимо сбросить пароль, который содержится в строке подключения, <xref:System.Data.SqlClient.SqlException.Number%2A>свойство для исключения содержит значение состояния 18487 или 18488.</xref:System.Data.SqlClient.SqlException.Number%2A> Первое значение (18487) указывает, что срок действия пароля, и второе (18488) указывает, что пароль должен быть сброшен перед вход.       Этот метод открывает собственное подключение к серверу, запрашивает изменение пароля и закрывает соединение, сразу после ее завершения. Это подключение не получаться и не возвращается в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] пула соединений."
  example:
  - "The following is a simple example of changing a password:  \n  \n```  \nclass Program {  \n   static void Main(string[] args) {  \n      System.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\");  \n   }  \n}  \n  \n```  \n  \n```  \nModule Module1  \n    Sub Main()  \nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\")  \n    End Sub  \nEnd Module  \n  \n```  \n  \n The following console application demonstrates the issues involved in changing a user's password because the current password has expired.  \n  \n [!code-cs[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/csharp/7b66f468-c7fc-4a76-bd4e-_1.cs)]\n [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/visualbasic/7b66f468-c7fc-4a76-bd4e-_1.vb)]"
  syntax:
    content: public static void ChangePassword (string connectionString, string newPassword);
    parameters:
    - id: connectionString
      type: System.String
      description: "Строка подключения, содержащая достаточно информации для подключения к серверу, который будет. Строка подключения должна содержать идентификатор пользователя и его текущий пароль."
    - id: newPassword
      type: System.String
      description: "Чтобы задать новый пароль. Этот пароль должен соответствовать политике безопасности паролей, установленной на сервере, включая минимальную длину, требования для определенных знаков и т. д."
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Строка подключения содержит параметр, чтобы использовать встроенную безопасность.       Или <code> newPassword </code> превышает 128 символов."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Либо <code> connectionString </code> или <code> newPassword </code> параметр имеет значение null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  id: ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Изменения [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] пароль для пользователя, указанного в <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> объекта."
  syntax:
    content: public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);
    parameters:
    - id: connectionString
      type: System.String
      description: 'Строка подключения, содержащая достаточно информации для подключения к серверу. Строка подключения не следует использовать любой из следующих ключевых слов строки подключения: <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, или <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; или <xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>.'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object."
    - id: newSecurePassword
      type: System.Security.SecureString
      description: "Новый пароль. `newSecurePassword`должен быть только для чтения. Пароль должен также соответствовать политике безопасности паролей, установленной на сервере (например, минимальной длине и требования к использованию определенных символов)."
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "1.Строка подключения содержит любое сочетание <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>, или <xref uid=&quot;langword_csharp_Integrated Security=true&quot; name=&quot;Integrated Security=true&quot; href=&quot;&quot;> </xref>.      2.  Строка подключения содержит <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;> </xref>.      3.  <code>newSecurePassword</code>больше 128 символов.      4.  <code>newSecurePassword</code>не только для чтения.      5.  <code>newSecurePassword</code>является пустой строкой."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Очищает пул подключений."
  remarks: "ClearAllPools сбрасывает или очищает пул подключений. При наличии подключения, используемые во время вызова они соответствующим образом помечаются и будут удалены (а возвращены в пул) при <xref:System.Data.SqlClient.SqlConnection.Close%2A>вызывается на них.</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearAllPools ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ClearAllPools*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  id: ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Очищает пул подключений, связанный с заданным подключением."
  remarks: "ClearPool очищает пул подключений, с которым связан `connection`. Если дополнительные подключения, связанные с `connection` , используется во время вызова они соответствующим образом помечаются и удаляются (а возвращены в пул), когда <xref:System.Data.SqlClient.SqlConnection.Close%2A>вызывается на них.</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearPool (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Очищаемого из пула."
  overload: System.Data.SqlClient.SqlConnection.ClearPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Идентификатор соединения последней попытки подключения, независимо от ли попытка успешно или неудачно."
  remarks: "ClientConnectionId работает независимо от того, какая версия сервера, подключитесь к, но журналы расширенных событий и записи по ошибкам кольцевого буфера соединений будет отсутствовать в [!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)] и более ранних версий.       Идентификатор соединения можно найти в журнале расширенных событий, чтобы увидеть ли Включение расширенных событий в журнале идентификатор соединения для произошла ошибка на сервере. Идентификатор соединения можно также найти в кольцевом буфере соединений ([Устранение неполадок подключения в SQL Server 2008 с помощью кольцевого буфера подключения](http://go.microsoft.com/fwlink/?LinkId=207752)) для определенных ошибок подключения. Если идентификатор подключения не находится в кольцевом буфере соединений, можно предположить сетевая ошибка."
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "Попытка соединения идентификатор последнего соединения."
  overload: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Close
  id: Close
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Закрывает соединение с базой данных. Это предпочтительный метод для закрытия любого открытого подключения."
  remarks: "Метод Close откатывает все отложенные транзакции. Освобождает соединение в пул подключений или закрывает подключение, если пул подключений отключен.      Настроек [!NOTE] настроек отложенные транзакции, запущенные с помощью [!INCLUDE[tsql](~/add/includes/tsql-md.md)] или <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>автоматически откатывается подключение сбрасывается, если включен пул соединений.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> Если пул подключений отключен, транзакция откатывается после `SqlConnection.Close` вызывается. Транзакции, запущенные посредством <xref:System.Transactions>осуществляется с помощью `System.Transactions` инфраструктуры и они не подвержены `SqlConnection.Close`.</xref:System.Transactions>       Приложение может вызвать метод Close более одного раза. Исключение не формируется.       Если <xref:System.Data.SqlClient.SqlConnection>выходит за границы области, он не будет закрыт.</xref:System.Data.SqlClient.SqlConnection> Таким образом, необходимо явно закрыть подключение путем вызова `Close` или `Dispose`. `Close`и `Dispose` функционально эквивалентны. Если организация пулов соединений значение `Pooling` равно `true` или `yes`, Базовое соединение возвращается в пул подключений. С другой стороны Если `Pooling` равно `false` или `no`, закрытия базового подключения к серверу.      Настроек [!NOTE] настроек события входа и выхода из системы не вызываются на сервере при выборке из соединения и возвращается в пул подключений, так как соединение фактически не закрывается при возвращении в пул соединений. Дополнительные сведения см. в разделе [SQL пулов соединений Server (ADO.NET)](~/add/includes/ajax-current-ext-md.md).      Настроек [!CAUTION] настроек не следует вызывать `Close` или `Dispose` на соединение, DataReader или любого другого управляемого объекта в `Finalize` метод класса. Метод завершения следует только освобождать неуправляемые ресурсы, которыми ваш класс непосредственно владеет. Если класс не владеет все неуправляемые ресурсы, не включайте `Finalize` метод в определении класса. Дополнительные сведения см. в разделе [мусора](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._20_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._20_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Close*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Ошибка уровня соединения, которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  id: ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает время существования для шифрования столбцов ключевых записей в кэше ключа шифрования столбца для [постоянного шифрования](https://msdn.microsoft.com/library/mt163865.aspx) компонентов. Значение по умолчанию составляет 2 часа. 0 означает отсутствие кэширования вообще."
  syntax:
    content: public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }
    return:
      type: System.TimeSpan
      description: "Интервал времени."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  id: ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает значение, указывающее, включено ли кэширование метаданных запросов (true) или нет (false) для параметризованных запросов, запущенным по отношению к [постоянного шифрования](https://msdn.microsoft.com/library/mt163865.aspx) баз данных с поддержкой. Значение по умолчанию — true."
  remarks: "Для параметризованных запросов SqlClient совершается обмен данными с SQL Server для параметра метаданных, чтобы увидеть, какой параметр, его необходимо зашифровать и как (какие ключи и алгоритмы следует использовать). Если приложение вызывает тот же запрос несколько раз, дополнительное обращение выполняется на сервере каждый раз приводит к снижению производительности приложения.       С **ColumnEncryptionQueryMetadataCacheEnabled** задано значение true, если тот же запрос вызывается несколько раз, обращение к серверу будут выполняться только один раз. В кэше имеется ненастраиваемые Max параметр размера, равное 2000 запросов."
  syntax:
    content: public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }
    return:
      type: System.Boolean
      description: "Возвращает значение true, если включено кэширование метаданных запросов; в противном случае — значение false. значение true, значение по умолчанию."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  id: ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Позволяет задать список доверенных путей ключа для сервера базы данных. Если при обработке запроса приложения драйвер Получает путь ключа, которого нет в списке, запрос завершится ошибкой. Это свойство обеспечивает дополнительную защиту от атак на систему безопасности, включающих предоставление скомпрометированным путей ключа, что может привести к утечке учетных данных хранилища ключей скомпрометированным SQL Server."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,System.Collections.Generic.IList<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
      description: "Список доверенных путей к главным ключам для шифрования столбца."
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает строку, используемую для открытия [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] базы данных."
  remarks: "ConnectionString аналогична строке подключения OLE DB, но не совпадает. В отличие от OLE DB или ADO, возвращаемая строка подключения совпадает со значением ConnectionString набор пользователей, за вычетом сведений о безопасности Если Persist Security Info имеет значение `false` (по умолчанию). [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] сохраняет и не возвращает пароль в строке подключения, равным Persist Security Info `true`.       Свойство ConnectionString для подключения к базе данных. В следующем примере строка соединения.      ```   &quot;Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)&quot;   ```Используйте новую <xref:System.Data.SqlClient.SqlConnectionStringBuilder>для создания допустимых строк соединения во время выполнения.</xref:System.Data.SqlClient.SqlConnectionStringBuilder> Дополнительные сведения см. в разделе [построители строк соединения](~/add/includes/ajax-current-ext-md.md).       Свойство ConnectionString можно задать только в том случае, если подключение закрывается. Многие значения строки подключения имеют соответствующие свойства только для чтения. Когда задана строка соединения, эти свойства обновляются, за исключением того, при обнаружении ошибки. В этом случае ни одно свойство обновляются. <xref:System.Data.SqlClient.SqlConnection>свойства возвращают только те параметры, которые содержатся в ConnectionString.</xref:System.Data.SqlClient.SqlConnection>       Чтобы подключиться к локальному компьютеру, укажите «(local)» для сервера. Если не указано имя сервера, подключение будет предпринята попытка экземпляр по умолчанию на локальном компьютере.       Сброс ConnectionString для закрытого соединения сбрасывает все значения строки подключения (и связанные с ним свойства), включая пароль. Например, если задать строку подключения, которая включает» базы данных = AdventureWorks», а затем снова строку подключения к» источника данных = myserver; Integrated Security = true», <xref:System.Data.SqlClient.SqlConnection.Database%2A>больше не задано значение «AdventureWorks».</xref:System.Data.SqlClient.SqlConnection.Database%2A>       Строка соединения анализируется сразу после установки. Если обнаружены ошибки синтаксиса во время синтаксического анализа, исключение времени выполнения, такие как <xref:System.ArgumentException>, формируется.</xref:System.ArgumentException> Другие ошибки можно найти только в том случае, при попытке открыть соединение.       Базовый формат строки подключения содержит ряд пар ключевых слов и значений, разделенных точкой с запятой. Знак равенства (=) соединяет каждое ключевое слово и его значение. Чтобы включить значения, содержащие точку с запятой, знак одинарной или двойной кавычки, значение должно заключаться в двойные кавычки. Если значение содержит точку с запятой и символ двойной кавычки, значение может заключаться в одинарные кавычки. Одинарная кавычка также полезна, если значение начинается с символа двойной кавычки. И наоборот двойные кавычки можно использовать, если значение начинается с одинарной кавычки. Если значение содержит символы одинарных и двойных кавычек, знак кавычек для выделения значения необходимо повторить все вхождения в пределах значения.       Чтобы включить начальные или конечные пробелы в строковое значение, значение должны заключаться в одинарные кавычки или двойные кавычки. Все начальные или конечные пробелы вокруг целое число, логическое значение или последовательность значений, игнорируются, даже если они заключены в кавычки. Однако пробелы внутри ключевое слово-литерал строки или значения сохраняются. Одинарные или двойные кавычки могут использоваться в строке подключения без разделителей (например, Data Source = my&quot;Server или Data Source = my Server «), если символ кавычки не является первым или последним символом в значении.       Ключевые слова не учитывают регистр.       В следующей таблице перечислены допустимые имена для значений ключевых слов в ConnectionString.        Ниже перечислены допустимые имена для значений пула подключений в ConnectionString. Дополнительные сведения см. в разделе [SQL пулов соединений Server (ADO.NET)](~/add/includes/ajax-current-ext-md.md).      -Время жизни подключения (или Load Balance Timeout) - прикрепить - Max Pool Size - Min Pool Size – пул после ключевого слова параметр или значений пула подключений, требующих логических значений, можно использовать «Да» вместо «true» и «нет» вместо «false». Целочисленные значения, представляются в виде строки.      Настроек [!NOTE] настроек [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] использует собственный протокол для взаимодействия с [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Таким образом, он не поддерживает использование имя источника данных ODBC (DSN) при подключении к [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] , так как он не добавляет уровень ODBC.      Настроек [!NOTE] настроек файлы universal data link (UDL) не поддерживаются для [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      Настроек [!CAUTION] настроек в этом выпуске приложения следует проявлять осторожность при построении строки подключения на основе ввода пользователя (например, при извлечении идентификатора и пароля пользователя из диалоговое окно и добавить его в строку подключения). Приложение должно гарантировать, что пользователь не удается внедрить в эти значения дополнительные параметры строки подключения (например, ввести пароль в виде «validpassword; базы данных = somedb» при попытке присоединения к другой базе данных). Если вам нужно создавать строки соединения на основе ввода пользователя, использовать новую <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, который проверяет строку подключения и помогает избежать этой проблемы.</xref:System.Data.SqlClient.SqlConnectionStringBuilder> В разделе [построители строк подключения](../Topic/Connection%20String%20Builders.md) для получения дополнительной информации."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the ConnectionString property before opening the connection.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._24_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._24_1.cs)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "Строка подключения, включающая имя источника базы данных и другие параметры, необходимые для установки исходного подключения. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Передан недопустимый аргумент строки соединения, или не задан обязательный аргумент строки соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Получает время ожидания при попытке установки подключения, по истечении которого попытка завершается и создается ошибка."
  remarks: "Можно задать время ожидания подключения для времени ожидания с помощью `Connect``Timeout` или `Connection Timeout` ключевые слова в строке подключения. Значение 0 означает отсутствие ограничений и следует избегать в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>так, как попытка подключения ждет бесконечно.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._28_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._28_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "Время (в секундах) ожидания открытия соединения. Значение по умолчанию составляет 15 секунд."
  overload: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Заданное значение меньше 0."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает и возвращает <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объекта, связанного с <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: ''
  example:
  - >-
    [!code-vb[SqlConnection_CreateCommand#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._32_1.vb)]
     [!code-cs[SqlConnection_CreateCommand#1](~/add/codesnippet/csharp/m-system.data.sqlclient._32_1.cs)]
  syntax:
    content: public System.Data.SqlClient.SqlCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref> object."
  overload: System.Data.SqlClient.SqlConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Credential
  id: Credential
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> объект для этого подключения."
  remarks: "`Persist Security Info = true`Для получения значения требуется <xref:System.Data.SqlClient.SqlCredential>объект с учетными данными.</xref:System.Data.SqlClient.SqlCredential>       Значение по умолчанию для учетных данных имеет значение null.       <xref:System.InvalidOperationException>Будет порождено исключение: - Если учетных данных задано на открытое соединение.</xref:System.InvalidOperationException>      -Если учетных данных задано `Context Connection=true`.      -Если учетных данных задано `Integrated Security = true`.      -Если учетных данных будет установлен, если в строке подключения используется `Password`.      -Если учетных данных будет установлен, если в строке подключения используется `UserID`."
  syntax:
    content: public System.Data.SqlClient.SqlCredential Credential { get; set; }
    return:
      type: System.Data.SqlClient.SqlCredential
      description: "<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> Объект для этого подключения."
  overload: System.Data.SqlClient.SqlConnection.Credential*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Database
  id: Database
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Получает имя текущей базы данных или базы данных, которая будет использоваться после открытия подключения."
  remarks: "Динамически обновляет свойства базы данных. При изменении текущей базы данных с помощью [!INCLUDE[tsql](~/add/includes/tsql-md.md)] инструкции или <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>, метод информационное сообщение отправляется и свойство обновляется автоматически.</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "Имя текущей базы данных или имя базы данных, которая будет использоваться после открытия подключения. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает имя экземпляра [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] к которому выполняется подключение."
  remarks: >-
    > [!NOTE]

    >  The DataSource property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is "context connection=true".
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._62_1.vb)]\n [!code-cs[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._62_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "Имя экземпляра [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] к которому выполняется подключение. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Выполняет присоединение указанной транзакции как распределенной транзакции."
  remarks: "Можно использовать <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>метод прикрепление к распределенной транзакции.</xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> Так как он прикрепляет подключение к <xref:System.Transactions.Transaction>экземпляра, **EnlistTransaction** использует преимущества функций, доступных в <xref:System.Transactions>пространство имен для управления распределенные транзакции, сделав его более предпочтительным, чем **EnlistDistributedTransaction** для этой цели.</xref:System.Transactions> </xref:System.Transactions.Transaction> Дополнительные сведения см. в разделе [распределенные транзакции](~/add/includes/ajax-current-ext-md.md).       Можно продолжить прикрепить его к существующей распределенной транзакции с помощью **EnlistDistributedTransaction** метод, если автоматическое прикрепление отключено. Прикрепление к существующей распределенной транзакции гарантирует, что, если транзакция фиксируется или откатывается назад, изменения, выполненные кодом в источнике данных также фиксации или отката.       `EnlistDistributedTransaction`Возвращает исключение, если <xref:System.Data.SqlClient.SqlConnection>транзакция, использующая <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> уже запущена</xref:System.Data.SqlClient.SqlConnection> Тем не менее если транзакция является локальной транзакции, запущенной из источника данных (например, путем явного выполнения инструкции BEGIN TRANSACTION с помощью <xref:System.Data.SqlClient.SqlCommand>объекта), **EnlistDistributedTransaction** откат локальной транзакции и прикрепляется к существующей распределенной транзакции, согласно запросу.</xref:System.Data.SqlClient.SqlCommand> Вы не получите уведомления об откате локальной транзакции, ответственность за управление любыми локальными транзакциями не запущены с использованием <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "Ссылка на существующий <xref href=&quot;System.EnterpriseServices.ITransaction&quot;> </xref> к которому выполняется присоединение."
  overload: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Выполняет присоединение указанной транзакции как распределенной транзакции."
  remarks: 'Метод EnlistTransaction прикреплен к распределенной транзакции. Так как он прикрепляет подключение к <xref:System.Transactions.Transaction>экземпляра, **EnlistTransaction** использует преимущества функций, доступных в <xref:System.Transactions>пространство имен для управления распределенные транзакции, сделав его более предпочтительным, чем **EnlistDistributedTransaction**, которая использует **System.EnterpriseServices.ITransaction** объекта.</xref:System.Transactions> </xref:System.Transactions.Transaction> Он также имеет различную семантику: после явного прикрепления соединения к транзакции, не может быть откреплено или прикреплено в другой транзакции до завершения первой транзакции. Дополнительные сведения о распределенных транзакциях см. в разделе [распределенные транзакции](~/add/includes/ajax-current-ext-md.md).'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Ссылка на существующий <xref href=&quot;System.Transactions.Transaction&quot;> </xref> к которому выполняется присоединение."
  overload: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  id: FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает свойство FireInfoMessageEventOnUserErrors."
  remarks: "Если выбрать значение FireInfoMessageEventOnUserErrors `true`, ошибки, которые были ранее рассматривается как исключения теперь организованы в виде <xref:System.Data.SqlClient.SqlConnection.InfoMessage>события.</xref:System.Data.SqlClient.SqlConnection.InfoMessage> Все события генерируются немедленно и обрабатываются обработчиком событий. Если будет FireInfoMessageEventOnUserErrors равно `false`, затем <xref:System.Data.SqlClient.SqlConnection.InfoMessage>события обрабатываются в конце процедуры.</xref:System.Data.SqlClient.SqlConnection.InfoMessage>      Настроек [!NOTE] настроек ошибки со степенью серьезности 17 и выше, приводит к прекращению обработки команды сервера должна обрабатываться как исключение. В этом случае создается исключение независимо от того, как обрабатывается ошибка в <xref:System.Data.SqlClient.SqlConnection.InfoMessage>событий.</xref:System.Data.SqlClient.SqlConnection.InfoMessage>       Дополнительные сведения о работе с событиями см. в разделе [события соединения](~/add/includes/ajax-current-ext-md.md). Дополнительные сведения об ошибках, вызванных [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] ядра см. в разделе [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации."
  syntax:
    content: public bool FireInfoMessageEventOnUserErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если задано свойство FireInfoMessageEventOnUserErrors; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  id: GetSchema
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает сведения схемы для источника данных этого объекта <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>. Дополнительные сведения о схеме см. в разделе [коллекций схем SQL Server](http://msdn.microsoft.com/library/ms254969.aspx)."
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , содержащий сведения о схеме."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает сведения схемы для источника данных этого объекта <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> используя указанную строку для имени схемы."
  remarks: "Может потребоваться сведения о схеме базы данных, таблиц или столбцов. В этом примере:-GetSchema использует для получения сведений о схеме.      -Используйте ограничения схемы, чтобы получить указанные данные.      — Возвращает сведения о схеме из базы данных, таблицы и столбцы.       Перед запуском примера необходимо создать образец базы данных с помощью следующих [!INCLUDE[tsql](~/add/includes/tsql-md.md)]: ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1045&quot;, 2012, N&quot;Calculus&quot;, 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1061&quot;, 2012, N&quot;Physics&quot;, 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2021&quot;, 2012, N&quot;Composition&quot;, 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2042&quot;, 2012, N&quot;Literature&quot;, 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&quot;Engineering&quot;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&quot;English&quot;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&quot;Economics&quot;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&quot;Mathematics&quot;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ``` [как получить сведения о схеме из базы данных](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) имеет версий этот пример кода C# и Visual Basic в проект Visual Studio.             ```   using System;   using System.Data;   using System.Data.SqlClient;      class Program {      static void Main(string[] args) {            using (SqlConnection conn = new SqlConnection(&quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;&quot;)) {            conn.Open();               // Get the Meta Data for Supported Schema Collections            DataTable metaDataTable = conn.GetSchema(&quot;MetaDataCollections&quot;);               Console.WriteLine(&quot;Meta Data for Supported Schema Collections:&quot;);            ShowDataTable(metaDataTable, 25);            Console.WriteLine();               // Get the schema information of Databases in your instance            DataTable databasesSchemaTable = conn.GetSchema(&quot;Databases&quot;);               Console.WriteLine(&quot;Schema Information of Databases:&quot;);            ShowDataTable(databasesSchemaTable, 25);            Console.WriteLine();               // First, get schema information of all the tables in current database;            DataTable allTablesSchemaTable = conn.GetSchema(&quot;Tables&quot;);               Console.WriteLine(&quot;Schema Information of All Tables:&quot;);            ShowDataTable(allTablesSchemaTable, 20);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Table Type to get             // the specified table(s).            // You can use four restrictions for Table, so you should create a 4 members array.            String[] tableRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Table Type.             // Now we specify the Table Name of the table what we want to get schema information.            tableRestrictions[2] = &quot;Course&quot;;               DataTable courseTableSchemaTable = conn.GetSchema(&quot;Tables&quot;, tableRestrictions);               Console.WriteLine(&quot;Schema Information of Course Tables:&quot;);            ShowDataTable(courseTableSchemaTable, 20);            Console.WriteLine();               // First, get schema information of all the columns in current database.            DataTable allColumnsSchemaTable = conn.GetSchema(&quot;Columns&quot;);               Console.WriteLine(&quot;Schema Information of All Columns:&quot;);            ShowColumns(allColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).            // You can use four restrictions for Column, so you should create a 4 members array.            String[] columnRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            columnRestrictions[2] = &quot;Course&quot;;            columnRestrictions[3] = &quot;DepartmentID&quot;;               DataTable departmentIDSchemaTable = conn.GetSchema(&quot;Columns&quot;, columnRestrictions);               Console.WriteLine(&quot;Schema Information of DepartmentID Column in Course Table:&quot;);            ShowColumns(departmentIDSchemaTable);            Console.WriteLine();               // First, get schema information of all the IndexColumns in current database            DataTable allIndexColumnsSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;);               Console.WriteLine(&quot;Schema Information of All IndexColumns:&quot;);            ShowIndexColumns(allIndexColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to             // get the specified column(s).            // You can use five restrictions for Column, so you should create a 5 members array.            String[] indexColumnsRestrictions = new String[5];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            indexColumnsRestrictions[2] = &quot;Course&quot;;            indexColumnsRestrictions[4] = &quot;CourseID&quot;;               DataTable courseIdIndexSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;, indexColumnsRestrictions);               Console.WriteLine(&quot;Index Schema Information of CourseID Column in Course Table:&quot;);            ShowIndexColumns(courseIdIndexSchemaTable);            Console.WriteLine();         }            Console.WriteLine(&quot;Please press any key to exit...&quot;);         Console.ReadKey();      }         private static void ShowDataTable(DataTable table, Int32 length) {         foreach (DataColumn col in table.Columns) {            Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, col.ColumnName);         }         Console.WriteLine();            foreach (DataRow row in table.Rows) {            foreach (DataColumn col in table.Columns) {               if (col.DataType.Equals(typeof(DateTime)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:d}&quot;, row[col]);               else if (col.DataType.Equals(typeof(Decimal)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:C}&quot;, row[col]);               else                  Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, row[col]);            }            Console.WriteLine();         }      }         private static void ShowDataTable(DataTable table) {         ShowDataTable(table, 14);      }         private static void ShowColumns(DataTable columnsTable) {         var selectedRows = from info in columnsTable.AsEnumerable()                            select new {                               TableCatalog = info[&quot;TABLE_CATALOG&quot;],                               TableSchema = info[&quot;TABLE_SCHEMA&quot;],                               TableName = info[&quot;TABLE_NAME&quot;],                               ColumnName = info[&quot;COLUMN_NAME&quot;],                               DataType = info[&quot;DATA_TYPE&quot;]                            };            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, &quot;TableCatalog&quot;, &quot;TABLE_SCHEMA&quot;,             &quot;TABLE_NAME&quot;, &quot;COLUMN_NAME&quot;, &quot;DATA_TYPE&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, row.TableCatalog,                row.TableSchema, row.TableName, row.ColumnName, row.DataType);         }      }         private static void ShowIndexColumns(DataTable indexColumnsTable) {         var selectedRows = from info in indexColumnsTable.AsEnumerable()                            select new {                               TableSchema = info[&quot;table_schema&quot;],                               TableName = info[&quot;table_name&quot;],                               ColumnName = info[&quot;column_name&quot;],                               ConstraintSchema = info[&quot;constraint_schema&quot;],                               ConstraintName = info[&quot;constraint_name&quot;],                               KeyType = info[&quot;KeyType&quot;]                            };            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, &quot;table_schema&quot;, &quot;table_name&quot;, &quot;column_name&quot;, &quot;constraint_schema&quot;, &quot;constraint_name&quot;, &quot;KeyType&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, row.TableSchema,                row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);         }      }   }   ```"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "Задает имя схемы для возврата."
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , содержащий сведения о схеме."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>задается как значение null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает сведения схемы для источника данных этого объекта <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> используя указанную строку для имени схемы и указанный массив строк для значений ограничений."
  remarks: "`restrictionValues` Можно указать параметр *n* глубину значения, которые указаны в коллекции ограничений для конкретной коллекции. Чтобы задать значения в данном ограничении и не задавать значения в других ограничениях, необходимо задать выше ограничения `null` , а затем указать соответствующее значение в ограничении, необходимо указать значение для.       Примером этого является коллекцией «Таблицы». Если коллекция «Таблицы» имеет три ограничения — база данных, владелец и имя таблицы — и вы хотите вернуть только таблицы, связанные с владельцем «Carl», необходимо передать следующие значения: null, «Carl». Если значение ограничения не передается, для этого ограничения используются значения по умолчанию. Такое же сопоставление соответствует передаче `null`, который отличается от передачи пустой строки для значения параметра. В этом случае пустая строка (&quot;») считается значение указанного параметра.       Пример кода, демонстрирующий GetSchema см. в разделе <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.</xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "Задает имя схемы для возврата."
    - id: restrictionValues
      type: System.String[]
      description: "Набор значений ограничений для запрошенной схемы."
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , содержащий сведения о схеме."
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>задается как значение null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Происходит при [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] возвращает предупреждение или информационное сообщение."
  remarks: "Клиенты, которые нужно обработать предупреждения или информационные сообщения, отправляемые сервером следует создать <xref:System.Data.SqlClient.SqlInfoMessageEventHandler>делегат для прослушивания этого события.</xref:System.Data.SqlClient.SqlInfoMessageEventHandler>       События InfoMessage возникает, когда сообщения со степенью серьезности 10 или меньше, возвращается [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Сообщения с уровнем серьезности от 11 до 20 вызывают ошибки и сообщения с уровнем серьезности превышающем 20 закрытие соединения. Дополнительные сведения о [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] уровни ошибок. в разделе «Степени серьезности ошибок ядра базы данных» в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации.       Дополнительные сведения и пример см. в разделе [события соединения](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.SqlClient.SqlInfoMessageEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Open
  id: Open
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Открывает подключение к базе данных с помощью параметров, заданных в <xref:System.Data.SqlClient.SqlConnection.ConnectionString*>.</xref:System.Data.SqlClient.SqlConnection.ConnectionString*>"
  remarks: "<xref:System.Data.SqlClient.SqlConnection>Удаляет подключение из пула соединений, если он доступен.</xref:System.Data.SqlClient.SqlConnection> В противном случае он устанавливает новое соединение с экземпляром [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)].      Настроек [!NOTE] настроек Если <xref:System.Data.SqlClient.SqlConnection>выходит за границы области, он не закрыт.</xref:System.Data.SqlClient.SqlConnection> Таким образом необходимо явно закрыть подключение путем вызова <xref:System.Data.SqlClient.SqlConnection.Close%2A>.</xref:System.Data.SqlClient.SqlConnection.Close%2A>      Настроек [!NOTE] настроек при указании номер порта 1433, при попытке подключиться к экземпляру компонента [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] и используя протокол, отличный от TCP/IP, метод Open завершается ошибкой. Чтобы указать номер порта 1433, включите «server = ИмяКомпьютера, номер порта» в строку подключения и используйте протокол TCP/IP.      Настроек [!NOTE] настроек [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] требует разрешения безопасности с «позволяет вызовы в неуправляемые сборки» включена (<xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag>значение `UnmanagedCode`) для открытия <xref:System.Data.SqlClient.SqlConnection>в режиме отладки SQL.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._18_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._18_1.cs)]"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удается открыть подключение без указания источника данных или сервера.       или подключение уже открыто."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "При открытии соединения произошла ошибка уровня соединения. Если <> </> *настроек свойство содержит значение 18487 или 18 488, это означает, что указанный пароль истек или необходимо сбросить. В разделе <> </> *настроек метод для получения дополнительной информации.       <xref uid=&quot;langword_csharp_&lt;system.data.localdb&gt;&quot; name=&quot;&lt;system.data.localdb&gt;&quot; href=&quot;&quot;> </xref> Тег в файле app.config имеет недопустимые или неизвестные элементы."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Имеется две записи с тем же именем в <xref uid=&quot;langword_csharp_&lt;localdbinstances&gt;&quot; name=&quot;&lt;localdbinstances&gt;&quot; href=&quot;&quot;> </xref> раздела."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, который открывает подключение к базе данных с параметров, заданных в <> </> *настроек. Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания соединения.  Исключения будут распространяться с помощью возвращаемой задачи. Если время ожидания соединения истекло без успешного подключения, возвращаемая задача будет помечена как сбойная с исключением. Реализация возвращает задачу без блокировки вызывающего потока для пула и вне пула подключений."
  remarks: "После вызова OpenAsync, <xref:System.Data.SqlClient.SqlConnection.State%2A>должен возвращать <xref:System.Data.ConnectionState>до возвращенного <xref:System.Threading.Tasks.Task>завершения.</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A> После этого, если подключение успешно установлено, <xref:System.Data.SqlClient.SqlConnection.State%2A>должны возвращать <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A> При сбое соединения, <xref:System.Data.SqlClient.SqlConnection.State%2A>должны возвращать <xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A>       Вызов <xref:System.Data.SqlClient.SqlConnection.Close%2A>будет предпринята попытка отмены или закрыть соответствующего вызова OpenAsync.</xref:System.Data.SqlClient.SqlConnection.Close%2A>       Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlConnection.OpenAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов OpenAsync более одного раза для того же экземпляра до завершения задачи.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения.       Соединение не было доступно из пула подключений до истечения времени ожидания подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает размер (в байтах) сетевых пакетов, используемых для взаимодействия с экземпляром [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."
  remarks: "Если приложение выполняет массовое копирование или отправляет или получает большие объемы данных типа text или image, размер пакета, большего, чем может повысить эффективность за счет сокращения числа сетевых операций чтения и записи. Если приложение отправляет и получает небольшие объемы информации, можно установить размер пакета в 512 байт (с помощью значения размера пакета в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), что вполне достаточно для большинства операций передачи данных.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> Для большинства приложений оптимальным является размер пакета по умолчанию.       Размер_пакета может иметь значение в диапазоне от 512 до 32767 байт. Если значение находится за пределами этого диапазона, создается исключение.       Изменив значение по умолчанию больше 8000 приведет к тому пакетов для использования в экземпляре распределителя [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] вместо SinglePage распределителя более эффективный способ уменьшения общая масштабируемость [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]. Дополнительные сведения о том, как [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] использует память, в разделе [архитектуры памяти](http://go.microsoft.com/fwlink/?LinkId=143705) в [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] электронной документации."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string. It displays the PacketSize and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._63_1.vb)]\n [!code-cs[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._63_1.cs)]"
  syntax:
    content: public int PacketSize { get; }
    return:
      type: System.Int32
      description: "Размер сетевых пакетов (в байтах). Значение по умолчанию — 8000."
  overload: System.Data.SqlClient.SqlConnection.PacketSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  id: RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Регистрирует поставщиков хранилища ключей шифрования столбца."
  syntax:
    content: public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary<string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider> customProviders);
    parameters:
    - id: customProviders
      type: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
      description: "Настраиваемые поставщики"
  overload: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  id: ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Если сбор статистики разрешен, все значения сбрасываются в нуль."
  remarks: "Если сбор статистики не включена, этот метод вызывается ошибка не выдается."
  syntax:
    content: public void ResetStatistics ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ResetStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  id: RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает коллекцию пар имя значение статистических данных на точку в момент вызова метода."
  remarks: "При вызове этого метода, полученные значения являются те, на текущий момент времени. Если вы продолжите использовать подключение, значения неверны. Необходимо повторно выполнить метод, чтобы получить самые последние значения."
  syntax:
    content: public System.Collections.IDictionary RetrieveStatistics ();
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "Возвращает ссылку типа <xref:System.Collections.IDictionary>из <xref:System.Collections.DictionaryEntry>элементы.</xref:System.Collections.DictionaryEntry> </xref:System.Collections.IDictionary>"
  overload: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает строку, содержащую версию экземпляра [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] к которому подключен клиент."
  remarks: "Версия представляется в виде *##. ##. ###*, где первые две цифры являются основной номер версии, следующие две цифры — дополнительный номер версии, а последние четыре цифры — номер редакции. Строка имеет форму *виде основная.дополнительная.сборка*, где основной и дополнительный номер ровно две цифры и построении строго четыре цифры.       ServerVersion был вызван, когда возвращаемая задача не была завершена, и не было открыто соединение после вызова <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.</xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the ServerVersion property.  \n  \n [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._30_1.vb)]\n [!code-cs[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._30_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "Версия экземпляра [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]."
  overload: System.Data.SqlClient.SqlConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Соединение закрыто.       ServerVersion был вызван, когда возвращаемая задача не была завершена, и не было открыто соединение после вызова <xref:System.Data.SqlClient.SqlConnection.OpenAsync*>.</xref:System.Data.SqlClient.SqlConnection.OpenAsync*>"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.State
  id: State
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Указывает состояние <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> во время последней операции сети выполняется через соединение."
  remarks: "Возвращает <xref:System.Data.ConnectionState>перечисление, указывающее состояние <xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.ConnectionState> Закрытие и повторное открытие соединения обновит значение состояния."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;> </xref> Перечисления."
  overload: System.Data.SqlClient.SqlConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  id: StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Если задано значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, Статистика включает сбор для текущего соединения."
  remarks: "Включение сбор статистики малое, но измеряемое не влияет на производительность и поэтому должны включаться только в том случае, если это требуется."
  syntax:
    content: public bool StatisticsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "Возвращает <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Если сбор статистики включен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>значение по умолчанию."
  overload: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает новый объект, являющийся копией текущего экземпляра."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.SqlClient.SqlConnection>экземпляр приводится к <xref:System.ICloneable>интерфейс.</xref:System.ICloneable> </xref:System.Data.SqlClient.SqlConnection>       Этот элемент поддерживается только в .NET Compact Framework."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Новый объект, являющийся копией этого экземпляра."
  overload: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  id: WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает строку, определяющую клиента базы данных."
  remarks: "Строка обычно содержит сетевое имя клиента. Свойство WorkstationId соответствует `Workstation ID` свойство строки соединения."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the WorkstationId property.  \n  \n [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._7_1.vb)]\n [!code-cs[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._7_1.cs)]"
  syntax:
    content: public string WorkstationId { get; }
    return:
      type: System.String
      description: "Строка, определяющая клиента базы данных. Если не указано имя клиентского компьютера. Если ничего не указано, значение является пустой строкой."
  overload: System.Data.SqlClient.SqlConnection.WorkstationId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Data.SqlClient.SqlConnection.#ctor
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
- uid: System.Data.SqlClient.SqlCredential
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCredential
  nameWithType: SqlCredential
  fullName: System.Data.SqlClient.SqlCredential
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlConnection.Close
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,IList<String>>
  nameWithType: IDictionary<String,IList<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
- uid: System.Data.SqlClient.SqlInfoMessageEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlInfoMessageEventHandler
  nameWithType: SqlInfoMessageEventHandler
  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler
- uid: System.Data.SqlClient.SqlConnection.Open
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  nameWithType: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider
    name: SqlColumnEncryptionKeyStoreProvider
    nameWithType: SqlColumnEncryptionKeyStoreProvider
    fullName: SqlColumnEncryptionKeyStoreProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
- uid: System.Data.SqlClient.SqlConnection.#ctor*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.AccessToken*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: SqlConnection.BeginDbTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: SqlConnection.BeginTransaction
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: SqlConnection.ChangeDatabase
- uid: System.Data.SqlClient.SqlConnection.ChangePassword*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword
  nameWithType: SqlConnection.ChangePassword
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools
  nameWithType: SqlConnection.ClearAllPools
- uid: System.Data.SqlClient.SqlConnection.ClearPool*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool
  nameWithType: SqlConnection.ClearPool
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
- uid: System.Data.SqlClient.SqlConnection.Close*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close
  nameWithType: SqlConnection.Close
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Data.SqlClient.SqlConnection.ConnectionString*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
- uid: System.Data.SqlClient.SqlConnection.CreateCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand
  nameWithType: SqlConnection.CreateCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: SqlConnection.CreateDbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose
  nameWithType: SqlConnection.Dispose
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: SqlConnection.EnlistDistributedTransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: SqlConnection.EnlistTransaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema
  nameWithType: SqlConnection.GetSchema
- uid: System.Data.SqlClient.SqlConnection.Open*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open
  nameWithType: SqlConnection.Open
- uid: System.Data.SqlClient.SqlConnection.OpenAsync*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync
  nameWithType: SqlConnection.OpenAsync
- uid: System.Data.SqlClient.SqlConnection.PacketSize*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics
  nameWithType: SqlConnection.ResetStatistics
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics
  nameWithType: SqlConnection.RetrieveStatistics
- uid: System.Data.SqlClient.SqlConnection.ServerVersion*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlConnection.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlConnection.WorkstationId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
