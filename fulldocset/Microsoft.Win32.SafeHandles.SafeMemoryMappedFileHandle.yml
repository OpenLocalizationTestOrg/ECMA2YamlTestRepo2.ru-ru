### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  id: SafeMemoryMappedFileHandle
  children:
  - Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle
  langs:
  - csharp
  name: SafeMemoryMappedFileHandle
  nameWithType: SafeMemoryMappedFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  type: Class
  summary: "Предоставляет безопасный дескриптор, представляющий размещенный в памяти файл для последовательного доступа."
  remarks: "Используйте <xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName>, чтобы получить безопасный дескриптор.</xref:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle%2A?displayProperty=fullName>      Настроек [!IMPORTANT] настроек этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A>метод в `try` / `catch` блока.</xref:System.IDisposable.Dispose%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public sealed class SafeMemoryMappedFileHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  implements: []
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle()
  type: Method
  assemblies:
  - System.Core
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: "Для добавления."
  overload: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle.ReleaseHandle*
  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafeMemoryMappedFileHandle.ReleaseHandle
