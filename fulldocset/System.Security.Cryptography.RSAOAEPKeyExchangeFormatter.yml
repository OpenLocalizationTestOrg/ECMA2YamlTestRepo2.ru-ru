### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  id: RSAOAEPKeyExchangeFormatter
  children:
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  - System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter
  nameWithType: RSAOAEPKeyExchangeFormatter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  type: Class
  summary: "Создает данные обмена ключами Optimal Asymmetric Encryption Padding (OAEP) с помощью <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref>."
  remarks: "Обмен ключами позволяет отправителю создавать секретные сведения, например, случайные данные, которые можно использовать в качестве ключа в алгоритм симметричного шифрования, а также использовать шифрование для его отправки предполагаемому получателю.       Использовать <xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter>для получения данных обмена ключами и извлечения секретных сведений на его основе.</xref:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter>      Настроек [!CAUTION] настроек настоятельно рекомендуется не пытайтесь создать собственный метод обмена ключами из основные функциональные возможности, предоставляемые, так как многие элементы операции должны выполняться в порядке, для успешного обмена ключами."
  example:
  - "The following example shows how to use the RSAOAEPKeyExchangeFormatter class to create an exchange key for a message recipient.  \n  \n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter2#1](~/add/codesnippet/visualbasic/t-system.security.crypto_2_1.vb)]\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter2#1](~/add/codesnippet/csharp/t-system.security.crypto_2_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class RSAOAEPKeyExchangeFormatter : System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter()
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.RSAOAEPKeyExchangeFormatter&quot;> </xref> класса."
  remarks: "Используйте, <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A>Чтобы задать ключ перед вызовом <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.</xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A> </xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey%2A>"
  syntax:
    content: public RSAOAEPKeyExchangeFormatter ();
    parameters: []
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  id: '#ctor(System.Security.Cryptography.AsymmetricAlgorithm)'
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Cryptography.RSAOAEPKeyExchangeFormatter&quot;> </xref> класса с указанным ключом."
  syntax:
    content: public RSAOAEPKeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "Экземпляр <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> алгоритм, который содержит открытый ключ."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  id: CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Создает зашифрованные данные обмена ключами из указанных входных данных."
  remarks: "Эти данные могут интерпретироваться только владельцем закрытого ключа, соответствующий открытый ключ, используемый для шифрования данных. Это помогает обеспечить доступность секретных сведений только назначенные пользователи."
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "Секретные сведения, которые будут переданы при обмене ключами."
    return:
      type: System.Byte[]
      description: "Зашифрованные данные обмена ключами для отправки предполагаемому получателю."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  exceptions:
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: "Ключ отсутствует."
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  id: CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Создает зашифрованные данные обмена ключами из указанных входных данных."
  remarks: "Эти данные могут интерпретироваться только владельцем закрытого ключа, соответствующий открытый ключ, используемый для шифрования данных. Это помогает обеспечить доступность секретных сведений только назначенные пользователи."
  example:
  - "The following example shows how to use the CreateKeyExchange method to create an exchange key for a message recipient. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class  \n  \n [!code-vb[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/visualbasic/e7a8d1c6-9b0b-4f61-908b-_1.vb)]\n [!code-cs[System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter2#2](~/add/codesnippet/csharp/e7a8d1c6-9b0b-4f61-908b-_1.cs)]"
  syntax:
    content: public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);
    parameters:
    - id: rgbData
      type: System.Byte[]
      description: "Секретные сведения, которые будут переданы при обмене ключами."
    - id: symAlgType
      type: System.Type
      description: "Этот параметр не используется в текущей версии."
    return:
      type: System.Byte[]
      description: "Зашифрованные данные обмена ключами для отправки предполагаемому получателю."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  id: Parameter
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Parameter
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает или задает параметр, используемый для создания Отбивки при создании процесса обмена ключами."
  remarks: ''
  example:
  - "The following code example demonstrates how to set the Parameter property to an <xref:System.Security.Cryptography.RSAParameters.InverseQ> field. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/cpp/p-system.security.crypto_13_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/csharp/p-system.security.crypto_13_1.cs)]\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#7](~/add/codesnippet/visualbasic/p-system.security.crypto_13_1.vb)]"
  syntax:
    content: public byte[] Parameter { get; set; }
    return:
      type: System.Byte[]
      description: "Значение параметра."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  id: Parameters
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Parameters
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Получает параметры для обмена ключами Optimal Asymmetric Encryption Padding (OAEP)."
  remarks: ''
  example:
  - "The following code example demonstrates how to call the Parameters property to retrieve an XML representation of the parameters. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/cpp/p-system.security.crypto_32_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/csharp/p-system.security.crypto_32_1.cs)]\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#13](~/add/codesnippet/visualbasic/p-system.security.crypto_32_1.vb)]"
  syntax:
    content: public override string Parameters { get; }
    return:
      type: System.String
      description: "XML-строка, содержащая параметры операции обмена ключами OAEP."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  id: Rng
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: Rng
  nameWithType: RSAOAEPKeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Возвращает или задает алгоритм генерации случайных чисел для использования при создании механизма обмена ключами."
  remarks: "Если это свойство имеет `null`, используется стандартный алгоритм генератора случайных чисел."
  example:
  - "The following code example demonstrates how to set the Rng property to a random number. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/cpp/p-system.security.crypto_66_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/csharp/p-system.security.crypto_66_1.cs)]\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#6](~/add/codesnippet/visualbasic/p-system.security.crypto_66_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "Экземпляр алгоритма генерации случайных чисел."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  id: SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  langs:
  - csharp
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Задает открытый ключ, используемый для шифрования данных обмена ключами."
  remarks: "Необходимо задать ключ перед вызовом <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>.</xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange%2A>"
  example:
  - "The following code example demonstrates how to use the SetKey method to set an <xref:System.Security.Cryptography.RSA> key for decryption. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter> class.  \n  \n [!code-cpp[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/cpp/dd00e0f5-dd0a-425b-b20a-_1.cpp)]\n [!code-cs[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/csharp/dd00e0f5-dd0a-425b-b20a-_1.cs)]\n [!code-vb[System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter#5](~/add/codesnippet/visualbasic/dd00e0f5-dd0a-425b-b20a-_1.vb)]"
  syntax:
    content: public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "Экземпляр <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> алгоритм, который содержит открытый ключ."
  overload: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
  isExternal: false
  name: System.Security.Cryptography.AsymmetricKeyExchangeFormatter
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: RSAOAEPKeyExchangeFormatter()
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter()
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[])
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange(Byte[],Type)
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(Byte[],Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameter
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Rng
  nameWithType: RSAOAEPKeyExchangeFormatter.Rng
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  nameWithType: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: SetKey(AsymmetricAlgorithm)
  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: RSAOAEPKeyExchangeFormatter
  nameWithType: RSAOAEPKeyExchangeFormatter.RSAOAEPKeyExchangeFormatter
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: CreateKeyExchange
  nameWithType: RSAOAEPKeyExchangeFormatter.CreateKeyExchange
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameter
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameter
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Parameters
  nameWithType: RSAOAEPKeyExchangeFormatter.Parameters
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: Rng
  nameWithType: RSAOAEPKeyExchangeFormatter.Rng
- uid: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey*
  parent: System.Security.Cryptography.RSAOAEPKeyExchangeFormatter
  isExternal: false
  name: SetKey
  nameWithType: RSAOAEPKeyExchangeFormatter.SetKey
