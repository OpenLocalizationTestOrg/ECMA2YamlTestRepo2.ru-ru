### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogInstaller
  id: EventLogInstaller
  children:
  - System.Diagnostics.EventLogInstaller.#ctor
  - System.Diagnostics.EventLogInstaller.CategoryCount
  - System.Diagnostics.EventLogInstaller.CategoryResourceFile
  - System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Diagnostics.EventLogInstaller.Log
  - System.Diagnostics.EventLogInstaller.MessageResourceFile
  - System.Diagnostics.EventLogInstaller.ParameterResourceFile
  - System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.Source
  - System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  - System.Diagnostics.EventLogInstaller.UninstallAction
  langs:
  - csharp
  name: EventLogInstaller
  nameWithType: EventLogInstaller
  fullName: System.Diagnostics.EventLogInstaller
  type: Class
  summary: "Позволяет установить и настроить журнал событий, ваше приложение считывает из или записи данных при запуске."
  remarks: "The EventLogInstaller is used by the [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) when installing an event log. The EventLogInstaller class can install event logs only on the local computer.  \n  \n Use the EventLogInstaller class when your application writes to an event log; it is not necessary to use an event log installer for your application to read from an event log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n The installer creates the event source that you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property and registers it for the event log specified in <xref:System.Diagnostics.EventLogInstaller.Log%2A> property. This behavior is similar to calling <xref:System.Diagnostics.EventLog.CreateEventSource%2A> on the <xref:System.Diagnostics.EventLog> component.  \n  \n Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> methods to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configurations. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an EventLogInstaller, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n To install an event log, create a project installer class that inherits from <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`. Within your project, create an EventLogInstaller for each event log that your application will write to and add the instance to your project installer class.  \n  \n When the [Installutil.exe (Installer Tool)](../Topic/Installutil.exe%20\\(Installer%20Tool\\).md) is called, it looks at the <xref:System.ComponentModel.RunInstallerAttribute>. If it is `true`, the tool installs all the items in the <xref:System.Configuration.Install.Installer.Installers%2A> collection that are associated with your project installer. If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the tool ignores the project installer.  \n  \n You modify other properties of an EventLogInstaller either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer, but before the installer tool runs. You must set the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property if your application will be writing to the event log.  \n  \n Use EventLogInstaller to register a new source for a new or existing event log; do not use EventLogInstaller to change an existing source. The EventLogInstaller class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the <xref:System.Diagnostics.EventLogInstaller.Log%2A> property.  \n  \n You can register the event source with localized resource files for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages, and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>, <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventLogInstaller.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Create a different source without resource files and then use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n Typically, you do not call the methods of the EventLogInstaller class from within your code; they are generally called only by Installutil.exe. The tool automatically calls the <xref:System.Diagnostics.EventLogInstaller.Install%2A> method during the installation process. It backs out failures, if necessary, by calling the <xref:System.Diagnostics.EventLogInstaller.Rollback%2A> method for the object that generated the exception."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the source name and the event log name, and adds the EventLogInstaller to the <xref:System.Configuration.Install.Installer.Installers%2A> collection.  \n  \n [!code-cpp[EventLogInstaller#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_5_1.cpp)]\n [!code-cs[EventLogInstaller#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_5_1.cs)]\n [!code-vb[EventLogInstaller#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_5_1.vb)]"
  syntax:
    content: 'public class EventLogInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.HelpText
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
  type: Constructor
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref> класса."
  syntax:
    content: public EventLogInstaller ();
    parameters: []
  overload: System.Diagnostics.EventLogInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает число категорий в файле ресурсов категории."
  remarks: "Использовать CategoryCount и <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>Свойства для записи событий с локализованные строки категории.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A> Средство просмотра событий отображает категорию для записи события, если указать категорию при написании события. Категории журнала событий — это определенные приложением строки, помогающие проводить фильтрацию событий или содержат сведения о событии. Например приложение может определить отдельные категории для различных компонентов или операций.       Категории событий являются необязательными. Если приложение использует категории, не устанавливайте CategoryCount и <xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>Свойства.</xref:System.Diagnostics.EventLogInstaller.CategoryResourceFile%2A>       Дополнительные сведения об определении сообщения о событиях и построению файлов ресурсов, см. в разделе «Сообщения компилятора» в документации Platform SDK в [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_14_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_14_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "Число категорий в файле ресурсов категории. Значение по умолчанию равно нулю."
  overload: System.Diagnostics.EventLogInstaller.CategoryCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает путь к файлу ресурсов, содержащему строки категорий для источника."
  remarks: "Используйте <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>и CategoryResourceFile свойства для записи событий с локализованные строки категории.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A> Средство просмотра событий отображает категории для записи события, если указать категорию при написании события. Категории журнала событий — это определенные приложением строки, помогающие проводить фильтрацию событий или предоставить сведения о событии. Например приложение может иметь отдельные категории для различных компонентов или операций.       Категории событий являются необязательными. Если приложение использует категории, не устанавливайте <xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>и свойства CategoryResourceFile.</xref:System.Diagnostics.EventLogInstaller.CategoryCount%2A>       Дополнительные сведения об определении сообщения о событиях и построению файлов ресурсов, см. в разделе «Сообщения компилятора» в документации Platform SDK в [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_22_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_22_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_22_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "Путь к файлу ресурсов категории. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Копирует значения свойств <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> компонента, которые требуются во время установки для журнала событий."
  remarks: "Компонент, заданный параметром `component` параметр должен быть <xref:System.Diagnostics.EventLog>; в противном случае создается исключение.</xref:System.Diagnostics.EventLog>       Как правило, не следует вызывать методы <xref:System.Diagnostics.EventLogInstaller>из вашей программы; они обычно вызываются только [Installutil.exe (установщик)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> CopyFromComponent используется программой Installutil.exe для установки значений свойств для <xref:System.Diagnostics.EventLogInstaller>значения существующих <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLogInstaller>       Если <xref:System.Diagnostics.EventLog.Log%2A>из <xref:System.Diagnostics.EventLog>, переданный — пустая строка (&quot;»), необходимо задать <xref:System.Diagnostics.EventLog.Log%2A>Свойства на допустимое значение перед выполнением установки.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> Для использования в качестве шаблона для <xref href=&quot;System.Diagnostics.EventLogInstaller&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Указанный компонент не является <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>.       - или - <> </> *настроек или <> </> *настроек указанного компонента, равно либо <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустым."
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Выполняет установку и записывает сведения о журнале событий в реестре."
  remarks: "Метод установки записывает сведения о журнале событий в реестр и связывает журнал событий с журнала, который задается параметром <xref:System.Diagnostics.EventLogInstaller.Log%2A>свойство.</xref:System.Diagnostics.EventLogInstaller.Log%2A> Если журнал еще не существует (указывается источник), установка создает журнал и связывается с новым источником.       Как правило, не следует вызывать методы <xref:System.Diagnostics.EventLogInstaller>из вашей программы; они обычно вызываются только [Installutil.exe (установщик)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> Средство автоматически вызывает метод установки во время установки для записи реестра сведения, связанные с установленным журналом событий. Установка является транзакционной, так что в случае сбоя любого компонента проекта во время установки, выполняется откат всех ранее установленные компоненты в состояние до установки. Это достигается путем вызова каждого компонента <xref:System.Diagnostics.EventLogInstaller.Rollback%2A>метод.</xref:System.Diagnostics.EventLogInstaller.Rollback%2A>       Используйте <xref:System.Diagnostics.EventLogInstaller>для регистрации нового источника для нового или существующего журнала событий; не используйте <xref:System.Diagnostics.EventLogInstaller>для изменения существующего источника.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller>Класса не изменяет свойства существующего источника для сопоставления свойства указанного установки конфигурации.</xref:System.Diagnostics.EventLogInstaller> Метод установки вызывает исключение, если <xref:System.Diagnostics.EventLogInstaller.Source%2A>соответствует имени источника, зарегистрированного для другой журнал событий на компьютере.</xref:System.Diagnostics.EventLogInstaller.Source%2A> Метод установки пропускает регистрации источника, если <xref:System.Diagnostics.EventLogInstaller.Source%2A>соответствует имени источника, которая уже зарегистрирована для того же журнал событий, указанный в <xref:System.Diagnostics.EventLogInstaller.Log%2A>свойство.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Source%2A>       Программа установки приложения использует установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>свойство для автоматического сохранения сведений о компонентах, которые уже были установлены.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Сведения о состоянии, который передается для установки как `stateSaver` параметра, постоянно обновляется каждый <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> установлено средство Обычно не требуется явно изменять сведения о состоянии в коде."
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Используется для сохранения информации, необходимой для выполнения отката или отмены.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Install*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Платформы, для которой программа установки пытается использовать не Windows NT 4.0 или более поздней версии."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Имя, указанное в <xref:System.Diagnostics.EventLogInstaller.Source*>свойство уже зарегистрировано в журнале различных событий.</xref:System.Diagnostics.EventLogInstaller.Source*>"
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  id: IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Определяет, ссылаются ли установщика и другой указанный установщик с одним источником."
  remarks: "Как правило, не следует вызывать методы <xref:System.Diagnostics.EventLogInstaller>из кода; они обычно вызываются только инструментом для установки (Installutil.exe).</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);
    parameters:
    - id: otherInstaller
      type: System.Configuration.Install.ComponentInstaller
      description: "Установщик для сравнения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот установщик и установщик, заданный параметром <code> otherInstaller </code> параметра должны устанавливать или удалять тот же источник; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Log
  id: Log
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя журнала, чтобы в качестве источника."
  remarks: "You can use the Log property to associate the source you specify in the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property with either an existing log or a new log on the local computer. The [Installutil.exe (Installer Tool)](~/add/includes/ajax-current-ext-md.md) uses this information to map the source to the log in the computer's registry. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log.  \n  \n To write entries to an event log, you must create a source and register it with an event log. An event source can only write to one log at a time. The installer uses the value of the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property to register your application with the event log as a valid source of entries. If you do not specify a log name before the installer runs, the installer registers your source to the Application log. If you specify a new source and an existing log, the installer creates a new event source and associates it with the log you specify. If you specify both a new source and a new log, the installer associates the new source with the new log in the registry, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n Use <xref:System.Diagnostics.EventLogInstaller> to register a new source for a new or existing event log; do not use <xref:System.Diagnostics.EventLogInstaller> to change an existing source. The <xref:System.Diagnostics.EventLogInstaller> class does not modify the configuration properties of an existing source to match the specified installation properties. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method throws an exception if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is registered for a different event log on the computer. The <xref:System.Diagnostics.EventLogInstaller.Install%2A> method does not register the source if the <xref:System.Diagnostics.EventLogInstaller.Source%2A> property matches a source name that is already registered for the same event log specified in the Log property.  \n  \n For more detailed information about the behaviors of event logs and sources, see the <xref:System.Diagnostics.EventLog> class documentation for the <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.Source%2A> properties."
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "Имя журнала. Это может быть приложение, System или имя пользовательского журнала. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLogInstaller.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает путь к файлу ресурсов, содержащему строки форматирования сообщений для источника."
  remarks: "Use the MessageResourceFile property to configure an event log source to write localized event messages. Event messages are application-defined strings that describe the event to the user.  \n  \n Your application can write event log entries using resource identifiers. A resource identifier indexes a message located in the MessageResourceFile. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings.  \n  \n The event source must be configured either for writing localized entries or for writing direct strings. Use the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write localized entries for a source configured with a message resource file.  \n  \n If your application writes event message strings directly, rather than using a resource identifier in a localized resource file, do not set the MessageResourceFile property.  \n  \n If the <xref:System.Diagnostics.EventLog.MachineName%2A> property is not the local computer identifier (\".\"), the .NET Framework assumes that the resource file is on a remote computer. If the MessageResourceFile property value contains a drive letter, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\\\<drive\\>$ share (for example, \\\\\\server\\c$). If the value contains the string %systemroot%, the resource file is assumed to be on the \\\\\\\\<machinename\\>\\admin$ share (for example, \\\\\\server\\admin$).  \n  \n For details about defining event messages and building event resource files, see the \"Message Compiler\" topic in the Platform SDK documentation at [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_9_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_9_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_9_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "Путь файла ресурсов сообщения. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает путь к файлу ресурсов, содержащему строки параметров сообщения для источника."
  remarks: "Свойство ParameterResourceFile настроить источник журнала событий для записи локализованных событий сообщений с параметр вставленных строк. Каждое сообщение локализованных событий, указанного в <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>свойство может содержать заполнители для вставки строк.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A> Эти заполнители используются для указания позиции и идентификатор ресурса для независимой от языка строки в сообщении о событии. Средство просмотра событий замещающий текст с соответствующих строк из ParameterResourceFile и форматирует сообщения журнала событий для записи локализованных событий.       Например, следующий раздел текстового файла сообщения определяет строку с заполнителем параметров: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` в параметре файла ресурсов строка вставки должен быть определен с идентификатор ресурса, который соответствует рамку, как показано ниже: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` необходимо настроить источник события для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи локализованных данных для источника, настроенных с помощью файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает строки сообщения события напрямую в журнал событий или в случае, если ваш <xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>не содержит сообщений с помощью заполнителей параметров вставки, не устанавливайте свойство ParameterResourceFile.</xref:System.Diagnostics.EventLogInstaller.MessageResourceFile%2A>       Дополнительные сведения об определении сообщения о событиях и построению файлов ресурсов, см. в разделе «Сообщения компилятора» в документации Platform SDK в [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example sets the installation properties for a new event source. The code example sets the event source name, event log name, and resource file for localized event text.  \n  \n [!code-cs[EventLogInstaller_Resources#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_26_1.cs)]\n [!code-vb[EventLogInstaller_Resources#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_26_1.vb)]\n [!code-cpp[EventLogInstaller_Resources#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_26_1.cpp)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "Путь к параметру файла ресурсов. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Восстанавливает компьютер до состояния, в котором он находился до установки с помощью отката сведения журнала событий, записанных в реестр процедуру установки."
  remarks: "Метод Rollback отменяет действия <xref:System.Diagnostics.EventLogInstaller.Install%2A>метод.</xref:System.Diagnostics.EventLogInstaller.Install%2A> Откат вызывается в том случае, если происходит сбой установки любой компонент в проекте. <xref:System.Diagnostics.EventLogInstaller.Install%2A>Метод создает или задает свойства для журнала событий и источника событий.</xref:System.Diagnostics.EventLogInstaller.Install%2A> Откат удаляет журнал событий и источник или устанавливает его перед установкой значения для свойств существующего источника.       Как правило, не следует вызывать методы <xref:System.Diagnostics.EventLogInstaller>из вашей программы; они обычно вызываются только [Installutil.exe (установщик)](~/add/includes/ajax-current-ext-md.md).</xref:System.Diagnostics.EventLogInstaller> Средство вызывает метод Rollback, при сбое этой или другой компонент для установки, чтобы отменить все изменения, которые уже сделанных в процессе установки.       Программа установки приложения использует установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>свойство для автоматического сохранения сведений о компонентах, которые уже были установлены.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Сведения о состоянии, передаваемое отката как `savedState` постоянно обновляется параметр как средство выполняет откат каждой <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> Обычно не требуется явно изменять сведения о состоянии в коде."
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>, Содержащий состояние компьютера до установки.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Rollback*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Source
  id: Source
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя источника, регистрируемого в журнале."
  remarks: "Источник событий определяет, какие события в журнал. Часто это имя приложения или имя компонента в больших приложениях.       Установщик использует значение свойства Source для регистрации приложения в журнале событий как источник записей. Имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий. Каждый источник может записывать только одного журнала событий во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.       Приложения и службы должны запись в журнал приложения или пользовательский журнал. Драйверы устройств необходимо создавать в системном журнале. Если имя журнала перед запуском установщика не указано, источник регистрируется в журнале приложений. Если указать имя журнала, который не существует, система регистрирует источник для этого журнала, но журнал не создается до первой записи на него.       Используйте <xref:System.Diagnostics.EventLogInstaller>для регистрации нового источника для нового или существующего журнала событий; не используйте <xref:System.Diagnostics.EventLogInstaller>для изменения существующего источника.</xref:System.Diagnostics.EventLogInstaller> </xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller>Класса не изменяет свойства существующего источника для сопоставления свойства указанного установки конфигурации.</xref:System.Diagnostics.EventLogInstaller> <xref:System.Diagnostics.EventLogInstaller.Install%2A>Метод создает исключение, если свойство Source соответствует имени источника, зарегистрированного для другой журнал событий на компьютере.</xref:System.Diagnostics.EventLogInstaller.Install%2A> <xref:System.Diagnostics.EventLogInstaller.Install%2A>Метод не зарегистрировать источник, если свойство Source соответствует имени источника, которая уже зарегистрирована для того же журнал событий, указанный в <xref:System.Diagnostics.EventLogInstaller.Log%2A>свойство.</xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.Install%2A>       Дополнительные сведения о поведении журналов и источников см. в разделе <xref:System.Diagnostics.EventLog>документации для класса <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.Source%2A>Свойства.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Имя для регистрации в журнале событий как имя источника записей. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLogInstaller.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  id: Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
  type: Method
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Отменяет установку путем удаления из реестра сведения о журнале событий."
  remarks: "Если <xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>значение свойства `Remove`, метод удаления удаляет источник и связанный с ним журнала, созданный установщиком <xref:System.Diagnostics.EventLogInstaller.Log%2A>и <xref:System.Diagnostics.EventLogInstaller.Source%2A>свойства указаны Создание нового журнала событий и источника.</xref:System.Diagnostics.EventLogInstaller.Source%2A> </xref:System.Diagnostics.EventLogInstaller.Log%2A> </xref:System.Diagnostics.EventLogInstaller.UninstallAction%2A>       Как правило, не следует вызывать методы <xref:System.Diagnostics.EventLogInstaller>из вашей программы; они обычно вызываются только [Installutil.exe (установщик)](~/add/includes/ajax-current-ext-md.md) в режиме удаления.</xref:System.Diagnostics.EventLogInstaller> Средство автоматически вызывает метод удаления для восстановления части системы, которые повлияла установка, в их состояние до установки. Это включает и удаление из реестра сведения, связанные с удаляемым журналом событий.       Удалить приложение, служит установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>свойство для автоматического сохранения сведений о компонентах, которые уже был удален.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Сведения о состоянии, который передается удаления как `savedState` постоянно обновляется параметр как средство удаляет каждого <xref:System.Diagnostics.EventLogInstaller>.</xref:System.Diagnostics.EventLogInstaller> Обычно не требуется явно изменять сведения о состоянии в коде."
  syntax:
    content: public override void Uninstall (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>, Содержащий состояние компьютера до установки.</xref:System.Collections.IDictionary>"
  overload: System.Diagnostics.EventLogInstaller.Uninstall*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  id: UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  langs:
  - csharp
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
  type: Property
  assemblies:
  - System.Configuration.Install
  namespace: System.Diagnostics
  summary: "Возвращает или задает значение, указывающее, является ли [Installutil.exe (установщик)](~/add/includes/ajax-current-ext-md.md) следует удалить журнал событий или оставить его в текущем состоянии во время установки."
  remarks: "При установке журнала событий, его можно связать существующий журнал. Если сделать это, необходимо решить ли журнал вернуться в состояние до установки или остаются в состоянии текущего, после установки. Если нужно вернуться в состояние до установки журнала событий изменения записей журнала событий во время установки, не восстанавливаются. Вы можете сбросить свойства журнала событий, связанных с <xref:System.Diagnostics.EventLogInstaller>значениями до установки.</xref:System.Diagnostics.EventLogInstaller>"
  syntax:
    content: public System.Configuration.Install.UninstallAction UninstallAction { get; set; }
    return:
      type: System.Configuration.Install.UninstallAction
      description: "Один из <xref href=&quot;System.Configuration.Install.UninstallAction&quot;> </xref> значения, которое указывает, в журнал событий в при каком состоянии <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> удаляется. Значение по умолчанию — <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLogInstaller.UninstallAction*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "UninstallAction содержит недопустимое значение. Допустимы только значения для этого свойства <xref uid=&quot;langword_csharp_Remove&quot; name=&quot;Remove&quot; href=&quot;&quot;> </xref> и <xref uid=&quot;langword_csharp_NoAction&quot; name=&quot;NoAction&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventLogInstaller.#ctor
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller()
  nameWithType: EventLogInstaller.EventLogInstaller()
  fullName: System.Diagnostics.EventLogInstaller.EventLogInstaller()
- uid: System.Diagnostics.EventLogInstaller.CategoryCount
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
  fullName: System.Diagnostics.EventLogInstaller.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
  fullName: System.Diagnostics.EventLogInstaller.CategoryResourceFile
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: EventLogInstaller.CopyFromComponent(IComponent)
  fullName: System.Diagnostics.EventLogInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.Diagnostics.EventLogInstaller.Install(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: EventLogInstaller.Install(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller(ComponentInstaller)
  nameWithType: EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
  fullName: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller(ComponentInstaller)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogInstaller.Log
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
  fullName: System.Diagnostics.EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
  fullName: System.Diagnostics.EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
  fullName: System.Diagnostics.EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: EventLogInstaller.Rollback(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Rollback(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.Source
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
  fullName: System.Diagnostics.EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall(System.Collections.IDictionary)
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall(IDictionary)
  nameWithType: EventLogInstaller.Uninstall(IDictionary)
  fullName: System.Diagnostics.EventLogInstaller.Uninstall(IDictionary)
- uid: System.Diagnostics.EventLogInstaller.UninstallAction
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
  fullName: System.Diagnostics.EventLogInstaller.UninstallAction
- uid: System.Configuration.Install.UninstallAction
  parent: System.Configuration.Install
  isExternal: false
  name: UninstallAction
  nameWithType: UninstallAction
  fullName: System.Configuration.Install.UninstallAction
- uid: System.Diagnostics.EventLogInstaller.#ctor*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: EventLogInstaller
  nameWithType: EventLogInstaller.EventLogInstaller
- uid: System.Diagnostics.EventLogInstaller.CategoryCount*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryCount
  nameWithType: EventLogInstaller.CategoryCount
- uid: System.Diagnostics.EventLogInstaller.CategoryResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventLogInstaller.CategoryResourceFile
- uid: System.Diagnostics.EventLogInstaller.CopyFromComponent*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: EventLogInstaller.CopyFromComponent
- uid: System.Diagnostics.EventLogInstaller.Install*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Install
  nameWithType: EventLogInstaller.Install
- uid: System.Diagnostics.EventLogInstaller.IsEquivalentInstaller*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: IsEquivalentInstaller
  nameWithType: EventLogInstaller.IsEquivalentInstaller
- uid: System.Diagnostics.EventLogInstaller.Log*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Log
  nameWithType: EventLogInstaller.Log
- uid: System.Diagnostics.EventLogInstaller.MessageResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventLogInstaller.MessageResourceFile
- uid: System.Diagnostics.EventLogInstaller.ParameterResourceFile*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventLogInstaller.ParameterResourceFile
- uid: System.Diagnostics.EventLogInstaller.Rollback*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Rollback
  nameWithType: EventLogInstaller.Rollback
- uid: System.Diagnostics.EventLogInstaller.Source*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Source
  nameWithType: EventLogInstaller.Source
- uid: System.Diagnostics.EventLogInstaller.Uninstall*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: Uninstall
  nameWithType: EventLogInstaller.Uninstall
- uid: System.Diagnostics.EventLogInstaller.UninstallAction*
  parent: System.Diagnostics.EventLogInstaller
  isExternal: false
  name: UninstallAction
  nameWithType: EventLogInstaller.UninstallAction
