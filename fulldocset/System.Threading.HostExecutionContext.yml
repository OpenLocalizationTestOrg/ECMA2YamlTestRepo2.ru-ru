### YamlMime:ManagedReference
items:
- uid: System.Threading.HostExecutionContext
  id: HostExecutionContext
  children:
  - System.Threading.HostExecutionContext.#ctor
  - System.Threading.HostExecutionContext.#ctor(System.Object)
  - System.Threading.HostExecutionContext.CreateCopy
  - System.Threading.HostExecutionContext.Dispose
  - System.Threading.HostExecutionContext.Dispose(System.Boolean)
  - System.Threading.HostExecutionContext.State
  langs:
  - csharp
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
  type: Class
  summary: "Инкапсулирует и распространяет контекст выполнения хоста по потокам."
  remarks: "HostExecutionContext является частью большего <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> Контекст узла переносит или потоки с контекстом выполнения."
  syntax:
    content: 'public class HostExecutionContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor
  id: '#ctor'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> класса."
  remarks: "Конструктор по умолчанию создает контекста выполнения хоста, <xref:System.Threading.HostExecutionContext.State%2A>значение свойства `null`.</xref:System.Threading.HostExecutionContext.State%2A>"
  syntax:
    content: public HostExecutionContext ();
    parameters: []
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> класса с помощью указанного состояния."
  remarks: "<xref:System.Threading.HostExecutionContext>Входит в состав <xref:System.Threading.ExecutionContext>.</xref:System.Threading.ExecutionContext> </xref:System.Threading.HostExecutionContext> `state` Представляет значение, содержащее безопасный дескриптор `IUnknown` указатель для узла."
  syntax:
    content: public HostExecutionContext (object state);
    parameters:
    - id: state
      type: System.Object
      description: "Объект, представляющий состояние контекста выполнения хоста."
  overload: System.Threading.HostExecutionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Создает копию текущего контекста выполнения узла."
  remarks: "Копию можно использовать в качестве параметра <xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>вызова метода.</xref:System.Threading.HostExecutionContextManager.SetHostExecutionContext%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.HostExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.HostExecutionContext
      description: "Объект <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> объект, представляющий контекст хост-сайта для текущего потока."
  overload: System.Threading.HostExecutionContext.CreateCopy*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Освобождает все ресурсы, используемые текущим экземпляром <xref href=&quot;System.Threading.HostExecutionContext&quot;> </xref> класса."
  remarks: "Вызовите `Dispose` после использования <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> `Dispose` Метода <xref:System.Threading.HostExecutionContext>окажется в неработоспособном состоянии.</xref:System.Threading.HostExecutionContext> После вызова метода `Dispose`, необходимо освободить все ссылки на <xref:System.Threading.HostExecutionContext>, сборщик мусора мог освободить память, <xref:System.Threading.HostExecutionContext>занимаемую.</xref:System.Threading.HostExecutionContext> </xref:System.Threading.HostExecutionContext>       Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [реализация метода Dispose](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек вызова всегда `Dispose` перед освобождением последней ссылки на <xref:System.Threading.HostExecutionContext>.</xref:System.Threading.HostExecutionContext> В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет метод <xref:System.Threading.HostExecutionContext>объекта `Finalize` метод.</xref:System.Threading.HostExecutionContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "При переопределении в производном классе освобождает неуправляемые ресурсы, используемые <xref:System.Threading.WaitHandle>, а при необходимости освобождает также управляемые ресурсы.</xref:System.Threading.WaitHandle>"
  remarks: "Этот метод вызывается методом <xref:System.Threading.HostExecutionContext.Dispose>перегрузка метода и метод завершения.</xref:System.Threading.HostExecutionContext.Dispose> <xref:System.Threading.HostExecutionContext.Dispose>вызывает этот метод, защищенный с помощью `disposing` равным `true`.</xref:System.Threading.HostExecutionContext.Dispose> Метод завершения вызывает этот метод с `disposing` значение `false`.       При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Threading.HostExecutionContext>ссылки.</xref:System.Threading.HostExecutionContext> Этот метод вызывает `Dispose` метод для каждого объекта, на который указывает ссылка.       Этот метод может вызываться несколько раз другими объектами. При переопределении этого метода нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода."
  syntax:
    content: public virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Threading.HostExecutionContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.HostExecutionContext.State
  id: State
  parent: System.Threading.HostExecutionContext
  langs:
  - csharp
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Возвращает или задает состояние контекста выполнения узла."
  remarks: "Представляет значение свойства состояния в безопасном дескрипторе, содержащее `IUnknown` указатель для узла."
  syntax:
    content: protected object State { get; set; }
    return:
      type: System.Object
      description: "Объект, представляющий состояние контекста выполнения хоста."
  overload: System.Threading.HostExecutionContext.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.HostExecutionContext.#ctor
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext()
  nameWithType: HostExecutionContext.HostExecutionContext()
  fullName: System.Threading.HostExecutionContext.HostExecutionContext()
- uid: System.Threading.HostExecutionContext.#ctor(System.Object)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext(Object)
  nameWithType: HostExecutionContext.HostExecutionContext(Object)
  fullName: System.Threading.HostExecutionContext.HostExecutionContext(Object)
- uid: System.Threading.HostExecutionContext.CreateCopy
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: HostExecutionContext.CreateCopy()
  fullName: System.Threading.HostExecutionContext.CreateCopy()
- uid: System.Threading.HostExecutionContext
  parent: System.Threading
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext
  fullName: System.Threading.HostExecutionContext
- uid: System.Threading.HostExecutionContext.Dispose
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: HostExecutionContext.Dispose()
  fullName: System.Threading.HostExecutionContext.Dispose()
- uid: System.Threading.HostExecutionContext.Dispose(System.Boolean)
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HostExecutionContext.Dispose(Boolean)
  fullName: System.Threading.HostExecutionContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.HostExecutionContext.State
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
  fullName: System.Threading.HostExecutionContext.State
- uid: System.Threading.HostExecutionContext.#ctor*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: HostExecutionContext
  nameWithType: HostExecutionContext.HostExecutionContext
- uid: System.Threading.HostExecutionContext.CreateCopy*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: HostExecutionContext.CreateCopy
- uid: System.Threading.HostExecutionContext.Dispose*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: HostExecutionContext.Dispose
- uid: System.Threading.HostExecutionContext.State*
  parent: System.Threading.HostExecutionContext
  isExternal: false
  name: State
  nameWithType: HostExecutionContext.State
