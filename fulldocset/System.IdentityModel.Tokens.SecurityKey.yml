### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SecurityKey
  id: SecurityKey
  children:
  - System.IdentityModel.Tokens.SecurityKey.#ctor
  - System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  - System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  - System.IdentityModel.Tokens.SecurityKey.KeySize
  langs:
  - csharp
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: System.IdentityModel.Tokens.SecurityKey
  type: Class
  summary: "Базовый класс для ключей безопасности."
  remarks: "Ключи безопасности используются для криптографических операций, таких как цифровые сигнатуры и шифрования XML-данных."
  syntax:
    content: public abstract class SecurityKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: SecurityKey()
  nameWithType: SecurityKey.SecurityKey()
  fullName: System.IdentityModel.Tokens.SecurityKey.SecurityKey()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IdentityModel.Tokens.SecurityKey&quot;> </xref> класса."
  syntax:
    content: protected SecurityKey ();
    parameters: []
  overload: System.IdentityModel.Tokens.SecurityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  id: DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: DecryptKey(String,Byte[])
  nameWithType: SecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKey.DecryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе расшифровывает указанный ключ."
  remarks: "Используйте статические поля <xref:System.IdentityModel.Tokens.SecurityAlgorithms>класса для задания алгоритма.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract byte[] DecryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "Алгоритм шифрования, который использовался для шифрования ключа."
    - id: keyData
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий зашифрованный ключ.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий расшифрованный ключ.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SecurityKey.DecryptKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  id: EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: EncryptKey(String,Byte[])
  nameWithType: SecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKey.EncryptKey(String,Byte[])
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе выполняет шифрование указанного ключа."
  remarks: "Используйте статические поля <xref:System.IdentityModel.Tokens.SecurityAlgorithms>класса для задания алгоритма.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract byte[] EncryptKey (string algorithm, byte[] keyData);
    parameters:
    - id: algorithm
      type: System.String
      description: "Алгоритм шифрования для шифрования ключа с."
    - id: keyData
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий ключ.</xref:System.Byte>"
    return:
      type: System.Byte[]
      description: "Массив <xref:System.Byte>, содержащий зашифрованный ключ.</xref:System.Byte>"
  overload: System.IdentityModel.Tokens.SecurityKey.EncryptKey*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  id: IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: IsAsymmetricAlgorithm(String)
  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе получает значение, указывающее, использует ли указанный алгоритм асимметричные ключи."
  remarks: "Используйте статические поля <xref:System.IdentityModel.Tokens.SecurityAlgorithms>класса для задания алгоритма.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract bool IsAsymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Алгоритм шифрования."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный алгоритм использует асимметричные ключи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  id: IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: IsSupportedAlgorithm(String)
  nameWithType: SecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе получает значение, указывающее, поддерживается ли указанный алгоритм данным классом."
  syntax:
    content: public abstract bool IsSupportedAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Алгоритм шифрования."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный алгоритм поддерживается этого класса; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  id: IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: IsSymmetricAlgorithm(String)
  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе получает значение, указывающее, использует ли указанный алгоритм симметричные ключи."
  remarks: "Используйте статические поля <xref:System.IdentityModel.Tokens.SecurityAlgorithms>класса для задания алгоритма.</xref:System.IdentityModel.Tokens.SecurityAlgorithms>"
  syntax:
    content: public abstract bool IsSymmetricAlgorithm (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: "Алгоритм шифрования."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный алгоритм использует симметричные ключи; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SecurityKey.KeySize
  id: KeySize
  parent: System.IdentityModel.Tokens.SecurityKey
  langs:
  - csharp
  name: KeySize
  nameWithType: SecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.SecurityKey.KeySize
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "При переопределении в производном классе, возвращает размер создаваемого ключа в битах."
  syntax:
    content: public abstract int KeySize { get; }
    return:
      type: System.Int32
      description: "Размер создаваемого ключа в битах."
  overload: System.IdentityModel.Tokens.SecurityKey.KeySize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.Tokens.SecurityKey.#ctor
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: SecurityKey()
  nameWithType: SecurityKey.SecurityKey()
  fullName: System.IdentityModel.Tokens.SecurityKey.SecurityKey()
- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: DecryptKey(String,Byte[])
  nameWithType: SecurityKey.DecryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKey.DecryptKey(String,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey(System.String,System.Byte[])
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: EncryptKey(String,Byte[])
  nameWithType: SecurityKey.EncryptKey(String,Byte[])
  fullName: System.IdentityModel.Tokens.SecurityKey.EncryptKey(String,Byte[])
- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm(String)
  nameWithType: SecurityKey.IsAsymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsSupportedAlgorithm(String)
  nameWithType: SecurityKey.IsSupportedAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(String)
- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(System.String)
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm(String)
  nameWithType: SecurityKey.IsSymmetricAlgorithm(String)
  fullName: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm(String)
- uid: System.IdentityModel.Tokens.SecurityKey.KeySize
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: KeySize
  nameWithType: SecurityKey.KeySize
  fullName: System.IdentityModel.Tokens.SecurityKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IdentityModel.Tokens.SecurityKey.#ctor*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: SecurityKey
  nameWithType: SecurityKey.SecurityKey
- uid: System.IdentityModel.Tokens.SecurityKey.DecryptKey*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: DecryptKey
  nameWithType: SecurityKey.DecryptKey
- uid: System.IdentityModel.Tokens.SecurityKey.EncryptKey*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: EncryptKey
  nameWithType: SecurityKey.EncryptKey
- uid: System.IdentityModel.Tokens.SecurityKey.IsAsymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsAsymmetricAlgorithm
  nameWithType: SecurityKey.IsAsymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsSupportedAlgorithm
  nameWithType: SecurityKey.IsSupportedAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKey.IsSymmetricAlgorithm*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: IsSymmetricAlgorithm
  nameWithType: SecurityKey.IsSymmetricAlgorithm
- uid: System.IdentityModel.Tokens.SecurityKey.KeySize*
  parent: System.IdentityModel.Tokens.SecurityKey
  isExternal: false
  name: KeySize
  nameWithType: SecurityKey.KeySize
