### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Помогает в реализации <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> интерфейса. Наследники DbDataAdapter реализуют набор функций, обеспечивающий строгую типизацию, но наследуют большинство функций, необходимых для полной реализации **DataAdapter**."
  remarks: "Класс DbDataAdapter наследует <xref:System.Data.Common.DataAdapter>класса и помогает реализовать класс **DataAdapter** предназначен для работы с реляционной базой данных.</xref:System.Data.Common.DataAdapter>       Приложение не создает экземпляр интерфейса DbDataAdapter непосредственно, но создает экземпляр класса, наследующего <xref:System.Data.IDbDataAdapter>и DbDataAdapter.</xref:System.Data.IDbDataAdapter>       Классы, наследующие DbDataAdapter должны реализовывать наследуемые члены и обычно определяются дополнительные члены для добавления функций конкретного поставщика. Например, класс DbDataAdapter определяет <xref:System.Data.IDbDataAdapter.SelectCommand%2A>Свойства и интерфейс DbDataAdapter определяет восемь перегрузки <xref:System.Data.IDataAdapter.Fill%2A>метод.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> В свою очередь <xref:System.Data.OleDb.OleDbDataAdapter>класс наследует <xref:System.Data.Common.DbDataAdapter.Fill%2A>метода, а также определяет две дополнительные перегрузки <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>, принимающие объект ADO Recordset в качестве параметра.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Инициализирует новый экземпляр **DataAdapter** класса."
  remarks: "При создании экземпляра <xref:System.Data.Common.DbDataAdapter>, следующие свойства чтения и записи присваиваются следующие начальные значения.</xref:System.Data.Common.DbDataAdapter>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| Новый <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| Новый <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| Новый <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| Новый <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       Можно изменить значение любого из этих свойств, вызвав его отдельно.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Инициализирует новый экземпляр <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> класса из существующего объекта того же типа."
  remarks: "Эта перегрузка <xref:System.Data.Common.DbDataAdapter>конструктор предназначен для использования с помощью поставщика данных .NET Framework при реализации похожего конструктора для использования в реализации клона.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "Объект <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> объект, используемый для создания нового <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет <xref href=&quot;System.Data.IDbCommand&quot;> </xref> в текущий пакет."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Для добавления в пакет."
    return:
      type: System.Int32
      description: "Число команд в пакете перед добавлением <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Адаптер не поддерживает пакеты."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Удаляет все <xref href=&quot;System.Data.IDbCommand&quot;> </xref> объекты из пакета."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Адаптер не поддерживает пакеты."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> класса."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> Используется для обновления источника данных."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Выполняется в процессе <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Является ли команда обновление, вставка, удаление или инструкция SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Новый экземпляр <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> класса."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> класса."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> , Обновляет источник данных."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Для выполнения в ходе <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Является ли команда обновление, вставка, удаление или инструкция SELECT."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Новый экземпляр <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> класса."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Имя по умолчанию, используемые <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> для сопоставления таблицы."
  remarks: "«Table» — имя по умолчанию, используемые <xref:System.Data.Common.DataAdapter>для сопоставления таблицы.</xref:System.Data.Common.DataAdapter>       — DefaultSourceTableName, когда приложение добавляет сопоставление таблицы для использования с <xref:System.Data.Common.DbDataAdapter.Fill%2A>, но не указывает <xref:System.Data.DataTable>имя.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает команду для удаления записей из набора данных."
  remarks: "Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>создается автоматически.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Во время <xref:System.Data.IDataAdapter.Update*>для удаления записей в источнике данных для удаленных строк в наборе данных.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Выполняет текущий пакет."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "Возвращаемое значение из последней команды в пакете."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Метод Fill получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection>Объект, связанный с инструкцией select должен быть допустимым, но он не должен быть открыт.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>является закрыто до вызова заполнения, он является открывается для получения данных, а затем закрывается.</xref:System.Data.IDbConnection> Если соединение открыто до вызова заливки, остается открытым.       Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются до возникновения ошибки сохраняется в таблицах данных. В оставшейся части операция прерывается.       Если команда не возвращает строк, таблицы не будут добавлены <xref:System.Data.DataSet>, и исключение не вызывается.</xref:System.Data.DataSet>       Если <xref:System.Data.Common.DbDataAdapter>объект обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet>       Если указанный запрос возвращает несколько результатов, результирующий набор для каждой строки запроса, возвращающего помещается в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Поскольку таблицы не создается для запроса, который не возвращает строк, если обработать запрос insert, а затем выберите запрос, таблица, созданная для запроса select называется «Table», так как это первая созданная таблица. Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet>возвращает несколько результатов, например пакетные инструкции SQL, если один из результатов содержит ошибку, все последующие результаты пропускаются и не добавляются на <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       При использовании последующих вызовов, чтобы обновить содержимое заполнения <xref:System.Data.DataSet>, должны быть выполнены два условия: 1.</xref:System.Data.DataSet>  Инструкция SQL должна совпадать с той, изначально используются для заполнения <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  **Ключ** сведения о столбце должен присутствовать.       Если имеется информация о первичных ключах, все повторяющиеся строки согласовываются и появляются только один раз в, <xref:System.Data.DataTable>который соответствует <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A>свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>Свойства `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью заливки с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для заполнения записями и, при необходимости, схемы."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataSet&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в указанном диапазоне в <xref href=&quot;System.Data.DataSet&quot;> </xref> для соответствия строкам в источнике данных с помощью <xref href=&quot;System.Data.DataTable&quot;> </xref> имя."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A>свойство.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект подключения, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Операция затем добавляет строки в целевой <xref:System.Data.DataTable>объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable>объекты, если они еще не существуют.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable>объектов, <xref:System.Data.Common.DbDataAdapter.Fill%2A>операции обычно создает только метаданные имени столбца.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Если <xref:System.Data.Common.DbDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet>       Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A>, принимающий `DataTable` как параметр получает только первый результат.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A>, принимающий `DataSet` как параметр, чтобы получить несколько результатов.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод несколько раз в одном <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Если первичный ключ существует, входящие строки объединяются с соответствующими строками, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.Fill%2A>и <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для данных .NET Framework поставщик возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Имя <xref href=&quot;System.Data.DataTable&quot;> </xref> для сопоставления таблиц."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataSet&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в <xref href=&quot;System.Data.DataSet&quot;> </xref> для соответствия строкам в источнике данных с помощью <xref href=&quot;System.Data.DataSet&quot;> </xref> и <xref href=&quot;System.Data.DataTable&quot;> </xref> имена."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод получает данные из источника данных, с помощью инструкции SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.IDbConnection>Объект, связанный с инструкцией select должен быть допустимым, но он не должен быть открыт.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Если команда не возвращает строк, таблицы не будут добавлены <xref:System.Data.DataSet>, и исключение не вызывается.</xref:System.Data.DataSet>       Если <xref:System.Data.Common.DbDataAdapter>объект обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя «имя_столбца1», «columnname2», «имя_столбца3» и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet>       Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Поскольку таблицы не создается для запроса, который не возвращает строк, если бы обработать запрос insert, а затем выберите запрос, таблица, созданная для запроса select будет называться «Table», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются до возникновения ошибки сохраняется в таблицах данных. В оставшейся части операция прерывается.       Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet>возвращает несколько результатов, такие как пакетной инструкции SQL, следует учитывать следующее:-Если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызовы обновить содержимое <xref:System.Data.DataSet>, должны быть выполнены два условия: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  Инструкция SQL должна совпадать с той, изначально используются для заполнения <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  **Ключ** сведения о столбце должен присутствовать. Если имеется информация о первичных ключах, все повторяющиеся строки согласовываются и появляются только один раз в, <xref:System.Data.DataTable>который соответствует <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A>свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>Свойства `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе[Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для заполнения записями и, при необходимости, схемы."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataSet&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Исходная таблица является недопустимой."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в <xref href=&quot;System.Data.DataTable&quot;> </xref> для соответствия строкам в источнике данных, используя указанный <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> и <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A>свойство.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект подключения, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A>— вызывается, он открывается для получения данных и затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Операция затем добавляет строки в указанное назначение <xref:System.Data.DataTable>объекта в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable>объекта, если он еще не существует.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable>объекта, <xref:System.Data.Common.DbDataAdapter.Fill%2A>операции обычно создает только метаданные имени столбца.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Если <xref:System.Data.Common.DbDataAdapter>объект обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet>       Перегрузка <xref:System.Data.Common.DbDataAdapter.Fill%2A>, принимающий `DataTable` как параметр получает только первый результат.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Используйте перегрузку <xref:System.Data.Common.DbDataAdapter.Fill%2A>, принимающий `DataSet` как параметр, чтобы получить несколько результатов.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод несколько раз в одном <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Если первичный ключ существует, входящие строки объединяются с соответствующими строками, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> для заполнения записями и, при необходимости, схемы."
    - id: command
      type: System.Data.IDbCommand
      description: "Инструкции SQL SELECT, используемый для получения строк из источника данных."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataTable&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в <xref href=&quot;System.Data.DataTable&quot;> </xref> для соответствия строкам в источнике данных, начиная с указанной записи и извлечение до указанного максимального числа записей."
  remarks: "<xref:System.Data.Common.DataAdapter.Fill%2A>Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A>свойство.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> Объект подключения, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.Common.DataAdapter.Fill%2A>— вызывается, он открывается для получения данных и затем закрывается.</xref:System.Data.Common.DataAdapter.Fill%2A> Если подключение является открытым до <xref:System.Data.Common.DataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DataAdapter.Fill%2A>       <xref:System.Data.Common.DataAdapter.Fill%2A>Операция затем добавляет строки в целевой <xref:System.Data.DataTable>объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable>объекты, если они еще не существуют.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> При создании <xref:System.Data.DataTable>объектов, <xref:System.Data.Common.DataAdapter.Fill%2A>операции обычно создает только метаданные имени столбца.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).       Если адаптер данных обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя «имя_столбца1», «columnname2», «имя_столбца3» и т. д.</xref:System.Data.DataTable> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>, каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet>возвращает несколько результатов, например пакетные инструкции SQL, если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Можно использовать <xref:System.Data.Common.DataAdapter.Fill%2A>метод несколько раз в одном <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Если первичный ключ существует, входящие строки объединяются с соответствующими строками, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "Отсчитываемый от нуля номер записи для запуска с."
    - id: maxRecords
      type: System.Int32
      description: "Максимальное число записей для извлечения."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Объекты, чтобы заполнить из источника данных."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataTable&quot;> </xref>. Это значение не включает строки, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в указанном диапазоне в <xref href=&quot;System.Data.DataSet&quot;> </xref> для соответствия строкам в источнике данных с помощью <xref href=&quot;System.Data.DataSet&quot;> </xref> и <xref href=&quot;System.Data.DataTable&quot;> </xref> имена."
  remarks: "Объект `maxRecords` все записи, найденные после начальной записи возвращает значение 0. Если `maxRecords` больше, чем число оставшихся строк только возвращаются оставшиеся строки и ошибка не выдается.       Если инструкция возвращает несколько результатов, соответствующей команды select <xref:System.Data.Common.DbDataAdapter.Fill%2A>применяется только `maxRecords` к первому результату.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод получает данные из источника данных, с помощью инструкции SELECT.</xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.IDbConnection>Объект, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A>— вызывается, он открывается для получения данных и затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Если команда не возвращает строк, таблицы не будут добавлены <xref:System.Data.DataSet>, но исключение не создается.</xref:System.Data.DataSet>       Если <xref:System.Data.Common.DbDataAdapter>объект обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet>       Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Поскольку таблицы не создается для запроса, который не возвращает строк, если обработать запрос insert, а затем запрос select, таблица, созданная для запроса select называется «Table», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются до возникновения ошибки сохраняется в таблицах данных. В оставшейся части операция прерывается.       Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataSet>возвращает несколько результатов, например пакетные инструкции SQL, следует учитывать следующее: - при обработке нескольких результатов пакетной инструкции SQL, `maxRecords` применяется только к первому результату.</xref:System.Data.DataSet> То же самое верно для строк, содержащих разбитые на разделы результаты (Framework поставщик данных .NET для OLE DB только). Результат верхнего уровня ограничен `maxRecords`, но добавляются все дочерние строки.      — Если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       При использовании последующих <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызовы обновить содержимое <xref:System.Data.DataSet>, должны быть выполнены два условия: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  Инструкция SQL должна совпадать с той, изначально используются для заполнения <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  **Ключ** сведения о столбце должен присутствовать.       Если имеется информация о первичных ключах, все повторяющиеся строки будут согласованы и появляются только один раз в, <xref:System.Data.DataTable>который соответствует <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Может задать сведения о первичном ключе, либо с помощью <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, указав <xref:System.Data.DataTable.PrimaryKey%2A>свойство <xref:System.Data.DataTable>, или установив <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>Свойства `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      Настроек [!NOTE] настроек `DataSet` не будет содержать больше чем число записей, обозначенном `maxRecords`. Однако весь результирующий набор, сформированный запросом по-прежнему возвращается с сервера."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для заполнения записями и, при необходимости, схемы."
    - id: startRecord
      type: System.Int32
      description: "Отсчитываемый от нуля номер записи для запуска с."
    - id: maxRecords
      type: System.Int32
      description: "Максимальное число записей для извлечения."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataSet&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой.       - или - соединения является недопустимым."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Не удалось найти соединение."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> Параметр меньше 0.       - или - <code> maxRecords </code> параметр меньше 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в указанном диапазоне в <xref href=&quot;System.Data.DataSet&quot;> </xref> для соответствия строкам в источнике данных с помощью <xref href=&quot;System.Data.DataSet&quot;> </xref> и <xref href=&quot;System.Data.DataTable&quot;> </xref> имена."
  remarks: "Объект `maxRecords` все записи, найденные после начальной записи возвращает значение 0. Если `maxRecords` больше, чем число оставшихся строк только возвращаются оставшиеся строки и ошибка не выдается.       Метод Fill получает данные из источника данных, с помощью инструкции SELECT. <xref:System.Data.IDbConnection>Объект, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>закрыт до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Если команда не возвращает строк, таблицы не будут добавлены <xref:System.Data.DataSet>, но исключение не создается.</xref:System.Data.DataSet>       Если <xref:System.Data.Common.DbDataAdapter>объект обнаруживает дублированные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet>       Если указанный запрос возвращает несколько результатов, каждый результирующий набор помещается в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Поскольку таблицы не создается для запроса, который не возвращает строк, если бы обработать запрос insert, а затем выберите запрос, таблица, созданная для запроса select будет называться «Table», поскольку это первая созданная таблица. Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       Метод Fill поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Если произошла ошибка или исключение при заполнении таблиц данных, строки добавляются до возникновения ошибки сохраняется в таблицах данных. В оставшейся части операция прерывается.       Если инструкция SELECT, используемая для заполнения <xref:System.Data.DataTable>объекты возвращает несколько результатов, такие как пакетной инструкции SQL, следует учитывать следующее: - при обработке нескольких результатов пакетной инструкции SQL, `maxRecords` применяется только к первому результату.</xref:System.Data.DataTable> То же самое верно для строк, содержащих разбитые на разделы результаты (Framework поставщик данных .NET для OLE DB только). Результат верхнего уровня ограничен `maxRecords`, но добавляются все дочерние строки.      — Если один из результатов содержит ошибку, все последующие результаты пропускаются.      Настроек [!NOTE] настроек `DataSet` не будет содержать больше чем число записей, обозначенном `maxRecords`. Однако весь результирующий набор, сформированный запросом по-прежнему возвращается с сервера."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Объекты, чтобы заполнить из источника данных."
    - id: startRecord
      type: System.Int32
      description: "Отсчитываемый от нуля номер записи для запуска с."
    - id: maxRecords
      type: System.Int32
      description: "Максимальное число записей для извлечения."
    - id: command
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Выполняется для заполнения <xref href=&quot;System.Data.DataTable&quot;> </xref> объектов."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Int32
      description: "Число строк, добавленных или обновленных в таблицах данных."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой.       - или - соединения является недопустимым."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Не удалось найти соединение."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> Параметр меньше 0.       - или - <code> maxRecords </code> параметр меньше 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет или обновляет строки в указанном диапазоне в <xref href=&quot;System.Data.DataSet&quot;> </xref> для соответствия строкам в источнике данных с помощью <xref href=&quot;System.Data.DataSet&quot;> </xref> и исходные имена таблиц, командную строку и поведение команды."
  remarks: "<xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A>свойство.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Объект подключения, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.Fill%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Операция затем добавляет строки в целевой <xref:System.Data.DataTable>объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable>объекты, если они еще не существуют.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> При создании <xref:System.Data.DataTable>объектов, <xref:System.Data.Common.DbDataAdapter.Fill%2A>операции обычно создает только метаданные имени столбца.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Если <xref:System.Data.Common.DbDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.Fill%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.Fill%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.Fill%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Можно использовать <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод несколько раз в одном <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Если первичный ключ существует, входящие строки объединяются с соответствующими строками, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются к <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Если `SelectCommand` возвращает результаты OUTER JOIN, `DataAdapter` не задано <xref:System.Data.DataTable.PrimaryKey%2A>значение для результирующей <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе[Определение первичных ключей](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.Fill%2A>и <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для данных .NET Framework поставщик возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для заполнения записями и, при необходимости, схемы."
    - id: startRecord
      type: System.Int32
      description: "Отсчитываемый от нуля номер записи для запуска с."
    - id: maxRecords
      type: System.Int32
      description: "Максимальное число записей для извлечения."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    - id: command
      type: System.Data.IDbCommand
      description: "Инструкции SQL SELECT, используемый для получения строк из источника данных."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Int32
      description: "Число строк, успешно добавленных или обновленных в <xref href=&quot;System.Data.DataSet&quot;> </xref>. Это не относится к строкам, зависит от инструкций, которые не возвращают строки."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> startRecord </code> Параметр меньше 0.       - или - <code> maxRecords </code> параметр меньше 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает поведение команда, используемая для заполнения адаптера данных."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "<xref href=&quot;System.Data.CommandBehavior&quot;> </xref> Команды, используемый для заполнения адаптера данных."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет <xref href=&quot;System.Data.DataTable&quot;> </xref> с именем «Table» для указанного <xref href=&quot;System.Data.DataSet&quot;> </xref> и настраивает схему для соответствия, в источнике данных на основе указанных <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Этот метод извлекает сведения о схеме из источника данных, с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Добавляет операцию <xref:System.Data.DataTable>к назначению <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection>из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn>Свойства, если они существуют в источнике данных:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A>и <xref:System.Data.DataColumn.AutoIncrementSeed%2A>отдельно.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A>и <xref:System.Data.DataTable.Constraints%2A>Свойства в соответствии со следующими правилами: - Если один или несколько столбцов первичных ключей возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>они используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ только в том случае, если все они не допускающий значения NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint>добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A>свойство не задано.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection>в соответствии с предыдущими правилами, а ограничения других типов не добавляются.</xref:System.Data.ConstraintCollection>       Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения об указании подсказок см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Сведения о первичном ключе используется во время <xref:System.Data.Common.DbDataAdapter.Fill%2A>для поиска и замены строк, столбцы ключа которых совпадают.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Если это не желательно, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A>без запроса сведений схемы.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Если <xref:System.Data.IDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д.). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.IDbConnection>Объект, связанный с инструкцией select должен быть допустимым, но не требуется открыть.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>закрыт до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE для выполняемой инструкции.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Пользователю следует иметь в виду потенциальные побочных эффектов, например при использовании операторов SET FMTONLY ON. Дополнительные сведения в разделе электронной документации по SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для вставки схемы."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Один из <xref href=&quot;System.Data.SchemaType&quot;> </xref> значения, которые указывают, как следует вставлять схему."
    return:
      type: System.Data.DataTable[]
      description: "Ссылка на коллекцию <xref href=&quot;System.Data.DataTable&quot;> </xref> объектов, которые были добавлены <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Настраивает схему указанного <xref href=&quot;System.Data.DataTable&quot;> </xref> на основе указанных <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Метод FillSchema Получает схему из источника данных, с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Объект подключения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A>должны быть допустимыми, но он не должен быть открыт.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Если подключение закрывается до вызова FillSchema, он открывается для получения данных, затем закрывается. Если соединение открыто до вызова FillSchema, остается открытым.       Операция FillSchema возвращает <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection>из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn>Свойства, если они существуют в источнике данных:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A>и <xref:System.Data.DataColumn.AutoIncrementSeed%2A>отдельно.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema также настраивает <xref:System.Data.DataTable.PrimaryKey%2A>и <xref:System.Data.DataTable.Constraints%2A>Свойства в соответствии со следующими правилами: - Если <xref:System.Data.DataTable.PrimaryKey%2A>уже был определен для `DataTable`, или `DataTable` содержит данные, `PrimaryKey` свойство не задано.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Если один или несколько столбцов первичных ключей возвращаются по <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ только в том случае, если все они не допускающий значения NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint>добавляется <xref:System.Data.ConstraintCollection>, но `PrimaryKey` свойство не задано.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для `DataTable`.       Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection>в соответствии с предыдущими правилами, а ограничения других типов не добавляются.</xref:System.Data.ConstraintCollection> Этот процесс может потребовать несколько циклов приема-передачи на сервер.       Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения об указании подсказок см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Если <xref:System.Data.Common.DbDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д.). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       FillSchema не возвращает никаких строк. Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод для добавления строк к <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация FillSchema для поставщика данных .NET Framework для OLE DB возвращает сведения схемы только для первого результата. Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       При использовании FillSchema, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE для выполняемой инструкции. Пользователю следует иметь в виду потенциальные побочных эффектов, например при использовании операторов SET FMTONLY ON. Дополнительные сведения в разделе электронной документации по SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Для заполнения схемой из источника данных."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Один из <xref href=&quot;System.Data.SchemaType&quot;> </xref> значения."
    return:
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , содержащий сведения о схеме, возвращенные из источника данных."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет <xref href=&quot;System.Data.DataTable&quot;> </xref> в указанный <xref href=&quot;System.Data.DataSet&quot;> </xref> и настраивает схему в соответствии с источником данных, основанном на указанных <xref href=&quot;System.Data.SchemaType&quot;> </xref> и <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Этот метод извлекает сведения о схеме из источника данных, с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Добавляет операцию <xref:System.Data.DataTable>к назначению <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection>из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn>Свойства, если они существуют в источнике данных:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A>и <xref:System.Data.DataColumn.AutoIncrementSeed%2A>отдельно.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A>и <xref:System.Data.DataTable.Constraints%2A>Свойства в соответствии со следующими правилами: - Если один или несколько столбцов первичных ключей возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>они используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ только в том случае, если все они не допускающий значения NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint>добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A>свойство не задано.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection>в соответствии с предыдущими правилами, а ограничения других типов не добавляются.</xref:System.Data.ConstraintCollection>       Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения об указании подсказок см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Сведения о первичном ключе используется во время <xref:System.Data.Common.DbDataAdapter.Fill%2A>для поиска и замены строк, столбцы ключа которых совпадают.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Если это не желательно, используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A>без запроса сведений схемы.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Если <xref:System.Data.Common.DbDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д.). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.IDbConnection>Объект, связанный с инструкцией select должен быть допустимым, но не требуется открыть.</xref:System.Data.IDbConnection> Если <xref:System.Data.IDbConnection>закрыт до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE для выполняемой инструкции.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Пользователю следует иметь в виду потенциальные побочных эффектов, например при использовании операторов SET FMTONLY ON. Дополнительные сведения в разделе электронной документации по SQL Server."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Объект <xref href=&quot;System.Data.DataSet&quot;> </xref> для вставки схемы."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Один из <xref href=&quot;System.Data.SchemaType&quot;> </xref> значения, которые указывают, как следует вставлять схему."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    return:
      type: System.Data.DataTable[]
      description: "Ссылка на коллекцию <xref href=&quot;System.Data.DataTable&quot;> </xref> объектов, которые были добавлены <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Не удалось найти исходную таблицу для получения схемы."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Настраивает схему указанного <xref href=&quot;System.Data.DataTable&quot;> </xref> на основе указанных <xref href=&quot;System.Data.SchemaType&quot;> </xref>, командной строке и <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Метод извлекает схему из источника данных, с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Объект подключения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A>должны быть допустимыми, но он не должен быть открыт.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Если подключение было закрыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Добавляет операцию <xref:System.Data.DataTable>к назначению <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection>из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn>Свойства, если они существуют в источнике данных:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A>и <xref:System.Data.DataColumn.AutoIncrementSeed%2A>отдельно.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A>и <xref:System.Data.DataTable.Constraints%2A>Свойства в соответствии со следующими правилами: - Если один или несколько столбцов первичных ключей возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>они используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ только в том случае, если все они не допускающий значения NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint>добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A>свойство не задано.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection>в соответствии с предыдущими правилами, а ограничения других типов не добавляются.</xref:System.Data.ConstraintCollection>       Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения об указании подсказок см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Если <xref:System.Data.IDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д.). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>не возвращает никаких строк.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод для добавления строк к <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE для выполняемой инструкции.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Пользователю следует иметь в виду потенциальные побочных эффектов, например при использовании операторов SET FMTONLY ON. Дополнительные сведения в разделе электронной документации по SQL Server."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Для заполнения схемой из источника данных."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Один из <xref href=&quot;System.Data.SchemaType&quot;> </xref> значения."
    - id: command
      type: System.Data.IDbCommand
      description: "Инструкции SQL SELECT, используемый для получения строк из источника данных."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> возвращается объект, содержащий сведения о схеме из источника данных."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Добавляет <xref href=&quot;System.Data.DataTable&quot;> </xref> в указанный <xref href=&quot;System.Data.DataSet&quot;> </xref> и настраивает схему для соответствия, в источнике данных на основе указанных <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Метод извлекает схему из источника данных, с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Объект подключения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A>должны быть допустимыми, но он не должен быть открыт.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Если подключение было закрыто до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он открывается для получения данных, затем закрывается.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Если подключение является открытым до <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>является именем, он остается открытым.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Добавляет операцию <xref:System.Data.DataTable>к назначению <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection>из <xref:System.Data.DataTable>и настраивает следующие <xref:System.Data.DataColumn>Свойства, если они существуют в источнике данных:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A>и <xref:System.Data.DataColumn.AutoIncrementSeed%2A>отдельно.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>также настраивает <xref:System.Data.DataTable.PrimaryKey%2A>и <xref:System.Data.DataTable.Constraints%2A>Свойства в соответствии со следующими правилами: - Если один или несколько столбцов первичных ключей возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>они используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ только в том случае, если все они не допускающий значения NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint>добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A>свойство не задано.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Если возвращаются столбцы первичного ключа и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection>в соответствии с предыдущими правилами, а ограничения других типов не добавляются.</xref:System.Data.ConstraintCollection>       Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения об указании подсказок см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Если <xref:System.Data.IDataAdapter>встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя шаблон &quot;*columnname*1», «*columnname*2 «,»*columnname*3», и т. д.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet>согласно шаблону «Column1», «Column2» и т. д.</xref:System.Data.DataSet> При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>каждый результирующий набор помещается в отдельную таблицу.</xref:System.Data.DataSet> Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д.). Приложения, использующие имена столбцов и таблиц следует убедиться, что конфликтов шаблонов именования.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В таких ситуациях <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает новую таблицу, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Если <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>не возвращает никаких строк.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Используйте <xref:System.Data.Common.DbDataAdapter.Fill%2A>метод для добавления строк к <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      Настроек [!NOTE] настроек при обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>для поставщик данных .NET Framework для OLE DB возвращает сведения схемы только для первого результирующего.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Получить сведения о схеме для нескольких результатов с помощью <xref:System.Data.Common.DbDataAdapter.Fill%2A>с <xref:System.Data.MissingSchemaAction>равным `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       При использовании <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, поставщик данных .NET Framework для SQL Server добавляет предложение FOR BROWSE для выполняемой инструкции.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Пользователю следует иметь в виду потенциальные побочных эффектов, например при использовании операторов SET FMTONLY ON. Дополнительные сведения в разделе электронной документации по SQL Server."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Для заполнения схемой из источника данных."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Один из <xref href=&quot;System.Data.SchemaType&quot;> </xref> значения."
    - id: command
      type: System.Data.IDbCommand
      description: "Инструкции SQL SELECT, используемый для получения строк из источника данных."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Data.DataTable[]
      description: "Массив <xref href=&quot;System.Data.DataTable&quot;> </xref> возвращаются объекты, которые содержат сведения о схеме из источника данных."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает <xref href=&quot;System.Data.IDataParameter&quot;> </xref> из одной из команд в текущем пакете."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Индекс команды для получения из параметра."
    - id: parameterIndex
      type: System.Int32
      description: "Индекс параметра внутри команды."
    return:
      type: System.Data.IDataParameter
      description: "<xref href=&quot;System.Data.IDataParameter&quot;> </xref> Указанного."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Адаптер не поддерживает пакеты."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает сведения об отдельной попытке обновления в рамках большего пакетного обновления."
  remarks: "Поставщики данных, поддерживающие логику пакетного обновления должны переопределять ряд виртуальных методов в <xref:System.Data.Common.DbDataAdapter>классе.</xref:System.Data.Common.DbDataAdapter> `GetBatchedRecordsAffected`Представляет один из этих виртуальных методов. `DbDataAdapter` Класс использует `GetBatchedRecordsAffected` для определения успешности попыток отдельного обновления в пакете, поэтому его можно пометить каждый соответствующий <xref:System.Data.DataRow>соответствующим образом.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Отсчитываемый от нуля порядковый номер отдельной команды в пакете."
    - id: recordsAffected
      type: System.Int32
      description: "Число строк, затронутых командой, указанный в пакете в хранилище данных."
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>Исключение во время выполнения указанной команды.</xref:System.Exception> Возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic), если исключение не возникает."
    return:
      type: System.Boolean
      description: "Сведения об отдельной попытке обновления в рамках большего пакетами обновления."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает параметры, установленные пользователем при выполнении инструкции SQL SELECT."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Массив <xref href=&quot;System.Data.IDataParameter&quot;> </xref> объектов содержит параметры, установленные пользователем."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Инициализирует пакетной обработки для <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Адаптер не поддерживает пакеты."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает команду, используемую для вставки новых записей в источнике данных."
  remarks: "Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.InsertCommand%2A>будут создаваться автоматически.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Объект <xref href=&quot;System.Data.IDbCommand&quot;> </xref> во время <xref:System.Data.IDataAdapter.Update*>для вставки записей в источнике данных для новых строк в наборе данных.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Вызывает <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> событий поставщика данных .NET Framework."
  remarks: 'При возникновении события вызывается обработчик события в делегате. Общие сведения см. в разделе [NIB: при возникновении события](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Объект <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Вызывает <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> событий поставщика данных .NET Framework."
  remarks: 'При возникновении события вызывается обработчик события в делегате. Общие сведения см. в разделе [NIB: при возникновении события](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "<xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает команду, используемую для выбора записей в источнике данных."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Объект <xref href=&quot;System.Data.IDbCommand&quot;> </xref> , используемый при <xref:System.Data.IDataAdapter.Update*>для выбора записей из источника данных для размещения в наборе данных.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает инструкцию SQL для удаления записей из набора данных."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.Common.DbDataAdapter>экземпляр приводится к <xref:System.Data.IDbDataAdapter>интерфейс.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Во время <xref:System.Data.Common.DbDataAdapter.Update*>для удаления записей в источнике данных для удаленных строк в наборе данных.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает инструкцию SQL, используемую для вставки новых записей в источнике данных."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.Common.DbDataAdapter>экземпляр приводится к <xref:System.Data.IDbDataAdapter>интерфейс.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Во время <xref:System.Data.Common.DbDataAdapter.Update*>для вставки записей в источнике данных для новых строк в наборе данных.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает инструкцию SQL, используемую для выбора записей в источнике данных."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.Common.DbDataAdapter>экземпляр приводится к <xref:System.Data.IDbDataAdapter>интерфейс.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> , Используемый при <xref:System.Data.Common.DbDataAdapter.Update*>для выбора записей из источника данных для размещения в наборе данных.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает инструкцию SQL, используемую для обновления записей в источнике данных."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.Common.DbDataAdapter>экземпляр приводится к <xref:System.Data.IDbDataAdapter>интерфейс.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Дополнительные сведения см. в разделе <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> Во время <xref:System.Data.Common.DbDataAdapter.Update*>для обновления записей в источнике данных для измененных строк в наборе данных.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Создает новый объект, являющийся копией текущего экземпляра."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Data.Common.DbDataAdapter>экземпляр приводится к <xref:System.ICloneable>интерфейс.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Дополнительные сведения см. в разделе <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Новый объект, являющийся копией этого экземпляра."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Завершает пакетной обработки для <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "В <xref:System.Data.Common.DbDataAdapter>, этот метод вызывает <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Классы, наследующие от <xref:System.Data.Common.DbDataAdapter>Переопределите этот метод для предоставления поддержки пакетов.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Адаптер не поддерживает пакеты."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Обновляет значения в базе данных, выполнив соответствующие инструкции INSERT, UPDATE или DELETE для каждой вставки, обновления или удаления строк в указанном массиве в <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A>метод <xref:System.Data.Common.DbDataAdapter>проверяет <xref:System.Data.DataRow.RowState%2A>свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Например, <xref:System.Data.Common.DbDataAdapter.Update%2A>может выполнить инструкцию DELETE следуют инструкции INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A>метод в ситуациях, когда необходимо управлять последовательностью инструкции типов (например, перед обновлением).</xref:System.Data.DataSet.GetChanges%2A> Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/add/includes/ajax-current-ext-md.md).       Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A>метод создает исключение.</xref:System.Data.Common.DbDataAdapter.Update%2A> Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder>или <xref:System.Data.OleDb.OleDbCommandBuilder>для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Затем создаются все дополнительные инструкции SQL, которые не заданы **CommandBuilder**. Эта логика создания требует сведения о ключевом столбце должны присутствовать в списке <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Дополнительные сведения см. [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md).       <xref:System.Data.Common.DbDataAdapter.Update%2A>Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Свойства.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращенные дополнительные строки игнорируются.       После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet>строк и любые выходные параметры, возвращенные командой.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> После успешного обновления строки принимаются изменения этой строки.       При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения является следующим образом: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Значения в <xref:System.Data.DataRow>перемещаются в значения параметров.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Выполняется команда.      4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>вызывается.</xref:System.Data.DataRow.AcceptChanges%2A>       Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter>обычно имеет коллекцию параметров, связанных с ним.</xref:System.Data.Common.DbDataAdapter> Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn`ссылается на <xref:System.Data.DataTable>столбца, <xref:System.Data.Common.DbDataAdapter>ссылки для получения значений параметров для текущей строки.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction>значения.</xref:System.Data.MissingMappingAction>      | Значение перечисления | Действие, выполняемое |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует. |   | `MissingMappingAction.Ignore`| Объект <xref:System.SystemException>создается.</xref:System.SystemException> </xref:System.Data.DataSet> Если сопоставления заданы явным образом, отсутствует сопоставление для входного параметра обычно является результатом ошибки. |   | `MissingMappingAction.Error`| Создается <xref:System.SystemException>. |       `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`.</xref:System.SystemException> Исключение создается в том случае, если он ссылается на несуществующий столбец.       `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать версию оригинал, Current или Proposed значение столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.      Настроек [!NOTE] настроек в случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>Свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` событие, задайте <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>свойство <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, используемых для обновления источника данных."
    return:
      type: System.Int32
      description: "Число успешно обновленных строк из <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Не <xref href=&quot;System.Data.DataRow&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataTable&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataSet&quot;> </xref> существует для использования в качестве источника."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Попытка выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Обновляет значения в базе данных, выполнив соответствующие инструкции INSERT, UPDATE или DELETE для каждой вставки, обновления или удаления строки в указанном <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Когда приложение вызывает метод Update <xref:System.Data.Common.DbDataAdapter>проверяет <xref:System.Data.DataRow.RowState%2A>свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Например обновление может выполнить инструкцию DELETE, инструкция INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A>метод в ситуациях, когда необходимо управлять последовательностью инструкции типов (например, перед обновлением).</xref:System.Data.DataSet.GetChanges%2A> Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/add/includes/ajax-current-ext-md.md).       Если инструкции INSERT, UPDATE или DELETE не были указаны, метод Update приводит к возникновению исключения. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder>или <xref:System.Data.OleDb.OleDbCommandBuilder>для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Затем создаются все дополнительные инструкции SQL, которые не заданы **CommandBuilder**. Эта логика создания требует сведения о ключевом столбце должны присутствовать в списке <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Дополнительные сведения см. [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md).       Метод Update извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. Обновления, затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Свойства.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> Все возвращенные дополнительные строки игнорируются.       После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet>строк и любые выходные параметры, возвращенные командой.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> После успешного обновления строки принимаются изменения этой строки.       При использовании обновления, порядок выполнения выглядит следующим образом: 1.  Значения в <xref:System.Data.DataRow>перемещаются в значения параметров.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Выполняется команда.      4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>вызывается.</xref:System.Data.DataRow.AcceptChanges%2A>       Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter>обычно имеет коллекцию параметров, связанных с ним.</xref:System.Data.Common.DbDataAdapter> Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn`ссылается на <xref:System.Data.DataTable>столбца, <xref:System.Data.Common.DbDataAdapter>ссылки для получения значений параметров для текущей строки.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction>значения.</xref:System.Data.MissingMappingAction>      | Значение перечисления | Действие, выполняемое |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует. |   | `MissingMappingAction.Ignore`| Объект <xref:System.SystemException>создается.</xref:System.SystemException> </xref:System.Data.DataSet> Если сопоставления заданы явным образом, отсутствует сопоставление для входного параметра обычно является результатом ошибки. |   | `MissingMappingAction.Error`| Создается <xref:System.SystemException>. |       `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`.</xref:System.SystemException> Исключение создается в том случае, если он ссылается на несуществующий столбец.       `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать версию оригинал, Current или Proposed значение столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.      Настроек [!NOTE] настроек в случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>Свойства `true` перед вызовом обновления.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` событие, задайте <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>свойство <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Используется для обновления источника данных."
    return:
      type: System.Int32
      description: "Число успешно обновленных строк из <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Попытка выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Обновляет значения в базе данных, выполнив соответствующие инструкции INSERT, UPDATE или DELETE для каждой вставки, обновления или удаления строки в указанном <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A>метод <xref:System.Data.Common.DbDataAdapter>проверяет <xref:System.Data.DataRow.RowState%2A>свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Например, <xref:System.Data.Common.DbDataAdapter.Update%2A>может выполнить инструкцию DELETE следуют инструкции INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A>метод в ситуациях, когда необходимо управлять последовательностью инструкции типов (например, перед обновлением).</xref:System.Data.DataSet.GetChanges%2A> Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/add/includes/ajax-current-ext-md.md).       Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A>метод создает исключение.</xref:System.Data.Common.DbDataAdapter.Update%2A> Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder>или <xref:System.Data.OleDb.OleDbCommandBuilder>для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Затем создаются все дополнительные инструкции SQL, которые не заданы **CommandBuilder**. Эта логика создания требует сведения о ключевом столбце должны присутствовать в списке <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Дополнительные сведения см. [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md).       <xref:System.Data.Common.DbDataAdapter.Update%2A>Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Свойства.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращенные дополнительные строки игнорируются.       После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet>строк и любые выходные параметры, возвращенные командой.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> После успешного обновления строки принимаются изменения этой строки.       При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения является следующим образом: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Значения в <xref:System.Data.DataRow>перемещаются в значения параметров.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Выполняется команда.      4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>вызывается.</xref:System.Data.DataRow.AcceptChanges%2A>       Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter>обычно имеет коллекцию параметров, связанных с ним.</xref:System.Data.Common.DbDataAdapter> Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn`ссылается на <xref:System.Data.DataTable>столбца, <xref:System.Data.Common.DbDataAdapter>ссылки для получения значений параметров для текущей строки.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction>значения.</xref:System.Data.MissingMappingAction>      | Значение перечисления | Действие, выполняемое |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует. |   | `MissingMappingAction.Ignore`| Объект <xref:System.SystemException>создается.</xref:System.SystemException> </xref:System.Data.DataSet> Если сопоставления заданы явным образом, отсутствует сопоставление для входного параметра обычно является результатом ошибки. |   | `MissingMappingAction.Error`| Создается <xref:System.SystemException>. |       `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`.</xref:System.SystemException> Исключение создается в том случае, если он ссылается на несуществующий столбец.       `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать версию оригинал, Current или Proposed значение столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.      Настроек [!NOTE] настроек в случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>Свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` событие, задайте <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>свойство <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> Используется для обновления источника данных."
    return:
      type: System.Int32
      description: "Число успешно обновленных строк из <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Не <xref href=&quot;System.Data.DataRow&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataTable&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataSet&quot;> </xref> существует для использования в качестве источника."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Попытка выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Обновляет значения в базе данных, выполнив соответствующие инструкции INSERT, UPDATE или DELETE для каждой вставки, обновления или удаления строки в заданный массив <xref href=&quot;System.Data.DataSet&quot;> </xref> объектов."
  remarks: "Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A>метод <xref:System.Data.Common.DbDataAdapter>проверяет <xref:System.Data.DataRow.RowState%2A>свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Например, <xref:System.Data.Common.DbDataAdapter.Update%2A>может выполнить инструкцию DELETE следуют инструкции INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A>метод в ситуациях, когда необходимо управлять последовательностью инструкции типов (например, перед обновлением).</xref:System.Data.DataSet.GetChanges%2A> Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/add/includes/ajax-current-ext-md.md).       Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A>метод создает исключение.</xref:System.Data.Common.DbDataAdapter.Update%2A> Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder>или <xref:System.Data.OleDb.OleDbCommandBuilder>для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Затем создаются все дополнительные инструкции SQL, которые не заданы **CommandBuilder**. Эта логика создания требует сведения о ключевом столбце должны присутствовать в списке <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Дополнительные сведения см. [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md).       <xref:System.Data.Common.DbDataAdapter.Update%2A>Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Свойства.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращенные дополнительные строки игнорируются.       После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet>строк и любые выходные параметры, возвращенные командой.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> После успешного обновления строки принимаются изменения этой строки.       При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения является следующим образом: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Значения в <xref:System.Data.DataRow>перемещаются в значения параметров.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Выполняется команда.      4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>вызывается.</xref:System.Data.DataRow.AcceptChanges%2A>       Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter>обычно имеет коллекцию параметров, связанных с ним.</xref:System.Data.Common.DbDataAdapter> Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn`ссылается на <xref:System.Data.DataTable>столбца, <xref:System.Data.Common.DbDataAdapter>ссылки для получения значений параметров для текущей строки.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction>значения.</xref:System.Data.MissingMappingAction>      | Значение перечисления | Действие, выполняемое |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует. |   | `MissingMappingAction.Ignore`| Объект <xref:System.SystemException>создается.</xref:System.SystemException> </xref:System.Data.DataSet> Если сопоставления заданы явным образом, отсутствует сопоставление для входного параметра обычно является результатом ошибки. |   | `MissingMappingAction.Error`| Создается <xref:System.SystemException>. |       `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`.</xref:System.SystemException> Исключение создается в том случае, если он ссылается на несуществующий столбец.       `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать версию оригинал, Current или Proposed значение столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.      Настроек [!NOTE] настроек в случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>Свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` событие, задайте <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>свойство <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, используемых для обновления источника данных."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "<xref:System.Data.IDataAdapter.TableMappings*>Коллекции для использования.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "Число успешно обновленных строк из <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Не <xref href=&quot;System.Data.DataRow&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataTable&quot;> </xref> существует для обновления.       - или - нет <xref href=&quot;System.Data.DataSet&quot;> </xref> существует для использования в качестве источника."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Попытка выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Обновляет значения в базе данных, выполнив соответствующие инструкции INSERT, UPDATE или DELETE для каждой вставки, обновления или удаления строк в <xref href=&quot;System.Data.DataSet&quot;> </xref> с указанным <xref href=&quot;System.Data.DataTable&quot;> </xref> имя."
  remarks: "Если приложение вызывает <xref:System.Data.Common.DbDataAdapter.Update%2A>метод <xref:System.Data.Common.DbDataAdapter>проверяет <xref:System.Data.DataRow.RowState%2A>свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Например, <xref:System.Data.Common.DbDataAdapter.Update%2A>может выполнить инструкцию DELETE следуют инструкции INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Update%2A>       Следует отметить, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A>метод в случаях, когда необходимо управлять последовательностью типов инструкций (например, ВСТАВЬТЕ перед ОБНОВЛЕНИЕМ).</xref:System.Data.DataSet.GetChanges%2A> Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/add/includes/ajax-current-ext-md.md).       Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DbDataAdapter.Update%2A>метод создает исключение.</xref:System.Data.Common.DbDataAdapter.Update%2A> Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder>или <xref:System.Data.OleDb.OleDbCommandBuilder>для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Затем создаются все дополнительные инструкции SQL, которые не заданы **CommandBuilder**. Эта логика создания требует сведения о ключевом столбце должны присутствовать в списке <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Дополнительные сведения см. [создание команд с помощью построителей команд](~/add/includes/ajax-current-ext-md.md).       <xref:System.Data.Common.DbDataAdapter.Update%2A>Метод поддерживает сценарии где <xref:System.Data.DataSet>содержит несколько <xref:System.Data.DataTable>объекты, имена которых отличаются только регистром.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Если существует несколько таблиц с одинаковыми именами, но в другом регистре в `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>выполняет сравнение с учетом регистра для поиска соответствующей таблицы и создает исключение, если точного соответствия не существует.</xref:System.Data.Common.DbDataAdapter.Update%2A> Это демонстрируется в следующем коде C#.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Если <xref:System.Data.Common.DbDataAdapter.Update%2A>вызывается и <xref:System.Data.DataSet>содержит только одну <xref:System.Data.DataTable>, имя которой отличается только регистром, который <xref:System.Data.DataTable>обновляется.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> В этом сценарии сравнение выполняется без учета регистра. Это демонстрируется в следующем коде C#.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```<xref:System.Data.Common.DbDataAdapter.Update%2A>Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления.</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A>Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A>Свойства.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Все возвращенные дополнительные строки игнорируются.       После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet>строк и любые выходные параметры, возвращенные командой.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> После успешного обновления строки принимаются изменения этой строки.       При использовании <xref:System.Data.Common.DbDataAdapter.Update%2A>, порядок выполнения является следующим образом: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  Значения в <xref:System.Data.DataRow>перемещаются в значения параметров.</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  Выполняется команда.      4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>События.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>вызывается.</xref:System.Data.DataRow.AcceptChanges%2A>       Каждая команда, связанная с <xref:System.Data.Common.DbDataAdapter>обычно имеет коллекцию параметров, связанных с ним.</xref:System.Data.Common.DbDataAdapter> Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn`ссылается на <xref:System.Data.DataTable>столбца, <xref:System.Data.Common.DbDataAdapter>ссылки для получения значений параметров для текущей строки.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction>значения.</xref:System.Data.MissingMappingAction>      | Значение перечисления | Действие, выполняемое |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet>, если сопоставление отсутствует. |   | `MissingMappingAction.Ignore`| Объект <xref:System.SystemException>создается.</xref:System.SystemException> </xref:System.Data.DataSet> Если сопоставления заданы явным образом, отсутствует сопоставление для входного параметра обычно является результатом ошибки. |   | `MissingMappingAction.Error`| Создается <xref:System.SystemException>. |       `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`.</xref:System.SystemException> Исключение создается в том случае, если он ссылается на несуществующий столбец.       `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать версию оригинал, Current или Proposed значение столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.      Настроек [!NOTE] настроек в случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>Свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` событие, задайте <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>свойство <xref:System.Data.Common.RowUpdatedEventArgs> <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Для обновления источника данных."
    - id: srcTable
      type: System.String
      description: "Имя исходной таблицы, используемое для сопоставления таблиц."
    return:
      type: System.Int32
      description: "Число успешно обновленных строк из <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Data.DataSet&quot;> </xref> Является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Исходная таблица является недопустимой."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Попытка выполнить инструкцию INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает значение, которое включает или отключает поддержку пакетной обработки и задает количество команд, которые могут быть выполнены в пакете."
  remarks: "Используйте свойство UpdateBatchSize для обновления источника данных с изменениями из <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Если поставщик данных поддерживает пакетную обработку, это может повысить производительность приложения путем сокращения числа циклов приема-передачи на сервер. В ADO.NET 2.0 это свойство поддерживается для поставщиков данных .NET для SQL Server (SqlClient) и Oracle (OracleClient).       Выполнение очень больших пакетов может снизить производительность. Таким образом следует проверить параметр размера оптимальный пакета перед реализацией приложения.       <xref:System.ArgumentOutOfRangeException>Возникает, если число имеет значение меньше нуля.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "Число строк для обработки в пакете.       <table><thead><tr><th> Значение       </th><th> Эффект       </th></tr></thead><tbody><tr><td> 0       </td><td> Нет ограничений на размер пакета.       </td></tr><tr><td> 1       </td><td> Обновление пакета отключено.       </td></tr><tr><td> &gt; 1       </td><td> Изменения отправляются с помощью пакетов UpdateBatchSize операций одновременно.       </td></tr></tbody></table>       Этому параметру присвоено значение, отличное от 1, все команды, связанное с <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> должен иметь их <> </> *настроек свойство * *нет* * или * *выходные параметры**. В противном случае будет создано исключение."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Возвращает или задает команду, используемую для обновления записей в источнике данных."
  remarks: "Во время <xref:System.Data.Common.DbDataAdapter.Update%2A>, если это свойство не задано и сведения о первичном ключе присутствует в <xref:System.Data.DataSet>, <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>будут создаваться автоматически.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Объект <xref href=&quot;System.Data.IDbCommand&quot;> </xref> во время <xref:System.Data.IDataAdapter.Update*>для обновления записей в источнике данных для измененных строк в наборе данных.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
