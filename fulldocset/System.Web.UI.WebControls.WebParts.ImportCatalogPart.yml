### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  id: ImportCatalogPart
  children:
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  - System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  langs:
  - csharp
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  type: Class
  summary: "Импортирует файл описания для <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления (или другого серверного элемента управления ASP.NET используется в качестве <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления), после чего пользователи могут добавлять элемент управления на веб-страницу с предопределенными параметрами. Этот класс не наследуется."
  remarks: "Элемент управления ImportCatalogPart позволяет пользователям импортировать файл описания, описываются параметры на <xref:System.Web.UI.WebControls.WebParts.WebPart>элемент управления или серверный элемент управления, пользователю необходимо добавить <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>       После пользователь импортирует файл описания <xref:System.Web.UI.WebControls.WebParts.WebPart>элемент управления, указанный в файле в элементе управления ImportCatalogPart и пользователь может добавить элемент управления на страницу.</xref:System.Web.UI.WebControls.WebParts.WebPart>       Имя файла описания не совпадает с самого элемента управления. Это XML-файл, который заканчивается. Расширение веб-части и содержит пары имя/значение — в основном значения свойств —, описывающие состояние элемента управления. Имя файла описания создается согласно указанному формату XML, как описано в разделе [файлы описание элемента управления веб-частями](~/add/includes/ajax-current-ext-md.md).       Для управления, на который ссылается файл описания может быть либо скомпилирован в сборку, или он может быть определен в ASCX-файл пользовательского элемента управления. В любом случае элемент управления, ссылка в импортированном файле описания должен существовать на веб-сервере, на котором размещена страницы, который пытается импортировать элемент управления. Файл описания ссылается на элемент управления имя и сборку (или файл), содержащий элемент управления, и файл описания, содержащий параметры, влияющие на значения свойств, внешний вид и поведение элемента управления.       Элемент управления ImportCatalogPart позволяет пользователям использовать общие параметры для элементов управления. Сложный элемент управления может иметь много свойств и параметров. Например, в узле выдающего в большой компании настраиваемый <xref:System.Web.UI.WebControls.WebParts.WebPart>управления может содержать несколько свойств, которые содержат значения, относящиеся к среде пользователей, например их подключения к базе данных, информация о подразделениях и т. д.</xref:System.Web.UI.WebControls.WebParts.WebPart> Элемент управления также может содержать несколько свойств, которые влияют на его внешний вид. Один пользователь может персонализировать элемент управления на определенном сайте и добиться его нормальной работы, экспортировать файл описания для элемента управления и затем совместно использовать файл описания с другими пользователями, которые могут импортировать файл, чтобы добавить элемент управления полностью настроенный на другие узлы, которые они могут персонализировать. Пока скомпилированная сборка или файл пользовательского элемента управления, содержащего элемент управления существует на веб-сервере, на котором размещается их сайт, пользователи могут добавлять элемент управления на другие веб-сайты.       Элемент управления ImportCatalogPart, который разработчик страницы необходимо добавить на веб-страницу представляет собой механизм, с помощью которого пользователи импортировать файл описания (и поэтому его связанный сервер управления) в веб-страницу. Когда пользователь переключает страницу в режим отображения каталога, элемент управления ImportCatalogPart и пользователь может использовать этот элемент управления, чтобы перейти к. Файл описания веб-части, соответствующий серверного элемента управления, который нужно импортировать. Выполнив пользовательского интерфейса, а также инструкции, предоставленные ImportCatalogPart элемента управления, пользователь имеет возможность добавить необходимый серверный элемент управления на веб-страницу, внешний вид и свойства полностью настроена как указано в импортированном файле описания.       Прежде чем <xref:System.Web.UI.WebControls.WebParts.WebPart>можно импортировать файл описания для элемента управления, пользователь должен сначала создать (Экспорт) файл на основе существующего <xref:System.Web.UI.WebControls.WebParts.WebPart>управления.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPart> Можно экспортировать файл описания для элемента управления, если выполняются следующие условия:-элемент управления имеет свойства, помеченные `Personalizable` атрибута.      -Файл Web.config содержит `enableExport` присвоено значение атрибута `true` на `<webParts>` элемент.      — Разработчик устанавливает значение <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>Свойства элемента управления значение, отличное от значения по умолчанию из <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, которое не допускает экспортирования.</xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> Если <xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A>имеет значение <xref:System.Web.UI.WebControls.WebParts.WebPartExportMode>, любое свойство, которое содержит <xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A>параметр с `Personalizable` атрибута не экспортируются, когда пользователь экспортирует файл описания.</xref:System.Web.UI.WebControls.WebParts.PersonalizableAttribute.IsSensitive%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartExportMode> </xref:System.Web.UI.WebControls.WebParts.WebPart.ExportMode%2A> Это позволяет разработчикам элемента управления для предотвращения конфиденциальные данные, такие как строки соединения, экспортируемых в определенных ситуациях.       Пользователь может экспортировать элемент управления, который был включен для экспорта, щелкнув команду Экспорт, которая отображается в меню команд элемента управления и следуйте инструкциям для сохранения. Файл описания веб-части для элемента управления. Другие пользователи могут затем импортировать этот файл для конфигурирования собственных экземпляров элемента управления.       Класс ImportCatalogPart содержит несколько свойств. <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A>Свойство содержит текст инструкции для пользователей при просмотре найдите файл описания.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A>Свойство содержит текст, который служит в качестве метки для импортированного элемента управления, как оно отображается в элементе управления ImportCatalogPart.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A>Содержит текст, который отображается, если ошибка возникает, когда выполняется импорт описание элемента управления.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A>Свойство переопределяет базовое свойство, чтобы назначить заголовок по умолчанию для элемента управления ImportCatalogPart, если разработчик не назначены заголовок.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>Свойство содержит текст для кнопки, пользователь нажимает кнопку, чтобы отправить файл описания и <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>свойство содержит инструкции по в процессе загрузки.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>       Класс ImportCatalogPart также содержит несколько уникальных методов. <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A>Метод возвращает <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>объект для каждого <xref:System.Web.UI.WebControls.WebParts.WebPart>элемента управления в каталоге, который включает элемент управления ImportCatalogPart для отображения сведений о каждом элементе управления сервера без необходимости создания экземпляра его.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions%2A> <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>Метод возвращает экземпляр конкретной <xref:System.Web.UI.WebControls.WebParts.WebPart>элемента управления, на основе описания, переданного методу.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart%2A>       Существуют некоторые специфические угрозы, связанные с использованием ImportCatalogPart элемента управления. Примером является возможность импортирования вредоносных данных в веб-приложения через файлы описания, используемые для импорта. Если кто-то разместил вредоносный код скрипта в качестве значения строкового свойства в файле описания, затем этот скрипт потенциально может быть выполнен, если пользователь импортирует файл описания и добавляет серверного элемента управления на веб-страницу. Чтобы свести к минимуму риск импортирования файлов описания с вредоносными данными, серверные элементы управления со строковыми свойствами должны обязательно кодировать данные свойства. Еще один риск связан с импортированием типов через файлы описания (см. [файлы описание элемента управления веб-частями](../Topic/Web%20Parts%20Control%20Description%20Files.md)). Пользователь-злоумышленник может отправлять запросы на загрузку многочисленных сборок в <xref:System.AppDomain>, что может привести к использованию чрезмерного объема памяти, потребляемого.</xref:System.AppDomain>       Чтобы избежать рисков, связанных с импортом, можно отключить функцию полностью, не используя функцию импорта или ImportCatalogPart управления. Или можно ограничить, какие пользователи имеют доступ к элементу управления. Это можно сделать программно, используя управление ролями (см. [управление ролями с помощью авторизации](~/add/includes/ajax-current-ext-md.md)). Например при загрузке страницы, можно проверить ли пользователь в определенные роли, например роль администратора. Если пользователь в роли, можно программным способом добавить ImportCatalogPart управления на страницу для этого пользователя. Чтобы ограничить набор пользователей, которые можно использовать элемент управления ImportCatalogPart может также использовать декларативный подход.  На веб-странице, который содержит каталог, можно поместить два <xref:System.Web.UI.WebControls.WebParts.CatalogZone>элементов управления: один для пользователей, которые можно импортировать и один для тех, кто не может.</xref:System.Web.UI.WebControls.WebParts.CatalogZone> Зоны для пользователей, которые можно импортировать будет содержать элемент управления ImportCatalogPart. Сама зона может быть размещен в <xref:System.Web.UI.WebControls.LoginView>элемента управления, который позволяет ограничить использование элемента управления в зоне, чтобы только те, прошедшие проверку подлинности пользователей или ролей, указываемые.</xref:System.Web.UI.WebControls.LoginView>"
  example:
  - "The following code example demonstrates how to use the ImportCatalogPart control declaratively and programmatically on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an ImportCatalogPart control.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#7](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that the page has a declarative reference to the ImportCatalogPart control, nested within the proper hierarchy of declarative elements. Notice also that several property values are assigned declaratively on the `<asp:importcatalogpart>` element. Also, the `Button1_Click` method updates a number of property values on the ImportCatalogPart control.  \n  \n In the page's <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls are declared. The `<aspSample:userinfowebpart>` control has an `exportmode=\"all\"` attribute on it. This attribute is required to enable users to export a description file for the control, which can then be imported by other users who wish to import the control using the description file.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Notice that some properties on these controls are marked with the `WebBrowsable` attribute. This enables the <xref:System.Web.UI.WebControls.WebParts.PropertyGridEditorPart> control to dynamically generate the user interface (UI) for a user to edit those properties when the controls are in edit mode. The properties are also marked with a `WebDisplayName` attribute, to specify the text of the label that appears next to each control in the editing UI. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n The custom control called `TextDisplayWebPart` is referenced on the Web page with an `<aspSample:TextDisplayWebPart>` element. The other control, called `UserInfoWebPart`, is also declared on the Web page initially, though you will remove it later to demonstrate the ability to import a description file for a control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_227_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_227_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is to edit the `UserInfoWebPart` control. Use the **Display Mode** drop-down list control and select **Edit** to switch the page to edit mode. Click the verbs menu of the `UserInfoWebPart` control (the downward arrow in the title bar), and then click **Edit**. When the editing UI appears, several editing controls appear below the `UserInfoWebPart` control that you can use to edit its field values. Edit some fields, click **OK**, and then use the **Display Mode** drop-down to return the page to browse mode.  \n  \n The second step is to export a .WebPart description file for the `UserInfoWebPart` control. Click the verbs menu on the custom control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. Now close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` control declaration element, then save and close the file. (You are doing this step to simulate a user who does not yet have the `UserInfoWebPart` control, so you can import the control to the page).  \n  \n Load the Web page again in a browser. The `UserInfoWebPart` control should not appear, because you removed it. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the ImportCatalogPart control, click the **Browse** button, and browse to the .WebPart file you created, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page.  \n  \n While you are in this view of the page, click the **Update ImportCatalogPart** button near the bottom of the page to see the effect of programmatically updating a number of property values on the ImportCatalogPart control. After clicking the button, observe how the various properties are changed in the UI.  \n  \n Finally, click **Close** to exit catalog mode and return the page to browse mode. The `UserInfoWebPart` control should now appear in the page, containing the values that it had when you exported it earlier."
  syntax:
    content: 'public sealed class ImportCatalogPart : System.Web.UI.WebControls.WebParts.CatalogPart'
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.WebControls.WebControl
  - System.Web.UI.WebControls.Panel
  - System.Web.UI.WebControls.WebParts.Part
  - System.Web.UI.WebControls.WebParts.CatalogPart
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientID
  - System.Web.UI.Control.ClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateControlCollection
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String)
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.Focus
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasControls
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.Control.Visible
  - System.Web.UI.WebControls.Panel.AddAttributesToRender(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.BackImageUrl
  - System.Web.UI.WebControls.Panel.CreateControlStyle
  - System.Web.UI.WebControls.Panel.Direction
  - System.Web.UI.WebControls.Panel.GroupingText
  - System.Web.UI.WebControls.Panel.HorizontalAlign
  - System.Web.UI.WebControls.Panel.RenderBeginTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.RenderEndTag(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.WebControls.Panel.ScrollBars
  - System.Web.UI.WebControls.Panel.SupportsDisabledAttribute
  - System.Web.UI.WebControls.Panel.Wrap
  - System.Web.UI.WebControls.WebControl.AccessKey
  - System.Web.UI.WebControls.WebControl.ApplyStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.Attributes
  - System.Web.UI.WebControls.WebControl.BackColor
  - System.Web.UI.WebControls.WebControl.BorderColor
  - System.Web.UI.WebControls.WebControl.BorderStyle
  - System.Web.UI.WebControls.WebControl.BorderWidth
  - System.Web.UI.WebControls.WebControl.ControlStyle
  - System.Web.UI.WebControls.WebControl.ControlStyleCreated
  - System.Web.UI.WebControls.WebControl.CopyBaseAttributes(System.Web.UI.WebControls.WebControl)
  - System.Web.UI.WebControls.WebControl.CssClass
  - System.Web.UI.WebControls.WebControl.DisabledCssClass
  - System.Web.UI.WebControls.WebControl.Enabled
  - System.Web.UI.WebControls.WebControl.EnableTheming
  - System.Web.UI.WebControls.WebControl.Font
  - System.Web.UI.WebControls.WebControl.ForeColor
  - System.Web.UI.WebControls.WebControl.HasAttributes
  - System.Web.UI.WebControls.WebControl.Height
  - System.Web.UI.WebControls.WebControl.IsEnabled
  - System.Web.UI.WebControls.WebControl.LoadViewState(System.Object)
  - System.Web.UI.WebControls.WebControl.MergeStyle(System.Web.UI.WebControls.Style)
  - System.Web.UI.WebControls.WebControl.SaveViewState
  - System.Web.UI.WebControls.WebControl.SkinID
  - System.Web.UI.WebControls.WebControl.Style
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#GetAttribute(System.String)
  - System.Web.UI.WebControls.WebControl.System#Web#UI#IAttributeAccessor#SetAttribute(System.String,System.String)
  - System.Web.UI.WebControls.WebControl.TabIndex
  - System.Web.UI.WebControls.WebControl.TagKey
  - System.Web.UI.WebControls.WebControl.TagName
  - System.Web.UI.WebControls.WebControl.ToolTip
  - System.Web.UI.WebControls.WebControl.TrackViewState
  - System.Web.UI.WebControls.WebControl.Width
  - System.Web.UI.WebControls.WebParts.CatalogPart.DisplayTitle
  - System.Web.UI.WebControls.WebParts.CatalogPart.GetDesignModeState
  - System.Web.UI.WebControls.WebParts.CatalogPart.OnPreRender(System.EventArgs)
  - System.Web.UI.WebControls.WebParts.CatalogPart.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.WebControls.WebParts.CatalogPart.WebPartManager
  - System.Web.UI.WebControls.WebParts.CatalogPart.Zone
  - System.Web.UI.WebControls.WebParts.Part.ChromeState
  - System.Web.UI.WebControls.WebParts.Part.ChromeType
  - System.Web.UI.WebControls.WebParts.Part.Controls
  - System.Web.UI.WebControls.WebParts.Part.DataBind
  - System.Web.UI.WebControls.WebParts.Part.Description
  - System.Web.UI.WebControls.WebParts.Part.System#Web#UI#WebControls#ICompositeControlDesignerAccessor#RecreateChildControls
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> класса."
  remarks: "Конструктор ImportCatalogPart используется по умолчанию. конструктор не объявлена в <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>класса и поэтому не специальные действия выполняются при создании нового экземпляра класса.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> Платформа .NET Framework использует конструктор для создания экземпляра класса.       Обычно не потребуется использовать конструктор ImportCatalogPart программными средствами в собственном коде. Предполагаемое использование элемента управления — для разработчиков страниц добавить его на страницу декларативно во время разработки."
  syntax:
    content: public ImportCatalogPart ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  id: BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает текстовое сообщение, которое дает пользователям возможность найти нужный файл описания."
  remarks: 'Свойство BrowseHelpText дает пользователям краткий обзор прежде всего, их необходимо сделать в процессе добавления импортированный элемент: укажите расположение файла описания, введя в пути или перейти к файлу. Типичная причина для изменения значения этого свойства — Если у вас есть особые инструкции для пользователей, например определенную сетевую папку, к которой они должны Обзор, чтобы найти файл описания.'
  example:
  - "The following code example demonstrates how to use the BrowseHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the BrowseHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_1.aspx)]  \n  \n In this section of code, the BrowseHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_847_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_847_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the BrowseHelpText property."
  syntax:
    content: public string BrowseHelpText { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая текст сообщения. Значение по умолчанию является сообщением конкретного языка и региональных параметров, предоставляемых .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  id: CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void CreateChildControls ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  id: DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает, какая кнопка в пользовательском интерфейсе (UI) обрабатывается как кнопка по умолчанию, который получает фокус, при отображении формы, которая содержит кнопку. Это свойство не предназначено для непосредственного вызова из кода разработчика страницы."
  remarks: "Код для этого свойства переопределяет базовое свойство наследуется от <xref:System.Web.UI.WebControls.Panel>класс, чтобы скрыть свойство от разработчиков и защитить его от применения тем.</xref:System.Web.UI.WebControls.Panel> На то, что он является открытым, это свойство используется внутри элемента управления веб-частей для отрисовки данного элемента управления по умолчанию и не предназначен для использования разработчиками страниц.       Это свойство не задано с помощью тем или тем таблиц стилей. Дополнительные сведения см. в разделе <xref:System.Web.UI.ThemeableAttribute>и [ASP.NET тем и обложек](~/add/includes/ajax-current-ext-md.md).</xref:System.Web.UI.ThemeableAttribute>"
  syntax:
    content: public override string DefaultButton { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> , получающий фокус по умолчанию в <xref href=&quot;System.Web.UI.WebControls.Panel&quot;> </xref> управления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  id: GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает коллекцию описаний из доступных <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> элементов управления в каталоге."
  remarks: "Метод GetAvailableWebPartDescriptions предоставляет реализацию для абстрактный базовый метод, объявленный в <xref:System.Web.UI.WebControls.WebParts.CatalogPart>классе.</xref:System.Web.UI.WebControls.WebParts.CatalogPart> Метод GetAvailableWebPartDescriptions возвращает сведения об описании для каждого элемента управления в каталоге. Обратите внимание, что в случае использования <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>контроля, может существовать только один сервер управления в каталоге одновременно, несмотря на то, что метод будет работать при наличии нескольких элементов управления.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>       <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>Объект, содержащий основные сведения об элементе <xref:System.Web.UI.WebControls.WebParts.WebPart>управления, включая ее идентификатор, ссылку на элемент управления и значений несколько важных свойств, которые наследуются от <xref:System.Web.UI.WebControls.WebParts.Part>класса, например <xref:System.Web.UI.WebControls.WebParts.Part.Title%2A>до <xref:System.Web.UI.WebControls.WebParts.Part.Description%2A>.</xref:System.Web.UI.WebControls.WebParts.Part.Description%2A> </xref:System.Web.UI.WebControls.WebParts.Part.Title%2A> </xref:System.Web.UI.WebControls.WebParts.Part> </xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartDescription>       Метод GetAvailableWebPartDescriptions повышает производительность. При создании каталога требуются сведения о каждом элементе управления, содержащихся в нем, включая название, описание, значок (если он существует) и идентификатор. Вместо того, чтобы создать экземпляр каждого элемента управления для получения этих сведений <xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>зоны, создается каталог вызывает метод GetAvailableWebPartDescriptions и вызов возвращает только сведения об описании для элемента управления, а не экземпляр элемента управления.</xref:System.Web.UI.WebControls.WebParts.CatalogZoneBase>"
  example:
  - "The following code example demonstrates how to use the GetAvailableWebPartDescriptions method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetAvailableWebPartDescriptions method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetAvailableWebPartDescriptions method is called within the code for the `Button1_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/cf979e6e-7b4d-460f-b044-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/cf979e6e-7b4d-460f-b044-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Select the check box, then click **Add** to add the control to the page. Repeat this process for the other control.  \n  \n While you are in this view of the page, click the **Get WebPart Description** button near the bottom of the page to see the effect of programmatically accessing the <xref:System.Web.UI.WebControls.WebParts.WebPartDescription> object for the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. The method used to access the description details, found in the `Button1_Click` method of the page source, is the GetAvailableWebPartDescriptions method. A label below the button displays basic details about the control.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection GetAvailableWebPartDescriptions ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection&quot;> </xref> , содержащий <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> для каждого элемента управления в каталоге."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  id: GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает ссылку на <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления на основе значений в описании, переданный методу."
  remarks: "Метод GetWebPart возвращает ссылку на <xref:System.Web.UI.WebControls.WebParts.WebPart>управления которого описания элементов соответствуют значениям <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>объект, переданный методу.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart> Как правило, этот метод используется вместе с <xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A>метод, который используется для получения описания элементов управления в каталоге.</xref:System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart.GetAvailableWebPartDescriptions%2A> Отдельные <xref:System.Web.UI.WebControls.WebParts.WebPart>затем можно извлечь или обрабатываться при необходимости путем передачи отдельных элементов управления <xref:System.Web.UI.WebControls.WebParts.WebPartDescription>объекты в метод GetWebPart.</xref:System.Web.UI.WebControls.WebParts.WebPartDescription> </xref:System.Web.UI.WebControls.WebParts.WebPart>"
  example:
  - "The following code example demonstrates how to use the GetWebPart method on a Web page. The example has four parts:  \n  \n-   A user control that enables you to change display modes on a Web Parts page.  \n  \n-   A Web page that contains a <xref:System.Web.UI.WebControls.WebParts.CatalogZone> control and an <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, along with code that uses the GetWebPart method.  \n  \n-   A source code file that contains two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls.  \n  \n-   An explanation of how the example works when you load the page in a browser.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. You should place the following source code in a file and name it Displaymodemenucs.ascx or Displaymodemenuvb.ascx (depending on which language you are using). For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_1.ascx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#7](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_1.ascx)]  \n  \n The second part of the code example is the Web page. At the top of the page are two `register` directives, one for the user control and one for the compiled component that contains the two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Both of these controls are referenced declaratively in the markup of the page. On the declarative references to the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (both begin with an `aspSample` prefix), note that each has an `exportMode=\"all\"` attribute added to it. This attribute enables you to export a .WebPart description file for the control, which you will use in a later to step to import the control to a page.  \n  \n> [!NOTE]\n>  To enable users of a Web Parts application to export a description file for <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, you must also enable the export feature in the Web application by adding an `enableExport=\"true\"` attribute to the `<webParts>` element (which is a child of the `<system.web>` element) in the Web.config file. Export is disabled by default, so if you have not yet enabled export for your application, edit the Web.config file and do it now.  \n  \n The Web page also has a declarative reference to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, nested within the proper hierarchy of declarative elements. The GetWebPart method is called within the code for the `Button2_Click` method.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Get#1](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_2.aspx)]  \n  \n The third part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates both methods of compiling, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/csharp/27bca851-c00e-4ece-b88f-_3.cs)]\n [!code-vb[WebParts_ImportCatalogPart_Get#6](~/add/codesnippet/visualbasic/27bca851-c00e-4ece-b88f-_3.vb)]  \n  \n Now run the code example. Load the Web page in a browser. The first step is export a .WebPart description file for each <xref:System.Web.UI.WebControls.WebParts.WebPart> control (for the `TextDisplayWebPart` and for the `UserInfoWebPart` control). For each control, click the verbs menu on the control (represented by the downward arrow in the title bar), and click **Export**. Follow the instructions to save a .WebPart description file for the control. After you have exported a description file for each control, close the Web page, and edit the page source in an editor. Delete the `<aspSample:userinfowebpart>` and the `<aspSample:textdisplaywebpart>` control declaration elements, then save and close the file. (You are doing this step to simulate a user who does not yet have these controls, so you can import the controls to the page).  \n  \n Load the Web page again in a browser. Use the **Display Mode** drop-down list control and select **Catalog** to switch the page to catalog mode. In the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Browse** button, browse to the .WebPart files you created, select one, then click the **Upload** button. A reference to the control should appear with a check box next to it. Now that the control description is uploaded to the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control, click the **Use GetWebPart** button near the bottom of the page. This will demonstrate the effect of calling the GetWebPart method and passing to it the control description currently loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Note that the associated server control is added immediately to the Web page, without the user having to click the **Add** button. The GetWebPart method, which is called in the `Button2_Click` method of the page source, returns the <xref:System.Web.UI.WebControls.WebParts.WebPart> control associated with the current description that is loaded in the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. Next the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.AddWebPart%2A> method is called, and the <xref:System.Web.UI.WebControls.WebParts.WebPart> control is directly added to the page. This demonstrates how to add a control programmatically from the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control without user intervention.  \n  \n After adding the first control, repeat the process to add the second control to the page. Finally, click **Close** to exit catalog mode and return the page to browse mode. Both custom controls should now appear in the page, containing the values they had when you exported description files earlier."
  syntax:
    content: public override System.Web.UI.WebControls.WebParts.WebPart GetWebPart (System.Web.UI.WebControls.WebParts.WebPartDescription description);
    parameters:
    - id: description
      type: System.Web.UI.WebControls.WebParts.WebPartDescription
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> , содержащий сведения об элементе управления."
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> управления, описание которого соответствует значению в <code> description </code>."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>description</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>description</code>недоступен <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartDescription&quot;> </xref> значение."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  id: ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает текст, отображаемый после пользователь импортирует файл описания для представления или описания импортированного элемента управления в каталоге импортируемых элементов управления."
  remarks: "Свойство ImportedPartLabelText обычно используется для коротких, общие метку, описание элемента управления, содержащихся в <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>управления.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>"
  example:
  - "The following code example demonstrates how to use the ImportedPartLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the ImportedPartLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_1.aspx)]  \n  \n In this section of code, the ImportedPartLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_718_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_718_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the ImportedPartLabelText property."
  syntax:
    content: public string ImportedPartLabelText { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая текст метки. Значение по умолчанию является сообщением конкретного языка и региональных параметров, предоставляемых .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  id: LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void LoadControlState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "Для добавления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Для добавления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  id: PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает сообщение об ошибке, которое отображается при возникновении ошибки во время импорта."
  remarks: "Свойство PartImportErrorLabelText полезно для уведомления пользователей, если некоторые проблемы или ошибка возникает, когда страница пытается импортировать файл описания."
  example:
  - "The following code example demonstrates how to use the PartImportErrorLabelText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the PartImportErrorLabelText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_1.aspx)]  \n  \n In this section of code, the PartImportErrorLabelText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1241_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1241_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the PartImportErrorLabelText property."
  syntax:
    content: public string PartImportErrorLabelText { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая текст метки. Значение по умолчанию является сообщением конкретного языка и региональных параметров, предоставляемых .NET Framework."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  id: Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void Render (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "Для добавления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  id: RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);
    parameters:
    - id: writer
      type: System.Web.UI.HtmlTextWriter
      description: "Для добавления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  id: SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  syntax:
    content: protected override object SaveControlState ();
    parameters: []
    return:
      type: System.Object
      description: "Для добавления."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  id: Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает заголовок, отображаемый в строке заголовка <xref href=&quot;System.Web.UI.WebControls.WebParts.ImportCatalogPart&quot;> </xref> управления."
  remarks: "Значение свойства заголовка отображается в строке заголовка <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart>управления, когда элемент управления является видимым в режиме каталога.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> При объявлении элемента управления на странице можно задать значение для свойства с помощью `Title` атрибута. Если не нужно вводить значение для заголовка, значение по умолчанию, зависящая от языка и региональных параметров используется для описания типа, этот элемент управления позволяет пользователям редактировать свойства."
  example:
  - "The following code example demonstrates how to use the Title property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the Title property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_1.aspx)]  \n  \n In this section of code, the Title property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_135_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_135_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the Title property."
  syntax:
    content: public override string Title { get; set; }
    return:
      type: System.String
      description: "Строка, используемая как заголовок элемента управления. Значение по умолчанию — имя вычисляемого элемента управления, предоставляемые в наборе элементов управления веб-частей."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  id: UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает текст для <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref> управления, который инициирует передачу данных файл описания."
  remarks: "Свойство UploadButtonText предоставляет текст для <xref:System.Web.UI.WebControls.Button>элемента управления, который инициирует процесс передачи.</xref:System.Web.UI.WebControls.Button> Если для этого свойства или назначить настраиваемый текст <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A>Свойства, текст должно было ясно, что пользователь отправляет файл описания.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText%2A> Текст должен сказать, или не означает, что процесс отправки выполняет отправку самого элемента управления."
  example:
  - "The following code example demonstrates how to use the UploadButtonText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadButtonText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_1.aspx)]  \n  \n In this section of code, the UploadButtonText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_939_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_939_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadButtonText property."
  syntax:
    content: public string UploadButtonText { get; set; }
    return:
      type: System.String
      description: "Строка, используется в качестве текста для <xref href=&quot;System.Web.UI.WebControls.Button&quot;> </xref>. Значение по умолчанию — строка конкретного языка и региональных параметров, предоставленных в наборе элементов управления веб-частей."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  id: UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  langs:
  - csharp
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает или задает текст сообщения, информирующего пользователя как отправить файл описания."
  remarks: "Свойство UploadHelpText предоставляет краткие предложения или фразы инструкции для пользователей, с просьбой нажать кнопку, чтобы отправить файл описания. Если для этого свойства или назначить настраиваемый текст <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A>Свойства, текст должно было ясно, что пользователь отправляет файл описания.</xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText%2A> Текст должен сказать, или не означает, что процесс отправки выполняет отправку самого элемента управления."
  example:
  - "The following code example demonstrates how to use the UploadHelpText property declaratively and programmatically. For the full code and instructions required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> class overview.  \n  \n In the following section of code, notice that the UploadHelpText property value is set declaratively for the control.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_1.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_1.aspx)]  \n  \n In this section of code, the UploadHelpText property value is assigned programmatically.  \n  \n [!code-cs[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1_2.aspx)]\n [!code-vb[WebParts_ImportCatalogPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1_2.aspx)]  \n  \n When you load the page in a browser, you can use the **Display Mode** drop-down list control to select **Catalog Mode** and switch the page to catalog mode. With the page in catalog mode and the description file uploaded, note the various text strings displayed in the user interface (UI) for the <xref:System.Web.UI.WebControls.WebParts.ImportCatalogPart> control. If you click the **Upload Description File** button, the text for several of the properties in the UI is changed, including the text for the UploadHelpText property."
  syntax:
    content: public string UploadHelpText { get; set; }
    return:
      type: System.String
      description: "Строка, используется в качестве инструкции для пользователя, чтобы отправить файл описания. Значение по умолчанию — строка конкретного языка и региональных параметров, предоставленных в наборе элементов управления веб-частей."
  overload: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.CatalogPart
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.CatalogPart
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart()
  nameWithType: ImportCatalogPart.ImportCatalogPart()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportCatalogPart()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls()
  nameWithType: ImportCatalogPart.CreateChildControls()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions()
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions()
- uid: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescriptionCollection
  nameWithType: WebPartDescriptionCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(System.Web.UI.WebControls.WebParts.WebPartDescription)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart(WebPartDescription)
  nameWithType: ImportCatalogPart.GetWebPart(WebPartDescription)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart(WebPartDescription)
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartDescription
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartDescription
  nameWithType: WebPartDescription
  fullName: System.Web.UI.WebControls.WebParts.WebPartDescription
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(System.Object)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState(Object)
  nameWithType: ImportCatalogPart.LoadControlState(Object)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ImportCatalogPart.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render(HtmlTextWriter)
  nameWithType: ImportCatalogPart.Render(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render(HtmlTextWriter)
- uid: System.Web.UI.HtmlTextWriter
  parent: System.Web.UI
  isExternal: false
  name: HtmlTextWriter
  nameWithType: HtmlTextWriter
  fullName: System.Web.UI.HtmlTextWriter
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(System.Web.UI.HtmlTextWriter)
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents(HtmlTextWriter)
  nameWithType: ImportCatalogPart.RenderContents(HtmlTextWriter)
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents(HtmlTextWriter)
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState()
  nameWithType: ImportCatalogPart.SaveControlState()
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState()
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
  fullName: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportCatalogPart
  nameWithType: ImportCatalogPart.ImportCatalogPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.BrowseHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: BrowseHelpText
  nameWithType: ImportCatalogPart.BrowseHelpText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.CreateChildControls*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: CreateChildControls
  nameWithType: ImportCatalogPart.CreateChildControls
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.DefaultButton*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: DefaultButton
  nameWithType: ImportCatalogPart.DefaultButton
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetAvailableWebPartDescriptions*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetAvailableWebPartDescriptions
  nameWithType: ImportCatalogPart.GetAvailableWebPartDescriptions
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.GetWebPart*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: GetWebPart
  nameWithType: ImportCatalogPart.GetWebPart
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.ImportedPartLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: ImportedPartLabelText
  nameWithType: ImportCatalogPart.ImportedPartLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.LoadControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: LoadControlState
  nameWithType: ImportCatalogPart.LoadControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.OnInit*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: OnInit
  nameWithType: ImportCatalogPart.OnInit
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.PartImportErrorLabelText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: PartImportErrorLabelText
  nameWithType: ImportCatalogPart.PartImportErrorLabelText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Render*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Render
  nameWithType: ImportCatalogPart.Render
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.RenderContents*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: RenderContents
  nameWithType: ImportCatalogPart.RenderContents
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.SaveControlState*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: SaveControlState
  nameWithType: ImportCatalogPart.SaveControlState
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.Title*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: Title
  nameWithType: ImportCatalogPart.Title
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadButtonText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadButtonText
  nameWithType: ImportCatalogPart.UploadButtonText
- uid: System.Web.UI.WebControls.WebParts.ImportCatalogPart.UploadHelpText*
  parent: System.Web.UI.WebControls.WebParts.ImportCatalogPart
  isExternal: false
  name: UploadHelpText
  nameWithType: ImportCatalogPart.UploadHelpText
