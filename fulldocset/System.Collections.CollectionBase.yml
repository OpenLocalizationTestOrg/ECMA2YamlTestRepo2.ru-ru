### YamlMime:ManagedReference
items:
- uid: System.Collections.CollectionBase
  id: CollectionBase
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: CollectionBase
  nameWithType: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  summary: "Предоставляет <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> базовый класс для строго типизированной коллекции."
  remarks: "Экземпляр CollectionBase всегда является изменяемым. Приведена <xref:System.Collections.ReadOnlyCollectionBase>только для чтения версию этого класса.</xref:System.Collections.ReadOnlyCollectionBase>       Емкость CollectionBase — количество элементов, которые может вместить CollectionBase. При добавлении элементов CollectionBase емкость автоматически увеличивается должным образом посредством перераспределения. Можно уменьшить емкость, задав <xref:System.Collections.CollectionBase.Capacity%2A>свойство явно.</xref:System.Collections.CollectionBase.Capacity%2A>"
  example:
  - "The following code example implements the CollectionBase class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/t-system.collections.col_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/t-system.collections.col_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.col_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CollectionBase : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> класса с начальной емкостью по умолчанию."
  remarks: "Емкость <xref:System.Collections.CollectionBase>— количество элементов, <xref:System.Collections.CollectionBase>поместятся.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> При добавлении элементов к <xref:System.Collections.CollectionBase>, емкость автоматически увеличивается требуемым образом посредством перераспределения внутреннего массива.</xref:System.Collections.CollectionBase>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase>       Этот конструктор является операцией o(1)."
  syntax:
    content: protected CollectionBase ();
    parameters: []
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> класса с указанной емкостью."
  remarks: "Емкость <xref:System.Collections.CollectionBase>— количество элементов, <xref:System.Collections.CollectionBase>поместятся.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> При добавлении элементов к <xref:System.Collections.CollectionBase>, емкость автоматически увеличивается требуемым образом посредством перераспределения внутреннего массива.</xref:System.Collections.CollectionBase>       Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase>       Этот конструктор является операцией O (`n`) операции, где `n` является `capacity`."
  syntax:
    content: protected CollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Число элементов, которые может изначально вместить новый список."
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает число элементов, которые <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> может содержать."
  remarks: "Емкость — количество элементов, <xref:System.Collections.CollectionBase>можно хранить.</xref:System.Collections.CollectionBase> <xref:System.Collections.CollectionBase.Count%2A>число элементов, фактически <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase></xref:System.Collections.CollectionBase.Count%2A>       Емкость всегда больше или равно <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A> Если <xref:System.Collections.CollectionBase.Count%2A>превышает емкость при добавлении элементов, емкость автоматически увеличивается за счет перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</xref:System.Collections.CollectionBase.Count%2A>       Емкость может быть уменьшен путем установки свойства емкости явным образом. Если явно задано значение емкости, внутреннего массива также перераспределяется в соответствии с указанной емкостью.       Получение значения данного свойства является операцией o(1). Задание этого свойства является операцией O (`n`) операции, где `n` — новое значение емкости."
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Число элементов, <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> может содержать."
  overload: System.Collections.CollectionBase.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Емкость присвоено значение, которое меньше, чем <xref:System.Collections.CollectionBase.Count*>.</xref:System.Collections.CollectionBase.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Не хватает памяти доступны в системе."
  platform:
  - net462
- uid: System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет все объекты из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра. Этот метод не может быть переопределен."
  remarks: "<xref:System.Collections.CollectionBase.Count%2A>равен нулю.</xref:System.Collections.CollectionBase.Count%2A>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Для выполнения настраиваемых действий до или после очистки коллекции, Переопределите защищенный <xref:System.Collections.CollectionBase.OnClear%2A>или <xref:System.Collections.CollectionBase.OnClearComplete%2A>метод.</xref:System.Collections.CollectionBase.OnClearComplete%2A> </xref:System.Collections.CollectionBase.OnClear%2A>"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.CollectionBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает количество элементов, содержащихся в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра. Это свойство не может быть переопределен."
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_0_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Число элементов, содержащихся в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра.       Получение значения данного свойства является операцией o(1)."
  overload: System.Collections.CollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает перечислитель, выполняющий перебор элементов <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A> В этой позиции вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным и при следующем вызове <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если коллекция изменяется в промежутке между <xref:System.Collections.IEnumerator.MoveNext%2A>и <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>возвращает элемент, для которого оно задано, даже если перечислитель уже недействителен.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       Перечислитель не имеет монопольного доступа к коллекции. Следовательно, перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, которой приводит к возникновению исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       Сбой метода GetEnumerator не является видимым для COM-клиентов по умолчанию, наследование <xref:System.Collections.CollectionBase>представить его в класс и может привести к нежелательному поведению COM-клиентам.</xref:System.Collections.CollectionBase>       Этот метод является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_2_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_2_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_2_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Для <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.CollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref href=&quot;System.Collections.ArrayList&quot;> </xref> со списком элементов в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не для экземпляра, возвращаемого свойством InnerList.</xref:System.Collections.CollectionBase.List%2A>"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> Представляющий <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> самом экземпляре.       Получение значения данного свойства является операцией o(1)."
  overload: System.Collections.CollectionBase.InnerList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IList>со списком элементов в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра.</xref:System.Collections.IList>"
  remarks: "Методы On * вызываются только на экземпляр, возвращаемый список свойств, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A>       Получение значения данного свойства является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_1_1.vb)]"
  syntax:
    content: protected System.Collections.IList List { get; }
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>Представляющий <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> самом экземпляре.</xref:System.Collections.IList>"
  overload: System.Collections.CollectionBase.List*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы после очистки содержимого <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций перед очисткой коллекции.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Если процесс завершается ошибкой, коллекция возвращается обратно в предыдущее состояние.       Реализация по умолчанию этого метода является операцией o(1)."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы после очистки содержимого <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций после очистки коллекции.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Реализация по умолчанию этого метода является операцией o(1)."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы перед вставкой нового элемента в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций перед вставкой указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Если процесс завершается ошибкой, коллекция возвращается обратно в предыдущее состояние.       Реализация по умолчанию этого метода является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_1_1.vb)]"
  syntax:
    content: protected virtual void OnInsert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому нужно вставить `value`."
    - id: value
      type: System.Object
      description: "Новое значение элемента по индексу `index`."
  overload: System.Collections.CollectionBase.OnInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы после добавления нового элемента в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций после вставки указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Коллекция возвращается обратно в предыдущее состояние, если возникает одно из следующих действий:-процесс завершается ошибкой.      — Этот метод переопределяется для создания исключения.       Реализация по умолчанию этого метода является операцией o(1)."
  syntax:
    content: protected virtual void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому нужно вставить `value`."
    - id: value
      type: System.Object
      description: "Новое значение элемента по индексу `index`."
  overload: System.Collections.CollectionBase.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские действия при удалении элемента из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций перед удалением указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Если процесс завершается ошибкой, коллекция возвращается обратно в предыдущее состояние.       Реализация по умолчанию этого метода является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_0_1.vb)]"
  syntax:
    content: protected virtual void OnRemove (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `value` может быть найден."
    - id: value
      type: System.Object
      description: "Значение элемента, удаляемого из `index`."
  overload: System.Collections.CollectionBase.OnRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы после удаления элемента из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций после удаления указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Коллекция возвращается обратно в предыдущее состояние, если возникает одно из следующих действий:-процесс завершается ошибкой.      — Этот метод переопределяется для создания исключения.       Реализация по умолчанию этого метода является операцией o(1)."
  syntax:
    content: protected virtual void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `value` может быть найден."
    - id: value
      type: System.Object
      description: "Значение элемента, удаляемого из `index`."
  overload: System.Collections.CollectionBase.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы перед заданием значения <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций перед заданием указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Если процесс завершается ошибкой, коллекция возвращается обратно в предыдущее состояние.       Реализация по умолчанию этого метода является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/b38eea40-0898-4372-aa13-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/b38eea40-0898-4372-aa13-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/b38eea40-0898-4372-aa13-_1.vb)]"
  syntax:
    content: protected virtual void OnSet (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `oldValue` может быть найден."
    - id: oldValue
      type: System.Object
      description: "Значение для замены `newValue`."
    - id: newValue
      type: System.Object
      description: "Новое значение элемента по индексу `index`."
  overload: System.Collections.CollectionBase.OnSet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские процессы после установки значения <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра."
  remarks: "Реализация по умолчанию этот метод предназначен для переопределения в производном классе для выполнения некоторых операций после задания указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Коллекция возвращается обратно в предыдущее состояние, если возникает одно из следующих действий:-процесс завершается ошибкой.      — Этот метод переопределяется для создания исключения.       Реализация по умолчанию этого метода является операцией o(1)."
  syntax:
    content: protected virtual void OnSetComplete (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `oldValue` может быть найден."
    - id: oldValue
      type: System.Object
      description: "Значение для замены `newValue`."
    - id: newValue
      type: System.Object
      description: "Новое значение элемента по индексу `index`."
  overload: System.Collections.CollectionBase.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Выполняет дополнительные пользовательские действия при проверке значения."
  remarks: "Реализация по умолчанию этот метод определяет, является ли `value` — `null`и если да, вызывается <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException> Он предназначен для переопределения в производном классе для выполнения дополнительных действий при проверке указанного элемента.       Методы On * вызываются только на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.List%2A>Свойства, но не на экземпляр, возвращаемый <xref:System.Collections.CollectionBase.InnerList%2A>свойство.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Реализация по умолчанию этого метода является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_3_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_3_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_3_1.vb)]"
  syntax:
    content: protected virtual void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Объект для проверки."
  overload: System.Collections.CollectionBase.OnValidate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет элемент по указанному индексу из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> экземпляра. Этот метод не является переопределяемым."
  remarks: "В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс удаляемого элемента."
  overload: System.Collections.CollectionBase.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше или равно значению <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует целую коллекцию <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> в совместимый одномерный массив <xref:System.Array>, начиная с указанного индекса целевого массива.</xref:System.Array>"
  remarks: "Указанный массив должен иметь совместимый тип.       Этот метод использует <xref:System.Array.Copy%2A?displayProperty=fullName>копируются элементы.</xref:System.Array.Copy%2A?displayProperty=fullName>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>именно назначения для элементов, копируемых из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> больше, чем свободное пространство от <code>index</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли доступ к <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> является синхронизированным (потокобезопасным)."
  remarks: "Объект <xref:System.Collections.CollectionBase>экземпляра не синхронизирована.</xref:System.Collections.CollectionBase> Производные классы могут предоставлять синхронизированную версию <xref:System.Collections.CollectionBase>с помощью <xref:System.Collections.ICollection.SyncRoot%2A>свойство.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, которой приводит к возникновению исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb) ] получение значения данного свойства является операцией o(1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Производные классы могут предоставлять собственную синхронизированную версию <xref:System.Collections.CollectionBase>с помощью <xref:System.Collections.ICollection.SyncRoot%2A>свойство.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase> Синхронизированный код должен выполнять операции на <xref:System.Collections.ICollection.SyncRoot%2A>из <xref:System.Collections.CollectionBase>, не непосредственно на <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности, это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в <xref:System.Collections.CollectionBase>объекта.</xref:System.Collections.CollectionBase>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, которой приводит к возникновению исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb) ] получение значения данного свойства является операцией o(1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Добавляет объект в конец <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Если <xref:System.Collections.CollectionBase.Count%2A>уже равна емкости, емкость списка удваивается автоматически перераспределения внутреннего массива и копирование существующих элементов в новый массив перед добавлением нового элемента.</xref:System.Collections.CollectionBase.Count%2A>       Если <xref:System.Collections.CollectionBase.Count%2A>меньше, чем значение емкости, этот метод является операцией o(1).</xref:System.Collections.CollectionBase.Count%2A> Если емкость требуется увеличить для размещения нового элемента, этот метод становится операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/9be064c1-54ea-4721-8714-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/9be064c1-54ea-4721-8714-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/9be064c1-54ea-4721-8714-_1.vb)]"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для добавления в конец <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "<xref href=&quot;System.Collections.CollectionBase&quot;> </xref> Индекс, по которому <code> value </code> был добавлен."
  overload: System.Collections.CollectionBase.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.CollectionBase&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> содержит конкретный элемент."
  remarks: "Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методов в `item` определить, является ли `item` существует.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/c05c77a6-90e8-47cd-a625-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/c05c77a6-90e8-47cd-a625-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/c05c77a6-90e8-47cd-a625-_1.vb)]"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> содержит указанный <code> value </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Осуществляет поиск указанного <xref:System.Object>и возвращает отсчитываемый от нуля индекс первого вхождения в пределах всего <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  remarks: "Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методов в `item` определить, является ли `item` существует.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/154015bb-f734-471d-93de-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/154015bb-f734-471d-93de-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/154015bb-f734-471d-93de-_1.vb)]"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для поиска в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого вхождения <code> value </code> в пределах всего <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>, если он найден; в противном случае — значение -1."
  overload: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Вставляет элемент в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> по указанному индексу."
  remarks: "Если <xref:System.Collections.CollectionBase.Count%2A>уже равна емкости, емкость списка удваивается посредством автоматического перераспределения внутреннего массива перед добавлением нового элемента.</xref:System.Collections.CollectionBase.Count%2A>       Если `index` равен <xref:System.Collections.CollectionBase.Count%2A>, `value` добавляется в конец <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase.Count%2A>       В коллекциях с непрерывным набором элементов таких как списки, следующие за точкой вставки элементы перемещаются вниз для размещения нового элемента. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/f8b730a7-8cec-40ed-9d7e-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/f8b730a7-8cec-40ed-9d7e-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/f8b730a7-8cec-40ed-9d7e-_1.vb)]"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому `value` следует вставить."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для вставки.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше, чем <xref:System.Collections.CollectionBase.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.CollectionBase&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> имеет фиксированный размер."
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы после создания коллекции, но разрешается изменять существующие элементы.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> доступно только для чтения."
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. Таким образом при внесении изменений в базовую коллекцию, доступную только для чтения коллекцию отражает эти изменения.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает элемент по указанному индексу."
  remarks: "Это свойство предоставляет возможность доступа к указанному элементу коллекции с помощью следующего синтаксиса: `myCollection[index]`.       Получение значения данного свойства является операцией o(1). Задание этого свойства также является операцией o(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/83a912ba-0bf4-468a-a9c4-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/83a912ba-0bf4-468a-a9c4-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/83a912ba-0bf4-468a-a9c4-_1.vb)]"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс элемента, который требуется получить или задать."
    return:
      type: System.Object
      description: "Элемент по указанному индексу."
  overload: System.Collections.CollectionBase.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля.       - или - <code>index</code> больше или равно значению <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет первое вхождение указанного объекта из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Если <xref:System.Collections.CollectionBase>не содержит указанный объект <xref:System.Collections.CollectionBase>остается неизменным.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Исключение не возникает.       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Этот метод определяет равенство, вызвав <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы в сегменты, например в хэш-таблице."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/92a20c91-2133-45e3-9527-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/92a20c91-2133-45e3-9527-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/92a20c91-2133-45e3-9527-_1.vb)]"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для удаления из <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> value </code> Параметр не найден в <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> объекта."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.CollectionBase&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.CollectionBase.#ctor
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.Capacity
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
- uid: System.Collections.CollectionBase.Count
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.CollectionBase.InnerList
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.CollectionBase.List
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.CollectionBase.OnClear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
- uid: System.Collections.CollectionBase.OnClearComplete
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
- uid: System.Collections.CollectionBase.#ctor*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase
  nameWithType: CollectionBase.CollectionBase
- uid: System.Collections.CollectionBase.Capacity*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear
  nameWithType: CollectionBase.Clear
- uid: System.Collections.CollectionBase.Count*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: CollectionBase.GetEnumerator
- uid: System.Collections.CollectionBase.InnerList*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
- uid: System.Collections.CollectionBase.List*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
- uid: System.Collections.CollectionBase.OnClear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear
  nameWithType: CollectionBase.OnClear
- uid: System.Collections.CollectionBase.OnClearComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete
  nameWithType: CollectionBase.OnClearComplete
- uid: System.Collections.CollectionBase.OnInsert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert
  nameWithType: CollectionBase.OnInsert
- uid: System.Collections.CollectionBase.OnInsertComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete
  nameWithType: CollectionBase.OnInsertComplete
- uid: System.Collections.CollectionBase.OnRemove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove
  nameWithType: CollectionBase.OnRemove
- uid: System.Collections.CollectionBase.OnRemoveComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete
  nameWithType: CollectionBase.OnRemoveComplete
- uid: System.Collections.CollectionBase.OnSet*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet
  nameWithType: CollectionBase.OnSet
- uid: System.Collections.CollectionBase.OnSetComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete
  nameWithType: CollectionBase.OnSetComplete
- uid: System.Collections.CollectionBase.OnValidate*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate
  nameWithType: CollectionBase.OnValidate
- uid: System.Collections.CollectionBase.RemoveAt*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt
  nameWithType: CollectionBase.RemoveAt
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: CollectionBase.System.Collections.IList.Add
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: CollectionBase.System.Collections.IList.Contains
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: CollectionBase.System.Collections.IList.IndexOf
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: CollectionBase.System.Collections.IList.Insert
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: CollectionBase.System.Collections.IList.Item
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: CollectionBase.System.Collections.IList.Remove
