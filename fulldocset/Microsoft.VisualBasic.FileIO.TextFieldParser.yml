### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser
  id: TextFieldParser
  children:
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  - Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  - Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  - Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  - Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  - Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  - Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  - Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  langs:
  - csharp
  name: TextFieldParser
  nameWithType: TextFieldParser
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser
  type: Class
  summary: "Предоставляет методы и свойства для анализа структурированных текстовых файлов."
  remarks: "`TextFieldParser` Объект предоставляет методы и свойства для анализа структурированных текстовых файлов. Анализ текстового файла с `TextFieldParser` похож на итерацию содержимого текстового файла, а `ReadFields` метод для извлечения полей текста аналогичен разделению строк.       `TextFieldParser` Можно проанализировать два типа файлов: с разделителями либо поле фиксированной длины. Некоторые свойства, такие как `Delimiters` и `HasFieldsEnclosedInQuotes` важны только при работе с файлами с разделителями, тогда как `FieldWidths` свойство применяется только при работе с файлами фиксированной ширины.       В следующей таблице перечислены примеры задач, связанных с `Microsoft.VisualBasic.FileIO.TextFieldParser` объекта.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|   | Чтение из текстового файла с несколькими форматами | [Как: чтение из текстовых файлов различных форматов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example parses through a tab-delimited text file, `Bigfile`.  \n  \n [!code-vb[VbVbalrTextFieldParser#17](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._9_1.vb)]"
  syntax:
    content: 'public class TextFieldParser : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> Поток для синтаксического анализа."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>не удается прочитать из."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  id: '#ctor(System.IO.TextReader)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `reader` параметра."
  syntax:
    content: public TextFieldParser (System.IO.TextReader reader);
    parameters:
    - id: reader
      type: System.IO.TextReader
      description: "<xref:System.IO.TextReader>.</xref:System.IO.TextReader> <xref:System.IO.TextReader>Поток может быть проанализирован.</xref:System.IO.TextReader>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр."
  syntax:
    content: public TextFieldParser (string path);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Полный путь файла для синтаксического анализа."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>является пустой строкой."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> Поток для синтаксического анализа."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> Кодировка символов, которая используется, если кодировка не определена из файла. Значение по умолчанию — <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>не удается прочитать из."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  id: '#ctor(System.String,System.Text.Encoding)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр.      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение."
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Полный путь файла для синтаксического анализа."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> Кодировка символов, которая используется, если кодировка не определена из файла. Значение по умолчанию — <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>является пустой строкой или <code>defaultEncoding</code> — <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.       Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока. Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие. В противном случае указана кодировка `defaultEncoding` используется.      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> Поток для синтаксического анализа."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> Кодировка символов, которая используется, если кодировка не определена из файла. Значение по умолчанию — <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Указывает, следует ли выполнять поиск меток порядка байтов в начале файла. Значение по умолчанию — <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>не удается прочитать из."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.String,System.Text.Encoding,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр.       Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока. Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие. В противном случае указана кодировка `defaultEncoding` используется.      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение."
  syntax:
    content: public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);
    parameters:
    - id: path
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Полный путь файла для синтаксического анализа."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> Кодировка символов, которая используется, если кодировка не определена из файла. Значение по умолчанию — <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Указывает, следует ли выполнять поиск меток порядка байтов в начале файла. Значение по умолчанию — <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>является пустой строкой или <code>defaultEncoding</code> — <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)'
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Initializes a new instance of the <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;></xref> class."
  remarks: "Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.       Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока. Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие. В противном случае указана кодировка `defaultEncoding` используется.      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение."
  syntax:
    content: public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>.</xref:System.IO.Stream> Поток для синтаксического анализа."
    - id: defaultEncoding
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>.</xref:System.Text.Encoding> Кодировка символов, которая используется, если кодировка не определена из файла. Значение по умолчанию — <xref:System.Text.Encoding.UTF8*>.</xref:System.Text.Encoding.UTF8*>"
    - id: detectEncoding
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Указывает, следует ли выполнять поиск меток порядка байтов в начале файла. Значение по умолчанию — <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
    - id: leaveOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Указывает, следует ли оставить `stream` открытые во время <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> объект закрыт. Значение по умолчанию — <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>or <code>defaultEncoding</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>не удается прочитать из."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  id: Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Закрывает текущий <xref uid=&quot;langword_csharp_TextFieldParser&quot; name=&quot;TextFieldParser&quot; href=&quot;&quot;> </xref> объекта."
  remarks: ''
  example:
  - "This example closes the `TextFieldParser``FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#14](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._27_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  id: CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Определяет маркер комментария. Маркер комментария является строкой, при помещении в начале строки указывает, что строка является комментарием и не должна обрабатываться средством синтаксического анализа."
  remarks: "Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.       Маркеры комментариев нулевой длины игнорируются."
  example:
  - "This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.  \n  \n [!code-vb[VbVbalrTextFieldParser#5](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._69_1.vb)]"
  syntax:
    content: public string[] CommentTokens { get; set; }
    return:
      type: System.String[]
      description: "Массив строк, содержащий все комментария токены для <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> объекта."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Маркер комментария включает пробел."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  id: Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Определяет разделители для текстового файла."
  remarks: "Это свойство применяется только тогда, когда <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>свойству `FieldType.Delimited`.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>       Определение разделителей для текстового файла также может быть выполнено с <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>метод.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A>       В следующей таблице перечислены задачи с использованием пример `Delimiters` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).  \n  \n [!code-vb[VbVbalrTextFieldParser#9](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._88_1.vb)]"
  syntax:
    content: public string[] Delimiters { get; set; }
    return:
      type: System.String[]
      description: "Массив строк, содержащий все разделителей полей для <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> объекта."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Разделитель имеет значение символа новой строки, является пустой строкой, или <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  id: Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Освобождает ресурсы, используемые <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> объекта."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Освобождает ресурсы, используемые <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> объекта."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Логическое значение. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Освобождает управляемые и неуправляемые ресурсы; <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> освобождает только неуправляемые ресурсы."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  id: EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Возвращает <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> при наличии не непустой без комментариев строки между текущей позицией курсора и концом файла."
  remarks: "Это свойство может использоваться при чтении из файла для определения конца считываемых данных.       В следующей таблице перечислены примеры задач, связанных с `EndOfData` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#6](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public bool EndOfData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если больше нет данных для чтения; в противном случае <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  id: ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Возвращает строки, вызвавшей самой последней <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> исключение."
  remarks: "Если не <xref:Microsoft.VisualBasic.FileIO.MalformedLineException>исключений, возвращается пустая строка.</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>Свойство может использоваться для отображения номера строки, вызвавшей исключение.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A>       В следующей таблице перечислены примеры задач, связанных с `ErrorLine` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#1](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public string ErrorLine { get; }
    return:
      type: System.String
      description: "Строки, вызвавшей самой последней <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> исключение."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  id: ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Возвращает номер строки, вызвавшей самой последней <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> исключение."
  remarks: "Если не <xref:Microsoft.VisualBasic.FileIO.MalformedLineException>исключений, возвращается значение -1.</xref:Microsoft.VisualBasic.FileIO.MalformedLineException>       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A>Свойство может использоваться для отображения номера строки, вызвавшей исключение.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> Пустые строки и комментарии не учитываются при определении номера строки.       В следующей таблице перечислены примеры задач, связанных с `ErrorLineNumber` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.  \n  \n [!code-vb[VbVbalrTextFieldParser#3](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._11_1.vb)]"
  syntax:
    content: public long ErrorLineNumber { get; }
    return:
      type: System.Int64
      description: "Номер строки, вызвавшей самой последней <xref href=&quot;Microsoft.VisualBasic.FileIO.MalformedLineException&quot;> </xref> исключение."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  id: FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Обозначает ширину каждого столбца в анализируемом текстовом файле."
  remarks: "Это свойство применяется только тогда, когда <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A>свойству `FieldType.FixedWidth`.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> Если последний элемент массива меньше или равен нулю, предполагается, что поле является переменной ширины.       <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>Метод может также использоваться для задания ширины поля.</xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A>       В следующей таблице перечислены примеры задач, связанных с `FieldWidths` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width  \n  \n [!code-vb[VbVbalrTextFieldParser#16](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._92_1.vb)]"
  syntax:
    content: public int[] FieldWidths { get; set; }
    return:
      type: System.Int32[]
      description: "Целочисленный массив, содержащий ширину каждого столбца в анализируемом текстовом файле."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Значение ширины в любом месте, отличном от последней записи массива меньше или равно нулю."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  id: Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Позволяет <xref href=&quot;Microsoft.VisualBasic.FileIO.TextFieldParser&quot;> </xref> объекту пытаться освободить ресурсы и выполнить другие операции очистки, прежде чем он будет удален при сборке мусора."
  syntax:
    content: ~TextFieldParser ();
    parameters: []
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  id: HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Обозначает, заключены ли поля в кавычки при синтаксическом анализе файла с разделителями."
  remarks: "Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.       Если свойство `True`, предполагается, что поля должны быть заключены в кавычки (» «) и могут содержать символ конца строки.       Если поле заключено в кавычки, например, `abc, &quot;field2a,field2b&quot;, field3` и это свойство имеет `True`, затем весь текст, заключенный в кавычки будет возвращаться как есть; в этом примере вернет `abc|field2a,field2b|field3`. Присвоение этому свойству `False` приведет к тому, в этом примере возврата `abc|&quot;field2a|field2b&quot;|field3`."
  example:
  - "This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.  \n  \n [!code-vb[VbVbalrTextFieldParser#18](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public bool HasFieldsEnclosedInQuotes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если поля должны быть заключены в кавычки. в противном случае <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  id: LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Возвращает номер текущей строки или возвращает -1, если больше нет символов, доступных в потоке."
  remarks: "Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.       Пустые строки и комментарии не учитываются при определении номера строки."
  example:
  - "This example searches for the name \"Jones\" in the text file and reports what line(s) it occurs on.  \n  \n [!code-vb[VbVbalrTextFieldParser#11](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public long LineNumber { get; }
    return:
      type: System.Int64
      description: "Номер текущей строки."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  id: PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Считывает указанное количество символов без перемещения курсора."
  remarks: "`numberOfChars` Значение должно быть меньше, чем общее число символов в строке. Если это не так, возвращает строку `PeekChars` будет усечен до длины строки.       Пустые строки учитываются.       Символы конца строки не возвращаются.       `PeekChars` Метод не выполняет синтаксический анализ; символ конца строки в поле с разделителями интерпретируется как фактический конец строки.       В следующей таблице перечислены примеры задач, связанных с `PeekChars` метод.      | Чтобы | См. |   |--------|---------|   | Определить формат поля перед его анализом | [Как: чтение из текстовых файлов различных форматов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.  \n  \n [!code-vb[VbVbalrTextFieldParser#8](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._48_1.vb)]"
  syntax:
    content: public string PeekChars (int numberOfChars);
    parameters:
    - id: numberOfChars
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Int32&quot; name=&quot;Int32&quot; href=&quot;&quot;></xref>. Число символов для чтения. Обязательный параметр."
    return:
      type: System.String
      description: "Строка, содержащая указанное количество символов чтения."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>numberOfChars</code>меньше 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  id: ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Считывает все поля в текущей строке, возвращает их в виде массива строк и перемещает курсор на следующую строку, содержащую данные."
  remarks: "Чтобы разрешить пользователям выполнить синтаксический анализ текстовых файлов в различных форматах, `ReadFields` метод проверяет значения `TextFieldType`, `Delimiters`, и `FieldWidths`, если они заданы, при каждом вызове. Пользователям необходимо правильно настроить `TextFieldType` и `FieldWidths` или `Delimiters` необходимые свойства. Если `TextFieldType` задано значение `Delimited`, и `Delimiters` не задано, или если `TextFieldType` равно `FixedWidth` и `FieldWidths`, создается исключение.       Если `ReadFields` обнаруживает пустые строки, они пропускаются, и возвращается следующей непустой строкой.       Если `ReadFields` метод не может проанализировать текущей строки, он вызывает исключение и не переходит на следующую строку. Благодаря этому приложение может попытаться выполнить анализ строки еще раз.       В следующей таблице перечислены примеры задач, связанных с `ReadFields` метод.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`. The example writes the fields to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._242_1.vb)]"
  syntax:
    content: public string[] ReadFields ();
    parameters: []
    return:
      type: System.String[]
      description: "Массив строк, который содержит значения полей для текущей строки."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  exceptions:
  - type: Microsoft.VisualBasic.FileIO.MalformedLineException
    commentId: T:Microsoft.VisualBasic.FileIO.MalformedLineException
    description: "Не удается обработать поле с использованием указанного формата."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  id: ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Возвращает текущую строку в виде строки и перемещает курсор на следующую строку."
  remarks: "`ReadLine` Метод не выполняет синтаксический анализ; символ конца строки в поле с разделителями интерпретируется как фактический конец строки.       `Nothing`возвращается, если достигнут конец файла."
  example:
  - "This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#15](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._138_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.  \n  \n This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line."
  syntax:
    content: public string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "Текущая строка из файла или потока."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  id: ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Считывает оставшуюся часть текстового файла и возвращает его в виде строки."
  remarks: "Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.       Если больше нечего для чтения, так как был достигнут конец файла, `Nothing` возвращается.       `ReadToEnd` Метод не пропускает пустые строки и комментарии."
  example:
  - "This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.  \n  \n [!code-vb[VbVbalrTextFieldParser#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._200_1.vb)]  \n  \n If `Testfile.txt` does not exist, it is created by the `WriteAllText` method."
  syntax:
    content: public string ReadToEnd ();
    parameters: []
    return:
      type: System.String
      description: "Оставшийся текст из файла или потока."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  id: SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Задает разделители для чтения для указанных значений и задает тип поля <xref uid=&quot;langword_csharp_Delimited&quot; name=&quot;Delimited&quot; href=&quot;&quot;> </xref>."
  remarks: "Существующее содержимое `Delimiters` свойство очищается, когда задается этот метод.       Этот метод предоставляет способ для задания разделителей без создания массива.       В следующей таблице перечислены задачи с использованием пример `SetDelimiters` метод.      | Чтобы | См. |   |--------|---------|   | Анализ текстового файла | [Синтаксический анализ текстовых файлов с помощью объекта TextFieldParser](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text field parser and defines the delimiter as `vbTab`.  \n  \n [!code-vb[VbVbalrTextFieldParser#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._239_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetDelimiters (string[] delimiters);
    parameters:
    - id: delimiters
      type: System.String[]
      description: "Массив объектов типа <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Разделитель имеет нулевую длину."
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  id: SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Задает разделители для чтения для указанных значений."
  remarks: "Существующее содержимое `Delimiters` свойство очищается, когда это имеет значение.       Этот метод предоставляет способ для задания разделителей без создания массива.       В следующей таблице перечислены примеры задач, включающие `SetFieldWidths` метод.      | Чтобы | См. |   |--------|---------|   | Анализ текстового файла. | [Синтаксический анализ текстовых файлов с помощью объекта TextFieldParser](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example opens a text-field parser and defines the field width as `5`.  \n  \n [!code-vb[VbVbalrTextFieldParser#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_1.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse.  \n  \n The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.  \n  \n [!code-vb[VbVbalrTextFieldParser#13](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._56_2.vb)]  \n  \n Replace the path `C:\\logs\\test.log` with the path and name of the file you wish to parse."
  syntax:
    content: public void SetFieldWidths (int[] fieldWidths);
    parameters:
    - id: fieldWidths
      type: System.Int32[]
      description: "Array of <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  id: TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Указывает, является ли анализируемый файл файлом с разделителями либо поле фиксированной длины."
  remarks: "В качестве разделителя по умолчанию значение этого свойства.       В следующей таблице перечислены примеры задач, связанных с `TextFieldType` свойство.      | Чтобы | См. |   |--------|---------|   | Чтение из файла с разделителями | [Как: чтение из файлов с разделителями-запятыми](~/add/includes/ajax-current-ext-md.md)|   | Чтение из файла фиксированной ширины | [Как: чтение фиксированной ширины текстовых файлов](~/add/includes/ajax-current-ext-md.md)|   | Чтение из текстового файла с несколькими форматами | [Как: чтение из текстовых файлов различных форматов](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.  \n  \n [!code-vb[VbVbalrTextFieldParser#19](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_1.vb)]  \n  \n This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.  \n  \n [!code-vb[VbVbalrTextFieldParser#20](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._100_2.vb)]"
  syntax:
    content: public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }
    return:
      type: Microsoft.VisualBasic.FileIO.FieldType
      description: "TextFieldType значение, указывающее, является ли анализируемый файл файлом с разделителями либо поле фиксированной длины."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  id: TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  langs:
  - csharp
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.FileIO
  summary: "Указывает ли из значения поля должны быть сокращены начальные и конечные пробелы."
  remarks: "Значение по умолчанию для этого свойства — `True`."
  example:
  - "This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.  \n  \n [!code-vb[VbVbalrTextFieldParser#7](~/add/codesnippet/visualbasic/p-microsoft.visualbasic._12_1.vb)]"
  syntax:
    content: public bool TrimWhiteSpace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>Если должны быть сокращены начальные и конечные пробелы из значений поля; в противном случае <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.FileIO.MalformedLineException
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: MalformedLineException
  nameWithType: MalformedLineException
  fullName: Microsoft.VisualBasic.FileIO.MalformedLineException
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream)
  nameWithType: TextFieldParser.TextFieldParser(Stream)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(TextReader)
  nameWithType: TextFieldParser.TextFieldParser(TextReader)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String)
  nameWithType: TextFieldParser.TextFieldParser(String)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(String,Encoding,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(String,Encoding,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(String,Encoding,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser(Stream,Encoding,Boolean,Boolean)
  nameWithType: TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldParser(Stream,Encoding,Boolean,Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close()
  nameWithType: TextFieldParser.Close()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Close()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose()
  nameWithType: TextFieldParser.Dispose()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TextFieldParser.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(Boolean)
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize()
  nameWithType: TextFieldParser.Finalize()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars(Int32)
  nameWithType: TextFieldParser.PeekChars(Int32)
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields()
  nameWithType: TextFieldParser.ReadFields()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine()
  nameWithType: TextFieldParser.ReadLine()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd()
  nameWithType: TextFieldParser.ReadToEnd()
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd()
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters(String[])
  nameWithType: TextFieldParser.SetDelimiters(String[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(String[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths(Int32[])
  nameWithType: TextFieldParser.SetFieldWidths(Int32[])
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(Int32[])
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.FieldType
  parent: Microsoft.VisualBasic.FileIO
  isExternal: false
  name: FieldType
  nameWithType: FieldType
  fullName: Microsoft.VisualBasic.FileIO.FieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
  fullName: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldParser
  nameWithType: TextFieldParser.TextFieldParser
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Close*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Close
  nameWithType: TextFieldParser.Close
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: CommentTokens
  nameWithType: TextFieldParser.CommentTokens
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Delimiters
  nameWithType: TextFieldParser.Delimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Dispose
  nameWithType: TextFieldParser.Dispose
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: EndOfData
  nameWithType: TextFieldParser.EndOfData
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLine
  nameWithType: TextFieldParser.ErrorLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ErrorLineNumber
  nameWithType: TextFieldParser.ErrorLineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: FieldWidths
  nameWithType: TextFieldParser.FieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: Finalize
  nameWithType: TextFieldParser.Finalize
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: HasFieldsEnclosedInQuotes
  nameWithType: TextFieldParser.HasFieldsEnclosedInQuotes
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: LineNumber
  nameWithType: TextFieldParser.LineNumber
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: PeekChars
  nameWithType: TextFieldParser.PeekChars
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadFields
  nameWithType: TextFieldParser.ReadFields
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadLine
  nameWithType: TextFieldParser.ReadLine
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: ReadToEnd
  nameWithType: TextFieldParser.ReadToEnd
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetDelimiters
  nameWithType: TextFieldParser.SetDelimiters
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: SetFieldWidths
  nameWithType: TextFieldParser.SetFieldWidths
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TextFieldType
  nameWithType: TextFieldParser.TextFieldType
- uid: Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace*
  parent: Microsoft.VisualBasic.FileIO.TextFieldParser
  isExternal: false
  name: TrimWhiteSpace
  nameWithType: TextFieldParser.TrimWhiteSpace
