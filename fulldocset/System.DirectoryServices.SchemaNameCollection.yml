### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SchemaNameCollection
  id: SchemaNameCollection
  children:
  - System.DirectoryServices.SchemaNameCollection.Add(System.String)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  - System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  - System.DirectoryServices.SchemaNameCollection.Clear
  - System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  - System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Count
  - System.DirectoryServices.SchemaNameCollection.GetEnumerator
  - System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  - System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  - System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  - System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  - System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
  type: Class
  summary: "Содержит список схем, имен, <xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>свойство <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> можно использовать объект.</xref:System.DirectoryServices.DirectoryEntries.SchemaFilter*>"
  syntax:
    content: 'public class SchemaNameCollection : System.Collections.IList'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  id: Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Добавляет указанное имя схемы в данную коллекцию."
  syntax:
    content: public int Add (string value);
    parameters:
    - id: value
      type: System.String
      description: "Имя схемы, чтобы добавить в эту коллекцию."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс значения указанного свойства. Если объект не найден, возвращается значение-1."
  overload: System.DirectoryServices.SchemaNameCollection.Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  id: AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Добавляет набор указанных имен схем в этой коллекции."
  syntax:
    content: public void AddRange (System.DirectoryServices.SchemaNameCollection value);
    parameters:
    - id: value
      type: System.DirectoryServices.SchemaNameCollection
      description: "Объект <xref href=&quot;System.DirectoryServices.SchemaNameCollection&quot;> </xref> , содержащий имена схем для добавления."
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Добавляет набор указанных имен схем в этой коллекции."
  syntax:
    content: public void AddRange (string[] value);
    parameters:
    - id: value
      type: System.String[]
      description: "Массив <xref:System.String>, содержащий имена схем, чтобы добавить</xref:System.String> тип"
  overload: System.DirectoryServices.SchemaNameCollection.AddRange*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  id: Clear
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет все объекты из этой коллекции."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.DirectoryServices.SchemaNameCollection.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет, содержит ли коллекция указанное имя схемы."
  syntax:
    content: public bool Contains (string value);
    parameters:
    - id: value
      type: System.String
      description: "Имя схемы для поиска."
    return:
      type: System.Boolean
      description: "Возвращает значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Если указанное свойство принадлежит данной коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует имена схем из данной коллекции в массив, начиная с определенного индекса массива."
  syntax:
    content: public void CopyTo (string[] stringArray, int index);
    parameters:
    - id: stringArray
      type: System.String[]
      description: "Массив объектов типа <xref:System.String>, который получает имена схем в этой коллекции.</xref:System.String>"
    - id: index
      type: System.Int32
      description: "Индекс (с нуля) массива, с которого начинается копирование имен схем."
  overload: System.DirectoryServices.SchemaNameCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Count
  id: Count
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Свойство Count возвращает количество объектов в этой коллекции."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Количество объектов в этой коллекции."
  overload: System.DirectoryServices.SchemaNameCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает перечислитель, который можно использовать для перебора элементов коллекции."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Перечислитель, который можно использовать для итерации данной коллекции."
  overload: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет индекс указанное имя схемы в этой коллекции."
  syntax:
    content: public int IndexOf (string value);
    parameters:
    - id: value
      type: System.String
      description: "Имя схемы для поиска."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс указанное имя схемы, или значение -1, если имя схемы не найден в коллекции."
  overload: System.DirectoryServices.SchemaNameCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Вставляет имя схемы в коллекцию по указанному индексу."
  remarks: "Если `index` параметр равно количеству элементов в коллекции, данный метод добавляет значение в конец коллекции."
  syntax:
    content: public void Insert (int index, string value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в коллекции для вставки имени схемы."
    - id: value
      type: System.String
      description: "Имя схемы, вставляемый в коллекцию."
  overload: System.DirectoryServices.SchemaNameCollection.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает или задает объект, расположенный по указанному индексу."
  remarks: "В C# это свойство является индексатором <xref:System.DirectoryServices.SchemaNameCollection>класса.</xref:System.DirectoryServices.SchemaNameCollection>       В JScript можно использовать по умолчанию индексированные свойства, определенные типом, но нельзя явно определять свои собственные. Однако указание атрибута expando применительно к классу автоматически предоставляет значение по умолчанию индексированное свойство, типом которого является объект, а типом индекса — <xref:System.String>.</xref:System.String>"
  syntax:
    content: public string this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в коллекции."
    return:
      type: System.String
      description: "Объект, который существует по указанному индексу."
  overload: System.DirectoryServices.SchemaNameCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет указанное имя схемы из данной коллекции."
  syntax:
    content: public void Remove (string value);
    parameters:
    - id: value
      type: System.String
      description: "Имя схемы для удаления."
  overload: System.DirectoryServices.SchemaNameCollection.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет имя схемы, по указанному индексу из коллекции."
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс имени схемы для удаления."
  overload: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "Отсчитываемый от нуля индекс меньше нуля или равен размеру коллекции."
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует элементы <xref:System.Collections.ICollection>для <xref:System.Array>, начиная с определенного <xref:System.Array>индекса.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, куда копируются элементы из <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref:System.Collections.ICollection> больше, чем свободное пространство от <code>index</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref:System.Collections.ICollection>не может быть автоматически приведен к типу массива назначения <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализуют метод Synchronized, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName>       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       Приведенный ниже показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "Для коллекций, базовое хранилище не является общедоступным, ожидаемая реализация является для возврата текущего экземпляра. Обратите внимание, что указатель на текущий экземпляр может быть недостаточно для коллекций, которые являются оболочкой для других коллекций; Эти должны возвращать базовой коллекции `SyncRoot` свойство.       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализовать `Synchronized` метод, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName> Однако производные классы могут предоставлять собственную синхронизированную версию коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>свойство.</xref:System.Collections.ICollection.SyncRoot%2A> Синхронизированный код должен выполнять операции на <xref:System.Collections.ICollection.SyncRoot%2A>коллекции, но не над самой коллекцией.</xref:System.Collections.ICollection.SyncRoot%2A> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в экземпляр коллекции.       В случае отсутствия `Synchronized` метод с коллекцией, предполагаемое использование <xref:System.Collections.ICollection.SyncRoot%2A>выглядит следующим образом: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` перечисление по коллекции само по себе не является потокобезопасной процедурой.      </xref:System.Collections.ICollection.SyncRoot%2A> Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       Приведенный ниже показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Добавляет элемент в список."
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Элемент для добавления в список."
    return:
      type: System.Int32
      description: "Позиция, в которую вставлен новый элемент."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет, содержит ли список указанное значение."
  remarks: "Начиная с .NET Framework 2.0, этот метод использует равенства и методы CompareTo объектов в коллекции, чтобы определить, является ли элемент существует. В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью Equals и CompareTo методы элемент параметра для объектов в коллекции."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Значение, найдите в списке."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение найдено в списке, в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет индекс указанного элемента в списке."
  remarks: "Начиная с .NET Framework 2.0, этот метод использует равенства и методы CompareTo объектов в коллекции, чтобы определить, является ли элемент существует. В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью Equals и CompareTo методы элемент параметра для объектов в коллекции."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Искомый элемент в списке."
    return:
      type: System.Int32
      description: "Индекс <code> value </code> если он найден в списке; в противном случае — значение -1."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Вставляет элемент в список по указанному индексу."
  remarks: "Если `index` равно количеству элементов в списке, затем *значение* добавляется в конец.       В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс, по которому следует вставить значение."
    - id: value
      type: System.Object
      description: "Элемент, вставляемый в список."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли <xref:System.Collections.IList>имеет фиксированный размер.</xref:System.Collections.IList>"
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы после создания коллекции, но разрешается изменять существующие элементы."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Collections.IList>имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли <xref:System.Collections.IList>доступно только для чтения.</xref:System.Collections.IList>"
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Collections.IList>только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IList>"
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает или задает элемент по указанному индексу."
  remarks: 'Это свойство предоставляет возможность доступа к указанному элементу коллекции с помощью следующего синтаксиса: `myCollection[index]`.'
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс элемента, который требуется получить или задать."
    return:
      type: System.Object
      description: "Элемент по указанному индексу."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>не является допустимым индексом в <xref:System.Collections.IList>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Свойство имеет значение и <xref:System.Collections.IList>доступно только для чтения.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.SchemaNameCollection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет первое вхождение конкретного объекта <code> value </code> из списка."
  remarks: "В коллекциях с непрерывным набором элементов, таких как списки элементы, следующие за удаляемым перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются."
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "`value` Для удаления из списка."
  overload: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.DirectoryServices.SchemaNameCollection.Add(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add(String)
  nameWithType: SchemaNameCollection.Add(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Add(String)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.DirectoryServices.SchemaNameCollection)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(SchemaNameCollection)
  nameWithType: SchemaNameCollection.AddRange(SchemaNameCollection)
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(SchemaNameCollection)
- uid: System.DirectoryServices.SchemaNameCollection
  parent: System.DirectoryServices
  isExternal: false
  name: SchemaNameCollection
  nameWithType: SchemaNameCollection
  fullName: System.DirectoryServices.SchemaNameCollection
- uid: System.DirectoryServices.SchemaNameCollection.AddRange(System.String[])
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange(String[])
  nameWithType: SchemaNameCollection.AddRange(String[])
  fullName: System.DirectoryServices.SchemaNameCollection.AddRange(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SchemaNameCollection.Clear
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear()
  nameWithType: SchemaNameCollection.Clear()
  fullName: System.DirectoryServices.SchemaNameCollection.Clear()
- uid: System.DirectoryServices.SchemaNameCollection.Contains(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains(String)
  nameWithType: SchemaNameCollection.Contains(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo(System.String[],System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo(String[],Int32)
  nameWithType: SchemaNameCollection.CopyTo(String[],Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.CopyTo(String[],Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Count
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
  fullName: System.DirectoryServices.SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SchemaNameCollection.GetEnumerator()
  fullName: System.DirectoryServices.SchemaNameCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf(String)
  nameWithType: SchemaNameCollection.IndexOf(String)
  fullName: System.DirectoryServices.SchemaNameCollection.IndexOf(String)
- uid: System.DirectoryServices.SchemaNameCollection.Insert(System.Int32,System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert(Int32,String)
  nameWithType: SchemaNameCollection.Insert(Int32,String)
  fullName: System.DirectoryServices.SchemaNameCollection.Insert(Int32,String)
- uid: System.DirectoryServices.SchemaNameCollection.Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SchemaNameCollection.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.Remove(System.String)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove(String)
  nameWithType: SchemaNameCollection.Remove(String)
  fullName: System.DirectoryServices.SchemaNameCollection.Remove(String)
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SchemaNameCollection.RemoveAt(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.RemoveAt(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Add(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Add(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Contains(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IndexOf(Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Insert(Int32,Object)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item(System.Int32)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: SchemaNameCollection.System.Collections.IList.Item(Int32)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Item(Int32)
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove(System.Object)
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove(Object)
  fullName: System.DirectoryServices.SchemaNameCollection.System.Collections.IList.Remove(Object)
- uid: System.DirectoryServices.SchemaNameCollection.Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Add
  nameWithType: SchemaNameCollection.Add
- uid: System.DirectoryServices.SchemaNameCollection.AddRange*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: AddRange
  nameWithType: SchemaNameCollection.AddRange
- uid: System.DirectoryServices.SchemaNameCollection.Clear*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Clear
  nameWithType: SchemaNameCollection.Clear
- uid: System.DirectoryServices.SchemaNameCollection.Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Contains
  nameWithType: SchemaNameCollection.Contains
- uid: System.DirectoryServices.SchemaNameCollection.CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: CopyTo
  nameWithType: SchemaNameCollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.Count*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Count
  nameWithType: SchemaNameCollection.Count
- uid: System.DirectoryServices.SchemaNameCollection.GetEnumerator*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SchemaNameCollection.GetEnumerator
- uid: System.DirectoryServices.SchemaNameCollection.IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: IndexOf
  nameWithType: SchemaNameCollection.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Insert
  nameWithType: SchemaNameCollection.Insert
- uid: System.DirectoryServices.SchemaNameCollection.Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Item
  nameWithType: SchemaNameCollection.Item
- uid: System.DirectoryServices.SchemaNameCollection.Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: Remove
  nameWithType: SchemaNameCollection.Remove
- uid: System.DirectoryServices.SchemaNameCollection.RemoveAt*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: RemoveAt
  nameWithType: SchemaNameCollection.RemoveAt
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SchemaNameCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SchemaNameCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SchemaNameCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Add*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SchemaNameCollection.System.Collections.IList.Add
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Contains*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SchemaNameCollection.System.Collections.IList.Contains
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IndexOf*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SchemaNameCollection.System.Collections.IList.IndexOf
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Insert*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SchemaNameCollection.System.Collections.IList.Insert
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsFixedSize*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SchemaNameCollection.System.Collections.IList.IsFixedSize
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#IsReadOnly*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SchemaNameCollection.System.Collections.IList.IsReadOnly
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Item*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SchemaNameCollection.System.Collections.IList.Item
- uid: System.DirectoryServices.SchemaNameCollection.System#Collections#IList#Remove*
  parent: System.DirectoryServices.SchemaNameCollection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SchemaNameCollection.System.Collections.IList.Remove
