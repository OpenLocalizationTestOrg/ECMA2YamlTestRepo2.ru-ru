### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Служит в качестве базового класса для определения подключения точки объектов, позволяющих управления потребителя и поставщика в соединении веб-частей, общий доступ к данным."
  remarks: "Каждое подключение веб-частей состоит из двух серверных элементов управления, совместное использование данных: один элемент управления является потребителем, другой поставщик. Описание основных компонентов подключения веб-частей и самого объекта связи см. в разделе <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>Общие сведения о классе.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Каждый веб-частей необходимы точки подключения. Поставщик и управления получателя должны иметь по крайней мере один определенный ConnectionPoint объекта (каждый из них может иметь несколько точек подключения), содержащий сведения о том, как элемент управления может подключаться к другому элементу управления и типа данных, которые могут совместно использовать. В текущем подключении поставщика имеет собственный тип объекта точки подключения (производный от базового класса ConnectionPoint), <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>потребитель и экземпляр имеет собственный объект <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>экземпляра.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Чтобы создать точки подключения поставщика, разработчики должны добавить метод обратного вызова для поставщика, который будет возвращен экземпляр реализованного интерфейса потребителю. Их необходимо пометить метод обратного вызова в исходный код с `ConnectionProvider` атрибута code (см. <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>класса).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Аналогичным образом, чтобы создать точки подключения потребителя, разработчики должны добавить метод получателя, который получает экземпляр интерфейса и их необходимо пометить `ConnectionConsumer` атрибутов (см. <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>класса).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Если разработчик создает соединения с веб-страницы, они могут создаваться как статические или динамические связи. Статические подключения объявляются в разметке веб-страницы. При объявлении статического соединения разработчиков можно указать, какие точки подключения используются для потребителя и поставщика путем присвоения значений для `ProviderConnectionPointID` и `ConsumerConnectionPointID` атрибуты `<asp:webpartconnection>` тега элемента. Этот подход особенно полезен в тех случаях, если существует несколько точек подключения, определенные в элементах управления потребителя и поставщика, так как он позволяет статическая связь может определить, какие точки подключения для подключения.       Динамические подключения создаются программно в коде разработчика или пользователями с помощью пользовательский интерфейс (UI), предоставляемые <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>управления.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Для создания подключения в коде, разработчики должны получить экземпляр <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>метод <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Прежде чем они могут вызывать этот метод, разработчики должны иметь ссылки на потребителя и поставщика серверных элементов управления и их соответствующие объекты точек подключения. Для получения ссылок на точки подключения для поставщика и управления получателя, сначала вызовите разработчики <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>и <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>методы <xref:System.Web.UI.WebControls.WebParts.WebPartManager>управления.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Эти методы возвращают соответствующее соединение точка объекты, которые в свою очередь может быть передан в метод для создания соединения.       Если поставщика и потребителя объекты точки подключения и работы с тем же типом интерфейса, они совместимы и могут образовывать прямое подключение, общий доступ к данным. Если они не работают с тем же типом интерфейса <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект должен использоваться для преобразования экземпляр интерфейса от поставщика в тип, который потребитель может работать с.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       Абстрактный класс ConnectionPoint базовые сведения точек подключения, которые являются общими для элементов управления потребителя и поставщика. Эти сведения содержатся в нескольких свойствах. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>Указывает, может ли точка подключения участвовать в несколько соединений одновременно.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> По умолчанию точки подключения поставщика могут участвовать в нескольких связях и точки подключения потребителя не может. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>Свойство указывает тип серверного элемента управления, связанных с точкой подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Обратите внимание, что не только <xref:System.Web.UI.WebControls.WebParts.WebPart>создавать элементы управления подключений; любой серверный элемент управления, элемент управления ASP.NET, пользовательский элемент управления или пользовательский элемент управления можно включить, чтобы участвовать в соединениях, помещенного в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>Свойство содержит понятное имя для точки подключения, которые могут отображаться в пользовательском Интерфейсе для оказания помощи пользователям, создающими подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>Служит в качестве строковый идентификатор для самого объекта точки подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>Свойство указывает, какой тип экземпляр интерфейса понимает точки подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Ли к заданной точке подключения предоставляет или потребляет экземпляр этого интерфейса определяются тем, является ли <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>или <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекта.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Класс ConnectionPoint имеет один метод. <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>Метод возвращает значение типа Boolean, показывающего, является в настоящее время может участвовать в подключениях к точке подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       Класс ConnectionPoint также имеет одно открытое поле <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Это поле содержит значение, используемое для идентификации точку подключения по умолчанию в соединении.      Настроек [!NOTE] настроек атрибуты для указания точки подключения, методы имеют только один обязательный параметр `displayName`, поэтому можно создать атрибут точки подключения по умолчанию без указания его идентификатора. В таких случаях <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>поле предоставляет базовое значение для использования.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Получает значение, указывающее, поддерживает ли точка подключения несколько одновременных подключений."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>объекты имеют свои AllowsMultipleConnections свойство установлено в значение `true` (по <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>класса), так как элемент управления веб-части, значение по умолчанию позволяет точки подключения поставщика для создания подключений нескольким получателям.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Напротив <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>объекты имеют их значением свойства AllowsMultipleConnections `false` (по <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>класса), так как элемент управления веб-части, значение по умолчанию позволяет соединения с потребителем точки для подключения только к одному поставщику за раз.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Можно изменить поведение по умолчанию, касающиеся несколько подключений, назначив разные значения для <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>Свойства (поставщики) или <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>свойство (для потребителей) по двум <xref:System.Attribute>классы, используемые для атрибутов соединения.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> При включении точки подключения потребителя для подключения к нескольким поставщикам, в то же время, код приходится иметь дело с любой результирующей проблемы синхронизации."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если точка подключения поддерживает несколько связей. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает <xref:System.Type>серверного элемента управления, с которым связана точка подключения.</xref:System.Type>"
  remarks: "Чаще всего значение свойства ControlType <xref:System.Web.UI.WebControls.WebParts.WebPart>тип.</xref:System.Web.UI.WebControls.WebParts.WebPart> Однако поскольку любой тип пользовательского элемента управления или серверный элемент управления может участвовать в подключениях, если правильно включен и помещен в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны, свойство ControlType может возвращать одно из этих другие server типы элементов управления также.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Когда серверные элементы управления, которые не являются <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления, помещаются в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>зоны, они помещаются с <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>объекта во время выполнения, поэтому они могут работать как <xref:System.Web.UI.WebControls.WebParts.WebPart>элементов управления и участвовать в соединениях.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Но при использовании подключений такие элементы управления, не возвращает значение свойства ControlType <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>Введите; он возвращает тип <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>управления дочернего объекта, который представляет тип элемента управления сервером или пользовательской.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>представляет тип элемента управления.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Строка, используемая для определения точки подключения по умолчанию в коллекции точек подключения, связанный с серверным элементом управления."
  remarks: "При создании точки подключения можно указать идентификатор для точки подключения в исходном коде поставщик или потребитель <xref:System.Web.UI.WebControls.WebParts.WebPart>управлять с помощью <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>или <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>атрибут.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> Однако при добавлении атрибута к точке подключения в исходном коде `ID` параметр является необязательным. Если идентификатор не указан в атрибуте, поле DefaultID предоставляет строку, которая используется для определения точки подключения по умолчанию.       Если в элементе управления поставщика или получателя определены несколько точек подключения, необходимо указать идентификатор для каждой точки подключения, чтобы можно было различить точки подключения, при создании подключений."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает строку, которая служит понятное отображаемое имя для представления кодовой точки соединения в пользовательском интерфейсе (UI)."
  remarks: "Чтобы создать связь веб-частей, поставщика и потребителя элементы управления для подключения необходимо каждый из которых задает по крайней мере одной точки подключения, метод, который позволяет им взаимодействовать и совместно использовать данные. Чтобы определить такие методы точки подключения, разработчик задает атрибут выбранных методов. В поставщике `ConnectionProvider` атрибут имеет значение выбранного метода обратного вызова и потребителя, `ConnectionConsumer` атрибут задан для метода, который получает экземпляр интерфейса, который содержит данные от поставщика. Для обеих этих атрибутов, имеет один параметр, который всегда является обязательным, независимо от того, какую перегрузку объявлен для создания атрибута, `displayName` параметра. Разработчику необходимо назначить строку для использования в качестве понятное отображаемое имя для точки подключения, и эта строка становится значение свойства DisplayName.       Значение свойства DisplayName отображается в пользовательском Интерфейсе веб-страницы, при создании соединения. Например, если <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>элемент управления добавлен на страницу, он создает пользовательский Интерфейс для пользователей для создания подключений между элементами управления.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> После пользователь переключает страницу в режим отображения подключения и щелкает команду подключения <xref:System.Web.UI.WebControls.WebParts.WebPart>управления появится пользовательский Интерфейс подключения.</xref:System.Web.UI.WebControls.WebParts.WebPart> Каждый элемент управления, которые могут участвовать в соединениях отображается в пользовательском Интерфейсе и сразу после каждого элемента является элементом управления раскрывающегося списка, который отображает понятные имена точек подключения, доступных. Пользователи должны выбрать по крайней мере одну точку подключения для подключения. Значения, отображаемые в списке точек подключения извлекаются из свойства DisplayName. Если разработчики создавать настраиваемый пользовательский Интерфейс для создания соединений, они используют свойство DisplayName аналогичным образом для предоставления понятное имя, которое представляет точку подключения."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Строка, содержащая понятное отображаемое имя для <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> объекта."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает значение, указывающее, может ли точка подключения участвовать в соединениях."
  remarks: "Метод GetEnabled в базе <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>класса всегда возвращает `true`, но производные классы могут переопределять метод для возврата `true` или `false` в различные моменты времени, на основании состояния `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Объект <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> или другого серверного элемента управления, связанного с точкой подключения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент управления может создать точку подключения для участия в связи. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает строку, содержащую идентификатор для точки подключения."
  remarks: "Если разработчик объявляет <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>или <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>атрибута в методе в исходном коде элемента управления, чтобы метод можно использовать в качестве точки подключения не требуется объявлять `ID` параметра для атрибута точки подключения.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Единственным обязательным атрибутом является `displayName` параметра. По умолчанию присваивается идентификатор точки подключения, используя значение из <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>поля.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Если имеется только один метод в элементе управления, используемого в качестве точки подключения, нет необходимости задать идентификатор для точки подключения. Если существует несколько методов, в качестве точек подключения указано, необходимо указать идентификатор для каждого из них; в противном случае будет создано исключение. Назначая идентификатор для каждой точки подключения, можно также упростить можно указать, какая точка подключения для использования при объявлении подключения в веб-страницы или создать их в коде."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Строка, содержащая идентификатор для точки подключения."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Возвращает тип интерфейса, используемого точкой подключения."
  remarks: "Свойство InterfaceType указывает, какой тип интерфейса использует точки подключения. Это может помочь определить необходимость совместимость и возможность создания подключения двух элементов управления. Если точка подключения поставщика InterfaceType отличается от InterfaceType Клиентская точка подключения, то два элемента управления несовместимы (что означает, что они не может подключаться напрямую без преобразователя) и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>объект должен использоваться для установления соединения.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, соответствующее типу интерфейса, предоставляемого или получаемого элементом управления.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
