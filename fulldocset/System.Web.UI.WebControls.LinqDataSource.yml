### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "Разрешает использование встроенных в язык запросы (LINQ) в веб-страницу ASP.NET в тексте разметки для извлечения и изменения данных из объекта данных."
  remarks: "В этом разделе:- [Введение](#introduction)      -   [порядок операций](#order_of_operations)      -   [упорядочение данных](#ordering_data)      -   [группирование данных](#grouping_data)      -   [изменений данных](#data_modifications)      -   [вычисления значения во время выполнения](#evaluating_value_at_run_time)      -   [работа с помощью хранимых процедур](#working_with_stored_procedures)      -   [декларативный синтаксис](#declarative_syntax) <a name=&quot;introduction&quot;> </a> ## Introduction Language-Integrated запросов (LINQ) — это синтаксис запросов, который определяет набор операторов запроса, поддерживающие операции обхода, фильтрации и проекции, выражаемые декларативным способом в любой. На основе NET языка программирования.       Объект данных может быть сбора данных в памяти или объект, представляющий данные из базы данных. Можно извлекать или изменять данные без необходимости написания команд SQL для каждой операции.       LinqDataSource-элемент управления позволяет использовать LINQ в веб-страницу ASP.NET, установив свойства в тексте разметки. Элемент управления LinqDataSource использует LINQ to SQL для автоматического создания команд данных. Дополнительные сведения о технологии LINQ to SQL см. в разделе [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       При получении данных из коллекции данных в памяти, следует установить <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Свойства класса, содержащего коллекцию данных.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> Задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство или поле, которое возвращает коллекцию данных свойства.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Например, возможно, класс с именем `Person` , содержащий свойство с именем `FavoriteCities` , возвращающее массив строковых значений. В этом случае можно задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Свойства `Person` и задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Свойства `FavoriteCities`.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       При отправке запроса базы данных, необходимо сначала создать классы сущностей, представляющие базу данных и ее таблицы. Можно использовать [!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)] или программа SqlMetal.exe для создания этих классов. Затем установите <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>Свойства в класс, представляющий базу данных и задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство, который представляет таблицу базы данных.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a>## Порядок элемента управления LinqDataSource операции применяется операций с данными в следующем порядке: 1.  Где (указать, какие записи данных для возврата).      2.  Order By (сортировки).      3.  Group By (Группировать записи данных с общими значениями).      4.  Упорядочить группы (сортировать сгруппированные данные).      5.  SELECT (указать, какие поля или свойства для возврата).      6.  Auto-sort (Сортировка записей данных с помощью свойства выбранный пользователем).      7.  Auto страница (извлекает набор записей данных, выбранных пользователем).       Можно добавить условия для <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>свойство включения фильтра записи данных, возвращаемых из запроса.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Если <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>свойство не задано, элемент управления LinqDataSource извлекает все записи из объекта данных.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a>## Упорядочение данных, используется <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство, чтобы указать имена свойств из возвращенных данных, по которому выполняется сортировка.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      Настроек [!NOTE] настроек при использовании с помощью элемента управления LinqDataSource [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>свойству `true`, необходимо ввести значение в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>свойство `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Свойства, необходимо также включить все столбцы идентификаторов в списке свойств, который возвращается в запросе.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a>## Группирование данных, используется <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойство, чтобы указать свойства, используемые для консолидации записи данных, которые имеют одинаковые значения.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> При группировании данных может включать `Key` и `It`, который динамически создаются свойства, в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `Key` Свойство ссылается на значения в свойство или свойства, которые были использованы для группирования данных. Например, если группировать по свойству с именем `Category`, `Key` свойство будет содержать все уникальные значения в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группировки. Например, если группировать по свойству с именем `Category`, `It` свойство содержит все отдельные записи, которые имеют общее значение в `Category` свойство.       Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>свойство, чтобы указать свойства, которые будут использоваться для сортировки сгруппированных данных.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> При группировании данных, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство устанавливает способ сортировки отдельных записей в сгруппированных данных.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       По умолчанию элемента управления LinqDataSource извлекает значения для всех свойств из объекта данных. Вы используете <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство для указания свойств, для возврата, если вы хотите работать с подмножеством доступных свойств.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Операции Select применяется после Where, Order By и Group By операций. Таким образом при создании псевдонимов в предложении Select, псевдоним недоступен в других предложениях.      <a name=&quot;data_modifications&quot;></a>## Изменения данных, можно указать, разрешено ли изменение данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, и <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>Свойства.</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> Пользовательский интерфейс для изменения данных из элемента управления LinqDataSource обычно предоставляется в элементе управления с привязкой к данным, таких как <xref:System.Web.UI.WebControls.DetailsView>управления.</xref:System.Web.UI.WebControls.DetailsView> В дополнение к параметру <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>для `true`, необходимые для включения автоматического изменения данных следующих условий: - <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство не может быть присвоено значение.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      - <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Свойство не может быть присвоено значение.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      -Класса, который присваивается <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>свойству должен быть производным от <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      — Свойство, которое присваивается <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойству должен быть производным от <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Вы можете ограничить свойства, отображаемые в элементе управления с привязкой к данным, двумя способами. Можно либо установить <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство подмножество свойств, или можно определить поля для элемента управления с привязкой к данным, добавив <xref:System.Web.UI.WebControls.DataControlField>элементов управления.</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Тем не менее если задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Свойства, значит включено автоматическое обновление, вставка и операции удаления.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Если вы хотите включить автоматического изменения данных во время работы с подмножеством доступных свойств, не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Вместо этого извлечь все свойства из объекта данных и управление ими, какие из них отображаются с помощью элемента управления с привязкой к данным. При использовании <xref:System.Web.UI.WebControls.DetailsView>управления или <xref:System.Web.UI.WebControls.GridView>элемента управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>Свойства `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Это предотвращает автоматического включения кнопки для редактирования и удаления данных элемента управления с привязкой к данным. Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.      <a name=&quot;evaluating_value_at_run_time&quot;></a>## Вычисление значений во время выполнения при наличии для оценки значений во время выполнения для сортировки, фильтрации или группировки значений, можно добавить параметры для <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>коллекций.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       Если вы хотите указать значения по умолчанию, можно добавить параметры для <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       Если вы хотите проверить или изменить значения перед выполнением операции с данными, можно обработать <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updating>события.</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> Также можно обрабатывать эти события для отмены операции над данными или для проверки ошибок, возникших при задании свойств в классе данных, на основе ввода пользователя.       Чтобы проверить значения после завершения операции с данными, необходимо обработать событие <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updated>события.</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a>## Работа с хранимых процедур можно с помощью элемента управления LinqDataSource извлечения данных из хранимой процедуры, создав обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>событий.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> В случае обработчик, необходимо вызвать метод в класс контекста данных, который представляет хранимую процедуру и присвоить результат <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>объекта.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> Если вы хотите включить автоматическое обновление, вставка и операций удаления для данных, тип, возвращенный методом должен соответствовать типу, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Дополнительные сведения о создании методов контекста данных см. в разделе [как: DataContext создания методов, сопоставленных с хранимыми процедурами и функциями (O/R-конструктор)](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;declarative_syntax&quot;></a>## Декларативный синтаксис <CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> класса."
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> элемент управления динамически создает предложение Order By, основанной на значениях в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "Если выбрать значение свойства AutoGenerateOrderByClause `true`, <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления динамически создает предложение Order By, основанный на значениях в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Управления сортирует данные по первым параметром и дополнительно сортирует данные для каждого дополнительного параметра.</xref:System.Web.UI.WebControls.LinqDataSource> Параметры, содержащие `null` или пустое значение не включаются в предложение Order By.       Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Свойства, если AutoGenerateOrderByClause имеет значение `true`, так как он динамически создает предложение Order By.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Элемент управления вызывает исключение, если AutoGenerateOrderByClause задано значение `true` и <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>присваивается значения.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления создает предложение Order By; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> элемент управления динамически создает предложение Where предложения на основе значений определенных в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "Если выбрать значение свойства AutoGenerateWhereClause `true`, <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления динамически создает предложение Where предложения на основе параметров в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> Каждый параметр, добавляемый <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>коллекции должен быть его <xref:System.Web.UI.WebControls.Parameter.Name%2A>свойству присвоено значение, соответствующее свойство в объекте данных, в которой выполняется запрос.</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Автоматически созданный где предложение будет проверять, является ли значение, указанное в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>коллекции равен значению соответствующего свойства в объекте данных.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Если указать более одного параметра, параметры, связанных с логического `AND` операции. Параметры, содержащие `null` или пустое значение не включаются в предложении Where предложения.       Автоматически созданный <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>предложения можно проверить только на равенство и может привязать параметры только с `AND` операции.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Не задано свойство AutoGenerateWhereClause `true` Если необходимо добавить условие, которое не проверки на равенство или если необходимо связать параметры с `OR` операции. Эти задачи можно выполнить путем присвоения свойству AutoGenerateWhereClause `false` и добавление меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>свойство для каждого параметра в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>коллекции.</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> В <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>свойство, каждому приставку замещающий символ @.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Свойства, когда свойство AutoGenerateWhereClause `true`, так как он динамически создает предложение Where предложение.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Элемент управления вызывает исключение, если свойство AutoGenerateWhereClause `true` и <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>присваивается значения.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления создаст Where предложения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления поддерживает навигацию по страницам данных во время выполнения."
  remarks: "Присвойте свойству AutoPage `true` включить разбиение на страницы в <xref:System.Web.UI.WebControls.LinqDataSource>управления.</xref:System.Web.UI.WebControls.LinqDataSource> Чтобы включить пользователя на страницу данных, подключение элемента управления с привязкой к данным, предоставляющий интерфейс для разбиения на страницы для <xref:System.Web.UI.WebControls.LinqDataSource>управления.</xref:System.Web.UI.WebControls.LinqDataSource> Если значение свойства AutoPage `true`, <xref:System.Web.UI.WebControls.LinqDataSource>управления извлекает только достаточное количество записей для одной страницы в элементе управления с привязкой к данным.</xref:System.Web.UI.WebControls.LinqDataSource> Она использует <xref:System.Linq.Enumerable.Skip%2A>и <xref:System.Linq.Enumerable.Take%2A>методы для получения записи для текущей страницы.</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если пользователь может просматривать страницы данных; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления поддерживает сортировку данных во время выполнения."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Элемент управления поддерживает два подхода для сортировки данных.</xref:System.Web.UI.WebControls.LinqDataSource> Свойство сортировки можно использовать для включения сортировки во время выполнения или можно задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство, чтобы определить сортировки во время разработки.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Присвойте свойству сортировки `true` Чтобы включить сортировку в <xref:System.Web.UI.WebControls.LinqDataSource>управления, основанный на выражение сортировки из элемента управления с привязкой к данным.</xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления с привязкой к данным предоставляет интерфейс, позволяющий пользователю выбрать во время выполнения, какое свойство использовать для сортировки.       Можно программно задать порядок, в котором данные возвращаются, задав <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>Свойства для свойства или свойств, используемых для сортировки.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Когда <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойству свойство и свойство сортировки `true`, выражение сортировки из элемента управления с привязкой к данным применяется после выражений в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Таким образом определяется конечный способ сортировки данных."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если пользователь может сортировать данные. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит после создания экземпляра объекта типа контекста."
  remarks: "Обработайте событие ContextCreated для проверки объекта тип контекста или изучите исключения, возникающие во время создания объекта. Получить объект типа из контекста <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта, связанного с этим событием.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Получить исключение, возникшее во время операции с данными из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       Тип объекта контекста создается во время select, update, insert и операции удаления и используется во время запроса.       Имеется один раз, когда событие не происходит. Это когда программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>Свойства объекта во время <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>событий.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Дополнительное условие является то, что исходные значения не должны храниться в состоянии представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>реализует свойство <xref:System.Data.Linq.ITable>интерфейса.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед созданием экземпляра объекта типа контекста."
  remarks: "По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления создает экземпляр типа, указанного в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Элемент управления вызывает конструктор по умолчанию для объекта контекста данных для создания экземпляра объекта.</xref:System.Web.UI.WebControls.LinqDataSource> Возможно, необходимо с помощью конструктора не по умолчанию, или необходимо создать объект, который отличается от указанного в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> В этом случае необходимо обработать событие ContextCreating и вручную создать объект контекста данных.       Тип объекта контекста создается во время select, update, insert и операции удаления.       Имеется один раз, когда событие не происходит. Это когда программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>Свойства объекта в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>событий.</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> Дополнительное условие является то, что исходные значения не должны храниться в состоянии представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>реализует свойство <xref:System.Data.Linq.ITable>интерфейса.</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед удалением объекта типа контекста."
  remarks: "Обработайте событие ContextDisposing вручную удалить объект, или для выполнения очистки, относящиеся к объекту перед объект уничтожается."
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает имя типа, содержащего свойство, значение которого включает данные, которые необходимо получить."
  remarks: "При использовании <xref:System.Web.UI.WebControls.LinqDataSource>управления для получения данных из коллекции данных в памяти или базы данных, необходимо задать два свойства.</xref:System.Web.UI.WebControls.LinqDataSource> Первый — это класс контекста данных, представляющий источник данных. Второе — это свойство в классе контекста данных, содержащий данные. Свойство ContextTypeName присвоено имя класса контекста данных, а также задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>Свойства сбора данных, который содержит данные.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Например при извлечении данных из базы данных, установите свойство ContextTypeName имя класса, представляющего базу данных. Кроме того, задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство, который представляет таблицу в базе данных.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Чтобы создать классы из базы данных, используйте [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] или программа SqlMetal.exe для автоматического создания этих классов.       При извлечении данных из коллекции данных в памяти, например массив установите свойство ContextTypeName имя класса, который содержит свойство массива. Затем установите <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство свойству, которое получает или задает массив.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       Чтобы включить автоматическое обновление, вставка или удаление операции с помощью <xref:System.Web.UI.WebControls.LinqDataSource>элемента управления, назначается свойству ContextTypeName класс должен быть производным от <xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> Кроме того свойства, назначенные <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойства должен быть производным от <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> </xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Если вы не требуется для включения автоматического обновления, вставки или операции удаления, можно назначить свойство ContextTypeName имя любой тип класса.       Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "Имя класса для получения данных из."
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает запрашиваемый представление."
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "Запрашиваемый представление."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Создает новый экземпляр <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;> </xref> класса, связанного с этим элементом управления."
  remarks: "Чтобы предоставить пользовательское представление, можно переопределить этот метод в производном классе."
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "Объект, который выступает в качестве интерфейса для элементов управления с привязкой к данным."
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Выполняет операцию удаления."
  remarks: "Как правило нет вызов метода удаления из кода. При использовании <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления с привязкой к данным элемента управления с привязкой к данным элемента управления автоматически вызывает метод удаления при выполнении пользователем соответствующего действия, чтобы удалить запись.</xref:System.Web.UI.WebControls.LinqDataSource> Явным образом вызвать метод удаления, если вы хотите создать свой собственный процесс для удаления данных. Например можно вызывать метод Delete при удалить запись, на основе события вне элемента управления с привязкой к данным."
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Ключевые значения строк для удаляемых записей."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Значения строк, которые проверяются на наличие конфликтов данных."
    return:
      type: System.Int32
      description: "Число записей, затронутых операцией удаления."
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит при завершении операции удаления."
  remarks: "Обработайте событие Deleted перехват всех исключений из операции удаления, или проверить выходные параметры, после завершения операции. Можно получить выходные параметры <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объект, передаваемый в обработчики событий.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Это свойство не используется <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> класса."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Коллекция параметров."
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед операцией удаления."
  remarks: "Обработайте событие Удаление для проверки объекта для удаления, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции delete или отменить операцию удаления. <xref:System.Web.UI.WebControls.LinqDataSource>Управление передается <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>с обработчиками событий для события Удаление.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>Объект содержит данные, которые будут удалены и дает возможность отменить операцию удаления.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Если данные класса вызывает <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>исключения, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>объект содержит исключение в <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       Если исключение в обработчике событий для события Удаление, должен обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Свойство содержит только исключения, возникающие после удаления события.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, можно ли удалять записи данных через <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления."
  remarks: "Значение свойства EnableDelete `true` Если вы хотите разрешить пользователям удалять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource>управления.</xref:System.Web.UI.WebControls.LinqDataSource> При EnableDelete `true`, <xref:System.Web.UI.WebControls.LinqDataSource>использует LINQ to SQL для автоматического создания команд для удаления данных.</xref:System.Web.UI.WebControls.LinqDataSource> Необходимо включить интерфейс, позволяющий пользователям выбрать записи для удаления, такие как <xref:System.Web.UI.WebControls.DetailsView>управления.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Управления не поддерживает операции автоматического удаления при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойству.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> В этом случае <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления вызывает исключение при попытке выполнить операцию удаления.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если включены операции автоматического удаления. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, можно ли вставить записи данных через <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления."
  remarks: "Присвойте свойству EnableInsert `true` Если вы хотите разрешить пользователям вставлять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource>управления.</xref:System.Web.UI.WebControls.LinqDataSource> При EnableInsert `true`, <xref:System.Web.UI.WebControls.LinqDataSource>использует LINQ to SQL для автоматического создания команд для вставки данных.</xref:System.Web.UI.WebControls.LinqDataSource> Необходимо включить интерфейс, который позволяет пользователям вставить новую запись, например <xref:System.Web.UI.WebControls.DetailsView>управления.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Управления не поддерживает операции вставки автоматического при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойству.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> В этом случае <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления вызывает исключение при попытке выполнить операцию вставки.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если включена автоматическая вставки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, которое указывает, отслеживаются ли изменения в объекте контекста данных."
  remarks: "Свойство enableobjecttracking источника используется только при выборе данных из объекта контекста данных LINQ To SQL.       Взаимодействуя с данных только для чтения, задав свойство enableobjecttracking источника `false` повышает производительность, поскольку данные не кэшируются, чтобы определить, изменилась ли. Тем не менее он отключает отложенное выполнение запроса. Это свойство должно быть присвоено `true` Если вы хотите использовать отложенное выполнение запроса."
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если объект контекста данных отслеживаются изменения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, можно ли обновлять записи данных с помощью <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> управления."
  remarks: "Присвойте свойству EnableUpdate `true` Если вы хотите разрешить пользователям обновлять записи данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource>управления.</xref:System.Web.UI.WebControls.LinqDataSource> При EnableUpdate `true`, <xref:System.Web.UI.WebControls.LinqDataSource>использует LINQ to SQL для автоматического создания команд для обновления данных.</xref:System.Web.UI.WebControls.LinqDataSource> Необходимо включить интерфейс, который позволяет пользователям обновлять записи, такие как <xref:System.Web.UI.WebControls.DetailsView>управления.</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>Управления не поддерживает операции автоматического обновления при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойству.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> В этом случае <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления вызывает исключение при попытке выполнить операцию обновления.</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если автоматическое обновление включено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, какие свойства, используемые для группировки и получения данных."
  remarks: "Свойство GroupBy для указания свойства, используемые для консолидации записи данных, которые имеют одинаковые значения. Например, если установить свойство GroupBy `Name`, все записи в запросе с одинаковым `Name` значение свойства возвращаются единственную консолидированные запись.       Можно назначить несколько свойств свойство GroupBy путем заключения всех свойств в `new` функции и разделения каждого свойства с помощью запятой. Например, в группу с помощью свойств `Name` и затем `Category`, присвойте свойству GroupBy `new(Name, Category)`.       Возвращенные значения в свойстве, которые используются для группирования с помощью созданное свойство с именем `Key`. Включить `Key` свойство в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство для получения значений сгруппированных.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Можно задать `Key` псевдоним с помощью свойства `As` ключевое слово, но не требуется для использования псевдонимов. Например, можно задать свойство GroupBy к свойству с именем `Category`. Вы можете получать объединенные значения из `Category` свойство, задав <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Свойства `new(Key As ProductCategory)`.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Доступ к отдельных записей в группировании путем включения `It` свойство в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `It` Свойство содержит коллекцию записей, имеющих значение в свойстве сгруппированных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей.       Свойство GroupBy часто используется с методов статистической обработки. Можно использовать следующие статистические методы:- `Count()`       -    `Average(` *столбца* `)`       -    `Sum(` *столбца* `)`       -    `Max(` *столбца* `)`       -    `Min(` *столбца* `)`       -    `Where(` *условие* `)`       -    `Any()`       -    `All(` *условие* `)` Дополнительные сведения см. в разделе [NIB: Обзор элемента управления веб-сервера LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: группы и статистические данные с помощью элемента управления LinqDataSource Элемент управления](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "Строка, используемая для создания предложения Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, которые используются для создания предложения Group By."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Управления использует параметры в коллекции GroupByParameters для создания предложения Group By во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource> Как правило не будет использовать коллекцию GroupByParameters для группирования данных. Вместо этого можно использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Коллекция GroupByParameters используется только в том случае, если значение в предложении Group By должно быть задано во время выполнения и значение не является именем свойства. Например, использовать GroupByParameters коллекции для группировки данных в зависимости от `LastName` свойство в записи данных равно значению, предоставленного пользователем.       Если требуется сгруппировать данные по свойству, и это свойство не требуется задать во время выполнения, можно определить свойство группировки в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Например, для возвращения значений из таблицы базы данных, сгруппированные `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>«Фамилия» без параметров.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Если требуется динамическое группирование данных с помощью свойства, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойства при необходимости.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       Имя свойства не может назначить в качестве значения для параметра в коллекции GroupByParameters. Добавить параметры GroupByParameters коллекции, если вы хотите добавить условие <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Свойства, которые должны быть установлены во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Чтобы задать значения в коллекции GroupByParameters, назначить имя каждого параметра и затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>свойство для данного именованного параметра.</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> В предложении Group By в начале имя каждого параметра с символа @."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Параметры, которые используются для создания предложения Group By."
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Выполняет операцию вставки."
  remarks: "Как правило нет вызов метода вставки из кода. Элемент управления с привязкой к данным автоматически вызывает метод вставки при выполнении пользователем соответствующего действия, чтобы вставить новую запись. Явным образом вызвать метод вставки, если вы хотите создать свой собственный процесс для вставки данных."
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "Значения строк, которые должны быть вставлены в источнике данных."
    return:
      type: System.Int32
      description: "Число строк, затронутых операцией вставки."
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит по завершении операции вставки."
  remarks: "Обработайте событие Inserted перехват всех исключений из операции вставки или проверить значения после завершения операции вставки. Вы можете получать новые значения через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объект, передаваемый в обработчики событий.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Например, можно использовать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта для извлечения свойства identity, создаваемые базы данных для записи данных.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед выполнением операции вставки."
  remarks: "Обработайте событие вставки для проверки объекта должен быть вставлен, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции вставки или для отмены операции вставки. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>Объект, переданный в обработчики событий для этого события содержит новый объект для вставки в источнике данных.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       При возникновении ошибки проверки во время операции вставки, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>содержит объект исключения проверки, которые выдают класса данных.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Если вставляемое значение не соответствует типу свойства в классе данных, или оно не проходит настраиваемую проверку, возникает ошибка проверки. В обработчике событий для события вставки можно извлечь исключения проверки и предпринять соответствующие действия.       Если исключение в обработчике событий для события вставки, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Свойство содержит только исключения, возникающие после события вставки.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, которые используются во время операции вставки."
  remarks: "Как правило, передаются значения, которые необходимы для выполнения операции вставки для <xref:System.Web.UI.WebControls.LinqDataSource>элемента управления с помощью элемента управления с привязкой к данным.</xref:System.Web.UI.WebControls.LinqDataSource> Вставка параметров, если вы хотите предоставить значение по умолчанию значение или определить, следует ли преобразовывать пустые значения `null`. Вам не требуется задать параметр для каждого значения, который будет вставлен только для значений, которые нужно обработать, если пользователь вводит значение.       Значения, указываемые в коллекции InsertParameters используются только для полей, которые определены в источнике данных, но не привязанных в элементе данных. Например предположим, что таблицы базы данных имеются столбцы, которые называются имя, адрес и PostalCode, но <xref:System.Web.UI.WebControls.ListView>привязан элемент управления, к которому привязана к таблице только поля имени и адреса.</xref:System.Web.UI.WebControls.ListView> Значения в коллекции InsertParameters будет использоваться только для поля PostalCode. Они не будут использоваться для поля имени и адреса. Это верно, даже если не задано значение для этих полей. Если элемент управления с привязкой к данным автоматически заполняет поля для всех полей в источнике данных, значения из коллекции InsertParameters не будет использоваться."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Параметры, которые используются во время операции вставки."
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Инициализирует <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> объекта."
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Данные события."
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Вызывает <xref href=&quot;System.Web.UI.Control.Unload&quot;> </xref> событий."
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>Объект, содержащий данные события.</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, какие поля используются для сортировки полученных данных."
  remarks: "Свойство OrderBy используется для указания свойств, из возвращаемых данных для сортировки. Свойство сортировки данных должно существовать в исходном источнике данных, но необязательно должны быть включены в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Можно добавить пробел и `Ascending`, `ASC`, `Descending`, или `DESC` для свойства в строке OrderBy, чтобы указать, каким образом возвращается упорядоченные данные.       Можно указать несколько свойств в свойство OrderBy, разделив каждое свойство с помощью запятой. Например, для предложения order by с именем свойства `LastName` и `FirstName`, задайте свойство OrderBy «Фамилия, имя».      Настроек [!NOTE] настроек при использовании <xref:System.Web.UI.WebControls.LinqDataSource>управления [!INCLUDE[ss2k](~/add/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/add/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>свойству `true`, необходимо ввести значение в свойство OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>свойство `true`.</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>Свойства, необходимо также включить все столбцы идентификаторов в списке свойств, который возвращается в запросе.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Если <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>свойству `true`, элемент управления с привязкой к данным можно передать выражение сортировки для <xref:System.Web.UI.WebControls.LinqDataSource>элемента управления во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> <xref:System.Web.UI.WebControls.LinqDataSource>Элемент управления будет применять выражение сортировки из элемента управления с привязкой к данным, после применения свойство OrderBy.</xref:System.Web.UI.WebControls.LinqDataSource> Таким образом данные возвращаются в соответствии с выражением сортировки из элемента управления с привязкой к данным."
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "Строка, используемая для создания предложения Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, которые используются для создания предложения Order By."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Управления использует параметры в коллекции параметров OrderByParameters для создания предложения Order By во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource> Обычно устанавливается <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>Свойства `true` при добавлении параметров в коллекцию параметров OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>свойству `true`, каждый параметр в коллекции параметров OrderByParameters добавляется предложение Order By в последовательности, они указаны в коллекции параметров OrderByParameters.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>свойство `true`, параметры не должны иметь имя, так как они применяются в последовательности, а не сопоставляются с заполнитель.</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       Если необходимо задать значение во время выполнения в предложении Order By, у вас на использование коллекции OrderByParameters. Можно определить поля нужно использовать для сортировки данных в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> Например, для возвращения значений из таблицы базы данных, упорядоченных `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>«Фамилия» без параметров.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       Можно задать параметры в коллекции параметров OrderByParameters и соответствуют параметрам меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>свойство, но такой подход имеет ограниченные приложения.</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> При использовании этого подхода в коллекции параметров OrderByParameters не может представлять имя столбца. Можно задать значение параметра, а затем сравнить со значениями в свойстве. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени, представленного параметром."
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Параметры, которые используются для создания предложения Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает поля, которые используются для упорядочивания сгруппированных данных."
  remarks: "Свойство OrderGroupsBy, чтобы определить порядок сортировки групп данных. Например, можно группировать по `CategoryID` свойство и затем сортировки группы идентификатор каждой категории на среднее арифметическое `Price` свойство.       Свойство OrderGroupsBy можно задать только в том случае, если имеются сгруппированные данные. Если свойство OrderGroupsBy без параметра <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>Свойства <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления вызывает исключение.</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       Свойство, которое используется для сортировки данных должно быть свойство, используемое для группировки данных или результат статистической функции для сгруппированных данных. Чтобы указать порядок сортировки данных, можно добавить пробел и строка «Ascending», «ASC», «По убыванию» или «DESC» имя свойства в строке OrderGroupsBy.       В свойстве OrderGroupsBy, можно указать более одного свойства. Через запятую для разделения свойств."
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "Строка, используемая для создания предложения группы Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, которые используются для создания предложения группы Order By."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Управления использует параметры в коллекции OrderGroupsByParameters для создания предложения группы Order By во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource>       Добавить значения в коллекцию OrderGroupsByParameters только в том случае, если необходимо задать значения в предложении групп Order By во время выполнения. Можно определить поля, которые используются для сортировки данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       Можно задать параметры в коллекции OrderGroupsByParameters и соответствуют параметрам меток-заполнителей в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> Тем не менее при использовании этого подхода в коллекции OrderGroupsByParameters не может представлять имя столбца; они должны представлять значения. Можно установить для параметра значение, а затем сравнить это значение к свойству. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени, представленного параметром."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Параметры, которые используются для создания предложения группы Order By."
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает свойства и вычисляемыми значениями, которые включаются в извлеченные данные."
  remarks: "Если не задано свойство Select <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления получает все свойства (столбцы данных) из объекта данных.</xref:System.Web.UI.WebControls.LinqDataSource> Выберите свойство используется для извлечения подмножества свойств из объекта или для вычисления новых значений, когда данные извлекаются.       Можно указать свойства для получения свойства выберите значение имена свойств, которые требуется включить в возвращаемых данных.       При извлечении подмножество свойств из объекта данных <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления динамически создает класс, который содержит только свойства, заданные в выбранных свойств.</xref:System.Web.UI.WebControls.LinqDataSource> Класс также создается динамически, если вычисление свойств, которые не являются свойствами в объекте данных. В этих случаях объект, возвращаемый из запроса не является экземпляром класса, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> Вместо этого необходимо использовать `new` метода в свойство Select, чтобы указать, что новый класс возвращается из запроса. Например, для возвращения только `FirstName` и `LastName` свойства из объекта, который содержит больше, чем эти свойства, присвойте свойству выберите `new(FirstName, LastName)`. <xref:System.Web.UI.WebControls.LinqDataSource>Элемента управления динамически создаст новый класс, который указан в `new` метод.</xref:System.Web.UI.WebControls.LinqDataSource>       Можно использовать `As` ключевое слово для указания псевдонима для выбранного значения. Если назначить псевдоним, необходимо включить свойства псевдонима в `new` метод. Любой элемент управления с привязкой к данным, который привязывает результаты <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления должен ссылаться на свойство псевдонимом.</xref:System.Web.UI.WebControls.LinqDataSource> Например, если задано свойство Select `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, элемент управления с привязкой к данным можно получить доступ к два свойства `SalesRegion` и `RevenueThousands`.       Вы используете `new` функции в свойстве выберите согласно условиям, перечисленные в следующей таблице.      | Выберите | Использование нового | Пример |   |------------|----------------|-------------|   | Свойство единый. | `new` не требуется. | `Select=&quot;Category&quot;`|   | Несколько свойств. | `new` необходимые. | `Select=&quot;new(Cateogry, Name)&quot;`|   | Один или несколько свойств с псевдонимами. | `new` необходимые. | `Select=&quot;new(Category As CategoryGroup)&quot;`|       Если вы хотите включить автоматического изменения данных, но вы не хотите отобразить все свойства из объекта данных, не задано свойство Select. Вместо этого предлагается Управляйте отображением при помощи элемента управления с привязкой к данным. При использовании <xref:System.Web.UI.WebControls.DetailsView>управления или <xref:System.Web.UI.WebControls.GridView>элемента управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>Свойства `false`.</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.       При группировании данных в запросе, можно включить статистические методы в свойство Select. Можно использовать следующие статистические методы:- `Count()`       -    `Average(` *столбца* `)`       -    `Sum(` *столбца* `)`       -    `Max(` *столбца* `)`       -    `Min(` *столбца* `)`       -    `Where(` *условие* `)`       -    `Any()`       -    `All(` *условие* `)` Дополнительные сведения см. в разделе [NIB: Обзор элемента управления веб-сервера LinqDataSource](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: группы и статистические данные с помощью элемента управления LinqDataSource Элемент управления](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af).       При группировании данных может включать `Key` и `It`, который динамически создаются свойства, в свойство Select. `Key` Свойство ссылается на значения в свойство или свойства, которые были использованы для группирования данных. Например, если группировать по свойству с именем `Category`, `Key` свойство будет содержать каждое уникальное значение в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнять итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группировки. Например, если группировать по свойству с именем `Category`, `It` свойство содержит все отдельные записи, которые имеют общее значение в `Category` свойство.       При включении `It` ключевого слова в свойстве Select при группировании данных необходимо назначить псевдоним для `It` ключевое слово. <xref:System.Web.UI.WebControls.LinqDataSource>Управления возникает исключение, если `It` имеет псевдоним.</xref:System.Web.UI.WebControls.LinqDataSource> Можно присвоить псевдоним для `Key` ключевое слово, но это не является обязательным."
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "Строка, используемая для создания предложения Select."
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит по завершении операции извлечения данных."
  remarks: "Обработайте событие выбранные перехват всех исключений из операции извлечения данных или проверить объект данных после завершения операции получения. Объект становится доступным из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объект, передаваемый в обработчики событий.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед операцией извлечения данных."
  remarks: "Обрабатывать события Selecting для выполнения следующих задач:-изменение параметров для извлечения данных.      -Программное создание запроса.      -Измените значения для сортировки и разбиения на страницы.      — Для выполнения пользовательской сортировки или разбиения на страницы.      — Отмена операции извлечения данных.       <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>Объект, передаваемый в обработчики событий для этого события содержит параметры для операции извлечения данных.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Можно изменить параметры в обработчик событий при выборе до выполнения запроса, или можно создать результирующий набор и назначить <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       Возможность реализации пользовательской сортировки или разбиение по страницам в обработчики для этого события может быть ограничен элементом управления, к которому привязан <xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> Например, если заголовок <xref:System.Web.UI.WebControls.GridView>нажатии элемента управления, элемент управления выполняет автоматическую сортировку, которая может переопределить в любом порядке установления событий обработчика.</xref:System.Web.UI.WebControls.GridView>       Если исключение в обработчике событий для события Selecting, должен обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selected>событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Свойство содержит только исключения, возникающие после события Selecting.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, которые используются во время операции извлечения данных."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Управления использует параметры в коллекции SelectParameters для создания предложения Select во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource> Добавить параметры в коллекцию SelectParameters, если вы хотите использовать во время выполнения значения в предложении Select. Например можно добавить параметр к коллекции SelectParameters для представления свойства профиля пользователя. Затем можно использовать свойства и значения из источника данных для вычисления нового значения.       Если необходимо задать значение во время выполнения в предложении Select, у вас на использование коллекции SelectParameters. Можно определить свойства для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Например, чтобы вернуть `FirstName` и `LastName` значения из таблицы базы данных, <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>для «FirstName, LastName» без параметров.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       Чтобы задать значения в коллекции SelectParameters, добавить прототип в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойство именованного параметра.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> В предложении Select, перед именем параметра с символа @.       Нельзя использовать параметр в коллекции SelectParameters для представления имени свойства. Для динамического <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>на имя свойства, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>свойства при необходимости.</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Параметры, которые используются для создания предложения Select."
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, хранятся ли данные из источника данных в состоянии представления, чтобы убедиться в том, что данные не был изменен другим процессом перед обновлением или удалением."
  remarks: "По умолчанию обновление и удаление, когда была включена, <xref:System.Web.UI.WebControls.LinqDataSource>элемент управления сохраняет исходные значения для всех записей в состоянии представления.</xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>Управления хранит значения для всех первичных ключей, и все свойства, не помеченный `UpdateCheck.Never` в `Column` атрибут.</xref:System.Web.UI.WebControls.LinqDataSource> Задать `UpdateCheck` свойство `Column` атрибута в [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)].       Прежде чем LINQ to SQL обновляет или удаляет данные, он проверяет значения в состоянии представления со значениями в источнике данных. Если значения не совпадают, запись в источнике данных изменилась. В этом случае LINQ to SQL возникло исключение и не обновления или удаления. Дополнительные сведения о технологии LINQ to SQL см. в разделе [LINQ to SQL](~/add/includes/ajax-current-ext-md.md).       Сохранение исходных значений в представлении состояния может привести к чрезмерно возрасти размера страницы и может предоставлять конфиденциальных данных для злоумышленника. Вы можете отключить хранение значений в состоянии представления, присвоив свойству StoreOriginalValuesInViewState значение `false`. После этого необходимо предоставить свой собственный стиль, чтобы убедиться в том, что данные не изменились. Если значение свойства StoreOriginalValuesInViewState `false`, исходные значения не сохраняются в состоянии представления элемента управления с привязкой к данным. В этом случае LINQ to SQL не удалось проверить целостность данных. LINQ to SQL, вызовет исключение, указывающее конфликт данных, даже если данные в источнике данных не были изменены.       Если в источнике данных содержит поле метки времени, которое автоматически обновляется во время обновления, можно сохранить только это значение в состоянии представления. В этом случае свойство метки времени в классе сущностей присвоено `IsVersion=true` и всем свойствам присваиваются `UpdateCheck.Never`. Так как поле метки времени автоматически обновляется в базе данных каждый раз при изменении данных в этой записи, LINQ to SQL определяет от этого значения, если данные были изменены. Это позволяет сократить размер состояния просмотра и конфиденциальные данные не предоставляется. LINQ to SQL проверяет согласованность данных, сравнивая значение отметки времени в представлении состояния с аналогичным значением в базе данных. Дополнительные сведения см. в разделе [Пошаговое руководство: использование временной метки с помощью элемента управления LinqDataSource для проверки целостности данных](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)."
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значения будут храниться в представлении состояния; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Описание этого члена см. в разделе <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Web.UI.WebControls.LinqDataSource>экземпляр приводится к <xref:System.Web.DynamicData.IDynamicDataSource>интерфейс.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "Тип, связанный с данным классом."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Описание этого члена см. в разделе <xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>."
  remarks: "Этот член представляет явную реализацию члена интерфейса. Он может использоваться только если <xref:System.Web.UI.WebControls.LinqDataSource>экземпляр приводится к <xref:System.Web.DynamicData.IDynamicDataSource>интерфейс.</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "Имя сущности."
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает имя свойства или поля в классе контекста данных, который представляет коллекцию данных."
  remarks: "Установите свойство TableName имя свойства или поля, которое представляет данные, которые необходимо получить. При установке соединения с таблицей базы данных, имя свойства обычно является совпадает с именем таблицы. При подключении к коллекции данных в памяти, задается свойство TableName имя свойства или поля, которое возвращает коллекцию данных.       Можно назначить свойства, которое возвращает любого типа в свойство TableName для операций получения. Если объект, представленный свойством не реализует <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource>управления будет автоматически включать объект в экземпляре <xref:System.Collections.IEnumerable>объекта.</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       Чтобы включить автоматическое обновление, вставка или удаление операций, класса, который присваивается <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>свойству должен быть производным от <xref:System.Data.Linq.DataContext>и свойство, которое присваивается свойству должен быть производным от <xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая имя свойства, содержащего коллекцию данных."
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Выполняет операцию обновления."
  remarks: "Как правило вызовите метод Update в коде нет. Элемент управления с привязкой к данным автоматически вызывает метод обновления при выполнении пользователем соответствующего действия для обновления записи. Явным образом вызвать метод Update, если вы хотите создать свой собственный процесс для обновления данных."
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "Ключевые значения строк для обновляемых записей."
    - id: values
      type: System.Collections.IDictionary
      description: "Значения строк, для обновления в источнике данных."
    - id: oldValues
      type: System.Collections.IDictionary
      description: "Значения строк, которые проверяются на наличие конфликтов данных."
    return:
      type: System.Int32
      description: "Число записей, затронутых операцией обновления."
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит при завершении операции обновления."
  remarks: "Обработайте событие Updated перехват всех исключений, в ходе операции обновления или проверить значения параметров вывода после завершения операции обновления. Выходные параметры доступны из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объект, передаваемый в обработчики событий.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Эта коллекция не используется <xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;> </xref> класса."
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Коллекция параметров."
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Происходит перед операцией обновления."
  remarks: "Обработайте событие обновления для проверки объекта обновления, для проверки на наличие ошибок проверки данных в классе данных, для изменения значения перед операцией обновления, или отменить операцию обновления. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>Содержит объект, передаваемый в обработчики событий в исходном объекте и обновленного объекта.</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       При возникновении ошибки проверки во время операции обновления, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>содержит объект исключения проверки, которые выдают класса данных.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Ошибка проверки происходит, если значения для обновления не соответствует типу свойства в классе данных, или в том случае, если оно не проходит настраиваемую проверку. В обработчике событий для события обновления можно извлечь исключения проверки и предпринять соответствующие действия.       Если исключение в обработчике событий для события обновления, необходимо обрабатывать исключение в этом обработчике события. Исключение не будут передаваться в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updated>событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>объекта).</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>Свойство содержит только исключения, возникающие после события обновления.</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, которое указывает, что условия должны иметь значение true, если для записи должны быть включены в полученных данных."
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "Строка, используются для создания предложения."
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает коллекцию параметров, используются для создания предложения."
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>Управления использует параметры в коллекции параметров WhereParameters для создания оператора предложение во время выполнения.</xref:System.Web.UI.WebControls.LinqDataSource> Добавление параметров в коллекцию параметров WhereParameters при необходимости программно задать одно или несколько условий в предложении Where предложения. Например, может найти таблицу базы данных для записи, в которых Фамилия равно значению <xref:System.Web.UI.WebControls.TextBox>управления.</xref:System.Web.UI.WebControls.TextBox> В этом случае параметр добавляется в коллекцию параметров WhereParameters для значение текстового поля.       Если не требуется задать значение во время выполнения в предложении Where предложения, не нужно использовать коллекцию параметров WhereParameters. Можно определить поля для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Например, для возвращения значений из таблицы базы данных где `LastName` равно «Adams» в разметке, задать <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Свойства `&quot;LastName = &quot;Adams&quot;&quot;` без параметров.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       Чтобы задать значения в коллекции параметров WhereParameters, назначить имя каждого параметра и затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>Свойства для этого параметра.</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> В предложении Where предложения, перед именем параметра с символа @."
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "Коллекция параметров, которые используются для создания оператора предложения в <xref:System.Web.UI.WebControls.LinqDataSource.Where*>свойство.</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
