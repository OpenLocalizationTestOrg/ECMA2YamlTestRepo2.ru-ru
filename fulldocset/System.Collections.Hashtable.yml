### YamlMime:ManagedReference
items:
- uid: System.Collections.Hashtable
  id: Hashtable
  children:
  - System.Collections.Hashtable.#ctor
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  - System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  - System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  - System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  - System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Hashtable.Add(System.Object,System.Object)
  - System.Collections.Hashtable.Clear
  - System.Collections.Hashtable.Clone
  - System.Collections.Hashtable.comparer
  - System.Collections.Hashtable.Contains(System.Object)
  - System.Collections.Hashtable.ContainsKey(System.Object)
  - System.Collections.Hashtable.ContainsValue(System.Object)
  - System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  - System.Collections.Hashtable.Count
  - System.Collections.Hashtable.EqualityComparer
  - System.Collections.Hashtable.GetEnumerator
  - System.Collections.Hashtable.GetHash(System.Object)
  - System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Hashtable.hcp
  - System.Collections.Hashtable.IsFixedSize
  - System.Collections.Hashtable.IsReadOnly
  - System.Collections.Hashtable.IsSynchronized
  - System.Collections.Hashtable.Item(System.Object)
  - System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  - System.Collections.Hashtable.Keys
  - System.Collections.Hashtable.OnDeserialization(System.Object)
  - System.Collections.Hashtable.Remove(System.Object)
  - System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - System.Collections.Hashtable.SyncRoot
  - System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Hashtable.Values
  langs:
  - csharp
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
  type: Class
  summary: "Представляет коллекцию пар ключ/значение, которые упорядочены по хэш-коду ключа.       Для просмотра исходного кода .NET Framework для этого типа, в разделе [ссылки на источник](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd)."
  remarks: "> [!NOTE]Настроек исходного кода .NET Framework для этого типа см. в разделе [ссылки на источник](http://referencesource.microsoft.com/#mscorlib/system/collections/hashtable.cs#10fefb6e0ae510dd). Выполнять поиск исходного кода в Интернете, справочник для автономной работы и пошагово источники (включая исправления и обновления) во время отладки; в разделе [инструкции](http://referencesource.microsoft.com/).       Каждый элемент является пара ключ значение, хранящиеся в <xref:System.Collections.DictionaryEntry>объекта.</xref:System.Collections.DictionaryEntry> Ключ не может быть `null`, но может быть значение.       Объекты, используемые как ключи по хэш-таблицы требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>метод (или <xref:System.Collections.IHashCodeProvider>интерфейса) и <xref:System.Object.Equals%2A?displayProperty=fullName>метод (или <xref:System.Collections.IComparer>интерфейс).</xref:System.Collections.IComparer> </xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> Реализация методов и интерфейсов должна обрабатывать чувствительность к регистру одинаково. в противном случае хэш-таблицы могут работать неправильно. Например, при создании хэш-таблицы, необходимо использовать <xref:System.Collections.CaseInsensitiveHashCodeProvider>класс (или без учета регистра в любом <xref:System.Collections.IHashCodeProvider>реализацию) с <xref:System.Collections.CaseInsensitiveComparer>класс (или без учета регистра в любом <xref:System.Collections.IComparer>реализации).</xref:System.Collections.IComparer> </xref:System.Collections.CaseInsensitiveComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.CaseInsensitiveHashCodeProvider>       Более того эти методы должны быть те же результаты при вызове с теми же параметрами, если ключ существует в хэш-таблице. Альтернативой является использование конструктора хэш-таблицу с <xref:System.Collections.IEqualityComparer>параметр.</xref:System.Collections.IEqualityComparer> Если равенства ключей было просто равенство ссылок, но в унаследованной реализации <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>было бы достаточно.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Ключевые объекты должны быть неизменны при условии, что они используются в качестве ключей в хэш-таблице.       При добавлении элемента в хэш-таблица элемент помещается в сегмент, в зависимости от хэш-коду ключа. Последующих уточняющих запросов ключа служит хэш-коду ключа для поиска в только определенном сегменте, таким образом, существенно снижает число ключей сравнений, необходимое для поиска элемента.       Коэффициент загрузки для хэш-таблицы определяет максимальное отношение количества элементов к количеству сегментов. Снижение показателя загрузки уменьшает среднее время поиска за счет увеличения объема используемой памяти. Коэффициент загрузки по умолчанию 1.0 обычно обеспечивает наилучший баланс между скоростью и размер. Фактор нагрузки также можно указать при создании хэш-таблица.       При добавлении элементов на класс Hashtable, увеличивает фактический показатель загрузки хэш-таблицы. Когда фактический показатель загрузки становится равным указанной, количество сегментов в хэш-таблице автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущего количества сегментов хэш-таблицы.       Каждый объект ключа в хэш-таблице необходимо предоставить свои собственные хэш-функции, к которому можно получить, вызвав <xref:System.Collections.Hashtable.GetHash%2A>.</xref:System.Collections.Hashtable.GetHash%2A> Тем не менее, любой объект, реализующий <xref:System.Collections.IHashCodeProvider>можно передать конструктору хэш-таблицы и что хэш-функции используется для всех объектов в таблице.</xref:System.Collections.IHashCodeProvider>       Емкость хэш-таблицы — количество элементов, которые может вместить хэш-таблица. Хэш-таблицу при добавлении элементов, емкость автоматически увеличивается должным образом посредством перераспределения.       Для очень больших объектов, хэш-таблицы, максимальная емкость 2 миллиардов элементы в 64-разрядной системе можно повысить, указав `enabled` атрибута элемента конфигурации для `true` в среде выполнения.       `foreach` Инструкции языка C# (`For Each` в Visual Basic) возвращает объект типа элементов в коллекции. Поскольку каждый элемент хэш-таблицы представляет собой пару ключ/значение, тип элемента не является типом ключа или тип значения. Вместо этого тип элемента — это <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Например: [!code-cpp [System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/cpp/t-system.collections.has_1.cpp)][!code-cs[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/csharp/t-system.collections.has_1.cs)][!code-vb[System.Collections.Hashtable_ClassExample#01](~/add/codesnippet/visualbasic/t-system.collections.has_1.vb) ] `foreach` инструкция является оболочкой перечислителя, допускающей только чтение из, но не запись в коллекции.           Поскольку сериализация и десериализация перечислитель для хэш-таблицы может вызвать элементы, которые становятся переупорядочивается, не удается продолжить перечисление без вызова <xref:System.Collections.IEnumerator.Reset%2A>метод.</xref:System.Collections.IEnumerator.Reset%2A>      Настроек [!NOTE] настроек, поскольку ключи могут наследоваться и их поведение изменено, абсолютная уникальность не гарантируется при сравнении с <xref:System.Type.Equals%2A>метод.</xref:System.Type.Equals%2A>"
  example:
  - "The following example shows how to create, initialize and perform various functions to a Hashtable and how to print out its keys and values.  \n  \n [!code-cpp[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/cpp/t-system.collections.has_2.cpp)]\n [!code-cs[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/csharp/t-system.collections.has_2.cs)]\n [!code-vb[System.Collections.Hashtable_ClassExample#00](~/add/codesnippet/visualbasic/t-system.collections.has_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Hashtable/HashtableDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Hashtable : ICloneable, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor
  id: '#ctor'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью начальную емкость по умолчанию, показателем загрузки, поставщиком хэш-кода и функцию сравнения."
  remarks: "Емкость хэш-таблицы используется для расчета оптимального количества сегментов хэш-таблицы, в зависимости от фактор нагрузки. Емкость автоматически увеличивается при необходимости.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Этот конструктор является операцией o(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_4_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_4_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_4_1.vb)]"
  syntax:
    content: public Hashtable ();
    parameters: []
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует коэффициент загрузки по умолчанию, поставщиком хэш-кода и функцию сравнения."
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.has_1_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.has_1_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.has_1_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью начальную емкость по умолчанию и показателем загрузки и указанный <xref:System.Collections.IEqualityComparer>объекта.</xref:System.Collections.IEqualityComparer>"
  remarks: "Емкость хэш-таблицы используется для расчета оптимального количества сегментов хэш-таблицы, в зависимости от фактор нагрузки. Емкость автоматически увеличивается при необходимости.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       <xref:System.Collections.IEqualityComparer>Объект включает поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>объекта не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       <xref:System.Collections.IEqualityComparer>Позволяет использовать сценарии, например, при поиске строк без учета регистра.</xref:System.Collections.IEqualityComparer>       Этот конструктор является операцией o(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/m-system.collections.has_5_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/m-system.collections.has_5_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.has_5_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Объект, который определяет поставщика хэш-кода и функцию сравнения для использования с <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IEqualityComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию и функцию сравнения по умолчанию. Поставщика хэш-кода по умолчанию — каждый ключ реализация &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; и функцию сравнения по умолчанию — каждый ключ реализация &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью указанной исходной емкостью и коэффициент загрузки по умолчанию, поставщиком хэш-кода и функцию сравнения."
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity`."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.has_2_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.has_2_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.has_2_1.vb)]"
  syntax:
    content: public Hashtable (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует коэффициент загрузки по умолчанию и указанного <xref:System.Collections.IEqualityComparer>объекта.</xref:System.Collections.IEqualityComparer>"
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       <xref:System.Collections.IEqualityComparer>Объект включает поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>объекта не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       <xref:System.Collections.IEqualityComparer>Позволяет использовать сценарии, например, при поиске строк без учета регистра.</xref:System.Collections.IEqualityComparer>       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/81cd87de-02b7-42cc-8fdd-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/81cd87de-02b7-42cc-8fdd-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/81cd87de-02b7-42cc-8fdd-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Объект, который определяет поставщика хэш-кода и функцию сравнения для использования с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию и функцию сравнения по умолчанию. Поставщика хэш-кода по умолчанию — каждый ключ реализация &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; и функцию сравнения по умолчанию — каждый ключ реализация &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  id: '#ctor(System.Collections.IDictionary,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует фактор нагрузки указанного и поставщик хэш-кода по умолчанию и функцию сравнения."
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/fb1cfbc8-7454-4619-a6e7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/fb1cfbc8-7454-4619-a6e7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/fb1cfbc8-7454-4619-a6e7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью начальную емкость по умолчанию и загрузить показателем и поставщика указанного хэш-кода и функцию сравнения."
  remarks: "Емкость хэш-таблицы используется для расчета оптимального количества сегментов хэш-таблицы, в зависимости от фактор нагрузки. Емкость автоматически увеличивается при необходимости.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Генератор хеш-кода и пользовательского модуля сравнения включить сценарии, например, при поиске строк без учета регистра.       Этот конструктор является операцией o(1)."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctor#1](~/add/codesnippet/cpp/1ff65986-0234-4702-94b7-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctor#1](~/add/codesnippet/csharp/1ff65986-0234-4702-94b7-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctor#1](~/add/codesnippet/visualbasic/1ff65986-0234-4702-94b7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> Объект, предоставляющий хэш-коды для всех ключей в <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Объект, который используется для определения равенства двух ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью указанной исходной емкостью и <xref:System.Collections.IEqualityComparer>и коэффициент загрузки по умолчанию.</xref:System.Collections.IEqualityComparer>"
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       <xref:System.Collections.IEqualityComparer>Объект включает поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       <xref:System.Collections.IEqualityComparer>Позволяет использовать сценарии, например, при поиске строк без учета регистра.</xref:System.Collections.IEqualityComparer>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/5067e9ac-cd98-4da8-9418-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/5067e9ac-cd98-4da8-9418-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/5067e9ac-cd98-4da8-9418-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Объект, который определяет поставщика хэш-кода и функцию сравнения для использования с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию и функцию сравнения по умолчанию. Поставщика хэш-кода по умолчанию — каждый ключ реализация &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; и функцию сравнения по умолчанию — каждый ключ реализация &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью указанной исходной емкостью и загрузить показателем и поставщик хэш-кода по умолчанию и функцию сравнения."
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/m-system.collections.has_8_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/m-system.collections.has_8_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/m-system.collections.has_8_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля.       - или - <code>loadFactor</code> меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>capacity</code>вызывает переполнение."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класс, который может быть сериализован с помощью указанного <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> и <xref:System.Runtime.Serialization.StreamingContext>объекты.</xref:System.Runtime.Serialization.StreamingContext>"
  remarks: "Емкость хэш-таблицы используется для расчета оптимального количества сегментов хэш-таблицы, в зависимости от фактор нагрузки. Емкость автоматически увеличивается при необходимости.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Этот конструктор является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Поскольку сериализация и десериализация перечислитель для <xref:System.Collections.Hashtable>может привести к элементы, которые становятся переупорядочивается, невозможно продолжать перечисление без вызова <xref:System.Collections.IEnumerator.Reset%2A>метод.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Объект <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> объект, содержащий сведения, необходимые для сериализации <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>объект, содержащий источник и назначение сериализованного потока, связанного с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует коэффициент загрузки по умолчанию и поставщика указанного хэш-кода и функцию сравнения. Этот API устарел. Кроме того, в разделе &lt;xref:System.Collections.Hashtable.%23ctor%2A&gt;."
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Генератор хеш-кода и пользовательского модуля сравнения включить сценарии, например, при поиске строк без учета регистра.       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/cpp/9a30e378-7c34-4854-b12f-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/csharp/9a30e378-7c34-4854-b12f-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorDictionary#1](~/add/codesnippet/visualbasic/9a30e378-7c34-4854-b12f-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> Объект, предоставляющий хэш-коды для всех ключей в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Объект, который используется для определения равенства двух ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует заданному и <xref:System.Collections.IEqualityComparer>объекта.</xref:System.Collections.IEqualityComparer>"
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       <xref:System.Collections.IEqualityComparer>Объект включает поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>объекта не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       <xref:System.Collections.IEqualityComparer>Позволяет использовать сценарии, например, при поиске строк без учета регистра.</xref:System.Collections.IEqualityComparer>       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/a92f83be-9de4-470a-8cbb-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/a92f83be-9de4-470a-8cbb-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/a92f83be-9de4-470a-8cbb-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Объект, который определяет поставщика хэш-кода и функцию сравнения для использования с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию и функцию сравнения по умолчанию. Поставщика хэш-кода по умолчанию — каждый ключ реализация &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; и функцию сравнения по умолчанию — каждый ключ реализация &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью указанной начальной емкостью, поставщика хэш-кода, функция сравнения и коэффициент загрузки по умолчанию."
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Генератор хеш-кода и пользовательского модуля сравнения включить сценарии, например, при поиске строк без учета регистра.       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/cpp/2154dba0-3cc6-41f7-aa9b-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/csharp/2154dba0-3cc6-41f7-aa9b-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorInt#1](~/add/codesnippet/visualbasic/2154dba0-3cc6-41f7-aa9b-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> Объект, предоставляющий хэш-коды для всех ключей в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Объект, который используется для определения равенства двух ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с использованием указанной начальной емкостью, фактор нагрузки и <xref:System.Collections.IEqualityComparer>объекта.</xref:System.Collections.IEqualityComparer>"
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       <xref:System.Collections.IEqualityComparer>Объект включает поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       <xref:System.Collections.IEqualityComparer>Позволяет использовать сценарии, например, при поиске строк без учета регистра.</xref:System.Collections.IEqualityComparer>       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/30b60c47-7bce-44a2-8d17-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/30b60c47-7bce-44a2-8d17-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/30b60c47-7bce-44a2-8d17-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Объект, который определяет поставщика хэш-кода и функцию сравнения для использования с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию и функцию сравнения по умолчанию. Поставщика хэш-кода по умолчанию — каждый ключ реализация &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt; и функцию сравнения по умолчанию — каждый ключ реализация &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля.       - или - <code>loadFactor</code> меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса путем копирования элементов из указанного словаря в новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта. Новый <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объект обладает начальной емкостью, равной количеству скопированных элементов и использует заданному, поставщика хэш-кода и функцию сравнения."
  remarks: "Количество элементов в исходном словаре имеет значение начальной емкостью. Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Генератор хеш-кода и пользовательского модуля сравнения включить сценарии, например, при поиске строк без учета регистра.       Элементы нового <xref:System.Collections.Hashtable>сортируются в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable>       Этот конструктор является операцией O (`n`) операции, где `n` — число элементов в `d` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cs[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/csharp/c67b166f-bc6a-49e5-9bd7-_1.cs)]\n [!code-cpp[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/cpp/c67b166f-bc6a-49e5-9bd7-_1.cpp)]\n [!code-vb[System.Collections.Hashtable_ctorDictionaryFloat#1](~/add/codesnippet/visualbasic/c67b166f-bc6a-49e5-9bd7-_1.vb)]"
  syntax:
    content: public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Объект для копирования в новую <xref href=&quot;System.Collections.Hashtable&quot;> </xref> объекта.</xref:System.Collections.IDictionary>"
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> Объект, предоставляющий хэш-коды для всех ключей в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Объект, который используется для определения равенства двух ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>loadFactor</code>меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Collections.Hashtable&quot;> </xref> класса с помощью указанной начальной емкостью, показателем загрузки, поставщиком хэш-кода и функцию сравнения."
  remarks: "Указание исходной емкости избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable> Емкость — автоматически увеличивается в зависимости от нагрузки показателя.       Показатель загрузки определяет максимальное отношение количества элементов к количеству сегментов. Фактор нагрузки на более мелкие означает более быстрого поиска за счет увеличения объема используемой памяти. Фактор нагрузки 1.0 является наилучшим соотношением между скоростью и размер.       Когда фактический показатель загрузки становится равным указанной, количество сегментов автоматически увеличивается до наименьшего простого числа, большего, чем дважды текущее число блоков.       Хеш-кода распределяет хэш-кодов для ключей в списке <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> Поставщика хэш-кода по умолчанию является реализацией <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>       Функция сравнения определяет, равны ли два ключа. Каждый ключ в <xref:System.Collections.Hashtable>должно быть уникальным.</xref:System.Collections.Hashtable> Функция сравнения по умолчанию является реализацией <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Генератор хеш-кода и пользовательского модуля сравнения включить сценарии, например, при поиске строк без учета регистра.       Этот конструктор является операцией O (`n`) операции, где `n` — `capacity` параметра."
  example:
  - "The following code example creates hash tables using different <xref:System.Collections.Hashtable> constructors and demonstrates the differences in the behavior of the hash tables, even if each one contains the same elements.  \n  \n [!code-cpp[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/cpp/86ed2545-c9ee-4654-a1a4-_1.cpp)]\n [!code-cs[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/csharp/86ed2545-c9ee-4654-a1a4-_1.cs)]\n [!code-vb[System.Collections.Hashtable_ctorIntFloat#1](~/add/codesnippet/visualbasic/86ed2545-c9ee-4654-a1a4-_1.vb)]"
  syntax:
    content: public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Приблизительное количество элементов, <xref href=&quot;System.Collections.Hashtable&quot;> </xref> может первоначально содержать объект."
    - id: loadFactor
      type: System.Single
      description: "Число в диапазоне от 0,1 до 1,0, умноженное на значение по умолчанию, которое обеспечивает высокую производительность. Результатом является максимальное отношение количества элементов к количеству сегментов."
    - id: hcp
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> Объект, предоставляющий хэш-коды для всех ключей в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> для использования поставщика хэш-кода по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;."
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Объект, который используется для определения равенства двух ключей.</xref:System.Collections.IComparer>       - или - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> следует использовать функцию сравнения по умолчанию, который является реализацией каждого ключа &lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;."
  overload: System.Collections.Hashtable.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>меньше нуля.       - или - <code>loadFactor</code> меньше, чем 0,1.       - или - <code>loadFactor</code> больше, чем 1.0."
  platform:
  - net462
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Добавляет элемент с указанным ключом и значением в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Ключ не может быть `null`, но может быть значение.       Объект, нет зависимости между его состоянием и хэш-кодом, обычно не используется в качестве ключа. Например строковые объекты, которые являются лучше, чем объекты типа StringBuilder для использования ключей.       Можно также использовать <xref:System.Collections.Hashtable.Item%2A>свойство для добавления новых элементов, задав значение ключа, который не существует в <xref:System.Collections.Hashtable>, например `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Item%2A> Тем не менее если указанный ключ уже существует в <xref:System.Collections.Hashtable>, параметр <xref:System.Collections.Hashtable.Item%2A>свойство перезаписывает прежнее значение.</xref:System.Collections.Hashtable.Item%2A> </xref:System.Collections.Hashtable> Напротив метод Add не изменяет существующие элементы.       Если <xref:System.Collections.Hashtable.Count%2A>меньше, чем объем <xref:System.Collections.Hashtable>, этот метод является операцией o(1).</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable.Count%2A> Если емкость требуется увеличить для размещения нового элемента, этот метод становится операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to add elements to the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Add Example#1](~/add/codesnippet/cpp/m-system.collections.has_6_1.cpp)]\n [!code-cs[Classic Hashtable.Add Example#1](~/add/codesnippet/csharp/m-system.collections.has_6_1.cs)]\n [!code-vb[Classic Hashtable.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_6_1.vb)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ элемента, который требуется добавить."
    - id: value
      type: System.Object
      description: "Значение элемента, который требуется добавить. Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Элемент с таким ключом уже существует в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clear
  id: Clear
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет все элементы из <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "<xref:System.Collections.Hashtable.Count%2A>имеет значение&0;, а также ссылки на другие объекты из элементов коллекции также освобождаются.</xref:System.Collections.Hashtable.Count%2A> Емкость не изменяется.       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to clear the values of the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.has_10_1.cpp)]\n [!code-vb[Classic Hashtable.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_10_1.vb)]\n [!code-cs[Classic Hashtable.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.has_10_1.cs)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Hashtable.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> Доступно только для чтения."
  platform:
  - net462
- uid: System.Collections.Hashtable.Clone
  id: Clone
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Создает неполную копию объекта <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Неполная копия коллекции копируются только элементы коллекции, они являются ссылочными типами или типами значений, но не копирует объекты, которые ссылаются на. Ссылки в новой коллекции указывают на те же объекты, на которые указывают ссылки в исходной коллекции.       Напротив глубокую копию коллекции копирует элементы и все, что прямо или косвенно ссылаются элементы.       <xref:System.Collections.Hashtable>Копия имеет одинаковым количеством, такие же возможности, те же <xref:System.Collections.IHashCodeProvider>реализации и ту же <xref:System.Collections.IComparer>как и исходный <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.IComparer> </xref:System.Collections.IHashCodeProvider> </xref:System.Collections.Hashtable>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Неполная копия <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.comparer
  id: comparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает <xref:System.Collections.IComparer>для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  remarks: "Получение значения данного свойства является операцией o(1)."
  syntax:
    content: protected System.Collections.IComparer comparer { get; set; }
    return:
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>Для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IComparer>"
  overload: System.Collections.Hashtable.comparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Свойству присвоено значение, но хэш-таблицы был создан с помощью <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит конкретный ключ."
  remarks: "Содержит реализует <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> Он ведет себя точно так, как <xref:System.Collections.Hashtable.ContainsKey%2A>.</xref:System.Collections.Hashtable.ContainsKey%2A>       Этот метод является операцией o(1).       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_12_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_12_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ для поиска в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит элемент с указанным ключом; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит конкретный ключ."
  remarks: "Этот метод работает точно так, как <xref:System.Collections.Hashtable.Contains%2A>.</xref:System.Collections.Hashtable.Contains%2A>       Этот метод является операцией o(1).       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_7_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_7_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_7_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ для поиска в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит элемент с указанным ключом; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Определяет, является ли <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит указанное значение."
  remarks: "Значения элементов <xref:System.Collections.Hashtable>сравниваются с указанным значением с помощью <xref:System.Object.Equals%2A?displayProperty=fullName>метод.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Collections.Hashtable>       Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Начиная с .NET Framework 2.0, этот метод использует объекты коллекции <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` для определения наличия элемента.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> В более ранних версиях платформы .NET Framework, такое определение осуществлялось с помощью <xref:System.Object.Equals%2A>и <xref:System.IComparable.CompareTo%2A>методы `item` параметр для объектов в коллекции.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following example shows how to determine whether the <xref:System.Collections.Hashtable> contains a specific element.  \n  \n [!code-cpp[Classic Hashtable.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.has_9_1.cpp)]\n [!code-cs[Classic Hashtable.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.has_9_1.cs)]\n [!code-vb[Classic Hashtable.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_9_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Значение для поиска в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>. Значение может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.Hashtable&quot;> </xref> содержит элемент с указанным <code> value </code>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Копирует <xref href=&quot;System.Collections.Hashtable&quot;> </xref> элементы в одномерном массиве <xref:System.Array>экземпляр с заданным индексом.</xref:System.Array>"
  remarks: "Элементы копируются <xref:System.Array>в том же порядке, в котором перечислитель перемещается по <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Array>       Чтобы скопировать только ключи в <xref:System.Collections.Hashtable>, используйте `Hashtable.Keys.CopyTo`.</xref:System.Collections.Hashtable>       Копировать только значения в <xref:System.Collections.Hashtable>, используйте `Hashtable.Values.CopyTo`.</xref:System.Collections.Hashtable>       Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  example:
  - "The following example shows how to copy the list of keys or the list of values in a <xref:System.Collections.Hashtable> into a one-dimensional <xref:System.Array>.  \n  \n [!code-cs[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.has_0_1.cs)]\n [!code-vb[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_0_1.vb)]\n [!code-cpp[Classic Hashtable.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.has_0_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>который является конечным <xref:System.Collections.DictionaryEntry>объекты из <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.Collections.Hashtable.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref href=&quot;System.Collections.Hashtable&quot;> </xref> больше, чем свободное пространство от <code>arrayIndex</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref href=&quot;System.Collections.Hashtable&quot;> </xref> не может быть автоматически приведен к типу массива назначения <code> array </code>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Count
  id: Count
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает число пар &quot;ключ значение&quot;, содержащихся в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Число пар &quot;ключ значение&quot;, содержащихся в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.EqualityComparer
  id: EqualityComparer
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IEqualityComparer>для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  remarks: "<xref:System.Collections.IEqualityComparer>Содержит поставщика хэш-кода и функцию сравнения.</xref:System.Collections.IEqualityComparer> Если <xref:System.Collections.IEqualityComparer>используется в <xref:System.Collections.Hashtable>конструктор, объекты, используемые в качестве ключей в <xref:System.Collections.Hashtable>не требуется переопределять <xref:System.Object.GetHashCode%2A?displayProperty=fullName>и <xref:System.Object.Equals%2A?displayProperty=fullName>методы.</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> </xref:System.Collections.IEqualityComparer>       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: protected System.Collections.IEqualityComparer EqualityComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>Для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Hashtable.EqualityComparer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Свойству присвоено значение, но хэш-таблицы был создан с помощью <xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> и <xref:System.Collections.IComparer>.</xref:System.Collections.IComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.IDictionaryEnumerator>, который выполняет итерацию <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A>  В этой позиции <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Следовательно, перечисление коллекции само по себе не является является потокобезопасной процедурой.  Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления.  Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию.       Этот метод является операцией o(1).       Поскольку сериализация и десериализация перечислитель для <xref:System.Collections.Hashtable>может привести к элементы, которые становятся переупорядочивается, невозможно продолжать перечисление без вызова <xref:System.Collections.IEnumerator.Reset%2A>метод.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  example:
  - "The following example compares the use of GetEnumerator and `foreach` to enumerate the contents of a <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable Example#2](~/add/codesnippet/cpp/m-system.collections.has_3_1.cpp)]\n [!code-cs[Classic Hashtable Example#2](~/add/codesnippet/csharp/m-system.collections.has_3_1.cs)]\n [!code-vb[Classic Hashtable Example#2](~/add/codesnippet/visualbasic/m-system.collections.has_3_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Hashtable&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Hashtable.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.GetHash(System.Object)
  id: GetHash(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает хэш-код указанного ключа."
  remarks: "Если хэш-таблица была создана с помощью определенной <xref:System.Collections.IHashCodeProvider>реализация, этот метод использует поставщика, хэш-кода; в противном случае он использует <xref:System.Object.GetHashCode%2A?displayProperty=fullName>реализацию `key`.</xref:System.Object.GetHashCode%2A?displayProperty=fullName> </xref:System.Collections.IHashCodeProvider>       Этот метод является операцией o(1)."
  syntax:
    content: protected virtual int GetHash (object key);
    parameters:
    - id: key
      type: System.Object
      description: "<xref:System.Object>Для хэш-код которого должны быть возвращены.</xref:System.Object>"
    return:
      type: System.Int32
      description: "Хэш-код для <code> key </code>."
  overload: System.Collections.Hashtable.GetHash*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Реализует <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> интерфейса и возвращает данные, необходимые для сериализации <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Объект <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> объект, содержащий сведения, необходимые для сериализации <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Объект <xref:System.Runtime.Serialization.StreamingContext>объект, содержащий источник и назначение сериализованного потока, связанного с <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Hashtable.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Коллекция была изменена."
  platform:
  - net462
- uid: System.Collections.Hashtable.hcp
  id: hcp
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает объект, который может распределять хэш-коды."
  remarks: "Получение значения данного свойства является операцией o(1)."
  syntax:
    content: protected System.Collections.IHashCodeProvider hcp { get; set; }
    return:
      type: System.Collections.IHashCodeProvider
      description: "Объект, который может распределять хэш-коды."
  overload: System.Collections.Hashtable.hcp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Свойству присвоено значение, но хэш-таблицы был создан с помощью <xref:System.Collections.IEqualityComparer>.</xref:System.Collections.IEqualityComparer>"
  platform:
  - net462
- uid: System.Collections.Hashtable.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.Hashtable&quot;> </xref> имеет фиксированный размер."
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы после создания коллекции, но разрешается изменять существующие элементы.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.Hashtable&quot;> </xref> имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Collections.Hashtable&quot;> </xref> доступно только для чтения."
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции.       Коллекции, доступной только для чтения является просто коллекцией с оболочкой, препятствующей изменению коллекции. Таким образом при внесении изменений в базовую коллекцию, доступную только для чтения коллекцию отражает эти изменения.       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Collections.Hashtable&quot;> </xref> только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает значение, указывающее, является ли доступ к <xref href=&quot;System.Collections.Hashtable&quot;> </xref> является синхронизированным (потокобезопасным)."
  remarks: "Объект <xref:System.Collections.Hashtable>может поддерживать один модуль записи и несколько читающих одновременно.</xref:System.Collections.Hashtable> Для обеспечения потокобезопасности, все операции должны осуществляться через оболочки, возвращаемой методом <xref:System.Collections.Hashtable.Synchronized%2A>метод.</xref:System.Collections.Hashtable.Synchronized%2A>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.Hashtable.SyncRoot%2A>на все время перечисления: [!code-cpp [классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/cpp/p-system.collections.has_1_1.cpp)][!code-vb[классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/visualbasic/p-system.collections.has_1_1.vb)][!code-cs[классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/csharp/p-system.collections.has_1_1.cs) ]     </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.has_1_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.has_1_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.has_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref href=&quot;System.Collections.Hashtable&quot;> </xref> является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.Hashtable.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает или задает значение, связанное с указанным ключом."
  remarks: "Это свойство предоставляет возможность доступа к указанному элементу коллекции с помощью следующего синтаксиса: `myCollection[key]`.       Можно также использовать свойство элемента для добавления новых элементов, задав значение ключа, который не существует в <xref:System.Collections.Hashtable>, например `myCollection[&quot;myNonexistentKey&quot;] = myValue`.</xref:System.Collections.Hashtable> Тем не менее если указанный ключ уже существует в <xref:System.Collections.Hashtable>, задав свойство элемента перезаписывает прежнее значение.</xref:System.Collections.Hashtable> Напротив <xref:System.Collections.Hashtable.Add%2A>метод не изменяет существующие элементы.</xref:System.Collections.Hashtable.Add%2A>       Ключ не может быть `null`, но может быть значение. Чтобы различать `null` , возвращается, поскольку указанный ключ не найден и `null` , возвращается значение заданного ключа является `null`, используйте <xref:System.Collections.Hashtable.Contains%2A>метод или <xref:System.Collections.Hashtable.ContainsKey%2A>метод, чтобы определить, существует ли ключ в списке.</xref:System.Collections.Hashtable.ContainsKey%2A> </xref:System.Collections.Hashtable.Contains%2A>       Получение значения данного свойства является операцией o(1). Задание этого свойства также является операцией o(1).       Ключевое слово языка C# используется для определения индексаторов вместо реализации <xref:System.Collections.IList.Item%2A>свойство.</xref:System.Collections.IList.Item%2A> Visual Basic реализует элемент как свойство по умолчанию, который предоставляет те же возможности индексирования."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "Ключ, значение которого требуется получить или задать."
    return:
      type: System.Object
      description: "Значение, связанное с указанным ключом. Если указанный ключ не найден, при попытке его получения возвращается <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, и попытке задания создается новый элемент, используя указанный ключ."
  overload: System.Collections.Hashtable.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Свойство имеет значение и <xref href=&quot;System.Collections.Hashtable&quot;> </xref> доступно только для чтения.       - или - свойству, <code> key </code> не существует в коллекции и <xref href=&quot;System.Collections.Hashtable&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  id: KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Сравнивает указанный <xref:System.Object>с определенным ключом в <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Object>"
  remarks: "Если хэш-таблица была создана с помощью определенной <xref:System.Collections.IComparer>реализацию, этот метод использует этот класс сравнения; это, <xref:System.Collections.IComparer.Compare%2A>(`item`, `key`).</xref:System.Collections.IComparer.Compare%2A> </xref:System.Collections.IComparer> В противном случае он использует `item.Equals(key)`.       Этот метод является операцией o(1)."
  syntax:
    content: protected virtual bool KeyEquals (object item, object key);
    parameters:
    - id: item
      type: System.Object
      description: "<xref:System.Object>Для сравнения с `key`.</xref:System.Object>"
    - id: key
      type: System.Object
      description: "Ключ в <xref href=&quot;System.Collections.Hashtable&quot;> </xref> для сравнения с `item`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> and <code>key</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.Hashtable.KeyEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>key</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.Keys
  id: Keys
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.ICollection>содержит ключи <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "Порядок следования ключей в <xref:System.Collections.ICollection>не указан, но это отличном от порядка соответствующих значений в <xref:System.Collections.ICollection>возвращенных <xref:System.Collections.Hashtable.Values%2A>метод.</xref:System.Collections.Hashtable.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       Возвращенный <xref:System.Collections.ICollection>не является статической копией; напротив, <xref:System.Collections.ICollection>ссылается на ключи в исходной коллекции <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Таким образом изменения <xref:System.Collections.Hashtable>будут отражены в <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> по-прежнему</xref:System.Collections.Hashtable>       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Содержит ключи <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Реализует <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> интерфейса и вызывает событие десериализации при завершении десериализации."
  remarks: "Этот метод является операцией O (`n`) операции, где `n` <xref:System.Collections.Hashtable.Count%2A>.</xref:System.Collections.Hashtable.Count%2A>       Поскольку сериализация и десериализация перечислитель для <xref:System.Collections.Hashtable>может привести к элементы, которые становятся переупорядочивается, невозможно продолжать перечисление без вызова <xref:System.Collections.IEnumerator.Reset%2A>метод.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.Hashtable>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Источник события десериализации."
  overload: System.Collections.Hashtable.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Объект, связанный с текущим <xref href=&quot;System.Collections.Hashtable&quot;> </xref> является недопустимым."
  platform:
  - net462
- uid: System.Collections.Hashtable.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Удаляет элемент с указанным ключом из <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Если <xref:System.Collections.Hashtable>не содержит элемент с указанным ключом, <xref:System.Collections.Hashtable>остается неизменным.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Исключение не возникает.       Этот метод является операцией o(1)."
  example:
  - "The following example shows how to remove elements from the <xref:System.Collections.Hashtable>.  \n  \n [!code-cpp[Classic Hashtable.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.has_13_1.cpp)]\n [!code-cs[Classic Hashtable.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.has_13_1.cs)]\n [!code-vb[Classic Hashtable.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_13_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ удаляемого элемента."
  overload: System.Collections.Hashtable.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> Доступно только для чтения.       - или - <xref href=&quot;System.Collections.Hashtable&quot;> </xref> имеет фиксированный размер."
  platform:
  - net462
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  id: Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает оболочку синхронизированной (потокобезопасной) для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Метод Synchronized потокобезопасен для нескольких средств чтения и записи. Кроме того синхронизированной оболочки гарантирует, что только один модуль записи, запись одновременно.       Перечисление коллекции само по себе не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.Hashtable.SyncRoot%2A>на все время перечисления: [!code-cpp [классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/cpp/m-system.collections.has_11_1.cpp)][!code-vb[классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/visualbasic/m-system.collections.has_11_1.vb)][!code-cs[классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/csharp/m-system.collections.has_11_1.cs) ] этот метод является операцией o(1).    </xref:System.Collections.Hashtable.SyncRoot%2A>"
  example:
  - "The following example shows how to synchronize a <xref:System.Collections.Hashtable>, determine if a <xref:System.Collections.Hashtable> is synchronized, and use a synchronized <xref:System.Collections.Hashtable>.  \n  \n [!code-cs[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.has_11_2.cs)]\n [!code-cpp[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.has_11_2.cpp)]\n [!code-vb[Classic Hashtable.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.has_11_2.vb)]"
  syntax:
    content: public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);
    parameters:
    - id: table
      type: System.Collections.Hashtable
      description: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref> Для синхронизации."
    return:
      type: System.Collections.Hashtable
      description: "Объект синхронизированным (потокобезопасным) оболочку для <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>table</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Hashtable.SyncRoot
  id: SyncRoot
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  remarks: "Чтобы создать синхронизированную версию <xref:System.Collections.Hashtable>, используйте <xref:System.Collections.Hashtable.Synchronized%2A>метод.</xref:System.Collections.Hashtable.Synchronized%2A> </xref:System.Collections.Hashtable> Однако производные классы могут предоставлять собственную синхронизированную версию <xref:System.Collections.Hashtable>используя свойство SyncRoot.</xref:System.Collections.Hashtable> Синхронизированный код должен выполнять операции над элемент SyncRoot <xref:System.Collections.Hashtable>, не непосредственно на <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.Hashtable> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности, это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в <xref:System.Collections.Hashtable>объекта.</xref:System.Collections.Hashtable>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       В следующем примере кода показано, как заблокировать коллекцию с помощью SyncRoot на все время перечисления: [!code-cpp [классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/cpp/p-system.collections.has_0_1.cpp)][!code-vb[классический пример&2; Hashtable.IsSynchronized](~/add/codesnippet/visualbasic/p-system.collections.has_0_1.vb)][!code-cs[Hashtable.IsSynchronized классический пример&#2;    ](~/add/codesnippet/csharp/p-system.collections.has_0_1.cs)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref href=&quot;System.Collections.Hashtable&quot;> </xref>."
  overload: System.Collections.Hashtable.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает перечислитель, выполняющий итерацию по коллекции."
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A> В этой позиции вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, вызов <xref:System.Collections.IEnumerator.Current%2A>приводит к возникновению исключения.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель может стать недействительным и при следующем вызове <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>вызывает <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если коллекция изменяется в промежутке между <xref:System.Collections.IEnumerator.MoveNext%2A>и <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>возвращает элемент, для которого оно задано, даже если перечислитель уже недействителен.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       Перечислитель не имеет монопольного доступа к коллекции. Следовательно, перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       Этот метод является операцией o(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Может использоваться для итерации по коллекции.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Hashtable.Values
  id: Values
  parent: System.Collections.Hashtable
  langs:
  - csharp
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Возвращает <xref:System.Collections.ICollection>содержит значения <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "Порядок значений в <xref:System.Collections.ICollection>не указан, но это отличном от порядка соответствующих ключей в <xref:System.Collections.ICollection>возвращенных <xref:System.Collections.Hashtable.Keys%2A>метод.</xref:System.Collections.Hashtable.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       Возвращенный <xref:System.Collections.ICollection>не является статической копией; напротив, <xref:System.Collections.ICollection>ссылается на значения в исходном <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> Таким образом изменения <xref:System.Collections.Hashtable>будут отражены в <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> по-прежнему</xref:System.Collections.Hashtable>       Получение значения данного свойства является операцией o(1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Содержит значения <xref href=&quot;System.Collections.Hashtable&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.Collections.Hashtable.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Hashtable.#ctor
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable()
  nameWithType: Hashtable.Hashtable()
  fullName: System.Collections.Hashtable.Hashtable()
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary)
  nameWithType: Hashtable.Hashtable(IDictionary)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32)
  nameWithType: Hashtable.Hashtable(Int32)
  fullName: System.Collections.Hashtable.Hashtable(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single)
  nameWithType: Hashtable.Hashtable(IDictionary,Single)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single)
  nameWithType: Hashtable.Hashtable(Int32,Single)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single)
- uid: System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.Hashtable(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.Hashtable(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IEqualityComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IEqualityComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IEqualityComparer)
- uid: System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(IDictionary,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  nameWithType: Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
  fullName: System.Collections.Hashtable.Hashtable(Int32,Single,IHashCodeProvider,IComparer)
- uid: System.Collections.Hashtable.Add(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add(Object,Object)
  nameWithType: Hashtable.Add(Object,Object)
  fullName: System.Collections.Hashtable.Add(Object,Object)
- uid: System.Collections.Hashtable.Clear
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear()
  nameWithType: Hashtable.Clear()
  fullName: System.Collections.Hashtable.Clear()
- uid: System.Collections.Hashtable.Clone
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone()
  nameWithType: Hashtable.Clone()
  fullName: System.Collections.Hashtable.Clone()
- uid: System.Collections.Hashtable.comparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
  fullName: System.Collections.Hashtable.comparer
- uid: System.Collections.Hashtable.Contains(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains(Object)
  nameWithType: Hashtable.Contains(Object)
  fullName: System.Collections.Hashtable.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Hashtable.ContainsKey(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: Hashtable.ContainsKey(Object)
  fullName: System.Collections.Hashtable.ContainsKey(Object)
- uid: System.Collections.Hashtable.ContainsValue(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: Hashtable.ContainsValue(Object)
  fullName: System.Collections.Hashtable.ContainsValue(Object)
- uid: System.Collections.Hashtable.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: Hashtable.CopyTo(Array,Int32)
  fullName: System.Collections.Hashtable.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Hashtable.Count
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
  fullName: System.Collections.Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
  fullName: System.Collections.Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator()
  nameWithType: Hashtable.GetEnumerator()
  fullName: System.Collections.Hashtable.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Hashtable.GetHash(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash(Object)
  nameWithType: Hashtable.GetHash(Object)
  fullName: System.Collections.Hashtable.GetHash(Object)
- uid: System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Hashtable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Hashtable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Hashtable.hcp
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
  fullName: System.Collections.Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
  fullName: System.Collections.Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
  fullName: System.Collections.Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
  fullName: System.Collections.Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item(Object)
  nameWithType: Hashtable.Item(Object)
  fullName: System.Collections.Hashtable.Item(Object)
- uid: System.Collections.Hashtable.KeyEquals(System.Object,System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals(Object,Object)
  nameWithType: Hashtable.KeyEquals(Object,Object)
  fullName: System.Collections.Hashtable.KeyEquals(Object,Object)
- uid: System.Collections.Hashtable.Keys
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
  fullName: System.Collections.Hashtable.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Hashtable.OnDeserialization(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Hashtable.OnDeserialization(Object)
  fullName: System.Collections.Hashtable.OnDeserialization(Object)
- uid: System.Collections.Hashtable.Remove(System.Object)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove(Object)
  nameWithType: Hashtable.Remove(Object)
  fullName: System.Collections.Hashtable.Remove(Object)
- uid: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized(Hashtable)
  nameWithType: Hashtable.Synchronized(Hashtable)
  fullName: System.Collections.Hashtable.Synchronized(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.Hashtable.SyncRoot
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
  fullName: System.Collections.Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Hashtable.Values
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
  fullName: System.Collections.Hashtable.Values
- uid: System.Collections.Hashtable.#ctor*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable.Hashtable
- uid: System.Collections.Hashtable.Add*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Add
  nameWithType: Hashtable.Add
- uid: System.Collections.Hashtable.Clear*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clear
  nameWithType: Hashtable.Clear
- uid: System.Collections.Hashtable.Clone*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Clone
  nameWithType: Hashtable.Clone
- uid: System.Collections.Hashtable.comparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: comparer
  nameWithType: Hashtable.comparer
- uid: System.Collections.Hashtable.Contains*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Contains
  nameWithType: Hashtable.Contains
- uid: System.Collections.Hashtable.ContainsKey*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsKey
  nameWithType: Hashtable.ContainsKey
- uid: System.Collections.Hashtable.ContainsValue*
  parent: System.Collections.Hashtable
  isExternal: false
  name: ContainsValue
  nameWithType: Hashtable.ContainsValue
- uid: System.Collections.Hashtable.CopyTo*
  parent: System.Collections.Hashtable
  isExternal: false
  name: CopyTo
  nameWithType: Hashtable.CopyTo
- uid: System.Collections.Hashtable.Count*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Count
  nameWithType: Hashtable.Count
- uid: System.Collections.Hashtable.EqualityComparer*
  parent: System.Collections.Hashtable
  isExternal: false
  name: EqualityComparer
  nameWithType: Hashtable.EqualityComparer
- uid: System.Collections.Hashtable.GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetEnumerator
  nameWithType: Hashtable.GetEnumerator
- uid: System.Collections.Hashtable.GetHash*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetHash
  nameWithType: Hashtable.GetHash
- uid: System.Collections.Hashtable.GetObjectData*
  parent: System.Collections.Hashtable
  isExternal: false
  name: GetObjectData
  nameWithType: Hashtable.GetObjectData
- uid: System.Collections.Hashtable.hcp*
  parent: System.Collections.Hashtable
  isExternal: false
  name: hcp
  nameWithType: Hashtable.hcp
- uid: System.Collections.Hashtable.IsFixedSize*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsFixedSize
  nameWithType: Hashtable.IsFixedSize
- uid: System.Collections.Hashtable.IsReadOnly*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsReadOnly
  nameWithType: Hashtable.IsReadOnly
- uid: System.Collections.Hashtable.IsSynchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: IsSynchronized
  nameWithType: Hashtable.IsSynchronized
- uid: System.Collections.Hashtable.Item*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Item
  nameWithType: Hashtable.Item
- uid: System.Collections.Hashtable.KeyEquals*
  parent: System.Collections.Hashtable
  isExternal: false
  name: KeyEquals
  nameWithType: Hashtable.KeyEquals
- uid: System.Collections.Hashtable.Keys*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Keys
  nameWithType: Hashtable.Keys
- uid: System.Collections.Hashtable.OnDeserialization*
  parent: System.Collections.Hashtable
  isExternal: false
  name: OnDeserialization
  nameWithType: Hashtable.OnDeserialization
- uid: System.Collections.Hashtable.Remove*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Remove
  nameWithType: Hashtable.Remove
- uid: System.Collections.Hashtable.Synchronized*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Synchronized
  nameWithType: Hashtable.Synchronized
- uid: System.Collections.Hashtable.SyncRoot*
  parent: System.Collections.Hashtable
  isExternal: false
  name: SyncRoot
  nameWithType: Hashtable.SyncRoot
- uid: System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Hashtable
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Hashtable.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Hashtable.Values*
  parent: System.Collections.Hashtable
  isExternal: false
  name: Values
  nameWithType: Hashtable.Values
