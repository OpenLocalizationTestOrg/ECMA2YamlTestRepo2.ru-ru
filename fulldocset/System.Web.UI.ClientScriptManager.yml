### YamlMime:ManagedReference
items:
- uid: System.Web.UI.ClientScriptManager
  id: ClientScriptManager
  children:
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  - System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  - System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  - System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  - System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  langs:
  - csharp
  name: ClientScriptManager
  nameWithType: ClientScriptManager
  fullName: System.Web.UI.ClientScriptManager
  type: Class
  summary: "Определяет методы для управления клиентских скриптов в веб-приложениях."
  remarks: "Класс ClientScriptManager используется для управления клиентских скриптов и добавить их к веб-приложениям. Для получения ссылки на класс ClientScriptManager из <xref:System.Web.UI.Page.ClientScript%2A>свойство <xref:System.Web.UI.Page>объекта.</xref:System.Web.UI.Page> </xref:System.Web.UI.Page.ClientScript%2A>       Можно добавить клиентский сценарий на веб-страницу декларативно, включая описание скрипта в разметке HTML страницы. Однако существуют ситуации, когда необходимо добавить клиентский сценарий динамически. Чтобы добавить сценарий динамически, используйте <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>метод, <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>метод <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>, или <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>метод, в зависимости от того, когда и как вы хотите добавить скрипт.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> </xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Дополнительные сведения см. в разделе [как: Добавление клиентского скрипта динамически для веб-страниц ASP.NET](~/add/includes/ajax-current-ext-md.md).       Класс ClientScriptManager однозначно определяет скриптов в ключевых <xref:System.String>и <xref:System.Type>.</xref:System.Type> </xref:System.String> Сценарии с одним и тем же ключом и типом считаются дубликатами. Использование типа скрипта помогает избежать путаницы с похожими скриптами разных пользовательских элементов управления, которые могут использоваться на странице.       Класс ClientScriptManager может использоваться для обратных вызовов клиентов в ситуациях, когда желательно, чтобы запустить код сервера из клиента без выполнения обратной передачи. Это называется выполняет обратный вызов по каналу на сервер. При обратном вызове клиента функция клиентского скрипта отправляет асинхронный запрос веб-страницу ASP.NET. Веб-страница запускает измененную версию обычного жизненного цикла для обработки обратного вызова. Используйте <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод для получения ссылки на клиентская функция, которая при вызове инициализирует обратный вызов клиента для событий сервера.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Дополнительные сведения см. в разделе [реализация клиента обратные вызовы без обратной передачи](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек сценария обратные вызовы не будут работать в старых браузерах, которые не поддерживают объектной модели документа (DOM), и они требуют включения ECMAScript на стороне клиента. Для проверки, если браузер поддерживает обратные вызовы, используйте <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>свойство, которое доступно через <xref:System.Web.HttpRequest.Browser%2A>свойство ASP.NET встроенная функция <xref:System.Web.HttpContext.Request%2A>объекта.</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A> </xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>       Используйте <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>метод и <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>метод для определения события обратной передачи клиента.</xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Эти методы позволяют функций клиентского скрипта, при вызове, чтобы заставить сервер для обратной передачи страницы. Событие обратной передачи клиента отличается от обратного вызова клиента в том, что веб-страница завершает нормальный жизненный цикл для обработки события обратной передачи клиента.      Настроек [!NOTE] настроек при использовании <xref:System.Web.UI.WebControls.Button>управления и <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>свойству `false`, можно использовать <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>метода для возврата клиента обратной передачи событий для <xref:System.Web.UI.WebControls.Button>управления.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> </xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button>       <xref:System.Web.UI.WebControls.Button.OnClientClick%2A>Свойство <xref:System.Web.UI.WebControls.Button>элемента управления, <xref:System.Web.UI.WebControls.ImageButton>элемента управления, и <xref:System.Web.UI.WebControls.LinkButton>элемент управления может использоваться для запуска клиента сценарий</xref:System.Web.UI.WebControls.LinkButton> </xref:System.Web.UI.WebControls.ImageButton> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.WebControls.Button.OnClientClick%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the ClientScriptManager class. Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/t-system.web.ui.clientsc_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/t-system.web.ui.clientsc_1.aspx)]"
  syntax:
    content: public sealed class ClientScriptManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Получает ссылку на клиентская функция, которая при вызове, инициирует клиентский обратный вызов для событий сервера. Клиентская функция для перегруженного метода включает указанный элемент управления, аргумент, клиентский сценарий и контекст."
  remarks: "Метод GetCallbackEventReference выполняет обратный вызов по каналу для сервера, являющегося измененную версию обычного жизненного цикла страницы. Дополнительные сведения см. в разделе [реализация клиента обратные вызовы без обратной передачи](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек при использовании обозревателя Microsoft Internet Explorer (5.0 или более поздней версии), механизм обратного вызова сценарий реализуется с помощью Microsoft.XmlHttp COM-объекта и требуется браузер, чтобы задать выполнение элементов управления ActiveX. В других браузерах используется XMLHttpRequest, с помощью браузера локального объекта модели (DOM). Чтобы проверить, поддерживает ли браузер клиента обратные вызовы, используйте <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>свойство.</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> Чтобы проверить, поддерживает ли браузер XML по протоколу HTTP, используйте <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>свойство.</xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> Оба свойства, доступны через <xref:System.Web.HttpRequest.Browser%2A>свойство встроенная функция ASP.NET <xref:System.Web.HttpContext.Request%2A>объекта.</xref:System.Web.HttpContext.Request%2A> </xref:System.Web.HttpRequest.Browser%2A>       Перегрузка GetCallbackEventReference <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод выполняет обратный вызов синхронно с помощью XML по протоколу HTTP.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Синхронно посылая данные в сценарии обратного вызова, синхронные обратные вызовы немедленный возврат, а не блокируют браузер. В то же время, в браузере может выполняться без два синхронных обратных вызова. Если второй синхронный обратный вызов инициируется, пока один находится в состоянии ожидания, второй синхронный обратный вызов отменяет первый, и будет возвращать только второй обратного вызова.       Чтобы асинхронно отправлять данные, используйте одну из перегрузок, принимающих `useAsync` параметра, который является логическое значение, определяющее, это поведение. В асинхронном сценарии можно иметь несколько обратных вызовов, ожидающих; Однако порядок, в котором они возвращаются в соответствии с порядком, в котором они были инициированы не гарантируется.       Кроме того, эта перегрузка <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод задает функции клиента для обработки случая условие ошибки, созданные <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Чтобы указать обработчик ошибок обратного вызова клиента, используйте одну из перегрузок, принимающих `clientErrorCallback` параметра.       Метод GetCallbackEventReference принимает необязательную строку `argument` параметр и возвращает строку. Чтобы передать или получить несколько значений, объединять значения входных данных или выходной строки соответственно.      Настроек [!NOTE] настроек Избегайте использования состояния представления при реализации свойств страницы или элемента управления, которые необходимо обновлять во время операций обратного вызова скрипта. Если свойства должны существовать после запросов страницы, можно использовать состояние сеанса."
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/0153bfa5-9a40-4257-b817-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/0153bfa5-9a40-4257-b817-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Сервер <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающий обратного вызова клиента. Элемент управления должен реализовать <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейс, а также предоставляют <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Аргумент, передаваемый на сервер из клиентского скрипта <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат успешного серверного события."
    - id: context
      type: System.String
      description: "Клиентский скрипт, который вычисляется на стороне клиента до инициализации обратного вызова. Результат скрипта передается обратно в обработчик событий клиента."
    return:
      type: System.String
      description: "Имя функции на стороне клиента, вызывает функцию обратного вызова клиента."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> Указанного не реализует <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейса."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Получает ссылку на клиентская функция, которая при вызове, инициирует клиентский обратный вызов для событий сервера. Клиентская функция для перегруженного метода включает указанный элемент управления, аргумент, клиентский скрипт, контекст и логическое значение."
  remarks: "Эта перегрузка <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод требует `useAsync` параметр, который позволяет асинхронно выполнять обратный вызов клиента, задав значение `true`.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Версии перегрузки этого метода, не требующие `useAsync` установите значение параметра `false` по умолчанию.       Дополнительные сведения в этом методе см. заметки для перегрузки <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Сервер <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающий обратного вызова клиента. Элемент управления должен реализовать <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейс, а также предоставляют <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Аргумент, передаваемый на сервер из клиентского скрипта <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат успешного серверного события."
    - id: context
      type: System.String
      description: "Клиентский скрипт, который вычисляется на стороне клиента до инициализации обратного вызова. Результат скрипта передается обратно в обработчик событий клиента."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для выполнения обратного вызова асинхронно; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для синхронного выполнения обратного вызова."
    return:
      type: System.String
      description: "Имя функции на стороне клиента, вызывает функцию обратного вызова клиента."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> Указанного не реализует <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейса."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Получает ссылку на клиентская функция, которая при вызове, инициирует клиентский обратный вызов для событий сервера. Клиентская функция для перегруженного метода включает указанный целевой объект, аргумент, клиентский скрипт, контекст, обработчик ошибок и логическое значение."
  remarks: "Эта перегрузка <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>принимает `target` строковый параметр, а не <xref:System.Web.UI.Control>параметр.</xref:System.Web.UI.Control> </xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> Используйте этот перегруженный метод обратного вызова, чтобы вернуться назад, отличные от строка, содержащая <xref:System.Web.UI.Control.UniqueID%2A>элемента управления.</xref:System.Web.UI.Control.UniqueID%2A>       Кроме того, эта перегрузка <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод требует `useAsync` и `clientErrorCallback` параметр.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> `useAsync` Позволяет асинхронно выполнять обратный вызов клиента, задав значение `true`. Версии перегрузки этого метода, не требующие `useAsync` установите значение параметра `false` по умолчанию. `clientErrorCallback` Позволяет определить имя клиентская функция, которая вызывается, если обработчик сервера <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>, возвращает ошибку.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> Версии перегрузки этого метода, не требующие `clientErrorCallback` параметр значение равно null.       Дополнительные сведения в этом методе см. заметки для перегрузки <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  example:
  - "The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.  \n  \n Two callback mechanisms are shown; the difference between them is the use of the `context` parameter. A `ReceiveServerData1` client callback function is provided using the `context` parameter. In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page. A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string. If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/csharp/b09113ee-01c3-4887-82a1-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager7#1](~/add/codesnippet/visualbasic/b09113ee-01c3-4887-82a1-_1.aspx)]"
  syntax:
    content: public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: target
      type: System.String
      description: "Имя учетной записи <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающий обратного вызова клиента. Элемент управления должен реализовать <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейс, а также предоставляют <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Аргумент, передаваемый на сервер из клиентского скрипта <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат успешного серверного события."
    - id: context
      type: System.String
      description: "Клиентский скрипт, который вычисляется на стороне клиента до инициализации обратного вызова. Результат скрипта передается обратно в обработчик событий клиента."
    - id: clientErrorCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат, когда происходит ошибка в обработчике событий сервера."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>для выполнения обратного вызова асинхронно; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для синхронного выполнения обратного вызова."
    return:
      type: System.String
      description: "Имя функции на стороне клиента, вызывает функцию обратного вызова клиента."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  id: GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Получает ссылку на клиентская функция, которая при вызове, инициирует клиентский обратный вызов для событий сервера. Клиентская функция для перегруженного метода включает указанный элемент управления, аргумент, клиентский скрипт, контекст, обработчик ошибок и логическое значение."
  remarks: "Эта перегрузка <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод требует `useAsync` и `clientErrorCallback` параметр.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> `useAsync` Позволяет асинхронно выполнять обратный вызов клиента, задав значение `true`. Версии перегрузки этого метода, не требующие `useAsync` установите значение параметра `false` по умолчанию. `clientErrorCallback` Позволяет определить имя клиентская функция, которая вызывается, если обработчик сервера ( <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>метод) возвращает сообщение об ошибке.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> Версии перегрузки этого метода, не требующие `clientErrorCallback` параметр значение равно null.       Дополнительные сведения в этом методе см. заметки для перегрузки <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>метод.</xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>"
  syntax:
    content: public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Сервер <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающий обратного вызова клиента. Элемент управления должен реализовать <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейс, а также предоставляют <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: argument
      type: System.String
      description: "Аргумент, передаваемый на сервер из клиентского скрипта <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>метод.</xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent*>"
    - id: clientCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат успешного серверного события."
    - id: context
      type: System.String
      description: "Клиентский скрипт, который вычисляется на стороне клиента до инициализации обратного вызова. Результат скрипта передается обратно в обработчик событий клиента."
    - id: clientErrorCallback
      type: System.String
      description: "Имя клиентского обработчика событий, принимающий результат, когда происходит ошибка в обработчике событий сервера."
    - id: useAsync
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>для выполнения обратного вызова асинхронно; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для синхронного выполнения обратного вызова."
    return:
      type: System.String
      description: "Имя функции на стороне клиента, вызывает функцию обратного вызова клиента."
  overload: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.Control&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> Указанного не реализует <xref href=&quot;System.Web.UI.ICallbackEventHandler&quot;> </xref> интерфейса."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает ссылку, с <xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;> </xref> в начале, который может использоваться в клиентском событии для обратной передачи серверу для указанного элемента управления с указанными аргументами события."
  remarks: "С помощью <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>метод требует элемента управления, который обрабатывает обратной передачи для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейса.</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  example:
  - "The following code example demonstrates the use of the GetPostBackClientHyperlink method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/366d34c0-2826-48a7-a56d-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/366d34c0-2826-48a7-a56d-_2.aspx)]"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Серверный элемент управления, обрабатывающий обратную передачу."
    - id: argument
      type: System.String
      description: "Значение параметра, переданного в серверный элемент управления."
    return:
      type: System.String
      description: "Строка, представляющая вызов JavaScript функции обратной передачи, включающий идентификатор и событие аргументы целевого элемента управления."
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает ссылку, с <xref uid=&quot;langword_csharp_javascript:&quot; name=&quot;javascript:&quot; href=&quot;&quot;> </xref> в начале, который может использоваться в клиентском событии для обратной передачи серверу для указанного элемента управления с указанными аргументами события и логическим обозначением нужно ли регистрировать обратную передачу для проверки события."
  remarks: "С помощью <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>метод требует элемента управления, который обрабатывает обратной передачи для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейса.</xref:System.Web.UI.IPostBackEventHandler> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>"
  syntax:
    content: public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Серверный элемент управления, обрабатывающий обратную передачу."
    - id: argument
      type: System.String
      description: "Значение параметра, переданного в серверный элемент управления."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы зарегистрировать событие обратной передачи для проверки; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> не зарегистрировать событие обратной передачи для проверки."
    return:
      type: System.String
      description: "Строка, представляющая вызов JavaScript функции обратной передачи, включающий идентификатор и событие аргументы целевого элемента управления."
  overload: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает строку, которая может использоваться в клиентском событии для инициирования обратной передачи на сервер. Указанная строка ссылки определяется указанным <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> экземпляра."
  remarks: "Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>Метод может использоваться с <xref:System.Web.UI.WebControls.Button>управления <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>свойство `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> В этом сценарии <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>клиентскую обратную передачу событий для возвращения метода <xref:System.Web.UI.WebControls.Button>управления.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Объект <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> , определяющий обратной передачи."
    return:
      type: System.String
      description: "Строка, когда обрабатываются как сценарий на стороне клиента, клиент инициирующая обратную передачу."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> Параметр<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает строку, которая может использоваться в клиентском событии для инициирования обратной передачи на сервер. Указанная строка ссылки определяется указанный элемент управления, обрабатывающий обратную передачу и строковый аргумент дополнительной информацией о событии."
  remarks: "Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>Метод может использоваться с <xref:System.Web.UI.WebControls.Button>управления <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>свойство `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> В этом сценарии <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>клиентскую обратную передачу событий для возвращения метода <xref:System.Web.UI.WebControls.Button>управления.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>"
  example:
  - "The following code example demonstrates the use of the GetPostBackEventReference method. The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface. When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager8#1](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_1.aspx)]  \n  \n The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/csharp/13f44f5d-33c0-40e6-bb2f-_2.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager8#2](~/add/codesnippet/visualbasic/13f44f5d-33c0-40e6-bb2f-_2.aspx)]"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Сервер <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающую обратную передачу на сервер."
    - id: argument
      type: System.String
      description: "Строка необязательных аргументов для передачи в элемент управления, обрабатывающий обратную передачу."
    return:
      type: System.String
      description: "Строка, когда обрабатываются как сценарий на стороне клиента, инициирует обратной передачи."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает строку, которая может использоваться в клиентском событии для инициирования обратной передачи на сервер. Указанная строка ссылки определяется указанным <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> объекта. При необходимости регистрирует ссылку на событие для проверки."
  remarks: "Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>Метод может использоваться с <xref:System.Web.UI.WebControls.Button>управления <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>свойство `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> В этом сценарии <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>клиентскую обратную передачу событий для возвращения метода <xref:System.Web.UI.WebControls.Button>управления.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       Если `registerForEventValidation` — `true`, вызывается метод GetPostBackEventReference <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>метода для регистрации ссылки на событие для проверки с уникальным ИД элемента управления, представляющий клиентский элемент управления, который создает событие.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Объект <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> , определяющий обратной передачи."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для регистрации ссылки на событие для проверки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Строка, когда обрабатываются как сценарий на стороне клиента, клиент инициирующая обратную передачу."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Web.UI.PostBackOptions&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  id: GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Возвращает строку для использования в клиентском событии для инициирования обратной передачи на сервер. Указанная строка ссылки определяется указанный элемент управления, обрабатывающий обратную передачу и строковый аргумент дополнительной информацией о событии. При необходимости регистрирует ссылку на событие для проверки."
  remarks: "Для реализации <xref:System.Web.UI.IPostBackEventHandler>интерфейс для <xref:System.Web.UI.Page>, используйте директиву.</xref:System.Web.UI.Page> </xref:System.Web.UI.IPostBackEventHandler>       <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>Метод может использоваться с <xref:System.Web.UI.WebControls.Button>управления <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>свойство `false`.</xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> </xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> В этом сценарии <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>клиентскую обратную передачу событий для возвращения метода <xref:System.Web.UI.WebControls.Button>управления.</xref:System.Web.UI.WebControls.Button> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>       Если `registerForEventValidation` имеет значение true, <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>вызовы метода <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>метода для регистрации ссылки на событие для проверки с уникальным ИД элемента управления, представляющий клиентский элемент управления, который создает событие.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> </xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>"
  syntax:
    content: public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Сервер <xref href=&quot;System.Web.UI.Control&quot;> </xref> , обрабатывающую обратную передачу на сервер."
    - id: argument
      type: System.String
      description: "Строка необязательные аргументы для передачи `control`."
    - id: registerForEventValidation
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для регистрации ссылки на событие для проверки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.String
      description: "Строка, когда обрабатываются как сценарий на стороне клиента, инициирует обратной передачи."
  overload: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The specified <xref href=&quot;System.Web.UI.Control&quot;></xref> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  id: GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Получает URL-ссылки на ресурс в сборку."
  remarks: "Метод GetWebResourceUrl возвращает URL-ссылки на ресурс, внедренных в сборку. Возвращаемая ссылка не является URL-кодированием. Ресурсы можно файлов скриптов, изображения или статическим. Необходимо указать тип на основе объекта, который будет осуществлять доступ к ресурсу.       Веб-ресурс, который зарегистрирован на странице однозначно идентифицируется его имя и тип. Страница может быть зарегистрирован только один ресурс с заданным типом и пару &quot;имя&quot;. При попытке регистрации ресурса, который уже зарегистрирован создается дубликат зарегистрированного ресурса.       Метод GetWebResourceUrl используется в сочетании с <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>метод для доступа к ресурсам, внедренных в сборки.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> Дополнительные сведения об использовании ресурсов в приложениях см. в разделе [Общие сведения о ресурсах веб-страницы ASP.NET](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the GetWebResourceUrl method. The *type* parameter in this example is set to the type of class in the assembly containing the resource. The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served. Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_2_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_2_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`. The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object. If you are using [!INCLUDE[vs_current_short](~/add/includes/ajax-current-ext-md.md)], in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected. If you are compiling the library at the command line, use the  switch to embed the resource.  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```"
  syntax:
    content: public string GetWebResourceUrl (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "Тип ресурса."
    - id: resourceName
      type: System.String
      description: "Полное имя ресурса в сборке."
    return:
      type: System.String
      description: "Ссылка на URL-адрес для ресурса."
  overload: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The web resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The web resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  id: IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли блок клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанный ключ."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>метод, чтобы исключить регистрацию повторяющиеся скрипты.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Клиентский сценарий однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами.       Эта перегрузка <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>метод вызывает перегрузку, принимающую оба `key` и `type` параметр с типом набор в виде <xref:System.Web.UI.Page>объекта</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>"
  example:
  - >-
    [!code-cs[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_0_1.aspx)]
     [!code-vb[System.Web.UI.ClientScriptManager1#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_0_1.aspx)]
  syntax:
    content: public bool IsClientScriptBlockRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "Ключ блока клиентского скрипта для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если клиент блока сценария зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  id: IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли блок клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> с помощью ключа и типа."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>метод, чтобы исключить регистрацию повторяющиеся скрипты.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Клиентский сценарий однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Необходимо указать тип на основе объекта, который будет осуществлять доступ к ресурсу. Например при использовании `Page` экземпляр доступа к ресурсам, можно указать `Page` типа."
  example:
  - "The following code example demonstrates the use of the IsClientScriptBlockRegistered method. Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/b20ef5ac-aa44-4132-8ad3-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/b20ef5ac-aa44-4132-8ad3-_1.aspx)]"
  syntax:
    content: public bool IsClientScriptBlockRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "Тип блока клиентского скрипта для поиска."
    - id: key
      type: System.String
      description: "Ключ блока клиентского скрипта для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если клиент блока сценария зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип клиентского скрипта — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  id: IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрировано ли включение клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанный ключ."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>метод, чтобы исключить регистрацию повторяющиеся скрипты.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Включение клиентского скрипта однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами.       Эта перегрузка <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>метод вызывает перегрузку, принимающую оба `key` и `type` назначить параметр с типом <xref:System.Web.UI.Page>объекта.</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "Ключ клиентского скрипта включения для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если включение клиентского скрипта зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  id: IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрировано ли включение клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> с помощью ключа и типа."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>включает метод, чтобы исключить регистрацию повторяющиеся клиентского скрипта.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Включение клиентского скрипта однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Необходимо указать тип на основе объекта, который будет осуществлять доступ к ресурсу. Например, при использовании экземпляра Page для доступа к ресурсу, указывается `Page` типа."
  example:
  - "The following code example demonstrates the use of the IsClientScriptIncludeRegistered method. Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/1a97f23b-4196-4af6-89d9-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/1a97f23b-4196-4af6-89d9-_1.aspx)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public bool IsClientScriptIncludeRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "Тип клиентского скрипта включения для поиска."
    - id: key
      type: System.String
      description: "Ключ клиентского скрипта включения для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если включение клиентского скрипта зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип включения клиентского скрипта является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  id: IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли оператор OnSubmit <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанный ключ."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>метод, чтобы исключить регистрацию повторяющихся инструкций OnSubmit.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> Это особенно важно в том случае, если оператор требует большой объем серверных ресурсов.       Оператор однозначно идентифицируется ключом и типом. Операторы с тем же ключом и типом считаются дубликатами.       Эта перегрузка <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>метод вызывает перегрузку, принимающую оба `key` и `type` параметр с типом набор в виде <xref:System.Web.UI.Page>объекта</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "Ключ оператора OnSubmit, используемый для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если оператор OnSubmit зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  id: IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли оператор OnSubmit <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанные ключ и тип."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>метод, чтобы исключить регистрацию повторяющихся инструкций.</xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> Это особенно важно в том случае, если оператор требует большой объем серверных ресурсов.       Оператор однозначно идентифицируется ключом и типом. Операторы с тем же ключом и типом считаются дубликатами. Необходимо указать тип на основе объекта, который будет осуществлять доступ к ресурсу. Например при использовании `Page` экземпляр доступа к ресурсам, можно указать `Page` типа."
  example:
  - "The following code example demonstrates the use of the IsOnSubmitStatementRegistered method. A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/081fc7d2-9213-49e8-ad42-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/081fc7d2-9213-49e8-ad42-_1.aspx)]"
  syntax:
    content: public bool IsOnSubmitStatementRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "Тип оператора OnSubmit, используемый для поиска."
    - id: key
      type: System.String
      description: "Ключ оператора OnSubmit, используемый для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если оператор OnSubmit зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип оператора OnSubmit <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  id: IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли скрипт запуска с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанный ключ."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод, чтобы исключить регистрацию повторяющиеся скрипты.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Сценарий запуска однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами.       Эта перегрузка <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>метод вызывает перегрузку, которая принимает строку в обоих `key` и `type` параметр с типом набор в виде <xref:System.Web.UI.Page>объекта</xref:System.Web.UI.Page> </xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>"
  syntax:
    content: public bool IsStartupScriptRegistered (string key);
    parameters:
    - id: key
      type: System.String
      description: "Ключ запуска сценария, для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если при запуске сценария зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  id: IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Определяет, зарегистрирован ли скрипт запуска с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя указанные ключ и тип."
  remarks: "Этот метод перед вызовом метода <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод, чтобы исключить регистрацию повторяющиеся скрипты.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Это особенно важно, если сценарий требует большой объем серверных ресурсов.       Клиентский сценарий запуска однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами."
  example:
  - "The following code example demonstrates the use of the IsStartupScriptRegistered method. Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/31c56db0-942d-4a34-be1e-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/31c56db0-942d-4a34-be1e-_1.aspx)]"
  syntax:
    content: public bool IsStartupScriptRegistered (Type type, string key);
    parameters:
    - id: type
      type: System.Type
      description: "Тип скрипта запуска."
    - id: key
      type: System.String
      description: "Ключ запуска сценария, для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если при запуске сценария зарегистрирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип скрипта запуска — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  id: RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует объявление массива JavaScript с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя имя массива и значения массива."
  remarks: "The RegisterArrayDeclaration checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter. Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed. If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.  \n  \n If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\\\\") in the `arrayValue` parameter. The value of the `arrayValue` parameter should be a single element. If more than one value needs to be added to the array, make multiple calls using the RegisterArrayDeclaration method."
  example:
  - "The following code example demonstrates the use of the RegisterArrayDeclaration and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/fb15aead-cb5d-4924-8be4-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/fb15aead-cb5d-4924-8be4-_1.aspx)]"
  syntax:
    content: public void RegisterArrayDeclaration (string arrayName, string arrayValue);
    parameters:
    - id: arrayName
      type: System.String
      description: "Имя регистрируемого массива."
    - id: arrayValue
      type: System.String
      description: "Значение или значения массива для регистрации."
  overload: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>arrayName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует клиентский скрипт с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип, ключ и константу скрипта."
  remarks: "Клиентский сценарий однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один скрипт с заданным типом и пару ключей. При попытке регистрации скрипта, который уже зарегистрирован создается дубликат скрипта.       Вызывать <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>метод, чтобы определить, является ли клиентский скрипт с указанным ключом и парой тип уже зарегистрирован и избежать ненужной попытки добавления скрипта.</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>       В этой перегрузке <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>метод, убедитесь, что в сценарий обеспечивается `script` параметра упаковывается в `<script>` блока элементов.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>Метод добавляет блок скрипта в верхнюю часть отображаемой страницы.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Блоки скриптов не обязательно будут выводиться в порядке, в котором они зарегистрированы. Если важен порядок блоков сценария, используйте <xref:System.Text.StringBuilder>объекта для сбора скриптов вместе на одной строке, а затем зарегистрировать их в один блок клиентского скрипта.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/csharp/41f57bff-a479-4a3c-91bb-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager12#1](~/add/codesnippet/visualbasic/41f57bff-a479-4a3c-91bb-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "Тип регистрируемого клиентского скрипта."
    - id: key
      type: System.String
      description: "Ключ регистрируемого клиентского скрипта."
    - id: script
      type: System.String
      description: "Константа регистрируемого клиентского скрипта."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  id: RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует клиентский скрипт с <xref href=&quot;System.Web.UI.Page&quot;> </xref> используя тип, ключ, скрипт литерала и логическое значение, указывающее, следует ли добавлять теги сценариев."
  remarks: "Клиентский сценарий однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один скрипт с заданным типом и пару ключей. При попытке регистрации скрипта, который уже зарегистрирован создается дубликат скрипта.       Вызовите <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>метод для определения клиентского скрипта с помощью данной пары ключа и типа уже зарегистрирован ли.</xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> Это позволяет избежать ненужной попытки добавления скрипта.       В этой перегрузке <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>метод, можно указать, предоставлен ли скрипт в `script` параметра заключается в оболочку с `<script>` блока элементов с помощью `addScriptTags` параметр.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Установка `addScriptTags` для `true` указывает, что теги сценариев будет автоматически добавляться.       <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>Метод добавляет блок скрипта в верхнюю часть отображаемой страницы.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> Блоки скриптов не обязательно будут выводиться в порядке, в котором они зарегистрированы. Если важен порядок блоков сценария, используйте <xref:System.Text.StringBuilder>объекта для сбора скриптов вместе на одной строке, а затем зарегистрировать их в один блок клиентского скрипта.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptBlock method. Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/e4221441-a348-44c8-8a15-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/e4221441-a348-44c8-8a15-_1.aspx)]"
  syntax:
    content: public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "Тип регистрируемого клиентского скрипта."
    - id: key
      type: System.String
      description: "Ключ регистрируемого клиентского скрипта."
    - id: script
      type: System.String
      description: "Константа регистрируемого клиентского скрипта."
    - id: addScriptTags
      type: System.Boolean
      description: "Логическое значение, указывающее, следует ли добавлять теги сценариев."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип блока клиентского скрипта — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  id: RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует клиентский скрипт с <xref href=&quot;System.Web.UI.Page&quot;> </xref> с использованием ключа и URL-адрес, который включает вызванный из клиентского скрипта."
  remarks: "Включение клиентского скрипта однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один скрипт с заданным типом и пару ключей. При попытке регистрации скрипта, который уже зарегистрирован создается дубликат скрипта.       Вызовите <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>метод для определения включение клиентского скрипта с помощью данного ключа и типа пары уже зарегистрирован и избежать ненужной попытки добавления скрипта.</xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>      Настроек [!NOTE] настроек для разрешения URL-адрес клиента, используйте <xref:System.Web.UI.Control.ResolveClientUrl%2A>метод.</xref:System.Web.UI.Control.ResolveClientUrl%2A> Этот метод использует контекст URL-адрес, на котором он вызван для разрешения пути.       Эта перегрузка <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>метод вызывает перегрузку, которая принимает `key`, `URL`и `type` параметр.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>       Метод добавляет блок скрипта в верхней части отображаемой страницы."
  example:
  - For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.
  syntax:
    content: public void RegisterClientScriptInclude (string key, string url);
    parameters:
    - id: key
      type: System.String
      description: "Ключ клиентского скрипта включения для регистрации."
    - id: url
      type: System.String
      description: "Чтобы зарегистрировать включают URL-адрес клиентского скрипта."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  id: RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует включение клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип, ключ и URL-адрес."
  remarks: "Эта перегрузка <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>принимает *ключ* и *URL-адрес* параметры для определения скрипта, а также `type` включать параметр, чтобы указать идентификатор клиентского скрипта.</xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> Необходимо указать тип на основе объекта, который будет осуществлять доступ к ресурсу. Например при использовании `Page` экземпляр доступа к ресурсам, можно указать `Page` типа.      Настроек [!NOTE] настроек для разрешения URL-адрес клиента, используйте <xref:System.Web.UI.Control.ResolveClientUrl%2A>метод.</xref:System.Web.UI.Control.ResolveClientUrl%2A> Этот метод использует контекст URL-адрес, на котором он вызван для разрешения пути.       Этот метод добавляет блок скрипта в верхней части отображаемой страницы."
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptInclude method. Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates. The benefit of checking is to reduce unnecessary computation.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/csharp/cbae2904-30a8-438b-9fac-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager2#1](~/add/codesnippet/visualbasic/cbae2904-30a8-438b-9fac-_1.aspx)]  \n  \n This example requires a JavaScript file named Script_include.js with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from include script.'}  \n```"
  syntax:
    content: public void RegisterClientScriptInclude (Type type, string key, string url);
    parameters:
    - id: type
      type: System.Type
      description: "Тип клиентского скрипта включения для регистрации."
    - id: key
      type: System.String
      description: "Ключ клиентского скрипта включения для регистрации."
    - id: url
      type: System.String
      description: "Чтобы зарегистрировать включают URL-адрес клиентского скрипта."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Тип включения клиентского скрипта является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The URL is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The URL is empty."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  id: RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует ресурс клиентского скрипта с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип и имя ресурса."
  remarks: "Метод RegisterClientScriptResource используется при доступе к компиляции в ресурсы из сборок через обработчик WebResource.axd HTTP. Метод RegisterClientScriptResource регистрирует скрипт с <xref:System.Web.UI.Page>объекта и запрещает повторяющиеся сценариев.</xref:System.Web.UI.Page> Этот метод обертывает содержимое URL-адрес ресурса с `<script>` блока элементов."
  example:
  - "The following code example demonstrates the use of the RegisterClientScriptResource method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager4#1](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_1.aspx)]  \n  \n The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/visualbasic/e804ef10-67d2-47bd-8da2-_2.vb)]\n [!code-cs[System.Web.UI.ClientScriptManager4#2](~/add/codesnippet/csharp/e804ef10-67d2-47bd-8da2-_2.cs)]  \n  \n This example requires a JavaScript file named `Script_include.js`, with the following contents:  \n  \n```  \nfunction DoClick() {Form1.Message.value='Text from resource script.'}  \n```  \n  \n Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class."
  syntax:
    content: public void RegisterClientScriptResource (Type type, string resourceName);
    parameters:
    - id: type
      type: System.Type
      description: "Тип регистрируемого ресурса клиентского скрипта."
    - id: resourceName
      type: System.String
      description: "Имя регистрируемого ресурса клиентского скрипта."
  overload: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The client resource name is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The client resource name has a length of zero."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  id: RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует пару имя значение как пользовательский (expando) атрибут указанного элемента управления, заданного Идентификатором элемента управления, имя атрибута и значение атрибута."
  remarks: "Метод RegisterExpandoAttribute регистрирует пару имя значение как пользовательский (expando) атрибут указанного <xref:System.Web.UI.Control>.</xref:System.Web.UI.Control> Атрибут expando динамически задать в коде JavaScript для сохранения совместимости XHTML разметки Отрисованный элемент управления. Escape-кавычек и пользовательский (expando) атрибут значения. Если вы не хотите запретить использование кавычек и символов обратной косой черты, вызовите <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>перегрузки метода и задайте `encode` параметра `false`.</xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>       Если атрибут expando не обнаружен или элемент управления для добавления атрибута expando, клиентский скрипт по-прежнему создается, но это не повлияет на элементе управления."
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> На странице, содержащей настраиваемого атрибута."
    - id: attributeName
      type: System.String
      description: "Имя регистрируемого пользовательского атрибута."
    - id: attributeValue
      type: System.String
      description: "Значение настраиваемого атрибута."
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  id: RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует пару имя значение как пользовательский (expando) атрибут указанного элемента управления, заданный идентификатор элемента управления, имя атрибута, значение атрибута и логическое значение, указывающее, следует ли шифровать значение атрибута."
  remarks: "Метод RegisterExpandoAttribute регистрирует пару имя значение как пользовательский (expando) атрибут указанного <xref:System.Web.UI.Control>.</xref:System.Web.UI.Control> Атрибут expando динамически задать в коде JavaScript для сохранения совместимости XHTML разметки Отрисованный элемент управления. Задать `encode` параметр `true` для экранирования кавычек и значение атрибута expando.       Если атрибут expando не обнаружен или элемент управления для добавления атрибута expando, клиентский скрипт по-прежнему создается, но это не повлияет на элементе управления."
  example:
  - "The following code example demonstrates how to use the RegisterExpandoAttribute method of the <xref:System.Web.UI.ClientScriptManager> class. The client script in the rendered page sets the `title` attribute of a `<span>` element.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/visualbasic/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager6#1](~/add/codesnippet/csharp/fbe2457b-d4ba-44a2-ac6e-_1.aspx)]"
  syntax:
    content: public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);
    parameters:
    - id: controlId
      type: System.String
      description: "<xref href=&quot;System.Web.UI.Control&quot;> </xref> На странице, содержащей настраиваемого атрибута."
    - id: attributeName
      type: System.String
      description: "Имя регистрируемого пользовательского атрибута."
    - id: attributeValue
      type: System.String
      description: "Значение настраиваемого атрибута."
    - id: encode
      type: System.Boolean
      description: "Логическое значение, указывающее, следует ли для кодирования регистрируемого пользовательского атрибута."
  overload: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  id: RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует ссылку на событие для проверки уникальные управляющие идентификатора, представляющего клиентский элемент управления, вызывающий событие."
  remarks: "Дополнительные сведения и примеры см. в разделе <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>метод.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  example:
  - "The following example shows how to use the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/csharp/m-system.web.ui.clientsc_1_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager9#2](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_1_1.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Уникальный идентификатор, представляющий клиентский элемент управления, вызывающий событие."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  id: RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует ссылку на событие для проверки с <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref>."
  remarks: "Дополнительные сведения и примеры см. в разделе <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>метод.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>"
  syntax:
    content: public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);
    parameters:
    - id: options
      type: System.Web.UI.PostBackOptions
      description: "Объект <xref href=&quot;System.Web.UI.PostBackOptions&quot;> </xref> объект, который определяет способ клиента JavaScript для инициации обратной передачи."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  id: RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует ссылку на событие для проверки управления уникальный идентификатор аргументов событий и представляющий клиентский элемент управления, вызывающий событие."
  remarks: ''
  example:
  - "The following code example demonstrates using the RegisterForEventValidation method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_1.aspx)]  \n  \n The following code example demonstrates using the RegisterForEventValidation method to register a callback for validation.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/visualbasic/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager10#1](~/add/codesnippet/csharp/b1669fea-2f0d-4c7f-a7ff-_2.aspx)]"
  syntax:
    content: public void RegisterForEventValidation (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Уникальный идентификатор, представляющий клиентский элемент управления, вызывающий событие."
    - id: argument
      type: System.String
      description: "Аргументы события, переданные с событием клиента."
  overload: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается перед вызовом метода <xref:System.Web.UI.Page.Render*>метод.</xref:System.Web.UI.Page.Render*>"
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  id: RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует скрытое значение с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта."
  remarks: "Метод RegisterHiddenField создает скрытый `<input>` элемент на этой странице HTML."
  example:
  - "The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and RegisterHiddenField methods. The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/csharp/0defa6d5-d8c8-43f1-af03-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager5#1](~/add/codesnippet/visualbasic/0defa6d5-d8c8-43f1-af03-_1.aspx)]"
  syntax:
    content: public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);
    parameters:
    - id: hiddenFieldName
      type: System.String
      description: "Имя регистрируемого скрытого поля."
    - id: hiddenFieldInitialValue
      type: System.String
      description: "Начальное значение регистрируемого поля."
  overload: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hiddenFieldName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  id: RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует оператор OnSubmit с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип, ключ и константу скрипта. Выполняет инструкцию, когда <xref href=&quot;System.Web.UI.HtmlControls.HtmlForm&quot;> </xref> отправки."
  remarks: "Оператор OnSubmit однозначно идентифицируется ключом и типом. Операторы с тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один оператор с заданным типом и пару ключей. При попытке регистрации инструкцию, которая уже зарегистрирована не создает дубликат оператора.       Вызовите <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>метод, чтобы определить, является ли оператор OnSubmit уже зарегистрирован с данной пары ключа и типа и избежать ненужной попытки добавления скрипта.</xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>       `script` Параметр метода RegisterOnSubmitStatement может содержать несколько команд скриптов, при условии, что они правильно разделенные точкой с запятой (;).       RegisterOnSubmitStatement добавляет скрипт, который выполняется перед отправкой страницы и дает возможность отменить отправку.       Дополнительные сведения о HTML-форм и `OnSubmit` см. в разделе [веб-сайте консорциума World Wide Web (W3C)](http://go.microsoft.com/fwlink/?linkid=37125)."
  example:
  - "The following code example demonstrates the use of the RegisterOnSubmitStatement method.  \n  \n [!code-vb[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/visualbasic/597b1063-1251-4d00-82f9-_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager3#1](~/add/codesnippet/csharp/597b1063-1251-4d00-82f9-_1.aspx)]"
  syntax:
    content: public void RegisterOnSubmitStatement (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "Тип оператора OnSubmit."
    - id: key
      type: System.String
      description: "Ключ оператора OnSubmit."
    - id: script
      type: System.String
      description: "Константа скрипта регистрируемого оператора OnSubmit."
  overload: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  id: RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует клиентский скрипт с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип, ключ и константу скрипта."
  remarks: "Клиентский сценарий однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один скрипт с заданным типом и пару ключей. При попытке регистрации скрипта, который уже зарегистрирован создается дубликат скрипта.       Вызывать <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>метод, чтобы определить, является ли скрипт запуска с указанным ключом и парой тип уже зарегистрирован и избежать ненужной попытки добавления скрипта.</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       В этой перегрузке <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод, убедитесь, что в сценарий обеспечивается `script` параметра заключается в оболочку с `<script>` блока элементов.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>       Блок сценария, добавленные <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод выполняется, когда страница уже загружена, но до передачи страницы <xref:System.Web.UI.Control.OnLoad%2A>события.</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Блоки скриптов не обязательно будут выводиться в порядке, в котором они зарегистрированы. Если важен порядок блоков сценария, используйте <xref:System.Text.StringBuilder>объекта для сбора скриптов вместе на одной строке, а затем зарегистрировать их в один блок клиентского скрипта.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the beginning and closing script tags are included within the `script` parameter. To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/csharp/77e56a73-ddd0-4c6d-99c5-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager11#1](~/add/codesnippet/visualbasic/77e56a73-ddd0-4c6d-99c5-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script);
    parameters:
    - id: type
      type: System.Type
      description: "Тип регистрируемого сценария запуска."
    - id: key
      type: System.String
      description: "Ключ для регистрации скрипта запуска."
    - id: script
      type: System.String
      description: "Константа регистрируемого скрипта запуска."
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  id: RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Регистрирует клиентский скрипт с <xref href=&quot;System.Web.UI.Page&quot;> </xref> объекта, используя тип, ключ, константу скрипта и логическое значение, указывающее, следует ли добавлять теги сценариев."
  remarks: "Сценарий запуска однозначно идентифицируется ключом и типом. Сценарии с одним и тем же ключом и типом считаются дубликатами. Страница может быть зарегистрирован только один скрипт с заданным типом и пару ключей. При попытке регистрации скрипта, который уже зарегистрирован создается дубликат скрипта.       Вызывать <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>метод, чтобы определить, является ли скрипт запуска с указанным ключом и парой тип уже зарегистрирован и избежать ненужной попытки добавления скрипта.</xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>       В этой перегрузке <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод, можно указать, предоставлен ли скрипт в `script` параметра заключается в оболочку с `<script>` блока элементов с помощью `addScriptTags` параметр.</xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Установка `addScriptTags` для `true` указывает, что теги сценариев будет автоматически добавляться.       Блок сценария, добавленные <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>метод выполняется, когда страница уже загружена, но до передачи страницы <xref:System.Web.UI.Control.OnLoad%2A>события.</xref:System.Web.UI.Control.OnLoad%2A> </xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> Блоки скриптов не обязательно будут выводиться в порядке, в котором они зарегистрированы. Если важен порядок блоков сценария, используйте <xref:System.Text.StringBuilder>объекта для сбора скриптов вместе на одной строке, а затем зарегистрировать их в один блок клиентского скрипта.</xref:System.Text.StringBuilder>"
  example:
  - "The following code example demonstrates the use of the RegisterStartupScript method. Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.  \n  \n [!code-cs[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/csharp/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]\n [!code-vb[System.Web.UI.ClientScriptManager1#1](~/add/codesnippet/visualbasic/8a83f4c8-e8ef-4a4a-b8c6-_1.aspx)]"
  syntax:
    content: public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);
    parameters:
    - id: type
      type: System.Type
      description: "Тип регистрируемого сценария запуска."
    - id: key
      type: System.String
      description: "Ключ для регистрации скрипта запуска."
    - id: script
      type: System.String
      description: "Константа регистрируемого скрипта запуска."
    - id: addScriptTags
      type: System.Boolean
      description: "Логическое значение, указывающее, следует ли добавлять теги сценариев."
  overload: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  id: ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Проверяет событие клиента, который был зарегистрирован для проверки с помощью события <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>метод.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  syntax:
    content: public void ValidateEvent (string uniqueId);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Уникальный идентификатор, представляющий клиентский элемент управления, вызывающий событие."
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  id: ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  langs:
  - csharp
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI
  summary: "Проверяет событие клиента, который был зарегистрирован для проверки с помощью события <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>метод.</xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation*>"
  remarks: ''
  example:
  - "The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the ValidateEvent method to register a callback for validation and to validate that the callback originated from the page. To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role  \n  \n [!code-vb[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/visualbasic/m-system.web.ui.clientsc_3_1.aspx)]\n [!code-cs[System.Web.UI.ClientScriptManager9#1](~/add/codesnippet/csharp/m-system.web.ui.clientsc_3_1.aspx)]"
  syntax:
    content: public void ValidateEvent (string uniqueId, string argument);
    parameters:
    - id: uniqueId
      type: System.String
      description: "Уникальный идентификатор, представляющий клиентский элемент управления, вызывающий событие."
    - id: argument
      type: System.String
      description: "Аргументы события, переданные с событием клиента."
  overload: System.Web.UI.ClientScriptManager.ValidateEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>uniqueId</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустая строка (»»)."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(String,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(String,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference(Control,String,String,String,String,Boolean)
  nameWithType: ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetCallbackEventReference(Control,String,String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions)
- uid: System.Web.UI.PostBackOptions
  parent: System.Web.UI
  isExternal: false
  name: PostBackOptions
  nameWithType: PostBackOptions
  fullName: System.Web.UI.PostBackOptions
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(PostBackOptions,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(PostBackOptions,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference(Control,String,Boolean)
  nameWithType: ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.GetPostBackEventReference(Control,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl(Type,String)
  nameWithType: ClientScriptManager.GetWebResourceUrl(Type,String)
  fullName: System.Web.UI.ClientScriptManager.GetWebResourceUrl(Type,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered(Type,String)
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered(Type,String)
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(String)
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered(Type,String)
  nameWithType: ClientScriptManager.IsStartupScriptRegistered(Type,String)
  fullName: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration(String,String)
  nameWithType: ClientScriptManager.RegisterArrayDeclaration(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude(Type,String,String)
  nameWithType: ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource(Type,String)
  nameWithType: ClientScriptManager.RegisterClientScriptResource(Type,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterClientScriptResource(Type,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute(String,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(String,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(PostBackOptions)
  nameWithType: ClientScriptManager.RegisterForEventValidation(PostBackOptions)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(PostBackOptions)
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation(String,String)
  nameWithType: ClientScriptManager.RegisterForEventValidation(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterForEventValidation(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField(String,String)
  nameWithType: ClientScriptManager.RegisterHiddenField(String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterHiddenField(String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement(Type,String,String)
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String)
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript(Type,String,String,Boolean)
  nameWithType: ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
  fullName: System.Web.UI.ClientScriptManager.RegisterStartupScript(Type,String,String,Boolean)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String)
  nameWithType: ClientScriptManager.ValidateEvent(String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String)
- uid: System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent(String,String)
  nameWithType: ClientScriptManager.ValidateEvent(String,String)
  fullName: System.Web.UI.ClientScriptManager.ValidateEvent(String,String)
- uid: System.Web.UI.ClientScriptManager.GetCallbackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetCallbackEventReference
  nameWithType: ClientScriptManager.GetCallbackEventReference
- uid: System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackClientHyperlink
  nameWithType: ClientScriptManager.GetPostBackClientHyperlink
- uid: System.Web.UI.ClientScriptManager.GetPostBackEventReference*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetPostBackEventReference
  nameWithType: ClientScriptManager.GetPostBackEventReference
- uid: System.Web.UI.ClientScriptManager.GetWebResourceUrl*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: GetWebResourceUrl
  nameWithType: ClientScriptManager.GetWebResourceUrl
- uid: System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptBlockRegistered
  nameWithType: ClientScriptManager.IsClientScriptBlockRegistered
- uid: System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsClientScriptIncludeRegistered
  nameWithType: ClientScriptManager.IsClientScriptIncludeRegistered
- uid: System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsOnSubmitStatementRegistered
  nameWithType: ClientScriptManager.IsOnSubmitStatementRegistered
- uid: System.Web.UI.ClientScriptManager.IsStartupScriptRegistered*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: IsStartupScriptRegistered
  nameWithType: ClientScriptManager.IsStartupScriptRegistered
- uid: System.Web.UI.ClientScriptManager.RegisterArrayDeclaration*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterArrayDeclaration
  nameWithType: ClientScriptManager.RegisterArrayDeclaration
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptBlock*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptBlock
  nameWithType: ClientScriptManager.RegisterClientScriptBlock
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptInclude*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptInclude
  nameWithType: ClientScriptManager.RegisterClientScriptInclude
- uid: System.Web.UI.ClientScriptManager.RegisterClientScriptResource*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterClientScriptResource
  nameWithType: ClientScriptManager.RegisterClientScriptResource
- uid: System.Web.UI.ClientScriptManager.RegisterExpandoAttribute*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterExpandoAttribute
  nameWithType: ClientScriptManager.RegisterExpandoAttribute
- uid: System.Web.UI.ClientScriptManager.RegisterForEventValidation*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterForEventValidation
  nameWithType: ClientScriptManager.RegisterForEventValidation
- uid: System.Web.UI.ClientScriptManager.RegisterHiddenField*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterHiddenField
  nameWithType: ClientScriptManager.RegisterHiddenField
- uid: System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterOnSubmitStatement
  nameWithType: ClientScriptManager.RegisterOnSubmitStatement
- uid: System.Web.UI.ClientScriptManager.RegisterStartupScript*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: RegisterStartupScript
  nameWithType: ClientScriptManager.RegisterStartupScript
- uid: System.Web.UI.ClientScriptManager.ValidateEvent*
  parent: System.Web.UI.ClientScriptManager
  isExternal: false
  name: ValidateEvent
  nameWithType: ClientScriptManager.ValidateEvent
