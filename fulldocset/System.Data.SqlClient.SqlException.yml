### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlException
  id: SqlException
  children:
  - System.Data.SqlClient.SqlException.Class
  - System.Data.SqlClient.SqlException.ClientConnectionId
  - System.Data.SqlClient.SqlException.Errors
  - System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.SqlClient.SqlException.LineNumber
  - System.Data.SqlClient.SqlException.Number
  - System.Data.SqlClient.SqlException.Procedure
  - System.Data.SqlClient.SqlException.Server
  - System.Data.SqlClient.SqlException.Source
  - System.Data.SqlClient.SqlException.State
  - System.Data.SqlClient.SqlException.ToString
  langs:
  - csharp
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
  type: Class
  summary: "Исключение, возникающее при возврате SQL Server предупреждения или ошибки. Этот класс не наследуется."
  remarks: "Этот класс создается каждый раз, когда поставщик данных .NET Framework для SQL Server обнаруживает ошибку, полученной от сервера. (Ошибки на стороне клиента возникают как стандартные исключения среды CLR). SqlException всегда содержит по крайней мере один экземпляр объекта <xref:System.Data.SqlClient.SqlError>.</xref:System.Data.SqlClient.SqlError>       Сообщения с уровнем серьезности уровня 10 или менее являются информационными и обозначают неполадки, вызванные ошибками во введенных пользователем данных. Уровни важности с 11 по 16 создаются пользователем и могут исправляться пользователем. Уровни важности с 17 по 25 указывают на ошибки программного обеспечения или оборудования. При уровне 17, 18 и 19 ошибка, можно продолжать работу, хотя выполнение отдельных инструкций может невозможно.       <xref:System.Data.SqlClient.SqlConnection>Остается открытым, если уровень важности не превышает 19.</xref:System.Data.SqlClient.SqlConnection> Когда уровень важности превышает 20, сервер обычно закрывает <xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> Тем не менее пользователь может опять открыть подключение и продолжить работу. В обоих случаях выполняющим команду методом создается SqlException.       Дополнительные сведения о посылаемых SQL Server предупреждениях и информационных сообщениях см. раздел &quot;Устранение неполадок&quot; электронной документации по SQL Server. Класс SqlException сопоставляет серьезность SQL Server.       Ниже приведен Общие сведения об обработке исключений. Код должен перехватывать исключения, чтобы запретить аварийное завершение работы приложения и для отображения сообщения об ошибках для пользователя.  Транзакции базы данных можно использовать для обеспечения согласованности независимо от того, что происходит в клиентском приложении (включая выход из строя) данных. Функции, например System.Transaction.TransactionScope или метод BeginTransaction (в System.Data.OleDb.OleDbConnection System.Data.ODBC.ODBCConnection и System.Data.SqlClient.SqlConnection) убедитесь, согласованных данных независимо от исключений, вызываемых поставщиком. Транзакции может завершиться ошибкой, так перехватывать ошибки и повторите транзакцию.       Обратите внимание, что начиная с .NET Framework 4.5, SqlException может возвращать внутреннее <xref:System.ComponentModel.Win32Exception>.</xref:System.ComponentModel.Win32Exception>       Класс исключений платформы .net Framework поставщик данных сообщает об ошибках поставщика. Например System.Data.Odbc имеет OdbcException и System.Data.OleDb имеет OleDbException System.Data.SqlClient имеет SqlException. Уровень наиболее подробные сведения об ошибках перехватывать эти исключения и использовать члены эти классы исключений для получения сведений об ошибке.       Помимо ошибок поставщика типы поставщика данных .NET Framework может вызывать исключения .NET Framework, например System.OutOfMemoryException и System.Threading.ThreadAbortException. Восстановление из этих исключений может быть невозможным.       Неверный ввод может привести к тип поставщика данных .NET Framework для вызова исключения, например System.ArgumentException или System.IndexOutOfRangeException.  Вызов метода в неверное время может вызвать System.InvalidOperationException.       Таким образом, как правило, создавать обработчик исключений, который перехватывает любые поставщика определенных исключений, а также исключения из общеязыковая среда выполнения.  Многоуровневая их следующим образом: ```   Try {      // code here   }   catch (SqlException odbcEx) {      // Handle more specific SqlException exception here.   }   catch (Exception ex) {      // Handle generic ones here.   }      ``` или: ```   Try {      // code here   }   catch (Exception ex) {      if (ex is SqlException) {         // Handle more specific SqlException exception here.      }      Else {         // Handle generic ones here.      }   }      ``` также возможно, что сбой в потоке пула потоков без пользовательского кода в стеке вызова метода поставщика данных .NET Framework. В этом случае и при использовании асинхронных вызовах методов, необходимо зарегистрировать <xref:System.AppDomain.UnhandledException>событий для обработки этих исключений и избежать сбоя приложения.</xref:System.AppDomain.UnhandledException>"
  example:
  - "The following example generates a SqlException and then displays the exception.  \n  \n [!code-cs[Classic WebData SqlException Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlException Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: 'public sealed class SqlException : System.Data.Common.DbException'
  inheritance:
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  - System.Data.Common.DbException
  implements: []
  inheritedMembers:
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Class
  id: Class
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает степень серьезности ошибки, возвращенной из поставщика данных .NET Framework для SQL Server."
  remarks: "Сообщения с уровнем серьезности уровня 10 или менее являются информационными и обозначают неполадки, вызванные ошибками во введенных пользователем данных. Уровни важности с 11 по 16 создаются пользователем и могут исправляться пользователем. Уровни важности с 17 по 25 указывают на ошибки программного обеспечения или оборудования. При уровне 17, 18 и 19 ошибка, можно продолжать работу, хотя выполнение отдельных инструкций может невозможно.       <xref:System.Data.SqlClient.SqlConnection>Остается открытым, если уровень важности не превышает 19.</xref:System.Data.SqlClient.SqlConnection> Когда уровень важности превышает 20, сервер обычно закрывает <xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> Тем не менее пользователь может опять открыть подключение и продолжить работу. В обоих случаях <xref:System.Data.SqlClient.SqlException>выполняющим команду методом создается.</xref:System.Data.SqlClient.SqlException>       Дополнительные сведения о посылаемых SQL Server предупреждениях и информационных сообщениях см. раздел &quot;Устранение неполадок&quot; в документации по SQL Server.       Это является оболочкой для <xref:System.Data.SqlClient.SqlError.Class%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Class%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._21_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._21_1.vb)]"
  syntax:
    content: public byte Class { get; }
    return:
      type: System.Byte
      description: "Значение от 1 до 25, указывающее уровень серьезности ошибки."
  overload: System.Data.SqlClient.SqlException.Class*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Представляет идентификатор подключения клиента. Дополнительные сведения см. в разделе [данные трассировки в ADO.NET](~/add/includes/ajax-current-ext-md.md)."
  remarks: "Пример кода см. в разделе <xref:System.Data.SqlClient.SqlException.ToString%2A>.</xref:System.Data.SqlClient.SqlException.ToString%2A>"
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "Возвращает идентификатор соединения клиента."
  overload: System.Data.SqlClient.SqlException.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Errors
  id: Errors
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает коллекцию из одного или нескольких <xref href=&quot;System.Data.SqlClient.SqlError&quot;> </xref> объектов, предоставляющих подробные сведения об исключениях, создаваемых поставщиком данных .NET Framework для SQL Server."
  remarks: "<xref:System.Data.SqlClient.SqlErrorCollection>Класс всегда содержит по крайней мере один экземпляр <xref:System.Data.SqlClient.SqlError>класса.</xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlErrorCollection>       Это является оболочкой для <xref:System.Data.SqlClient.SqlErrorCollection>.</xref:System.Data.SqlClient.SqlErrorCollection> Дополнительные сведения об ошибках ядра SQL Server см. в разделе электронной документации по SQL Server."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-vb[Classic WebData SqlError Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._59_1.vb)]\n [!code-cs[Classic WebData SqlError Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._59_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlErrorCollection Errors { get; }
    return:
      type: System.Data.SqlClient.SqlErrorCollection
      description: "Собранные экземпляры <xref href=&quot;System.Data.SqlClient.SqlError&quot;> </xref> класса."
  overload: System.Data.SqlClient.SqlException.Errors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Наборы <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> сведениями об исключении."
  remarks: '`GetObjectData`Задает `SerializationInfo` с все данные объекта исключения, предназначенные для сериализации. В процессе десериализации исключение воссоздается из `SerializationInfo` переданного в потоке.'
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: si
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> , Содержащий сериализованные данные объекта о вызываемом исключении."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>, Содержащий контекстные сведения об источнике или назначении.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.SqlClient.SqlException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> si </code> Параметра является пустой ссылкой (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.LineNumber
  id: LineNumber
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает номер строки в пакете команд Transact-SQL или хранимой процедуры, которая сформировала ошибку."
  remarks: "Нумерация строк начинается с 1; Если возвращается значение 0, номер строки не применим.       Это является оболочкой для <xref:System.Data.SqlClient.SqlError.LineNumber%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.LineNumber%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public int LineNumber { get; }
    return:
      type: System.Int32
      description: "Номер строки в пакете команд Transact-SQL или хранимой процедуры, которая сформировала ошибку."
  overload: System.Data.SqlClient.SqlException.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Number
  id: Number
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает число, определяющее тип ошибки."
  remarks: "Это является оболочкой для <xref:System.Data.SqlClient.SqlError.Number%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Number%2A> Дополнительные сведения об ошибках ядра SQL Server см. в разделе электронной документации по SQL Server."
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._13_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._13_1.vb)]"
  syntax:
    content: public int Number { get; }
    return:
      type: System.Int32
      description: "Число, определяющее тип ошибки."
  overload: System.Data.SqlClient.SqlException.Number*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Procedure
  id: Procedure
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает имя хранимой процедуры или удаленного вызова процедур (RPC), выдавшего ошибку."
  remarks: "Это является оболочкой для <xref:System.Data.SqlClient.SqlError.Procedure%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Procedure%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._9_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: public string Procedure { get; }
    return:
      type: System.String
      description: "Имя хранимой процедуры или RPC."
  overload: System.Data.SqlClient.SqlException.Procedure*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Server
  id: Server
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает имя компьютера, на котором запущен экземпляр SQL Server, вызвавшего ошибку."
  remarks: "Это является оболочкой для <xref:System.Data.SqlClient.SqlError.Server%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Server%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public string Server { get; }
    return:
      type: System.String
      description: "Имя компьютера, на котором запущен экземпляр SQL Server."
  overload: System.Data.SqlClient.SqlException.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Source
  id: Source
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает имя вызвавшего ошибку поставщика."
  remarks: "Это является оболочкой для <xref:System.Data.SqlClient.SqlError.Source%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Source%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._20_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._20_1.vb)]"
  syntax:
    content: public override string Source { get; }
    return:
      type: System.String
      description: "Имя вызвавшего ошибку поставщика."
  overload: System.Data.SqlClient.SqlException.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.State
  id: State
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает числовой код ошибки от SQL Server, который представляет ошибку, предупреждение или сообщение «данные не обнаружены». Дополнительные сведения о расшифровке этих значений см. в разделе электронной документации по SQL Server."
  remarks: "Это является оболочкой для <xref:System.Data.SqlClient.SqlError.State%2A>Свойства первого <xref:System.Data.SqlClient.SqlError>в <xref:System.Data.SqlClient.SqlException.Errors%2A>свойство.</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.State%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._61_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._61_1.vb)]"
  syntax:
    content: public byte State { get; }
    return:
      type: System.Byte
      description: "Число, представляющее код ошибки."
  overload: System.Data.SqlClient.SqlException.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ToString
  id: ToString
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает строку, представляющую текущий <xref href=&quot;System.Data.SqlClient.SqlException&quot;> </xref> объекта и включает идентификатор соединения клиента (Дополнительные сведения см. в разделе <xref:System.Data.SqlClient.SqlException.ClientConnectionId*>).</xref:System.Data.SqlClient.SqlException.ClientConnectionId*>"
  remarks: ''
  example:
  - "The following C# example shows how a connection attempt to a valid server but non-existent database causes a <xref:System.Data.SqlClient.SqlException>, which includes the client connection ID:  \n  \n```  \nusing System.Data.SqlClient;  \nusing System;  \n  \npublic class A {  \n   public static void Main() {  \n      SqlConnection connection = new SqlConnection();  \n      connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\";  \n      try {  \n         connection.Open();  \n      }  \n      catch (SqlException p) {  \n         Console.WriteLine(\"{0}\", p.ClientConnectionId);  \n         Console.WriteLine(\"{0}\", p.ToString());  \n      }  \n      connection.Close();  \n   }  \n}  \n```  \n  \n The following Visual Basic sample is functionally equivalent to the previous (C#) sample:  \n  \n```  \nImports System.Data.SqlClient  \nImports System  \n  \nModule Module1  \n  \n    Sub Main()  \n        Dim connection As New SqlConnection()  \n        connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\"  \n        Try  \n            connection.Open()  \n        Catch p As SqlException  \n            Console.WriteLine(\"{0}\", p.ClientConnectionId)  \n            Console.WriteLine(\"{0}\", p.ToString())  \n        End Try  \n        connection.Close()  \n    End Sub  \n  \nEnd Module  \n```"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Строка, представляющая текущий <xref href=&quot;System.Data.SqlClient.SqlException&quot;> </xref> объекта.<xref:System.String>.</xref:System.String>"
  overload: System.Data.SqlClient.SqlException.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbException
  isExternal: false
  name: System.Data.Common.DbException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.SqlClient.SqlException.Class
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlException.Errors
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
- uid: System.Data.SqlClient.SqlErrorCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlErrorCollection
  nameWithType: SqlErrorCollection
  fullName: System.Data.SqlClient.SqlErrorCollection
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.SqlClient.SqlException.LineNumber
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlException.Number
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlException.Server
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
- uid: System.Data.SqlClient.SqlException.State
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
- uid: System.Data.SqlClient.SqlException.Class*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
- uid: System.Data.SqlClient.SqlException.ClientConnectionId*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
- uid: System.Data.SqlClient.SqlException.Errors*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
- uid: System.Data.SqlClient.SqlException.GetObjectData*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData
  nameWithType: SqlException.GetObjectData
- uid: System.Data.SqlClient.SqlException.LineNumber*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
- uid: System.Data.SqlClient.SqlException.Number*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
- uid: System.Data.SqlClient.SqlException.Server*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
- uid: System.Data.SqlClient.SqlException.State*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString
  nameWithType: SqlException.ToString
