### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  summary: "Представляет коллекцию, которая может содержать несколько разных типов разрешений."
  remarks: "PermissionSet можно использовать для выполнения операций с несколькими различными разрешениями в группу."
  example:
  - "The following code example demonstrates the use of the PermissionSet class and members.  \n  \n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.PermissionSet&quot;> </xref> класса с заданным <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  remarks: "`Unrestricted` Состояние позволяет использовать все разрешения, которые реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>интерфейс, пока `None` позволяет никаких разрешений.</xref:System.Security.Permissions.IUnrestrictedPermission>       Используйте <xref:System.Security.PermissionSet.AddPermission%2A>с пустым <xref:System.Security.PermissionSet>для определения набора более детально.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet.AddPermission%2A>"
  example:
  - "The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Одно из значений перечисления, указывающее набор разрешений доступа к ресурсам."
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> Параметр не является допустимым <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.PermissionSet&quot;> </xref> класса с начальными значениями из <code> permSet </code> параметра."
  remarks: "<xref:System.Security.PermissionSet>Содержит копии разрешений, содержащихся в указанной <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> новый      Настроек [!NOTE] настроек это эквивалентно <xref:System.Security.PermissionSet.Copy%2A>при `permSet` не `null`.</xref:System.Security.PermissionSet.Copy%2A>"
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: "Набор, из которого берется значение нового <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> создать пустой <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Добавляет указанное разрешение в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Если разрешение того же типа, что добавлено разрешение уже существует в <xref:System.Security.PermissionSet>, новое разрешение представляет собой объединение существующего объекта разрешения и указанного разрешения объекта.</xref:System.Security.PermissionSet> Например, если разрешение, которое реализует <xref:System.Security.Permissions.IUnrestrictedPermission>добавляется <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, является результатом объединения исходный `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "Разрешение на добавление."
    return:
      type: System.Security.IPermission
      description: "Объединение добавленного разрешения и любого разрешения того же типа, который уже существует в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Добавляет указанное разрешение в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Метод AddPermissionImpl — это реализация для <xref:System.Security.PermissionSet.AddPermission%2A>метод.</xref:System.Security.PermissionSet.AddPermission%2A>       Если разрешение того же типа, что добавлено разрешение уже существует в <xref:System.Security.PermissionSet>, новое разрешение представляет собой объединение существующего объекта разрешения и указанного разрешения объекта.</xref:System.Security.PermissionSet> Например, если разрешение, которое реализует <xref:System.Security.Permissions.IUnrestrictedPermission>добавляется <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>, является результатом объединения исходный `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "Разрешение на добавление."
    return:
      type: System.Security.IPermission
      description: "Объединение добавленного разрешения и любого разрешения того же типа, который уже существует в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если <code> perm </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Объявляет, что вызывающий код можно получить доступ к ресурсу, защищенному требованием разрешения, через код, вызывающий этот метод, даже если вызывающим объектам выше в стеке вызовов не предоставлено разрешение на доступ к ресурсу. С помощью утверждения можно создать уязвимости системы безопасности."
  remarks: "Это единственный способ утверждать несколько разрешений в то же время, в течение периода, так как может быть активным только одно утверждение. Assert, действует только для разрешения. Вызовите <xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>или <xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName>метода для отмены активных Assert.</xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> </xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>      Настроек [!CAUTION] настроек, так как вызов метода Assert удаляет требование, что весь код в цепочке вызовов должны предоставляться разрешения на доступ к указанному ресурсу, может привести к возникновению уязвимости системы безопасности неправильное или неверно. Таким образом он должен использоваться с большой осторожностью."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref> Утвержденный экземпляр не предоставлен утверждающему коду.       - или - уже существует активный Assert для текущего кадра."
  platform:
  - net462
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Security.PermissionSet&quot;> </xref> содержит разрешения, которые не являются производными от <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Security.PermissionSet&quot;> </xref> содержит разрешения, которые не являются производными от <xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Преобразует закодированное <xref href=&quot;System.Security.PermissionSet&quot;> </xref> из одного формата кодировки XML в другой формат кодировки XML."
  remarks: "Этот метод использовать не следует."
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: 'Строка, представляющая один из следующих форматов кодировки: ASCII, Юникод или двоичный. Возможные значения: «XMLASCII» или «XML», «XMLUNICODE» и «Двоичный».'
    - id: inData
      type: System.Byte[]
      description: "Набор разрешений в XML-кодировке."
    - id: outFormat
      type: System.String
      description: 'Строка, представляющая один из следующих форматов кодировки: ASCII, Юникод или двоичный. Возможные значения: «XMLASCII» или «XML», «XMLUNICODE» и «Двоичный».'
    return:
      type: System.Byte[]
      description: "Зашифрованный набор разрешений с указанным выходным форматом."
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "Во всех случаях."
  platform:
  - net462
- uid: System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает копию объекта <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Копия <xref:System.Security.PermissionSet>предоставляет такой же доступ к ресурсам, что и исходный объект.</xref:System.Security.PermissionSet> Изменения, внесенные в копию, не влияют на исходный набор разрешений."
  example:
  - "The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "Копия <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Копирует объекты разрешений из набора в указанное место в <xref:System.Array>.</xref:System.Array>"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Целевой массив, в который выполняется копирование."
    - id: index
      type: System.Int32
      description: "Начальная позиция в массиве, с которой начинается копирование (от нуля)."
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> array </code> Параметр имеет более одного измерения."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> index </code> Параметр находится за пределами диапазона <code> array </code> параметра."
  platform:
  - net462
- uid: System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Получает число объектов разрешений, содержащихся в наборе разрешений."
  remarks: "В `None` или `Unrestricted` состояние возвращается нуль, поскольку нет экземпляр объекта разрешений фактически не используются."
  example:
  - "The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Число объектов разрешений, содержащихся в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Принудительно начинает <xref:System.Security.SecurityException>во время выполнения, если всем вызывающим объектам выше в стеке вызовов не были предоставлены разрешения, заданные в текущем экземпляре.</xref:System.Security.SecurityException>"
  remarks: "Используйте требование на <xref:System.Security.PermissionSet>Чтобы убедиться, что все вызывающие объекты имеют все разрешения в наборе с одной операцией.</xref:System.Security.PermissionSet>       Разрешения для кода, который вызывает этот метод, не проверяется; Проверка начинается с непосредственный вызывающий объект кода и продолжается вверх по стеку. Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов. Требование завершается успешно, только если не <xref:System.Security.SecurityException>возникает исключение.</xref:System.Security.SecurityException>       Если <xref:System.Security.PermissionSet>содержит разрешения, которые не наследуются от <xref:System.Security.CodeAccessPermission>, `Demand` также вызываются методы из указанных разрешений.</xref:System.Security.CodeAccessPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "У вызывающего кода в цепочке вызовов нет требуемых разрешений."
  platform:
  - net462
- uid: System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Любой <xref:System.Security.PermissionSet.Demand*>, проходящего через вызывающий код для разрешения, которое пересекается с разрешением типа, содержащегося в текущем <xref href=&quot;System.Security.PermissionSet&quot;> </xref> к сбою.</xref:System.Security.PermissionSet.Demand*>"
  remarks: "Этот метод не позволяет вызывающим объектам выше в стеке вызовов доступ к защищенному ресурсу через код, вызывающий этот метод, даже если этим вызывающим предоставлено разрешение на доступ к нему. Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов.       Инструкция DENY может ограничить ответственность программиста или предотвратить случайное уязвимостей, поскольку он не позволяет использовать метод, вызывающий Deny не могут использоваться для доступа к ресурсу, защищенному путем отказа в разрешении. Если метод вызывает метод Deny для разрешения и <xref:System.Security.PermissionSet.Demand%2A>для этого разрешения вызывающий объект, расположенный ниже в стеке вызовов, то проверка безопасности завершается ошибкой, при достижении Deny.</xref:System.Security.PermissionSet.Demand%2A>       Запретить учитывается для разрешения, которое не предоставляется, поскольку запрос на это разрешение не может быть удовлетворен."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Предыдущий вызов Deny уже ограничил разрешения для текущего кадра стека."
  platform:
  - net462
- uid: System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Определяет, является ли указанный <xref href=&quot;System.Security.PermissionSet&quot;> </xref> или <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> объект эквивалентен текущему <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Равенство определяется по разрешениям, содержащимся в соответствии с набором разрешений, `obj`. `obj`может быть либо <xref:System.Security.PermissionSet>объекта или <xref:System.Security.NamedPermissionSet>объекта.</xref:System.Security.NamedPermissionSet> </xref:System.Security.PermissionSet> Если `obj` — <xref:System.Security.NamedPermissionSet>, имя и описание будут пропускаться.</xref:System.Security.NamedPermissionSet>       Дополнительные сведения см. в разделе <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.</xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект, сравниваемый с текущим <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный объект текущему объекту <xref href=&quot;System.Security.PermissionSet&quot;> </xref> объекта; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Восстанавливает объект безопасности с указанным состоянием из кодировки XML."
  remarks: ''
  example:
  - "The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "Кодировка XML, используемая для восстановления объекта безопасности."
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code> Параметр не является допустимым элементом разрешения.       - или - <code> et </code> номер версии параметра не поддерживается."
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает перечислитель для разрешений в наборе."
  remarks: "Используйте как индекс для доступа к объектам отдельных разрешений в наборе."
  example:
  - "The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Объект перечислителя для разрешений в наборе."
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает перечислитель для разрешений в наборе."
  remarks: "Метод GetEnumeratorImpl — это реализация для <xref:System.Security.PermissionSet.GetEnumerator%2A>метод.</xref:System.Security.PermissionSet.GetEnumerator%2A>"
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Объект перечислителя для разрешений в наборе."
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает хэш-код для <xref href=&quot;System.Security.PermissionSet&quot;> </xref> объект, который подходит для использования в алгоритмах и структурах данных хэширования например хэш-таблице."
  remarks: "Хэш-код для двух экземпляров с тем же набором разрешений может отличаться, поэтому хэш-код не следует использовать для сравнения двух <xref:System.Security.PermissionSet>объектов.</xref:System.Security.PermissionSet>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> объекта."
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Получает объект разрешений указанного типа, если он существует в наборе."
  remarks: "Метод возвращает `null` для `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> Несмотря на то что `Unrestricted` <xref:System.Security.PermissionSet>фактически содержит все разрешения, не включает все экземпляры, которые можно вернуть.</xref:System.Security.PermissionSet>"
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "Тип нужного объекта разрешений."
    return:
      type: System.Security.IPermission
      description: "Копия объекта разрешений из типа, заданного параметром <code> permClass </code> параметров, содержащихся в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> если она не существует."
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Получает объект разрешений указанного типа, если он существует в наборе."
  remarks: "Метод GetPermissionImpl — это реализация для <xref:System.Security.PermissionSet.GetPermission%2A>метод.</xref:System.Security.PermissionSet.GetPermission%2A>       Метод возвращает `null` для `Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> Несмотря на то что `Unrestricted` <xref:System.Security.PermissionSet>фактически содержит все разрешения, не включает все экземпляры, которые можно вернуть.</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "Тип объекта разрешений."
    return:
      type: System.Security.IPermission
      description: "Копия объекта разрешений из типа, заданного параметром <code> permClass </code> параметров, содержащихся в <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> если она не существует."
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает и возвращает набор разрешений, являющийся пересечение текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> и указанным <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Пересечение двух наборов разрешений является набор разрешений, описывающий набор операций, в обоих разрешениях. В частности он представляет минимальный набор разрешений, таким образом, что любое требование, удовлетворяющее обоим наборам, передает их пересечения.       Для каждого типа разрешений, присутствующего в обоих наборах, пересечение двух экземпляров таких разрешений выполняется с помощью разрешение `Intersect` метода; полученное разрешение включается в результирующий <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> Типы разрешений, которые существуют только в одном из двух наборов, исключаются из результирующего набора."
  example:
  - "The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "Набор разрешений, пересекающееся с текущим <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
    return:
      type: System.Security.PermissionSet
      description: "Набор разрешений, представляющий собой пересечение текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> и указанного целевого объекта. Этот объект является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если пересечение является пустым."
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Security.PermissionSet&quot;> </xref> пуст."
  remarks: "Объект <xref:System.Security.PermissionSet>может быть пустым и еще содержать экземпляры разрешений, если эти разрешения находятся в состоянии полного ограничения.</xref:System.Security.PermissionSet> Разрешения находятся в состоянии полного ограничения при их `IsSubsetOf` методы возвращают `true` при `null` передается в качестве параметра."
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Security.PermissionSet&quot;> </xref> пуст; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает значение, указывающее, является ли коллекция только для чтения."
  remarks: "Объект <xref:System.Security.PermissionSet>не может быть только для чтения, поэтому данное свойство всегда имеет `false`.</xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Определяет, является ли текущий <xref href=&quot;System.Security.PermissionSet&quot;> </xref> является подмножеством указанного <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Объект <xref:System.Security.PermissionSet>— это подмножество целевой <xref:System.Security.PermissionSet>Если все требования, успешно для <xref:System.Security.PermissionSet>, также будут выполнены для целевого объекта.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> Таким образом объект содержит по крайней мере разрешения, принадлежащие подмножеству."
  example:
  - "The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: "Набор разрешений для проверки соотношения подмножеств. Это может быть либо <xref href=&quot;System.Security.PermissionSet&quot;> </xref> или <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий <xref href=&quot;System.Security.PermissionSet&quot;> </xref> — это подмножество <code> target </code> параметр; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает значение, указывающее, гарантируется ли потокобезопасность коллекции."
  remarks: "<xref:System.Security.PermissionSet>не обрабатывает потокобезопасность автоматически, поэтому данное свойство всегда имеет `false`.</xref:System.Security.PermissionSet>       Этот метод требуется для поддержки <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  example:
  - "The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Определяет, является ли <xref href=&quot;System.Security.PermissionSet&quot;> </xref> — <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;> </xref>."
  remarks: "`Unrestricted` <xref:System.Security.PermissionSet>Фактически содержит все разрешения, которые реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>интерфейса.</xref:System.Security.Permissions.IUnrestrictedPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Security.PermissionSet&quot;></xref> is <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Любой <xref:System.Security.PermissionSet.Demand*>, проходящего через вызывающий код для любого <xref href=&quot;System.Security.PermissionSet&quot;> </xref> , не является подмножеством текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> к сбою.</xref:System.Security.PermissionSet.Demand*>"
  remarks: "Аналогично PermitOnly <xref:System.Security.PermissionSet.Deny%2A>, в том, что оба метода приводят стека с ошибкой, когда в противном случае они бы успешно.</xref:System.Security.PermissionSet.Deny%2A> Различие состоит в том <xref:System.Security.PermissionSet.Deny%2A>Указывает разрешения, которые вызовут стека пройти сбой, но PermitOnly задает только те разрешения, не приводят к сбою стека.</xref:System.Security.PermissionSet.Deny%2A> Вызовите этот метод, чтобы убедиться, что код может использоваться для доступа к только к заданным ресурсам.       PermitOnly учитывается для разрешения не предоставляются, так как запрос на это разрешение не может быть удовлетворен. Тем не менее если код, расположенный ниже, при вызове стеке вызовов <xref:System.Security.PermissionSet.Demand%2A>этим разрешением, <xref:System.Security.SecurityException>возникает при проверке стека достигается код, который пытался вызвать PermitOnly.</xref:System.Security.SecurityException> </xref:System.Security.PermissionSet.Demand%2A> Это так, как код, который вызвал PermitOnly не предоставлено разрешение, несмотря на вызов PermitOnly для этого разрешения. Стек вызовов обычно представляется как растет вниз, так что методы, расположенные выше в стеке вызовов вызывать методы, расположенные в стеке вызовов."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Удаляет разрешение определенного типа из набора."
  remarks: "> [!IMPORTANT]Настроек нельзя удалить разрешения из набора разрешений «неограниченно». Набор останется неограниченный после попытки удалить разрешение, и исключение не создается.       Следующий код C# пытается удалить <xref:System.Security.Permissions.FileIOPermission>из `FullTrust` набор разрешений, но не удаляются.</xref:System.Security.Permissions.FileIOPermission>      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(&quot;FullTrust&quot;);   myPermSet.RemovePermission(typeof(FileIOPermission));   ```"
  example:
  - "The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "Тип удаляемого разрешения."
    return:
      type: System.Security.IPermission
      description: "Разрешение, удаленное из набора."
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Удаляет разрешение определенного типа из набора."
  remarks: "Метод RemovePermissionImpl — это реализация для <xref:System.Security.PermissionSet.RemovePermission%2A>метод.</xref:System.Security.PermissionSet.RemovePermission%2A>      Настроек [!IMPORTANT] настроек невозможно удалить разрешения из набора разрешений «неограниченно». Набор останется неограниченный после попытки удалить разрешение, и исключение не создается."
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "Тип разрешения на удаление."
    return:
      type: System.Security.IPermission
      description: "Разрешение, удаленное из набора."
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Удаляет все предыдущие <xref:System.Security.CodeAccessPermission.Assert*>для текущего кадра быть удалены и больше не действует.</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "При наличии не <xref:System.Security.CodeAccessPermission.Assert%2A>для текущего кадра <xref:System.ExecutionEngineException>возникает исключение.</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Отсутствует предыдущий <xref:System.Security.CodeAccessPermission.Assert*>для текущего кадра.</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Задает разрешение <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, заменяя любые имеющиеся разрешения того же типа."
  remarks: "Этот метод удаляет любые имеющиеся объекты разрешений из того же типа <xref:System.Security.PermissionSet>и заменяет его с помощью `perm` параметр.</xref:System.Security.PermissionSet> Если разрешение, которое реализует <xref:System.Security.Permissions.IUnrestrictedPermission>устанавливается на <xref:System.Security.PermissionSet>, <xref:System.Security.Permissions.PermissionState>, итоговый <xref:System.Security.PermissionSet>больше не `Unrestricted`.</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "Разрешение для установки."
    return:
      type: System.Security.IPermission
      description: "Набор разрешений."
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Задает разрешение <xref href=&quot;System.Security.PermissionSet&quot;> </xref>, заменяя любые имеющиеся разрешения того же типа."
  remarks: "Метод SetPermissionImpl — это реализация для <xref:System.Security.PermissionSet.SetPermission%2A>метод.</xref:System.Security.PermissionSet.SetPermission%2A>       Этот метод удаляет любые имеющиеся объекты разрешений из того же типа <xref:System.Security.PermissionSet>и заменяет его с помощью `perm` параметр.</xref:System.Security.PermissionSet> Если разрешение, которое реализует <xref:System.Security.Permissions.IUnrestrictedPermission>устанавливается на <xref:System.Security.PermissionSet>, <xref:System.Security.Permissions.PermissionState>, итоговый <xref:System.Security.PermissionSet>больше не `Unrestricted`.</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "Разрешение для установки."
    return:
      type: System.Security.IPermission
      description: "Набор разрешений."
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод вызывается из <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает корневой объект текущей коллекции."
  remarks: "Этот метод требуется для поддержки <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  example:
  - "The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Корневой объект текущей коллекции."
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Запускается при десериализации всего графа объектов."
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Объект, который инициализирует обратный вызов. Данная функциональная возможность для этого параметра в настоящее время не реализована."
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает строковое представление <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Строковое представление весьма полезен при отладке, чтобы увидеть состояние <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Представление <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает кодировку XML для объекта безопасности и его текущего состояния."
  remarks: ''
  example:
  - "The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Кодировка XML объекта безопасности, включая сведения о состоянии."
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает <xref href=&quot;System.Security.PermissionSet&quot;> </xref> , представляющее собой объединение текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> и указанным <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  remarks: "Является результатом вызова на объединение <xref:System.Security.PermissionSet>, представляющий все операции, представленные текущее <xref:System.Security.PermissionSet>и все операции, представленные указанным <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> Если любой из наборов находится `Unrestricted`, объединение является `Unrestricted` также."
  example:
  - "The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "Набор разрешений для создания объединения с текущим <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
    return:
      type: System.Security.PermissionSet
      description: "Набор разрешений, представляющий собой объединение текущего <xref href=&quot;System.Security.PermissionSet&quot;> </xref> и указанным <xref href=&quot;System.Security.PermissionSet&quot;> </xref>."
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
