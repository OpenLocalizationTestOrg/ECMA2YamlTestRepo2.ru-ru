### YamlMime:ManagedReference
items:
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute
  id: ComponentGuaranteesAttribute
  children:
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  - System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  langs:
  - csharp
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute
  type: Class
  summary: "Определяет гарантированную совместимость компонента, типа или члена типа, который может охватывать несколько версий."
  remarks: "ComponentGuaranteesAttribute используется разработчиками, компоненты и библиотеки классов, чтобы показать уровень совместимости, при котором объекты-получатели их библиотеки можно ожидать, что в различных версиях. Он указывает уровень гарантии, что будущей версии библиотеки или компонента не нарушит работу существующего клиента. Клиенты могут использовать ComponentGuaranteesAttribute для помощи в разработке собственных интерфейсов для обеспечения стабильности всех версий.      Настроек [!NOTE] настроек общеязыковой среды выполнения (CLR) не использует этот атрибут каким-либо образом. Его значение заключается в формальном документировании намерением автор компонента. Во время компиляции средства также могут использовать эти объявления для обнаружения ошибок во время компиляции, в противном случае нарушат объявленную гарантию.      ## Уровни совместимости ComponentGuaranteesAttribute поддерживает следующие уровни совместимости, которые представлены члены <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>перечисления:-совместимость не до версии (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Клиент может ожидать, что с будущими версиями будет работать существующего клиента. Дополнительные сведения см. в разделе [совместимости нет](#None) далее в этом разделе.      Совместимость до версии side-by-side (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Компонент был протестирован для работы при загрузке более одной версии сборки в том же домене приложения. Как правило будущие версии могут нарушить совместимость. Однако при критических изменений, старая версия не изменяется, но вместе с новой версией. Выполнение Side-by-side — ожидаемый способ обеспечить работу при критических изменений существующих клиентов. Дополнительные сведения см. в разделе [совместимости Side-by-Side](#SideBySide) далее в этом разделе.      -Стабильной версии к версии совместимости (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Будущие версии не должны нарушать клиента и side-by-side выполнения не требуется. Тем не менее если клиент случайно поврежден, возможно, можно использовать для устранения проблемы с одновременным выполнением. Дополнительные сведения см. в разделе [устойчивую совместимость](#Standard) раздела.      -Совместимости до версии exchange (<xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Принять дополнительные меры, чтобы убедиться, что будущие версии не нарушит работу клиента. Клиент должен использовать только эти типы в сигнатуре интерфейсов, которые используются для взаимодействия с другими сборками, которые развертываются независимо друг от друга. Предполагается, что только одна версия этих типов в домене приложения, это означает, что если клиент выдает ошибку, с одновременным выполнением не может устранить проблему совместимости. Дополнительные сведения см. в разделе [совместимость типа обмена](#Exchange) раздела.       Каждый уровень гарантии более подробно в следующих разделах.      <a name=&quot;None&quot;></a>### Не пометку компонент как совместимости <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>Указывает, что поставщик не гарантирует совместимости.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Клиенты должны избежать любых зависимостей на предоставляемых интерфейсах. Этот уровень совместимости полезен для типов, которые экспериментальном или публично доступны, однако предназначены только для компонентов, которые всегда обновляются одновременно. <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>явным образом указывает, что этот компонент не должен использоваться внешними компонентами.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;SideBySide&quot;></a>### Side-by-Side совместимости Пометка компонент как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>Указывает, что компонент был протестирован работать при загрузке более одной версии сборки в том же домене приложений.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Критические изменения разрешены при условии, что они были сделаны в сборку, которая имеет больший номер версии. Компоненты, которые привязаны к старой версии сборки должны продолжать привязку к старой версии и другие компоненты можно привязать к новой версии. Можно также обновить компонент, который объявлен как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>путем внесения необратимых изменений изменения старую версию.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Standard&quot;></a>### Стабильной совместимости пометить тип как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>Указывает, что тип должны оставаться стабильными разных версий.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Тем не менее он может стать возможным для версий side-by-side стабильного типа существует в том же домене приложения.       Устойчивые типы поддерживают высокую совместимость двоичной панели. По этой причине поставщики следует избегать критических изменений для stable типов. Допустимы следующие виды изменений: - закрытых поля экземпляра для добавления или удаления полей из типа, при условии, что это не нарушает формат сериализации.      -Изменение несериализуемый тип сериализуемый тип. (Однако сериализуемый тип не может изменяться для сериализуемого типа.)      -Формирования новых, более исключения, унаследованные из метода.      -Повышение производительности метод.      -Изменение диапазона возвращаемых значений, при условии, что изменения не сказывается отрицательно на большинство клиентов.      -Если коммерческое обоснование велико, а число клиентов, оказывается негативное влияние не хватает Устранение серьезных ошибок.       Поскольку новые версии стабильных компонентов не должны разрушать существующие клиенты, обычно только одна версия стабильного компонента необходима в домене приложения. Однако это не жесткое требование, поскольку стабильные типы не используются как типы известного обмена, согласованные всеми компонентами. Таким образом Если новая версия стабильного компонента случайно нарушит некоторые компоненты, и для других компонентов требуется новая версия, ее можно устранить проблему, загрузив старый и новый компонент.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>предоставляет более надежные гарантии совместимости версии, чем <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions></xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Это значение по умолчанию, общие для нескольких версий компонентов.       <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>можно сочетать с <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, который в том, что компонент не нарушает совместимость, но его проверка работать при загрузке более одной версии в домене приложения.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions></xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       После тип или метод помечены как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, ее можно обновить до <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Однако он не может быть изменена <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      <a name=&quot;Exchange&quot;></a>### Тип Exchange совместимости пометить тип как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName>дает более надежные гарантии совместимости версии чем <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>и должны применяться к наиболее стабильной всех типов.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions?displayProperty=fullName> Эти типы предназначены для обмена данными между независимо построенными компонентами через все границы компонентов во времени (любая версия среды CLR) или любую версию компонента или приложения и пространство (между процессами кросс CLR в одном процессе, нескольких приложений домена в одной среде CLR). Критические изменения в тип обмена, невозможно исправить проблему с помощью загрузки нескольких версий типа.       Типы обмена должны изменяться только в том случае, если проблема очень серьезная (например, серьезная уязвимость безопасности) или вероятность сбоя очень низкий (то есть, если поведение уже было нарушено случайным образом, код может не иметь возможной зависимости на). Тип обмена можно внести следующие виды изменений:-Добавьте наследование новых определений интерфейса.      -Добавьте новые закрытые методы, реализующие методы вновь наследуемых определений интерфейса.      -Добавьте новые статические поля.      -Добавление новых статических методов.      -Добавьте новые методы невиртуальный экземпляра.       Ниже рассматриваются существенные изменения и не разрешены для типов-примитивов:-изменение форматов сериализации. Независимой от версий сериализации является обязательным.      -Добавление или удаление закрытых поля экземпляра. Это вызывает риск изменения формата сериализации типа и прекращение выполнения клиентского кода, который использует отражение.      -Изменение возможности сериализации типа. Несериализуемый тип нельзя сделать сериализуемым и наоборот.      -Создание различных исключений из метода.      -Изменение диапазона возвращаемых значений метода, если только определение элемента вызывает эту возможность и четко показывает, как клиенты должны обрабатывать неизвестные значения.      -Исправление большинства ошибок. Потребители типа будет полагаться на существующее поведение.       После компонент помечается <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>гарантировать, что его нельзя добавить <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>или <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> типа или члена       Как правило, типы exchange — это основные типы (такие как <xref:System.Int32>и <xref:System.String>в платформе .NET Framework) и интерфейсы (такие как <xref:System.Collections.Generic.IList%601>, <xref:System.Collections.Generic.IEnumerable%601>, и <xref:System.IComparable%601>), которые часто используются в общих интерфейсов.</xref:System.IComparable%601> </xref:System.Collections.Generic.IEnumerable%601> </xref:System.Collections.Generic.IList%601> </xref:System.String> </xref:System.Int32>       Типы обмена предоставит могут только другие типы, которые также отмечены <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>совместимости.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> Кроме того типы обмена не может зависеть от поведения Windows API, которые часто меняются.      ## Гарантии компонента: Сводка следующей таблице указывает, как характеристики компонента и его использования на гарантию его совместимости.      | Характеристики компонента | Exchange | Стабильные | Side-by-Side | None |   |-------------------------------|--------------|------------|--------------------|----------|   | Можно использовать в интерфейсах между компонентами этой версии независимо друг от друга. | Y | N | N | N |   | Может быть использован (закрыто) сборкой, версии независимо друг от друга. | Y | Y | Y | N |   | Может иметь несколько версий в одном домене приложения. | N | Y | Y | Y |   | Может привести к значительным изменениям | N | N | Y | Y |   | Тестирование вносить определенные несколько версий сборки может быть загружена вместе. | N | N | Y | N |   | Может привести к значительным изменениям на месте. | N | N | N | Y |   | Может осуществить безопасное неразрывные обслуживания на месте. | Y | Y | Y | Y |      ## Применение атрибута вы ComponentGuaranteesAttribute можно применять к сборки, типа или члена типа. Приложение является иерархическим. То есть, по умолчанию гарантия определяется <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>атрибута на уровне сборки определяет гарантии всех типов в сборку и все члены в этих типах.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Аналогичным образом Если гарантия применяется к типу, по умолчанию он также применяется к каждому члену типа.       Эта гарантия наследуемые можно переопределить путем применения ComponentGuaranteesAttribute отдельные типы и члены типов. Тем не менее гарантирует, что переопределение по умолчанию можно только ослабить гарантии; они не может повысить его. Например, если сборка отмечена с <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>гарантировать ее типы и члены иметь никакой гарантии совместимости и другие гарантии, который применяется к типам и членам в сборке пропускается.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>      ## Тестирование гарантии <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>свойство возвращает член <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>перечисления, который помечен <xref:System.FlagsAttribute>атрибут.</xref:System.FlagsAttribute> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> Это означает, что требуется проверка флаг, который вас интересует, маскируя потенциально неизвестных флагов. Например в следующем примере проверяется, является ли тип помечен как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions>       [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/csharp/t-system.runtime.version_1.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.version_1.vb) ] в следующем примере проверяется, является ли тип помечен как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>или <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>.</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/csharp/t-system.runtime.version_2.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#2](~/add/codesnippet/visualbasic/t-system.runtime.version_2.vb) ] следующие пример тесты устранить тип помечен как <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>(то есть, ни <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>, ни <xref:System.Runtime.Versioning.ComponentGuaranteesOptions>).</xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions> </xref:System.Runtime.Versioning.ComponentGuaranteesOptions>         [!code-cs[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3](~/add/codesnippet/csharp/t-system.runtime.version_3.cs)][!code-vb[System.Runtime.Versioning.ComponentGuaranteesAttribute.Class#3  ](~/add/codesnippet/visualbasic/t-system.runtime.version_3.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Module | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Event | System.AttributeTargets.Interface | System.AttributeTargets.Delegate, AllowMultiple=false, Inherited=false)]

      public sealed class ComponentGuaranteesAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  id: '#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)'
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Runtime.Versioning.ComponentGuaranteesAttribute&quot;> </xref> значение, указывающее, библиотеки, типа или члена класса гарантируется уровень совместимости для нескольких версий."
  remarks: "Когда <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>создается экземпляр класса, значение `guarantees` присваивается параметр <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A>свойство.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees%2A> </xref:System.Runtime.Versioning.ComponentGuaranteesAttribute>"
  syntax:
    content: public ComponentGuaranteesAttribute (System.Runtime.Versioning.ComponentGuaranteesOptions guarantees);
    parameters:
    - id: guarantees
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "Одно из значений перечисления, указывающее уровень совместимости, которое гарантированно для нескольких версий."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  id: Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  langs:
  - csharp
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Versioning
  summary: "Возвращает значение, указывающее гарантированный уровень совместимости библиотеки, типа или члена типа с несколькими версиями."
  remarks: "Значение свойства гарантии соответствует `guarantees` параметр <xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>конструктор.</xref:System.Runtime.Versioning.ComponentGuaranteesAttribute.%23ctor%2A>"
  syntax:
    content: public System.Runtime.Versioning.ComponentGuaranteesOptions Guarantees { get; }
    return:
      type: System.Runtime.Versioning.ComponentGuaranteesOptions
      description: "Одно из значений перечисления, указывающее уровень совместимости, которое гарантированно для нескольких версий."
  overload: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.ComponentGuaranteesAttribute(ComponentGuaranteesOptions)
- uid: System.Runtime.Versioning.ComponentGuaranteesOptions
  parent: System.Runtime.Versioning
  isExternal: false
  name: ComponentGuaranteesOptions
  nameWithType: ComponentGuaranteesOptions
  fullName: System.Runtime.Versioning.ComponentGuaranteesOptions
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
  fullName: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: ComponentGuaranteesAttribute
  nameWithType: ComponentGuaranteesAttribute.ComponentGuaranteesAttribute
- uid: System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees*
  parent: System.Runtime.Versioning.ComponentGuaranteesAttribute
  isExternal: false
  name: Guarantees
  nameWithType: ComponentGuaranteesAttribute.Guarantees
