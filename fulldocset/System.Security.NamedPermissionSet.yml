### YamlMime:ManagedReference
items:
- uid: System.Security.NamedPermissionSet
  id: NamedPermissionSet
  children:
  - System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)
  - System.Security.NamedPermissionSet.#ctor(System.String)
  - System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)
  - System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)
  - System.Security.NamedPermissionSet.Copy
  - System.Security.NamedPermissionSet.Copy(System.String)
  - System.Security.NamedPermissionSet.Description
  - System.Security.NamedPermissionSet.Equals(System.Object)
  - System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.NamedPermissionSet.GetHashCode
  - System.Security.NamedPermissionSet.Name
  - System.Security.NamedPermissionSet.ToXml
  langs:
  - csharp
  name: NamedPermissionSet
  nameWithType: NamedPermissionSet
  fullName: System.Security.NamedPermissionSet
  type: Class
  summary: "Определяет набор разрешений, который имеет имя и описание, связанное с ним. Этот класс не наследуется."
  remarks: "Именованные наборы используются в управлении политикой безопасности для задания разрешений для предоставления кода, к которой принадлежит группе разрешений. Имена — это строки буквенно-цифровых символов. Описание строк могут включать любые печатаемые символы."
  example:
  - "The following code example shows the use of members of the NamedPermissionSet class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class NamedPermissionSet : System.Security.PermissionSet
  inheritance:
  - System.Object
  - System.Security.PermissionSet
  implements: []
  inheritedMembers:
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)
  id: '#ctor(System.Security.NamedPermissionSet)'
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: NamedPermissionSet(NamedPermissionSet)
  nameWithType: NamedPermissionSet.NamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(NamedPermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> класс из другой именованный набор разрешений."
  syntax:
    content: public NamedPermissionSet (System.Security.NamedPermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.NamedPermissionSet
      description: "Именованный набор разрешений из которого создается новый экземпляр."
  overload: System.Security.NamedPermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: NamedPermissionSet(String)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый пустой экземпляр <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> класса с заданным именем."
  remarks: "С помощью этого конструктора создает именованный набор с никаких разрешений, но с разрешений <xref:System.Security.Permissions.PermissionState>состояние разрешения.</xref:System.Security.Permissions.PermissionState> Именованный набор разрешений на неограниченное состояние фактически содержит все разрешения, которые реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>интерфейса.</xref:System.Security.Permissions.IUnrestrictedPermission> Именованный набор разрешений будет содержать все встроенные разрешения, а также все настраиваемые пользовательские разрешения, которые реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>.</xref:System.Security.Permissions.IUnrestrictedPermission> Все разрешения будет иметь эквивалент `Unrestricted` состояние разрешения. Разрешения, которые не реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>будут пустыми экземплярами.</xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: public NamedPermissionSet (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя нового именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой (»»)."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)
  id: '#ctor(System.String,System.Security.Permissions.PermissionState)'
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: NamedPermissionSet(String,PermissionState)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String,PermissionState)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String,PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> класса с заданным именем в неограниченном или полностью ограниченном состоянии."
  remarks: "Именованный набор разрешений на неограниченное состояние фактически содержит все разрешения, которые реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>интерфейса.</xref:System.Security.Permissions.IUnrestrictedPermission> Именованный набор разрешений будет содержать все встроенные разрешения, а также все пользовательские разрешения. Будет иметь все разрешения `Unrestricted` <xref:System.Security.Permissions.PermissionState>.</xref:System.Security.Permissions.PermissionState> Разрешения, которые не реализуют <xref:System.Security.Permissions.IUnrestrictedPermission>, такими как разрешения идентификаторов, будут пустыми экземплярами.</xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: public NamedPermissionSet (string name, System.Security.Permissions.PermissionState state);
    parameters:
    - id: name
      type: System.String
      description: "Имя нового именованного набора разрешений."
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Один из <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> значения."
  overload: System.Security.NamedPermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой (»»)."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)
  id: '#ctor(System.String,System.Security.PermissionSet)'
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: NamedPermissionSet(String,PermissionSet)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String,PermissionSet)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String,PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> класса с заданным именем из набора разрешений."
  remarks: ''
  example:
  - "The following code example shows the use of the NamedPermissionSet constructor to create a new <xref:System.Security.NamedPermissionSet> object. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public NamedPermissionSet (string name, System.Security.PermissionSet permSet);
    parameters:
    - id: name
      type: System.String
      description: "Имя именованного набора разрешений."
    - id: permSet
      type: System.Security.PermissionSet
      description: "Разрешение, набор, из которого берется значение нового именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой (»»)."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.Copy
  id: Copy
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: NamedPermissionSet.Copy()
  fullName: System.Security.NamedPermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает копию набора разрешений из именованного набора разрешений."
  remarks: ''
  example:
  - "The following code example shows the use of the Copy method to create a copy of the current <xref:System.Security.NamedPermissionSet>. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public override System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "Набор разрешений, являющийся копией разрешений в именованный набор разрешений."
  overload: System.Security.NamedPermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.Copy(System.String)
  id: Copy(System.String)
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: Copy(String)
  nameWithType: NamedPermissionSet.Copy(String)
  fullName: System.Security.NamedPermissionSet.Copy(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает копию именованного набора разрешений с другим именем, но те же разрешения."
  syntax:
    content: public System.Security.NamedPermissionSet Copy (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя нового именованного набора разрешений."
    return:
      type: System.Security.NamedPermissionSet
      description: "Копия именованный набор разрешений с новым именем."
  overload: System.Security.NamedPermissionSet.Copy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code> Параметр <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой (»»)."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.Description
  id: Description
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: Description
  nameWithType: NamedPermissionSet.Description
  fullName: System.Security.NamedPermissionSet.Description
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает или задает текстовое описание текущего именованного набора разрешений."
  remarks: "Описание позволяет администратору понять, какие разрешения содержатся в наборе и его использовании."
  example:
  - "The following code example shows the use of the Description property to display the description of the current <xref:System.Security.NamedPermissionSet>. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "Текстовое описание именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: NamedPermissionSet.Equals(Object)
  fullName: System.Security.NamedPermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Определяет, является ли указанный <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> объект эквивалентен текущему <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>."
  remarks: "Дополнительные сведения см. в разделе <xref:System.Object.Equals%2A>.</xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows the use of the Equals method to compare two <xref:System.Security.NamedPermissionSet> objects. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> Объект, сравниваемый с текущим <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанный <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> совпадает с текущим <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> объекта; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.NamedPermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: NamedPermissionSet.FromXml(SecurityElement)
  fullName: System.Security.NamedPermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Восстанавливает именованный набор разрешений с указанным состоянием из кодировки XML."
  remarks: "Этот метод воссоздает состояние именованного набора разрешений из элемента XML, созданный ранее <xref:System.Security.NamedPermissionSet.ToXml%2A>.</xref:System.Security.NamedPermissionSet.ToXml%2A>"
  example:
  - "The following code example shows the use of the FromXml method to recreate a <xref:System.Security.NamedPermissionSet> object. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "Элемент безопасности, содержащий XML-представление именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code> Параметр не является допустимым представлением именованный набор разрешений."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: NamedPermissionSet.GetHashCode()
  fullName: System.Security.NamedPermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает хэш-код для <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> объект, который подходит для использования в алгоритмах и структурах данных хэширования например хэш-таблице."
  remarks: "Хэш-код для двух экземпляров одного разрешения могут отличаться, поэтому хэш-код не следует использовать для сравнения двух <xref:System.Security.NamedPermissionSet>объектов.</xref:System.Security.NamedPermissionSet>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Хэш-код для текущего <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> объекта."
  overload: System.Security.NamedPermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.Name
  id: Name
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: Name
  nameWithType: NamedPermissionSet.Name
  fullName: System.Security.NamedPermissionSet.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Возвращает или задает имя текущего именованного набора разрешений."
  remarks: "Группы кода обращаются к наборам разрешений по имени."
  example:
  - "The following code example shows the use of the Name property to display the name of a <xref:System.Security.NamedPermissionSet>. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Имя именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.Name*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Имя — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или является пустой строкой (»»)."
  platform:
  - net462
- uid: System.Security.NamedPermissionSet.ToXml
  id: ToXml
  parent: System.Security.NamedPermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: NamedPermissionSet.ToXml()
  fullName: System.Security.NamedPermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Создает элемент XML-описание именованного набора разрешений."
  remarks: "Используйте <xref:System.Security.NamedPermissionSet.FromXml%2A>для повторного создания в состояние, представленное возвращаемого элемента.</xref:System.Security.NamedPermissionSet.FromXml%2A>"
  example:
  - "The following code example shows the use of the ToXml method to recreate a <xref:System.Security.NamedPermissionSet> object. This code example is part of a larger example provided for the <xref:System.Security.NamedPermissionSet> class.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "XML-представление именованного набора разрешений."
  overload: System.Security.NamedPermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.PermissionSet
  isExternal: false
  name: System.Security.PermissionSet
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: NamedPermissionSet(NamedPermissionSet)
  nameWithType: NamedPermissionSet.NamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(NamedPermissionSet)
- uid: System.Security.NamedPermissionSet
  parent: System.Security
  isExternal: false
  name: NamedPermissionSet
  nameWithType: NamedPermissionSet
  fullName: System.Security.NamedPermissionSet
- uid: System.Security.NamedPermissionSet.#ctor(System.String)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: NamedPermissionSet(String)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: NamedPermissionSet(String,PermissionState)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String,PermissionState)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String,PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: NamedPermissionSet(String,PermissionSet)
  nameWithType: NamedPermissionSet.NamedPermissionSet(String,PermissionSet)
  fullName: System.Security.NamedPermissionSet.NamedPermissionSet(String,PermissionSet)
- uid: System.Security.NamedPermissionSet.Copy
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Copy()
  nameWithType: NamedPermissionSet.Copy()
  fullName: System.Security.NamedPermissionSet.Copy()
- uid: System.Security.NamedPermissionSet.Copy(System.String)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Copy(String)
  nameWithType: NamedPermissionSet.Copy(String)
  fullName: System.Security.NamedPermissionSet.Copy(String)
- uid: System.Security.NamedPermissionSet.Description
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Description
  nameWithType: NamedPermissionSet.Description
  fullName: System.Security.NamedPermissionSet.Description
- uid: System.Security.NamedPermissionSet.Equals(System.Object)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: NamedPermissionSet.Equals(Object)
  fullName: System.Security.NamedPermissionSet.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: NamedPermissionSet.FromXml(SecurityElement)
  fullName: System.Security.NamedPermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.NamedPermissionSet.GetHashCode
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: NamedPermissionSet.GetHashCode()
  fullName: System.Security.NamedPermissionSet.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.NamedPermissionSet.Name
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Name
  nameWithType: NamedPermissionSet.Name
  fullName: System.Security.NamedPermissionSet.Name
- uid: System.Security.NamedPermissionSet.ToXml
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: NamedPermissionSet.ToXml()
  fullName: System.Security.NamedPermissionSet.ToXml()
- uid: System.Security.NamedPermissionSet.#ctor*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: NamedPermissionSet
  nameWithType: NamedPermissionSet.NamedPermissionSet
- uid: System.Security.NamedPermissionSet.Copy*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Copy
  nameWithType: NamedPermissionSet.Copy
- uid: System.Security.NamedPermissionSet.Description*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Description
  nameWithType: NamedPermissionSet.Description
- uid: System.Security.NamedPermissionSet.Equals*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Equals
  nameWithType: NamedPermissionSet.Equals
- uid: System.Security.NamedPermissionSet.FromXml*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: FromXml
  nameWithType: NamedPermissionSet.FromXml
- uid: System.Security.NamedPermissionSet.GetHashCode*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: NamedPermissionSet.GetHashCode
- uid: System.Security.NamedPermissionSet.Name*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: Name
  nameWithType: NamedPermissionSet.Name
- uid: System.Security.NamedPermissionSet.ToXml*
  parent: System.Security.NamedPermissionSet
  isExternal: false
  name: ToXml
  nameWithType: NamedPermissionSet.ToXml
