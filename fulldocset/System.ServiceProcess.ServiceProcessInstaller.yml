### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceProcessInstaller
  id: ServiceProcessInstaller
  children:
  - System.ServiceProcess.ServiceProcessInstaller.#ctor
  - System.ServiceProcess.ServiceProcessInstaller.Account
  - System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceProcessInstaller.HelpText
  - System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Password
  - System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Username
  langs:
  - csharp
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller
  fullName: System.ServiceProcess.ServiceProcessInstaller
  type: Class
  summary: "Устанавливает исполняемый файл, содержащий классы, которые расширяют <xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>. Этот класс вызывается программой установки, например InstallUtil.exe, при установке приложения службы."
  remarks: "ServiceProcessInstaller работают общие для всех служб в исполняемом файле. Используется программой установки для записи значений реестра, связанные со службами, которые вы хотите установить.       Чтобы установить службу, создайте класс установщика проектов, наследуемый от <xref:System.Configuration.Install.Installer>и задайте <xref:System.ComponentModel.RunInstallerAttribute>класса в `true`.</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> В проекте, создать один экземпляр ServiceProcessInstaller каждого приложения службы и один <xref:System.ServiceProcess.ServiceInstaller>экземпляра для каждой службы в приложении.</xref:System.ServiceProcess.ServiceInstaller> Наконец добавьте экземпляр ServiceProcessInstaller и <xref:System.ServiceProcess.ServiceInstaller>экземпляры в класс установщика вашего проекта.</xref:System.ServiceProcess.ServiceInstaller>       При запуске InstallUtil.exe программа ищет классы в сборке службы с <xref:System.ComponentModel.RunInstallerAttribute>равным `true`.</xref:System.ComponentModel.RunInstallerAttribute> Добавление классов в сборку службы, добавив их в <xref:System.Configuration.Install.Installer.Installers%2A>коллекцию, связанную с установщиком проектов.</xref:System.Configuration.Install.Installer.Installers%2A> Если <xref:System.ComponentModel.RunInstallerAttribute>является `false`, программа установки игнорирует установщик проектов.</xref:System.ComponentModel.RunInstallerAttribute>       Для экземпляра ServiceProcessInstaller свойства, которые можно изменять включать задания, приложение службы запуска под учетной записью, кроме пользователя, выполнившего вход. Можно указать определенный <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>пару, с которой должна запускаться служба, или можно использовать <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>для указания запуска службы под системной учетной записи компьютера, локальный или учетная запись сетевой службы или учетной записи пользователя.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>      Настроек [!NOTE] настроек системная учетная запись компьютера не совпадает с учетной записи администратора.       Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceInstaller>вашей программы; они обычно вызываются только программой установки.</xref:System.ServiceProcess.ServiceInstaller> Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>и <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>методов во время установки.</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) для всех ранее установленных компонентов.</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>       Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проектов <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Эти сведения постоянно обновляются при и каждого экземпляра ServiceProcessInstaller <xref:System.ServiceProcess.ServiceInstaller>установлен экземпляр служебной программой.</xref:System.ServiceProcess.ServiceInstaller> Обычно нет необходимости явно изменять сведения о состоянии в коде.       При создании экземпляра ServiceProcessInstaller вызывает конструктор базового класса, <xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>, вызываемый.</xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>"
  example:
  - "The following example creates a project installer called MyProjectInstaller, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for MyProjectInstaller (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each service, and a ServiceProcessInstaller is created for the executable. For the install utility to recognize MyProjectInstaller as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses MyProjectInstaller, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each object can be backed out in turn in case of an installation failure.  \n  \n Normally, you would not instantiate your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute>, but the install utility actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._0_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._0_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._0_1.vb)]"
  syntax:
    content: 'public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Создает новый экземпляр <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> класса."
  syntax:
    content: public ServiceProcessInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  id: Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Возвращает или задает тип учетной записи, под которой будет выполняться это приложение-службу."
  remarks: "Если свойство учетной записи не `User`, <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>свойства используются для определения учетной записи, под которой запускается приложение службы.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>И <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>пары позволяет службе для запуска под учетной записью, отличной от учетной записи system.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему. Если оставить либо <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>или <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>со значением NULL и значение учетной записи `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Можно также указать, что служба запускается под учетной записью локальной системы, или в качестве локальной или сетевой службы. В разделе <xref:System.ServiceProcess.ServiceAccount>перечисления подробные сведения о типах учетных записей.</xref:System.ServiceProcess.ServiceAccount>"
  syntax:
    content: public System.ServiceProcess.ServiceAccount Account { get; set; }
    return:
      type: System.ServiceProcess.ServiceAccount
      description: "Объект <xref href=&quot;System.ServiceProcess.ServiceAccount&quot;> </xref> , определяющий тип учетной записи, под которой система работает эта служба. Значение по умолчанию — <xref uid=&quot;langword_csharp_User&quot; name=&quot;User&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceProcess.ServiceProcessInstaller.Account*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Реализует базовый класс &lt;xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName&gt; метода нет <xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;> </xref> поведение данного класса."
  remarks: "Этот метод не должен вызываться из кода. Метод базового класса для <xref:System.Configuration.Install.ComponentInstaller>— `abstract`, поэтому здесь он реализован в производном классе.</xref:System.Configuration.Install.ComponentInstaller> Однако не <xref:System.ServiceProcess.ServiceProcessInstaller>обработки в реализации метода данного класса.</xref:System.ServiceProcess.ServiceProcessInstaller>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent comp);
    parameters:
    - id: comp
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> , Представляющий процесса службы."
  overload: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  id: HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Получает текст справки для параметров установки службы."
  remarks: "Этот текст справки может использоваться при запуске службы вручную. Он указывается, как ввести имя и пароль пользователя."
  syntax:
    content: public override string HelpText { get; }
    return:
      type: System.String
      description: "Текст справки, содержащий описание шагов для задания имени пользователя и пароля для запуска службы под определенной учетной записи."
  overload: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Записывает сведения о служебном приложении в реестр. Этот метод предназначен для использования средствами установки, которые автоматически вызывают соответствующие методы."
  remarks: "Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceProcessInstaller>вашей программы; они обычно вызываются только программой установки.</xref:System.ServiceProcess.ServiceProcessInstaller> Программа установки автоматически вызывает метод установки во время установки. При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>для ранее установленных компонентов.</xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> Этот метод передает установки базового класса <xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>метод.</xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>       Как правило, не будет вызывать методы на <xref:System.ServiceProcess.ServiceInstaller>вашей программы; они обычно вызываются только программой установки.</xref:System.ServiceProcess.ServiceInstaller> Программа установки автоматически вызывает установку и <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>методов во время установки.</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> При необходимости он обрабатывает сбои, вызывая <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) для всех ранее установленных компонентов программа установки приложения автоматического сохранения сведений об компоненты уже установлены, с помощью установщика проектов <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> Сведения о состоянии, переданные в установке как `stateSaver` параметра, постоянно обновляются при <xref:System.ServiceProcess.ServiceProcessInstaller>экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller>установлен экземпляр служебной программой.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Обычно нет необходимости явно изменять сведения о состоянии в коде.       Установка передает в метод вызова исключения, вызываемые методы базового класса или <xref:System.Configuration.Install.Installer.BeforeInstall>/ <xref:System.Configuration.Install.Installer.AfterInstall>обработчики событий.</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>, Содержащий контекстные данные, связанные с установкой.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Install*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>stateSaver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  id: Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Возвращает или задает пароль, связанный с учетной записью пользователя, под которой запускается приложение службы."
  remarks: "Пароль и <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>пары позволяет службе для запуска под учетной записью, отличной от учетной записи system.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему.       Пароль и <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>обрабатываются безопасным образом, в том, что они никогда не сериализуются и сохранены в состоянии установки (установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) или в другом месте с общедоступными.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Параметр <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>и пароль позволяет связывать учетную запись автоматически со службой во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> Если оставить либо <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>или пароля пустым и задайте <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>для `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       Другой вариант для запуска под отдельной учетной записью службы является использование системной учетной записи компьютера. Этой учетной записи, которая отличается от учетной записи администратора, требуется пароль. Системной учетной записи больше прав, чем вошедший в систему пользователя. Выполняются в контексте системной учетной записи, а не учетной записи пользователя, позволяет избежать проблем, связанных с отсутствием разрешений, службе требуется, если <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>имеет любое значение, отличное от `User`, используется указанная учетная запись (локальный или сетевой службы или локальной системы), даже если <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>и заполняются свойства пароль.</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Password { get; set; }
    return:
      type: System.String
      description: "Пароль, связанный с учетной записью, под которой должна запускаться служба. Значение по умолчанию — пустая строка (»»). Это свойство не является открытым и не может быть сериализовано."
  overload: System.ServiceProcess.ServiceProcessInstaller.Password*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Отменяет сведения о служебном приложении, записанные в реестр в процессе установки. Этот метод предназначен для использования средствами установки, которые автоматически обрабатывают соответствующие методы."
  remarks: "Как правило, не следует вызывать методы на <xref:System.ServiceProcess.ServiceProcessInstaller>вашей программы; они обычно вызываются только программой установки.</xref:System.ServiceProcess.ServiceProcessInstaller> Вызывается автоматически <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>метод во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> Он обрабатывает сбои, при необходимости путем вызова отката для объекта, вызвавшего исключение.       Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проектов <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> Сведения о состоянии, переданные в отката как `savedState` параметра, постоянно обновляются при <xref:System.ServiceProcess.ServiceProcessInstaller>экземпляр и каждый <xref:System.ServiceProcess.ServiceInstaller>установлен экземпляр служебной программой.</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> Обычно нет необходимости явно изменять сведения о состоянии в коде.       Откат передает в метод вызова исключения, вызываемые методы базового класса или <xref:System.Configuration.Install.Installer.BeforeInstall>/ <xref:System.Configuration.Install.Installer.AfterInstall>обработчики событий.</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>, Содержащий контекстные данные, связанные с установкой.</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>savedState</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - или - <code> savedState </code> поврежден или не существует."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  id: Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "Возвращает или задает учетной записи пользователя, под которой будет запускаться служебное приложение."
  remarks: "Имя пользователя и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>пары позволяет службе для запуска под учетной записью, отличной от учетной записи system.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Например, это позволяет службе запускаться автоматически при перезагрузке, когда пользователь не вошел в систему.       <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>и имя пользователя, обрабатываются безопасным образом, в том, что они никогда не сериализуются и сохранены в состоянии установки (установщик проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) или в другом месте с общедоступными.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       Параметр имени пользователя и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>позволяет связывать учетную запись автоматически со службой во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> Если оставить либо имя пользователя или <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>пустые и <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>для `User`, вам необходимо ввести допустимое имя пользователя и пароль во время установки.</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       Другой вариант для запуска под отдельной учетной записью службы является использование системной учетной записи компьютера. Этой учетной записи, которая отличается от учетной записи администратора, требуется пароль. Системной учетной записи больше прав, чем вошедший в систему пользователя. Выполняются в контексте системной учетной записи, а не учетной записи пользователя, позволяет избежать проблем, связанных с отсутствием разрешений, службе требуется, если <xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>имеет любое значение, отличное от `User`, используется указанная учетная запись (локальный или сетевой службы или локальной системы), даже если имя пользователя и <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>свойства заполняются.</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "Учетная запись, под которой должна запускаться служба. Значение по умолчанию — пустая строка (»»)."
  overload: System.ServiceProcess.ServiceProcessInstaller.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceAccount
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceAccount
  nameWithType: ServiceAccount
  fullName: System.ServiceProcess.ServiceAccount
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller
- uid: System.ServiceProcess.ServiceProcessInstaller.Account*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceProcessInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
- uid: System.ServiceProcess.ServiceProcessInstaller.Install*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceProcessInstaller.Install
- uid: System.ServiceProcess.ServiceProcessInstaller.Password*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceProcessInstaller.Rollback
- uid: System.ServiceProcess.ServiceProcessInstaller.Username*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
