### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResultCollection
  id: SearchResultCollection
  children:
  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  - System.DirectoryServices.SearchResultCollection.Count
  - System.DirectoryServices.SearchResultCollection.Dispose
  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  - System.DirectoryServices.SearchResultCollection.Finalize
  - System.DirectoryServices.SearchResultCollection.GetEnumerator
  - System.DirectoryServices.SearchResultCollection.Handle
  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
  type: Class
  summary: "Содержит класс SearchResultCollection <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> экземпляров, возвращенные из иерархии Active Directory во время <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> запроса."
  remarks: "Из-за ограничения реализации класса SearchResultCollection не может освободить все свои неуправляемые ресурсы после сбора мусора. Чтобы предотвратить утечку памяти, необходимо вызвать <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>метод, когда объект SearchResultCollection больше не нужен.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>"
  syntax:
    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  id: Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет, если указанный <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объект находится в этой коллекции."
  syntax:
    content: public bool Contains (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> Объект для поиска."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанное свойство принадлежит данной коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SearchResultCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует все <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объектов в этой коллекции в указанный массив, начиная с указанного индекса в целевом массиве."
  syntax:
    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);
    parameters:
    - id: results
      type: System.DirectoryServices.SearchResult[]
      description: "Массив <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объектов, который принимает элементы данной коллекции."
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `results` которого этот метод начинает копирование коллекции."
  overload: System.DirectoryServices.SearchResultCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Count
  id: Count
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает число <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объектов в этой коллекции."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Число <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объектов в этой коллекции."
  overload: System.DirectoryServices.SearchResultCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  id: Dispose
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> объекта."
  remarks: "Метод Dispose позволяет ресурсы, используемые <xref:System.DirectoryServices.SearchResultCollection>перераспределить для других целей.</xref:System.DirectoryServices.SearchResultCollection> Дополнительные сведения о Dispose см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md).       Сборщик мусора не освобождает память для <xref:System.DirectoryServices.SearchResultCollection>объекта.</xref:System.DirectoryServices.SearchResultCollection> Таким образом приложение должно вызвать метод Dispose явным образом, чтобы предотвратить утечку памяти."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> объекта и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>вызывает защищенный метод Dispose с `disposing` равным `true`.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.Object.Finalize%2A>вызывает метод Dispose с `disposing` равным `false`.</xref:System.Object.Finalize%2A>       При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.DirectoryServices.SearchResultCollection>ссылки.</xref:System.DirectoryServices.SearchResultCollection>       Сборщик мусора не освобождает память для <xref:System.DirectoryServices.SearchResultCollection>объекта.</xref:System.DirectoryServices.SearchResultCollection> Поэтому необходимо вызвать метод <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>метод явным образом, чтобы предотвратить утечку памяти.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Этот метод вызывает <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>метода каждого объекта в коллекции.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Дополнительные сведения о <xref:System.DirectoryServices.SearchResultCollection.Dispose>и <xref:System.Object.Finalize%2A>, в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [переопределение метода Finalize](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  id: Finalize
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Переопределяет &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; метод."
  syntax:
    content: ~SearchResultCollection ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает перечислитель, который можно использовать для перебора элементов коллекции."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>Объект, который можно использовать для перебора элементов коллекции.</xref:System.Collections.IEnumerator>"
  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Handle
  id: Handle
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает дескриптор, возвращенный [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) , выполняющий поиска. Дополнительные сведения см. в разделе [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) раздел в библиотеке MSDN по [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  remarks: "<xref:System.DirectoryServices.DirectorySearcher>, Создаваемые этой коллекции вызывает [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) метод, который делает доступными для объекта T:System.DirectoryServices.SearchResultCollection результаты запроса.</xref:System.DirectoryServices.DirectorySearcher> Дополнительные сведения см. в разделе [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) раздел в библиотеке MSDN по [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       При каждом выполнении запроса для результатов этого запроса дескриптор связан с его <xref:System.DirectoryServices.SearchResultCollection>объекта.</xref:System.DirectoryServices.SearchResultCollection> Этот дескриптор соответствует дескриптору поиска в ADSI. Этот дескриптор сохраняется до вызова метода <xref:System.DirectoryServices.SearchResultCollection.Dispose>метод <xref:System.DirectoryServices.SearchResultCollection>объекта, поэтому необходимо вызвать <xref:System.DirectoryServices.SearchResultCollection.Dispose>во избежание утечки памяти.</xref:System.DirectoryServices.SearchResultCollection.Dispose> </xref:System.DirectoryServices.SearchResultCollection> </xref:System.DirectoryServices.SearchResultCollection.Dispose> Сборщик мусора не освобождает память для этого конкретного объекта."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "Значение ads_search_handle, используемое данной коллекцией."
  overload: System.DirectoryServices.SearchResultCollection.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  id: IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает индекс первого вхождения указанного <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объект в этой коллекции."
  syntax:
    content: public int IndexOf (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> Объект для поиска в этой коллекции."
    return:
      type: System.Int32
      description: "Отсчитываемый от нуля индекс первого найденного объекта. Возвращает значение -1, если ни один из элементов коллекции не идентичен <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объекта."
  overload: System.DirectoryServices.SearchResultCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> объект, расположенный по указанному индексу в коллекции."
  remarks: "В C# это свойство является индексатором <xref:System.DirectoryServices.SearchResultCollection>класса.</xref:System.DirectoryServices.SearchResultCollection>       В JScript можно использовать по умолчанию индексированные свойства, определенные типом, но нельзя явно определять свои собственные. Однако указание атрибута expando применительно к классу автоматически предоставляет значение по умолчанию индексированное свойство, типом которого является объект с типом индекса <xref:System.String>.</xref:System.String>"
  syntax:
    content: public System.DirectoryServices.SearchResult this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> извлекаемого объекта."
    return:
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> Объект, расположенный по указанному индексу."
  overload: System.DirectoryServices.SearchResultCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  id: PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> свойства, которые были заданы перед выполнением поиска."
  syntax:
    content: public string[] PropertiesLoaded { get; }
    return:
      type: System.String[]
      description: "Массив объектов типа <xref:System.String>, содержащий свойства, которые были указаны в <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*>коллекцию свойств, перед выполнением поиска.</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> </xref:System.String>"
  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует элементы <xref:System.Collections.ICollection>для <xref:System.Array>, начиная с определенного <xref:System.Array>индекса.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, куда копируются элементы из <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref:System.Collections.ICollection> больше, чем свободное пространство от <code>index</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref:System.Collections.ICollection>не может быть автоматически приведен к типу массива назначения <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализуют метод Synchronized, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "Для коллекций, хранилище которых не является общедоступным ожидаемая реализация является для возврата текущего экземпляра. Обратите внимание, что указатель на текущий экземпляр может быть недостаточно для коллекций, которые являются оболочкой для других коллекций; Эти должны возвращать базовой коллекции `SyncRoot` свойство.       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализовать `Synchronized` метод, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName> Однако производные классы могут предоставлять собственную синхронизированную версию коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>свойство.</xref:System.Collections.ICollection.SyncRoot%2A> Синхронизированный код должен выполнять операции на <xref:System.Collections.ICollection.SyncRoot%2A>коллекции, но не над самой коллекцией.</xref:System.Collections.ICollection.SyncRoot%2A> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в экземпляр коллекции.       В случае отсутствия `Synchronized` метод с коллекцией, предполагаемое использование <xref:System.Collections.ICollection.SyncRoot%2A>выглядит следующим образом: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` [Visual Basic] ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` перечисление по коллекции само по себе не является потокобезопасной процедурой.</xref:System.Collections.ICollection.SyncRoot%2A> Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
- uid: System.DirectoryServices.SearchResult[]
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult[]
  spec.csharp:
  - uid: System.DirectoryServices.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: SearchResult[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SearchResultCollection.Count
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SearchResultCollection.Contains*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains
  nameWithType: SearchResultCollection.Contains
- uid: System.DirectoryServices.SearchResultCollection.CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo
  nameWithType: SearchResultCollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.Count*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose
  nameWithType: SearchResultCollection.Dispose
- uid: System.DirectoryServices.SearchResultCollection.Finalize*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize
  nameWithType: SearchResultCollection.Finalize
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SearchResultCollection.GetEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
- uid: System.DirectoryServices.SearchResultCollection.IndexOf*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf
  nameWithType: SearchResultCollection.IndexOf
- uid: System.DirectoryServices.SearchResultCollection.Item*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item
  nameWithType: SearchResultCollection.Item
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
