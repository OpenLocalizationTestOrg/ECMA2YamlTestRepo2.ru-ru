### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.SecurityPermission
  id: SecurityPermission
  children:
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  - System.Security.Permissions.SecurityPermission.Copy
  - System.Security.Permissions.SecurityPermission.Flags
  - System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.SecurityPermission.IsUnrestricted
  - System.Security.Permissions.SecurityPermission.ToXml
  - System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: SecurityPermission
  nameWithType: SecurityPermission
  fullName: System.Security.Permissions.SecurityPermission
  type: Class
  summary: "Описывает набор разрешений безопасности, примененных к коду. Этот класс не наследуется."
  remarks: "Это разрешение используется <xref:System.Security.Permissions.SecurityPermissionFlag>перечисления.</xref:System.Security.Permissions.SecurityPermissionFlag> Значения для этого перечисления можно найти в документации к нему."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Permissions.SecurityPermission&quot;> </xref> класса с указанным состоянием разрешения: ограниченным или неограниченным."
  remarks: "Создает либо полностью ограниченный (`None`) или `Unrestricted` доступ ко всем разрешениям безопасности."
  syntax:
    content: public SecurityPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "Один из <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref> значения."
  overload: System.Security.Permissions.SecurityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code> Параметр не является допустимым значением для <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  id: '#ctor(System.Security.Permissions.SecurityPermissionFlag)'
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Permissions.SecurityPermission&quot;> </xref> класса с заданным исходным состоянием флагов."
  remarks: ''
  example:
  - "The following code example shows the use of the SecurityPermission constructor to create instances of the <xref:System.Security.Permissions.SecurityPermission> class that are used to demand security permissions.  For the complete code example, see the <xref:System.Security.Permissions.SecurityPermissionAttribute.%23ctor%28System.Security.Permissions.SecurityAction%29> constructor.  \n  \n [!code-cs[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/csharp/d0b0f9d1-82bd-4e97-862e-_1.cs)]\n [!code-cpp[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/cpp/d0b0f9d1-82bd-4e97-862e-_1.cpp)]\n [!code-vb[System.Security.Permissions.SecurityPermissionAttribute#18](~/add/codesnippet/visualbasic/d0b0f9d1-82bd-4e97-862e-_1.vb)]"
  syntax:
    content: public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);
    parameters:
    - id: flag
      type: System.Security.Permissions.SecurityPermissionFlag
      description: "Начальное состояние разрешения, представленное побитовое сочетание OR всех битов разрешений, определенных <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  overload: System.Security.Permissions.SecurityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flag </code> Параметр не является допустимым значением для <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.Copy
  id: Copy
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: System.Security.Permissions.SecurityPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает и возвращает идентичную копию текущего разрешения."
  remarks: "Копия разрешения предоставляет такой же доступ к ресурсам, что само разрешение."
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Копия текущего разрешения."
  overload: System.Security.Permissions.SecurityPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.Flags
  id: Flags
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: System.Security.Permissions.SecurityPermission.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает или задает флаги разрешений безопасности."
  remarks: "Биты отдельные разрешения можно определить путем выполнения операции над этим значением и проверки на ненулевое значение."
  syntax:
    content: public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.SecurityPermissionFlag
      description: "Состояние текущего разрешения, представленное побитовое сочетание OR всех битов разрешений, определенных <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  overload: System.Security.Permissions.SecurityPermission.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Попытка задать это свойство имеет недопустимое значение. В разделе <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref> допустимые значения."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Восстанавливает разрешение с указанным состоянием из кодировки XML."
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "Кодировка XML, используемая для восстановления разрешения."
  overload: System.Security.Permissions.SecurityPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code> Параметр не является допустимым элементом разрешения.       - или - <code> esd </code> номер версии параметра не поддерживается."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает и возвращает разрешение, представляющее собой пересечение текущего и указанного разрешений."
  remarks: "Пересечение двух разрешений является разрешение, которое описывает состояние, в обоих разрешениях. Только запрос, передающий оба исходных разрешения, передает их пересечение."
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение, пересекающееся с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новый объект разрешения, представляющий собой пересечение текущего и указанного разрешений. Это новое разрешение равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если пересечение является пустым."
  overload: System.Security.Permissions.SecurityPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Определяет, является ли текущее разрешение подмножеством указанного разрешения."
  remarks: "Текущее разрешение является подмножеством указанного разрешения, если текущее разрешение задает набор операций, полностью содержащихся в заданном разрешении. Например, разрешение, которое предоставляет доступ к C:\\example.txt является подмножеством разрешения, предоставляющего доступ к C:\\\\. Если этот метод возвращает `true`, текущее разрешение не предоставляет большего доступа к защищенному ресурсу, чем указанное разрешение."
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение, для которого требуется проверить отношение подмножества. Это разрешение должно быть того же типа, что и текущее разрешение."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущее разрешение является подмножеством указанного разрешения. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.SecurityPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает значение, указывающее, является ли текущее разрешение является неограниченным."
  remarks: "Неограниченное разрешение представляет доступ ко всем ресурсам, защищенным с помощью разрешений."
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущее разрешение является неограниченным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.SecurityPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: System.Security.Permissions.SecurityPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает кодировку XML для разрешения и его текущего состояния."
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Кодировка XML разрешения, включающая сведения о состоянии."
  overload: System.Security.Permissions.SecurityPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает разрешение, представляющее собой объединение текущего и указанного разрешений."
  remarks: "Результатом вызова на объединение является разрешение, представляющее все действия, представленные текущего разрешения и указанного разрешений. Любой запрос, передающий любое разрешение, передает их объединение."
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Разрешение для объединения с текущим разрешением. Он должен быть того же типа, что и текущее разрешение."
    return:
      type: System.Security.IPermission
      description: "Новое разрешение, представляющее собой объединение текущего и указанного разрешений."
  overload: System.Security.Permissions.SecurityPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code> Не <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> и не совпадает с типом текущего разрешения."
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(PermissionState)
  nameWithType: SecurityPermission.SecurityPermission(PermissionState)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission(SecurityPermissionFlag)
  nameWithType: SecurityPermission.SecurityPermission(SecurityPermissionFlag)
  fullName: System.Security.Permissions.SecurityPermission.SecurityPermission(SecurityPermissionFlag)
- uid: System.Security.Permissions.SecurityPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityPermissionFlag
  nameWithType: SecurityPermissionFlag
  fullName: System.Security.Permissions.SecurityPermissionFlag
- uid: System.Security.Permissions.SecurityPermission.Copy
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Copy()
  nameWithType: SecurityPermission.Copy()
  fullName: System.Security.Permissions.SecurityPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.SecurityPermission.Flags
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Flags
  nameWithType: SecurityPermission.Flags
  fullName: System.Security.Permissions.SecurityPermission.Flags
- uid: System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: SecurityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.SecurityPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: SecurityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Intersect(IPermission)
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: SecurityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: SecurityPermission.IsUnrestricted()
  fullName: System.Security.Permissions.SecurityPermission.IsUnrestricted()
- uid: System.Security.Permissions.SecurityPermission.ToXml
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: ToXml()
  nameWithType: SecurityPermission.ToXml()
  fullName: System.Security.Permissions.SecurityPermission.ToXml()
- uid: System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: SecurityPermission.Union(IPermission)
  fullName: System.Security.Permissions.SecurityPermission.Union(IPermission)
- uid: System.Security.Permissions.SecurityPermission.#ctor*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: SecurityPermission
  nameWithType: SecurityPermission.SecurityPermission
- uid: System.Security.Permissions.SecurityPermission.Copy*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Copy
  nameWithType: SecurityPermission.Copy
- uid: System.Security.Permissions.SecurityPermission.Flags*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Flags
  nameWithType: SecurityPermission.Flags
- uid: System.Security.Permissions.SecurityPermission.FromXml*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: FromXml
  nameWithType: SecurityPermission.FromXml
- uid: System.Security.Permissions.SecurityPermission.Intersect*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Intersect
  nameWithType: SecurityPermission.Intersect
- uid: System.Security.Permissions.SecurityPermission.IsSubsetOf*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: SecurityPermission.IsSubsetOf
- uid: System.Security.Permissions.SecurityPermission.IsUnrestricted*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: SecurityPermission.IsUnrestricted
- uid: System.Security.Permissions.SecurityPermission.ToXml*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: ToXml
  nameWithType: SecurityPermission.ToXml
- uid: System.Security.Permissions.SecurityPermission.Union*
  parent: System.Security.Permissions.SecurityPermission
  isExternal: false
  name: Union
  nameWithType: SecurityPermission.Union
