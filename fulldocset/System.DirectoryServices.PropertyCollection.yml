### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.PropertyCollection
  id: PropertyCollection
  children:
  - System.DirectoryServices.PropertyCollection.Contains(System.String)
  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  - System.DirectoryServices.PropertyCollection.Count
  - System.DirectoryServices.PropertyCollection.GetEnumerator
  - System.DirectoryServices.PropertyCollection.Item(System.String)
  - System.DirectoryServices.PropertyCollection.PropertyNames
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  - System.DirectoryServices.PropertyCollection.Values
  langs:
  - csharp
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
  type: Class
  summary: "Коллекция PropertyCollection класс содержит свойства <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>."
  syntax:
    content: 'public class PropertyCollection : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет, является ли указанное свойство в данной коллекции."
  syntax:
    content: public bool Contains (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "Имя свойства для поиска."
    return:
      type: System.Boolean
      description: "Возвращает значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Если указанное свойство принадлежит данной коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.PropertyCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует все объекты из данной коллекции в массив, начиная с указанного индекса в целевом массиве."
  syntax:
    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);
    parameters:
    - id: array
      type: System.DirectoryServices.PropertyValueCollection[]
      description: "Массив <xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;> </xref> объектов, который принимает элементы данной коллекции."
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` которого этот метод начинает копирование коллекции."
  overload: System.DirectoryServices.PropertyCollection.CopyTo*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Произошла ошибка при вызове базового интерфейса."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Count
  id: Count
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает количество свойств в этой коллекции."
  remarks: "Internet Information Services (IIS) и поставщики WinNT не поддерживают в настоящее время Count, поэтому каждый вызовет <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Количество свойств в этой коллекции."
  overload: System.DirectoryServices.PropertyCollection.Count*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Произошла ошибка при вызове базового интерфейса."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Каталог не может сообщить число свойств."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает перечислитель, который можно использовать для перебора элементов коллекции."
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>, Можно использовать для перебора элементов коллекции.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "Произошла ошибка при вызове базового интерфейса."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  id: Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает заданное свойство."
  remarks: "В C# это свойство является индексатором <xref:System.DirectoryServices.PropertyCollection>класса.</xref:System.DirectoryServices.PropertyCollection>       В JScript можно использовать по умолчанию индексированные свойства, определенные типом, но нельзя явно определять свои собственные. Однако указание атрибута expando применительно к классу автоматически предоставляет значение по умолчанию индексированное свойство с типом объекта и индекса <xref:System.String>.</xref:System.String>"
  syntax:
    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }
    parameters:
    - id: propertyName
      type: System.String
      description: "Имя извлекаемого свойства."
    return:
      type: System.DirectoryServices.PropertyValueCollection
      description: "Значение указанного свойства."
  overload: System.DirectoryServices.PropertyCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  id: PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает имена свойств в этой коллекции."
  remarks: "При доступе к членам свойства PropertyNames <xref:System.Runtime.InteropServices.COMException>могут инициироваться из-за ошибки при обращении к базовому интерфейсу.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection PropertyNames { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Объект, содержащий имена свойств в этой коллекции.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.PropertyNames*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Копирует элементы <xref:System.Collections.ICollection>для <xref:System.Array>, начиная с определенного <xref:System.Array>индекса.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "Одномерный массив <xref:System.Array>, куда копируются элементы из <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Array> <xref:System.Array>Должен начинаться с нуля.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс в `array` с которого начинается копирование."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>меньше нуля."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>является многомерным.       - или - количество элементов в исходной коллекции <xref:System.Collections.ICollection> больше, чем свободное пространство от <code>index</code> до конца массива назначения <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Тип источника <xref:System.Collections.ICollection>не может быть автоматически приведен к типу массива назначения <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection></xref:System.Collections.ICollection.SyncRoot%2A>       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализуют метод Synchronized, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName>       Перечисление коллекции само по себе не является является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       Приведенный ниже показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если доступ к <xref:System.Collections.ICollection>является синхронизированным (потокобезопасным); в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  remarks: "Для коллекций, хранилище которых не является общедоступным ожидаемая реализация является для возврата текущего экземпляра. Обратите внимание, что указатель на текущий экземпляр может быть недостаточно для коллекций, которые являются оболочкой для других коллекций; Эти должны возвращать свойство SyncRoot базовой коллекции.       Большинство классов коллекций в <xref:System.Collections?displayProperty=fullName>пространство имен также реализуют метод Synchronized, который обеспечивает создание синхронизированной оболочки для базовой коллекции.</xref:System.Collections?displayProperty=fullName> Однако производные классы могут предоставлять собственную синхронизированную версию коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>свойство.</xref:System.Collections.ICollection.SyncRoot%2A> Синхронизированный код должен выполнять операции на <xref:System.Collections.ICollection.SyncRoot%2A>коллекции, но не над самой коллекцией.</xref:System.Collections.ICollection.SyncRoot%2A> Это обеспечивает правильную работу коллекций, являющихся производными других объектов. В частности это обеспечивает правильную синхронизацию с другими потоками, которые могут одновременно вносить изменения в экземпляр коллекции.       В случае отсутствия метод Synchronized с коллекцией, предполагаемое использование <xref:System.Collections.ICollection.SyncRoot%2A>выглядит следующим образом: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` перечисление по коллекции само по себе не является потокобезопасной процедурой.      </xref:System.Collections.ICollection.SyncRoot%2A> Даже если коллекция синхронизирована, другие потоки могут ее изменить, что приводит к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении можно либо заблокировать коллекцию на все время перечисления или перехватывать исключения, возникающие в результате изменений, внесенных другими потоками.       [Visual Basic, C#]       В следующем примере кода показано, как заблокировать коллекции с помощью <xref:System.Collections.ICollection.SyncRoot%2A>на все время перечисления: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Объект, который может использоваться для синхронизации доступа к <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Добавляет элемент с указанными ключом и значением в <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary>"
  remarks: "Можно также использовать <xref:System.Collections.IDictionary.Item%2A>свойство для добавления новых элементов, задав значение ключа, который не существует в словаре (например, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> Однако если указанный ключ уже существует в словаре, задание <xref:System.Collections.IDictionary.Item%2A>свойство перезаписывает прежнее значение.</xref:System.Collections.IDictionary.Item%2A> Напротив <xref:System.Collections.IDictionary.Add%2A>метод не изменяет существующие элементы.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#9](~/add/codesnippet/cpp/1a38ef09-e972-4d5a-adef-_1.cpp)]\n [!code-cs[Dictionary#9](~/add/codesnippet/csharp/1a38ef09-e972-4d5a-adef-_1.cs)]\n [!code-vb[Dictionary#9](~/add/codesnippet/visualbasic/1a38ef09-e972-4d5a-adef-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "<xref:System.Object>Для использования в качестве ключа добавляемого элемента</xref:System.Object>"
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для использования в качестве значения элемента, который требуется добавить.</xref:System.Object>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Элемент с таким ключом уже существует в <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>Доступно только для чтения.</xref:System.Collections.IDictionary>       - или - <xref:System.Collections.IDictionary>имеет фиксированный размер.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  id: System#Collections#IDictionary#Clear
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет все элементы из <xref:System.Collections.IDictionary>объект.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#8](~/add/codesnippet/cpp/473cc76e-c5f1-4b76-bd2d-_1.cpp)]\n [!code-cs[Dictionary#8](~/add/codesnippet/csharp/473cc76e-c5f1-4b76-bd2d-_1.cs)]\n [!code-vb[Dictionary#8](~/add/codesnippet/visualbasic/473cc76e-c5f1-4b76-bd2d-_1.vb)]"
  syntax:
    content: void IDictionary.Clear ();
    parameters: []
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>Объект доступен только для чтения.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Определяет, является ли <xref:System.Collections.IDictionary>объект содержит элемент с указанным ключом.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#5](~/add/codesnippet/cpp/37011492-a9b1-4bd3-bee4-_1.cpp)]\n [!code-cs[Dictionary#5](~/add/codesnippet/csharp/37011492-a9b1-4bd3-bee4-_1.cs)]\n [!code-vb[Dictionary#5](~/add/codesnippet/visualbasic/37011492-a9b1-4bd3-bee4-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Ключ для поиска в <xref:System.Collections.IDictionary>объект.</xref:System.Collections.IDictionary>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Collections.IDictionary>содержит элемент с указанным ключом; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли <xref:System.Collections.IDictionary>объект имеет фиксированный размер.</xref:System.Collections.IDictionary>"
  remarks: "Коллекции фиксированного размера запрещается добавлять или удалять элементы коллекции создается, но позволяет изменять существующие элементы.       Коллекция фиксированного размера является просто коллекцией с оболочкой, препятствующей добавлению и удалению элементов; Поэтому если были внесены изменения в базовой коллекции, включая добавление или удаление элементов, эти изменения отражаются в коллекции фиксированного размера."
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#6](~/add/codesnippet/cpp/9254691a-4dee-480c-bf03-_1.cpp)]\n [!code-cs[Dictionary#6](~/add/codesnippet/csharp/9254691a-4dee-480c-bf03-_1.cs)]\n [!code-vb[Dictionary#6](~/add/codesnippet/visualbasic/9254691a-4dee-480c-bf03-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Collections.IDictionary>объект имеет фиксированный размер; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значение, указывающее, является ли <xref:System.Collections.IDictionary>объект доступен только для чтения.</xref:System.Collections.IDictionary>"
  remarks: "Коллекции, доступной только для чтения не разрешается добавление, изменение или удаление элементов после создания коллекции."
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#4](~/add/codesnippet/cpp/758e339d-f700-4387-ac5f-_1.cpp)]\n [!code-cs[Dictionary#4](~/add/codesnippet/csharp/758e339d-f700-4387-ac5f-_1.cs)]\n [!code-vb[Dictionary#4](~/add/codesnippet/visualbasic/758e339d-f700-4387-ac5f-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Collections.IDictionary>объект только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает или задает элемент с указанным ключом."
  remarks: "Это свойство предоставляет возможность доступа к указанному элементу коллекции с помощью следующего синтаксиса: `myCollection[key]`.       Можно также использовать <xref:System.Collections.IDictionary.Item%2A>свойство для добавления новых элементов, задав значение ключа, который не существует в словаре (например, `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.IDictionary.Item%2A> Однако если указанный ключ уже существует в словаре, задание <xref:System.Collections.IDictionary.Item%2A>свойство перезаписывает прежнее значение.</xref:System.Collections.IDictionary.Item%2A> Напротив <xref:System.Collections.IDictionary.Add%2A>метод не изменяет существующие элементы.</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#13](~/add/codesnippet/cpp/f4830ad8-862c-4ae4-a8e0-_1.cpp)]\n [!code-cs[Dictionary#13](~/add/codesnippet/csharp/f4830ad8-862c-4ae4-a8e0-_1.cs)]\n [!code-vb[Dictionary#13](~/add/codesnippet/visualbasic/f4830ad8-862c-4ae4-a8e0-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "Ключ элемента, который требуется получить или задать."
    return:
      type: System.Object
      description: "Элемент с указанным ключом."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Свойство имеет значение и <xref:System.Collections.IDictionary>объект доступен только для чтения.</xref:System.Collections.IDictionary>       - или - свойству, <code> key </code> не существует в коллекции и <xref:System.Collections.IDictionary>имеет фиксированный размер.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает <xref:System.Collections.ICollection>объект, содержащий ключи из <xref:System.Collections.IDictionary>объект.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  remarks: "Порядок следования ключей в возвращаемом <xref:System.Collections.ICollection>объект не указан, но гарантированно сопоставим с соответствующими значениями в <xref:System.Collections.ICollection>возвращенных <xref:System.Collections.IDictionary.Values%2A>свойство.</xref:System.Collections.IDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#10](~/add/codesnippet/cpp/66b18c51-f730-4ac9-89c7-_1.cpp)]\n [!code-cs[Dictionary#10](~/add/codesnippet/csharp/66b18c51-f730-4ac9-89c7-_1.cs)]\n [!code-vb[Dictionary#10](~/add/codesnippet/visualbasic/66b18c51-f730-4ac9-89c7-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>Объект, содержащий ключи из <xref:System.Collections.IDictionary>объект.</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Удаляет элемент с указанным ключом из <xref:System.Collections.IDictionary>объекта.</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#7](~/add/codesnippet/cpp/0e5c3e14-6952-45d5-9f38-_1.cpp)]\n [!code-cs[Dictionary#7](~/add/codesnippet/csharp/0e5c3e14-6952-45d5-9f38-_1.cs)]\n [!code-vb[Dictionary#7](~/add/codesnippet/visualbasic/0e5c3e14-6952-45d5-9f38-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "Ключ удаляемого элемента."
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>Объект доступен только для чтения.</xref:System.Collections.IDictionary>       - или - <xref:System.Collections.IDictionary>имеет фиксированный размер.</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает <xref:System.Collections.IEnumerable>объекта.</xref:System.Collections.IEnumerable>"
  remarks: "[Visual Basic, C#]       `foreach` Инструкции языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей.  Таким образом, использование `foreach` рекомендуется вместо непосредственного использования перечислителя.       Перечислители могут использоваться для чтения данных в коллекции, но не может использоваться для изменения коллекции.       Изначально перечислитель располагается перед первым элементом в коллекции. <xref:System.Collections.IEnumerator.Reset%2A>также переводит перечислитель в эту позицию.</xref:System.Collections.IEnumerator.Reset%2A>  В этой позиции <xref:System.Collections.IEnumerator.Current%2A>свойство не определено.</xref:System.Collections.IEnumerator.Current%2A> Таким образом необходимо вызвать <xref:System.Collections.IEnumerator.MoveNext%2A>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>Возвращает тот же объект, пока не <xref:System.Collections.IEnumerator.MoveNext%2A>или <xref:System.Collections.IEnumerator.Reset%2A>называется.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Задает <xref:System.Collections.IEnumerator.Current%2A>к следующему элементу.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Если <xref:System.Collections.IEnumerator.MoveNext%2A>проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A>возвращает `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A>также возвращают `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A>возвращается `false`, <xref:System.Collections.IEnumerator.Current%2A>не определено.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Чтобы задать <xref:System.Collections.IEnumerator.Current%2A>первый элемент коллекции, можно вызвать <xref:System.Collections.IEnumerator.Reset%2A>следуют <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       Перечислитель остается действительным, пока коллекция остается неизменной. Если в коллекцию вносятся изменения, такие как добавление, изменение или удаление элементов, перечислитель становится необратимо недействительным, и его поведение не определено.       Перечислитель не имеет монопольного доступа к коллекции. Таким образом, перечисление коллекции само по себе не является потокобезопасной процедурой.  Для обеспечения потокобезопасности при перечислении, можно заблокировать коллекцию на все время перечисления.  Чтобы разрешить доступ из нескольких потоков для чтения и записи к коллекции, необходимо реализовать собственную синхронизацию."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerable>Хранящийся.</xref:System.Collections.IEnumerable>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Values
  id: Values
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Возвращает значения свойств в этой коллекции."
  remarks: "При доступе к членам свойства значения <xref:System.Runtime.InteropServices.COMException>исключение может вызываться из-за ошибки при обращении к базовому интерфейсу.</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>, Содержащий значения свойств в этой коллекции.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
- uid: System.DirectoryServices.PropertyValueCollection[]
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection[]
  spec.csharp:
  - uid: System.DirectoryServices.PropertyValueCollection
    name: PropertyValueCollection
    nameWithType: PropertyValueCollection
    fullName: PropertyValueCollection[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.PropertyCollection.Count
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
- uid: System.DirectoryServices.PropertyValueCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
- uid: System.DirectoryServices.PropertyCollection.Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains
  nameWithType: PropertyCollection.Contains
- uid: System.DirectoryServices.PropertyCollection.CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyCollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.Count*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: PropertyCollection.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item
  nameWithType: PropertyCollection.Item
- uid: System.DirectoryServices.PropertyCollection.PropertyNames*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
