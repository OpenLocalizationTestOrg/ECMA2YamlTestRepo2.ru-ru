### YamlMime:ManagedReference
items:
- uid: System.Data.IDbConnection
  id: IDbConnection
  children:
  - System.Data.IDbConnection.BeginTransaction
  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.IDbConnection.ChangeDatabase(System.String)
  - System.Data.IDbConnection.Close
  - System.Data.IDbConnection.ConnectionString
  - System.Data.IDbConnection.ConnectionTimeout
  - System.Data.IDbConnection.CreateCommand
  - System.Data.IDbConnection.Database
  - System.Data.IDbConnection.Open
  - System.Data.IDbConnection.State
  langs:
  - csharp
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
  type: Interface
  summary: "Представляет открытое соединение с источником данных и реализуется поставщиками данных .NET Framework, которые обращаются к реляционным базам данных."
  remarks: "Интерфейс IDbConnection позволяет наследующему классу реализовать класс Connection, который представляет уникальный сеанс с источником данных (например, сетевое подключение к серверу). Дополнительные сведения о классах соединения см. в разделе [соединение с источником данных](~/add/includes/ajax-current-ext-md.md).       Приложение не создает экземпляр интерфейса IDbConnection напрямую, а также создает экземпляр класса, наследующего IDbConnection.       Классы, наследующие IDbConnection должны реализовывать все наследуемые члены и обычно определяются дополнительные члены для добавления функций конкретного поставщика. Например, интерфейс IDbConnection определяет <xref:System.Data.IDbConnection.ConnectionTimeout%2A>свойство.</xref:System.Data.IDbConnection.ConnectionTimeout%2A> В свою очередь <xref:System.Data.SqlClient.SqlConnection>класс наследует это свойство, а также определяет <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> </xref:System.Data.SqlClient.SqlConnection>"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection>. The <xref:System.Data.SqlClient.SqlConnection> is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a Transact-SQL INSERT statement.  \n  \n [!code-cs[Classic WebData SqlConnection Example#1](~/add/codesnippet/csharp/t-system.data.idbconnect_1.cs)]\n [!code-vb[Classic WebData SqlConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.idbconnect_1.vb)]"
  syntax:
    content: 'public interface IDbConnection : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Начинает транзакцию базы данных."
  remarks: "После завершения транзакции, необходимо зафиксировать или откатить транзакцию с помощью <xref:System.Data.IDbTransaction.Commit%2A>или <xref:System.Data.IDbTransaction.Rollback%2A>методы.</xref:System.Data.IDbTransaction.Rollback%2A> </xref:System.Data.IDbTransaction.Commit%2A>"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Начинает транзакцию базы данных с указанным <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> значение."
  remarks: "После завершения транзакции, необходимо зафиксировать или откатить транзакцию с помощью <xref:System.Data.IDbTransaction.Commit%2A>или <xref:System.Data.IDbTransaction.Rollback%2A>методы.</xref:System.Data.IDbTransaction.Rollback%2A> </xref:System.Data.IDbTransaction.Commit%2A>"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction (System.Data.IsolationLevel il);
    parameters:
    - id: il
      type: System.Data.IsolationLevel
      description: "Один из <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> значения."
    return:
      type: System.Data.IDbTransaction
      description: "Объект, представляющий новую транзакцию."
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Изменяет текущую базу данных для открытого <xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;> </xref> объекта."
  syntax:
    content: public void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "Имя базы данных для использования вместо текущей базы данных."
  overload: System.Data.IDbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Close
  id: Close
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Закрывает соединение с базой данных."
  remarks: "Метод Close откатывает все отложенные транзакции. Освобождает соединение в пул подключений или закрывает подключение, если пул подключений отключен.       Приложение может вызвать `Close` более одного раза без создания исключения."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.IDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает строку, используемую для открытия базы данных."
  remarks: "`ConnectionString` Может быть установлено только в том случае, пока соединение закрыто."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>, and displays its <xref:System.Data.OleDb.OleDbConnection.State%2A>.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_0_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_0_1.vb)]"
  syntax:
    content: public string ConnectionString { get; set; }
    return:
      type: System.String
      description: "Строка, содержащая параметры подключения."
  overload: System.Data.IDbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает время ожидания при попытке установки подключения, по истечении которого попытка завершается и создается ошибка."
  remarks: "Значение 0 указывает на неограниченное время ожидания, а не времени ожидания и следует избегать в <xref:System.Data.IDbConnection.ConnectionString%2A>так как он вызовет попытка соединения для неограниченного ожидания.</xref:System.Data.IDbConnection.ConnectionString%2A>"
  syntax:
    content: public int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "Время (в секундах) ожидания открытия соединения. Значение по умолчанию составляет 15 секунд."
  overload: System.Data.IDbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Создает и возвращает объект Command, связанный с подключением."
  syntax:
    content: public System.Data.IDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "Объект Command, связанный с подключением."
  overload: System.Data.IDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Database
  id: Database
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает имя текущей базы данных или базы данных, которая будет использоваться после открытия подключения."
  remarks: "`Database` Свойство динамически обновляется с помощью <xref:System.Data.IDbConnection.ChangeDatabase%2A>метода или передачи инструкции SQL с помощью одного из методов Execute.</xref:System.Data.IDbConnection.ChangeDatabase%2A> (Изначально базы данных настраивается с помощью строки подключения.) При изменении текущей базы данных с помощью инструкции SQL или `ChangeDatabase` , метод информационное сообщение отправляется и затем обновляется свойство."
  syntax:
    content: public string Database { get; }
    return:
      type: System.String
      description: "Имя текущей базы данных или имя базы данных, которая будет использоваться после подключения открыт. Значение по умолчанию — пустая строка."
  overload: System.Data.IDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Open
  id: Open
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Открывает подключение к базе данных с параметрами, указанными в <xref uid=&quot;langword_csharp_ConnectionString&quot; name=&quot;ConnectionString&quot; href=&quot;&quot;> </xref> свойство объекта соединения с поставщиком."
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.Data.IDbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.State
  id: State
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает текущее состояние соединения."
  remarks: "Разрешенные изменения состояния: — `Closed` для `Open`, с использованием `Open` метод объекта соединения.      -Из `Open` для `Closed`, с помощью `Close` метода или `Dispose` метод объекта соединения."
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.IDbConnection.ConnectionString%2A>, and displays its State.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_1_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_1_1.vb)]"
  syntax:
    content: public System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "Один из <xref href=&quot;System.Data.ConnectionState&quot;> </xref> значения."
  overload: System.Data.IDbConnection.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.IDbConnection.BeginTransaction
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbConnection.Close
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
- uid: System.Data.IDbConnection.ConnectionString
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbConnection.CreateCommand
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.IDbConnection.Database
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
- uid: System.Data.IDbConnection.Open
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
- uid: System.Data.IDbConnection.State
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.IDbConnection.BeginTransaction*
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: IDbConnection.BeginTransaction
- uid: System.Data.IDbConnection.ChangeDatabase*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: IDbConnection.ChangeDatabase
- uid: System.Data.IDbConnection.Close*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close
  nameWithType: IDbConnection.Close
- uid: System.Data.IDbConnection.ConnectionString*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
- uid: System.Data.IDbConnection.CreateCommand*
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: IDbConnection.CreateCommand
- uid: System.Data.IDbConnection.Database*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
- uid: System.Data.IDbConnection.Open*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open
  nameWithType: IDbConnection.Open
- uid: System.Data.IDbConnection.State*
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
