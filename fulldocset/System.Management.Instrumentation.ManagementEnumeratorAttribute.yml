### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute
  id: ManagementEnumeratorAttribute
  children:
  - System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor
  - System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema
  langs:
  - csharp
  name: ManagementEnumeratorAttribute
  nameWithType: ManagementEnumeratorAttribute
  fullName: System.Management.Instrumentation.ManagementEnumeratorAttribute
  type: Class
  summary: "Атрибут ManagementEnumerator помечает метод, который возвращает все экземпляры класса WMI.       Примечание: библиотеки WMI .NET считаются сегодня в конечное состояние и без дальнейшей разработки, усовершенствования или обновления должны быть доступны для незащищенной связанных проблем на этих библиотек. [API-интерфейсы MI](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) следует использовать для всех новых проектов."
  remarks: "Метод должен быть статический и открытый. Он должен возвращать коллекцию всех экземпляров класса WMI. Коллекция может быть любого типа, приводимым к <xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable>"
  example:
  - "The following example shows how to use the Enumerator attribute to mark a method that is used to enumerate instances of a class. In this case, the Enumerate method uses the <xref:System.Diagnostics.Process> class to retrieve all of the processes running on the computer.  \n  \n [C#]  \n  \n```  \n[ManagementEnumerator]  \npublic static IEnumerable Enumerate()  \n{  \n   Process[] rgProcesses = Process.GetProcesses();  \n   for (int i = 0; i < rgProcesses.Length; i++)  \n   {  \n      yield return new ProcessProvider(rgProcesses[i]);  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=false)]

      public sealed class ManagementEnumeratorAttribute : System.Management.Instrumentation.ManagementNewInstanceAttribute
  inheritance:
  - System.Attribute
  - System.Management.Instrumentation.ManagementMemberAttribute
  - System.Management.Instrumentation.ManagementNewInstanceAttribute
  implements: []
  inheritedMembers:
  - System.Management.Instrumentation.ManagementMemberAttribute.Name
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor
  id: '#ctor'
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  langs:
  - csharp
  name: ManagementEnumeratorAttribute()
  nameWithType: ManagementEnumeratorAttribute.ManagementEnumeratorAttribute()
  fullName: System.Management.Instrumentation.ManagementEnumeratorAttribute.ManagementEnumeratorAttribute()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Инициализирует новый экземпляр <xref:System.Management.ManagementEnumeratorAttribute>класса.</xref:System.Management.ManagementEnumeratorAttribute>"
  syntax:
    content: public ManagementEnumeratorAttribute ();
    parameters: []
  overload: System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema
  id: Schema
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  langs:
  - csharp
  name: Schema
  nameWithType: ManagementEnumeratorAttribute.Schema
  fullName: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema
  type: Property
  assemblies:
  - System.Core
  namespace: System.Management.Instrumentation
  summary: "Возвращает или задает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator."
  remarks: "Если возвращаемый тип <xref:System.Object?displayProperty=fullName>, и затем выходные данные должны рассматриваться как значение типа <xref:System.Object?displayProperty=fullName>.</xref:System.Object?displayProperty=fullName> </xref:System.Object?displayProperty=fullName>"
  syntax:
    content: public Type Schema { get; set; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>значение, указывающее тип выходных данных, метод помечен атрибутом [ManagementEnumerator](~/add/includes/ajax-current-ext-md.md) атрибут будет выводить.</xref:System.Type>"
  overload: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Management.Instrumentation.ManagementNewInstanceAttribute
  isExternal: false
  name: System.Management.Instrumentation.ManagementNewInstanceAttribute
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  isExternal: false
  name: ManagementEnumeratorAttribute()
  nameWithType: ManagementEnumeratorAttribute.ManagementEnumeratorAttribute()
  fullName: System.Management.Instrumentation.ManagementEnumeratorAttribute.ManagementEnumeratorAttribute()
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  isExternal: false
  name: Schema
  nameWithType: ManagementEnumeratorAttribute.Schema
  fullName: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor*
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  isExternal: false
  name: ManagementEnumeratorAttribute
  nameWithType: ManagementEnumeratorAttribute.ManagementEnumeratorAttribute
- uid: System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema*
  parent: System.Management.Instrumentation.ManagementEnumeratorAttribute
  isExternal: false
  name: Schema
  nameWithType: ManagementEnumeratorAttribute.Schema
