### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "Управляет коллекцией <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов."
  remarks: "ServicePointManager является статическим классом, используемым для создания, поддержания и удаления экземпляров <xref:System.Net.ServicePoint>класса.</xref:System.Net.ServicePoint>       Когда приложение запрашивает подключение к Интернет-ресурсу универсальный код ресурса (URI) через объект ServicePointManager, ServicePointManager возвращает <xref:System.Net.ServicePoint>, содержащий сведения о соединении для узла и схема, определенный URI.</xref:System.Net.ServicePoint> Если имеется существующий <xref:System.Net.ServicePoint>для объекта, узлов и схемы, объект ServicePointManager возвращает существующий <xref:System.Net.ServicePoint>объекта; в противном случае создается новый объект ServicePointManager <xref:System.Net.ServicePoint>объекта.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6 включает средство безопасности, блокирует небезопасных шифрования и хэширования алгоритмы для подключений. Приложения с помощью TLS/SSL через API-интерфейсы, такие как HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, т. д. и предназначенных для .NET Framework 4.6 получить более надежные и безопасные поведение по умолчанию.       Разработчики имеют возможность отказаться от этого поведения для обеспечения взаимодействия с имеющиеся SSL3 услуги или TLS с служб RC4. [В этой статье](https://support.microsoft.com/kb/3069494) объясняется, как изменить код таким образом, чтобы отключить новое поведение."
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает политику для сертификатов сервера."
  remarks: "Если значение свойства CertificatePolicy <xref:System.Net.ICertificatePolicy>объект интерфейса <xref:System.Net.ServicePointManager>объект использует политику сертификатов, определяемую этим экземпляром, вместо политики сертификатов по умолчанию.</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       Политика по умолчанию позволяет действительные сертификаты и действительные сертификаты с истекшим сроком."
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "Объект, реализующий интерфейс <xref href=&quot;System.Net.ICertificatePolicy&quot;> </xref> интерфейса."
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает <xref:System.Boolean>значение, указывающее, проверяется ли сертификат по списку отзыва сертификатов.</xref:System.Boolean>"
  remarks: "При CheckCertificateRevocationList `true`, сертификат проверяется по списку отзыва сертификатов, в рамках процесса проверки сертификата. Значением по умолчанию является `false`."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если проверяется список отзыва сертификатов; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает максимальное число одновременных подключений, разрешенное <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекта."
  remarks: "Свойство свойство DefaultConnectionLimit устанавливает значение свойства по умолчанию максимальное число одновременных подключений, <xref:System.Net.ServicePointManager>назначает объект <xref:System.Net.ServicePoint.ConnectionLimit%2A>при создании <xref:System.Net.ServicePoint>объектов.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       Изменение свойств свойство DefaultConnectionLimit никак не влияет на существующие <xref:System.Net.ServicePoint>объектов; он влияет только на <xref:System.Net.ServicePoint>объекты, которые инициализируются после изменения.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> Если значение этого свойства не задано, напрямую или через конфигурацию, то значение по умолчанию константа <xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      Настроек [!NOTE] настроек влияют любые изменения свойств свойство DefaultConnectionLimit подключений HTTP 1.0 и HTTP 1.1. Не удается отдельно изменить предел для числа подключений для протоколов HTTP 1.0 и HTTP 1.1. Если используется в среде сервера (ASP.NET) по умолчанию используется свойство DefaultConnectionLimit большое число подключений, — 10."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "Максимальное число одновременных подключений, разрешенное <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекта. Значение по умолчанию — 2. Когда приложение выполняется как узел ASP.NET, не удается изменить значение этого свойства в файле конфигурации, если свойство autoConfig имеет значение <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Тем не менее, можно изменить значение программно, если свойство autoConfig имеет <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Задайте нужное значение один раз, при загрузке AppDomain."
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Свойство DefaultConnectionLimit меньше или равно 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "По умолчанию количество непостоянных подключений (4) на <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объект подключен к серверу HTTP/1.0 или более поздней версии сервера. Это поле является константой, но больше не используется в платформе .NET Framework 2.0."
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "По умолчанию количество постоянных подключений (2) на <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объект подключен к серверу HTTP/1.1 или более поздней версии сервера. Это поле является константой и используется для инициализации <> </> *настроек свойства Если значение <> </> *настроек свойство не было задано напрямую или через конфигурацию."
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает значение, указывающее, как долго службы доменных имен (DNS) разрешение считается допустимым."
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "Значение времени ожидания в миллисекундах. Значение -1 указывает на бесконечное время ожидания. Значение по умолчанию — 120 000 миллисекунд (две минуты)."
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает значение, указывающее, происходит ли чередование допустимых адресов протокола IP (Internet) разрешении службы доменных имен (DNS)."
  remarks: "Если более чем один IP-адрес связан с именем узла, разрешение DNS обычно возвращает только первый IP-адрес. Если это свойство имеет значение `true`, то последующие разрешения DNS будет циклически доступных IP-адресов для определенного узла. Этот параметр полезен, если служба использует DNS в качестве механизма балансировки нагрузки между серверами или кластерами серверов."
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>Если разрешение DNS всегда возвращается первый IP-адрес определенного узла в противном случае <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;> </xref> для этого <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> экземпляра."
  remarks: "Если значение не указано в файле конфигурации, EncryptionPolicy свойство по умолчанию <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> Это применяется к сеансу SSL/TLS на этом <xref:System.Net.ServicePointManager>экземпляр.</xref:System.Net.ServicePointManager>       Использование шифра Null является обязательным, если политика шифрования задано значение <xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "Политика шифрования, используемый для данного <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> экземпляра."
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает <xref:System.Boolean>значение, определяющее, является ли 100-продолжить использовать поведение.</xref:System.Boolean>"
  remarks: "Если значение этого свойства `true`, 100-продолжить использовать поведение. Клиент запрашивает, использующих `PUT` и `POST` методов будет добавить в заголовке Expect запрос если свойство Expect100Continue `true` и <xref:System.Net.HttpWebRequest.ContentLength%2A>свойство больше нуля или <xref:System.Net.HttpWebRequest.SendChunked%2A>имеет значение true.</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> Клиент будет ожидать получение 100-продолжения ответа от сервера, чтобы указать, что клиент должен отправить данные. Этот механизм позволяет клиентам избежать отправки больших объемов данных по сети, если сервер, основываясь на заголовках запроса планирует отклонить запрос.       Предположим, например, свойство Expect100Continue `false`. Если запрос отправлен на сервер, в нем содержатся данные. Если после прочтения заголовков запроса, сервер требует проверки подлинности и отправьте ответ 401, клиент должен повторно отправить данные с заголовками надлежащую проверку подлинности.       Если это свойство имеет `true`, заголовки запроса отправляются на сервер. Если сервер не отклонил запрос, он отправляет 100-продолжения ответа сигнализации передачи данных. Если, как в предыдущем примере, сервер требует проверки подлинности, он отправляет ответ 401 и клиент не отправляет данные без необходимости.       Изменение значения этого свойства не влияет на существующие <xref:System.Net.ServicePoint>объектов.</xref:System.Net.ServicePoint> Только новых <xref:System.Net.ServicePoint>затрагивает объекты, созданные после изменения.</xref:System.Net.ServicePoint>       100-продолжить, поведение не используется для запросов HTTP 1.0, даже если это свойство имеет значение `true`.       Ожидается 100-продолжить поведение полностью описаны в разделе IETF RFC 2616 10.1.1."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы включить 100-продолжить поведение. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Находит существующий <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объект или создает новый <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов для управления взаимодействиями с заданным <xref:System.Uri>объекта.</xref:System.Uri>"
  remarks: "Метод FindServicePoint возвращает <xref:System.Net.ServicePoint>объект, связанный с указанным имя узла в Интернете.</xref:System.Net.ServicePoint> Если не <xref:System.Net.ServicePoint>объект существует для этого узла <xref:System.Net.ServicePointManager>объект создает одно.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>Объект для связи с Интернет-ресурса.</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Объект, который управляет связью для запроса."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Максимальное число <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекты, определенные в <xref:System.Net.ServicePointManager.MaxServicePoints*>достигнуто.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Находит существующий <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объект или создает новый <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов для управления взаимодействиями с указанным универсальный идентификатор ресурса (URI)."
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>Возвращает <xref:System.Net.ServicePoint>объект, связанный с указанным имя узла в Интернете.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Если не <xref:System.Net.ServicePoint>объект существует для этого узла <xref:System.Net.ServicePointManager>объект создает одно.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "URI интернет-ресурса, с которыми необходимо связаться."
    - id: proxy
      type: System.Net.IWebProxy
      description: "Данные прокси-сервера для этого запроса."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Объект, который управляет связью для запроса."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "URI, заданный в <code> uriString </code> является недопустимым."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Максимальное число <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекты, определенные в <xref:System.Net.ServicePointManager.MaxServicePoints*>достигнуто.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Находит существующий <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объект или создает новый <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов для управления взаимодействиями с заданным <xref:System.Uri>объекта.</xref:System.Uri>"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>Возвращает <xref:System.Net.ServicePoint>объект, связанный с указанным имя узла в Интернете.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> Если не <xref:System.Net.ServicePoint>объект существует для этого узла <xref:System.Net.ServicePointManager>объект создает одно.</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "Объект <xref:System.Uri>, содержащий адрес Интернет-ресурса, обратитесь в службу.</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "Данные прокси-сервера для этого запроса."
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref> Объект, который управляет связью для запроса."
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Максимальное число <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекты, определенные в <xref:System.Net.ServicePointManager.MaxServicePoints*>достигнуто.</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает максимальное время простоя объекта <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекта."
  remarks: "Свойство MaxServicePointIdleTime задает максимальное время простоя <xref:System.Net.ServicePointManager>назначает объект <xref:System.Net.ServicePoint.MaxIdleTime%2A>при создании <xref:System.Net.ServicePoint>объектов.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> Изменения этого значения влияют только на <xref:System.Net.ServicePoint>объекты, которые инициализируются после изменения значения.</xref:System.Net.ServicePoint>       После <xref:System.Net.ServicePoint>объект был простоя в течение времени, указанного в <xref:System.Net.ServicePoint.MaxIdleTime%2A>, он подходит для сборки мусора.</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> Объект <xref:System.Net.ServicePoint>объект бездействует, когда список подключений, связанный с <xref:System.Net.ServicePoint>объект пуст.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "Максимальное время простоя, в миллисекундах, из <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объекта. Значение по умолчанию — 100 000 миллисекунд (100 секунд)."
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime — меньше, чем &lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt; или больше, чем &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает максимальное число <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов для сохранения в любое время."
  remarks: "Если при уменьшении свойство MaxServicePoints меньше числа <xref:System.Net.ServicePoint>объектов в настоящее время существования, <xref:System.Net.ServicePointManager>удаляет <xref:System.Net.ServicePoint>объектов с наибольшими временами бездействия.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> Если количество <xref:System.Net.ServicePoint>объектов с активными соединениями больше, чем значение MaxServicePoints, <xref:System.Net.ServicePointManager>объекта удалений <xref:System.Net.ServicePoint>объекты, как они становятся простаивающими.</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "Максимальное число <xref href=&quot;System.Net.ServicePoint&quot;> </xref> обслуживаемых объектов. Значение по умолчанию — 0, что означает неограниченное количество <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов."
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints меньше 0 или больше, чем &lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Задание этого значения свойства <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> заставляет все исходящие соединения TCP из HttpWebRequest использовать собственный параметр сокета SO_REUSE_UNICASTPORT в сокете. В этом случае базовых исходящих портов для совместного использования. Это полезно в сценариях, где большое количество исходящих подключений были сделаны в короткое время и приложение рискует запуститься без портов."
  remarks: "Значение по умолчанию — `false`."
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "Возвращает <xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает протокол безопасности, используемый <xref href=&quot;System.Net.ServicePoint&quot;> </xref> объектов, управляемых <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> объекта."
  remarks: "Это свойство выбирает версию протокола Secure Sockets Layer (SSL) или Transport Layer Security (TLS), для использования новых подключений, использующих схему защищенный гипертекстовый протокол (HTTPS) существующие соединения не изменяются.       Обратите внимание, что значение по умолчанию не указано для этого свойства, специально. Альбомная безопасности постоянно меняется и протоколов по умолчанию, и изменить уровни защиты по времени во избежание уязвимых мест. Значения по умолчанию зависит от конфигурации отдельного компьютера, и на какое программное обеспечение установлено, для которых были применены исправления.       Код должен зависят от никогда не неявно, уровень защиты, определенный с помощью, или на предположении, что определенный уровень безопасности используется по умолчанию. Если приложение зависит от использования уровня безопасности, необходимо явно указать этот уровень и проверьте, чтобы убедиться в том, что это действительно, используется в рамках установленного подключения. Кроме того код должны разрабатываться с быть надежными при изменениях, которые поддерживаются протоколы, таким образом часто изменяются с прямым уведомление для устранения возникающих угроз.       .NET Framework 4.6 включает средство безопасности, блокирует небезопасных шифрования и хэширования алгоритмы для подключений. Приложения с помощью TLS/SSL через API-интерфейсы, такие как HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, т. д. и предназначенных для .NET Framework 4.6 получить более надежные и безопасные поведение по умолчанию.       Разработчики имеют возможность отказаться от этого поведения для обеспечения взаимодействия с имеющиеся SSL3 услуги или TLS с служб RC4. [В этой статье](https://support.microsoft.com/kb/3069494) объясняется, как изменить код таким образом, чтобы отключить новое поведение."
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "Одно из значений, определенных в <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> перечисления."
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Значение, указанное для задания свойства не является допустимым <xref href=&quot;System.Net.SecurityProtocolType&quot;> </xref> значение перечисления."
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Возвращает или задает обратный вызов для проверки сертификата сервера."
  remarks: "Приложение может установить свойство ServerCertificateValidationCallback методу для пользовательской проверки клиентом сертификата сервера. При выполнении пользовательской проверки `sender` передан параметр <xref:System.Net.Security.RemoteCertificateValidationCallback>может быть именем узла строку или объект, производный от <xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>, например) в зависимости от <xref:System.Net.ServicePointManager.CertificatePolicy%2A>свойство.</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       Когда пользовательской проверки не используется, имя сертификата сравнивается с именем узла, используемый для создания запроса. Например если <xref:System.Net.WebRequest.Create%28System.String%29>был передан параметр «https://www.contoso.com/default.hmtl» — поведение по умолчанию для клиента для проверки сертификата с www.contoso.com.</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Включает или отключает параметр поддержания активности соединения TCP."
  remarks: "Приложение может запросить, что поставщик TCP/IP позволяют использовать пакетов поддержания активности соединения TCP. Значение по умолчанию — что отключено использование пакетов поддержания активности соединения TCP.       Параметры по умолчанию в сокета TCP инициализировать аут поддержания активности устанавливается до 2 часов, а интервал в 1 секунду. `keepAliveTime` Параметр задает время ожидания в миллисекундах при отсутствии активности до отправки первого пакета поддержания активности. `keepAliveInterval` Параметр задает интервал в миллисекундах между при последующих пакетов поддержания активности отправляются в том случае, если не получено подтверждение. Число проб активности нельзя изменить и равно 10.       Если подключение TCP удаляется в результате активность, <xref:System.Net.Sockets.SocketError>из <xref:System.Net.Sockets.SocketError>возвращается сокете, на какие вызовы выполняется и все последующие вызовы будут завершаться <xref:System.Net.Sockets.SocketError> <xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "Если задано значение true, а затем TCP параметр поддержания активности соединения TCP будет включен с помощью указанного `keepAliveTime` и `keepAliveInterval` значения.       Если задано значение false, затем параметр поддержания активности TCP отключен и остальные параметры игнорируются.       Значение по умолчанию — &quot;ложь&quot;."
    - id: keepAliveTime
      type: System.Int32
      description: "Указывает время ожидания в миллисекундах, при отсутствии активности до отправки первого пакета поддержания активности.       Значение должно быть больше 0.  Если передается значение меньше или равно нулю <xref:System.ArgumentOutOfRangeException>возникает исключение.</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "Задает интервал (в миллисекундах) между последовательными пакеты проверки активности отправляются в том случае, если не получено подтверждение.       Значение должно быть больше 0.  Если передается значение меньше или равно нулю <xref:System.ArgumentOutOfRangeException>возникает исключение.</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Значение, указанное для <code> keepAliveTime </code> или <code> keepAliveInterval </code> меньше или равно 0."
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Определяет, используется ли алгоритм Nagle точками обслуживания, управляемого этим <xref href=&quot;System.Net.ServicePointManager&quot;> </xref> объекта."
  remarks: "Алгоритм Nagle используется для уменьшения сетевого трафика путем буферизации небольших пакетов данных и передачи их в виде одного пакета. Этот процесс также называется «уменьшает»; Он широко используется, так как он уменьшает количество передаваемых пакетов и снижает затраты времени на пакет.       Изменение значения этого свойства не влияет на существующие <xref:System.Net.ServicePoint>объектов.</xref:System.Net.ServicePoint> Затрагиваются только новые точки обслуживания, созданные после изменения.       Алгоритм Nagle полностью описаны в IETF RFC 896."
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для использования алгоритма Nagle; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
