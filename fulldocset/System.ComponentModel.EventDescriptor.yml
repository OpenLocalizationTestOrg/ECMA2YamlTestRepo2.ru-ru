### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.EventDescriptor
  id: EventDescriptor
  children:
  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  - System.ComponentModel.EventDescriptor.ComponentType
  - System.ComponentModel.EventDescriptor.EventType
  - System.ComponentModel.EventDescriptor.IsMulticast
  - System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  langs:
  - csharp
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
  type: Class
  summary: "Предоставляет сведения о событии."
  remarks: "Дескриптор события состоит из имени, его атрибуты, компонент, к которому привязан событие, делегат события, тип делегата, и является ли делегат многоадресной рассылки.       Дескриптор события предоставляет следующие `abstract` свойства и методы:- <xref:System.ComponentModel.EventDescriptor.ComponentType%2A>содержит тип компонента, это событие объявлено.</xref:System.ComponentModel.EventDescriptor.ComponentType%2A>      - <xref:System.ComponentModel.EventDescriptor.EventType%2A>содержит тип делегата для события.</xref:System.ComponentModel.EventDescriptor.EventType%2A>      - <xref:System.ComponentModel.EventDescriptor.IsMulticast%2A>содержит значение, показывающее, является ли делегат события многоадресным.</xref:System.ComponentModel.EventDescriptor.IsMulticast%2A>      - <xref:System.ComponentModel.EventDescriptor.AddEventHandler%2A>связывает событие компонента.</xref:System.ComponentModel.EventDescriptor.AddEventHandler%2A>      - <xref:System.ComponentModel.EventDescriptor.RemoveEventHandler%2A>разрывает связь делегата из компонента, чтобы делегат больше не получает события из компонента.</xref:System.ComponentModel.EventDescriptor.RemoveEventHandler%2A>       Дополнительные сведения о событиях см. в разделе [NIB: при возникновении события](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2). Дополнительные сведения об отражении см. в разделах в [отражения](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example is built upon the example in the <xref:System.ComponentModel.EventDescriptorCollection> class. It prints the information (category, description, and display name) of each event on a button in a text box. It requires that `button1` and `textbox1` have been instantiated on a form.  \n  \n [!code-cpp[EventDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._26_1.cpp)]\n [!code-cs[EventDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._26_1.cs)]\n [!code-vb[EventDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._26_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class EventDescriptor : System.ComponentModel.MemberDescriptor
  inheritance:
  - System.Object
  - System.ComponentModel.MemberDescriptor
  implements: []
  inheritedMembers:
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.Equals(System.Object)
  - System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetHashCode
  - System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(MemberDescriptor)
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> класс с именем и атрибутами в указанном <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>."
  syntax:
    content: protected EventDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> , содержащее имя события и его атрибуты."
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(MemberDescriptor,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> класс с именем в указанном <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> и атрибутами в <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> и <xref:System.Attribute>массива.</xref:System.Attribute>"
  remarks: "Этот конструктор добавляет атрибуты в <xref:System.Attribute>массиве с атрибутами в <xref:System.ComponentModel.MemberDescriptor>.</xref:System.ComponentModel.MemberDescriptor> </xref:System.Attribute>"
  syntax:
    content: protected EventDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "Объект <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref> с именем элемента и его атрибуты."
    - id: attrs
      type: System.Attribute[]
      description: "<xref:System.Attribute>Массива с атрибутами, которые нужно добавить в описание этого события.</xref:System.Attribute>"
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventDescriptor(String,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(String,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref> класс с указанным именем и массив атрибутов."
  syntax:
    content: protected EventDescriptor (string name, Attribute[] attrs);
    parameters:
    - id: name
      type: System.String
      description: "Имя события."
    - id: attrs
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>, содержащий атрибуты события.</xref:System.Attribute>"
  overload: System.ComponentModel.EventDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  id: AddEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: AddEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.AddEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.AddEventHandler(Object,Delegate)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе связывает событие в компонент."
  remarks: "Как правило этот метод реализуется с помощью отражения. Дополнительные сведения об отражении см. в разделах в [отражения](~/add/includes/ajax-current-ext-md.md).       Дополнительные сведения о делегатах см. в разделе [NIB: события и делегаты](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  syntax:
    content: public abstract void AddEventHandler (object component, Delegate value);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, который предоставляет события делегату."
    - id: value
      type: System.Delegate
      description: "Делегат, который представляет метод, обрабатывающий событие."
  overload: System.ComponentModel.EventDescriptor.AddEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.ComponentType
  id: ComponentType
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
  fullName: System.ComponentModel.EventDescriptor.ComponentType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе возвращает тип компонента, с которым связано это событие."
  remarks: "Как правило это свойство реализуется с помощью отражения."
  syntax:
    content: public abstract Type ComponentType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип компонента, связано событие.</xref:System.Type>"
  overload: System.ComponentModel.EventDescriptor.ComponentType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.EventType
  id: EventType
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: EventType
  nameWithType: EventDescriptor.EventType
  fullName: System.ComponentModel.EventDescriptor.EventType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе получает тип делегата для события."
  remarks: "Как правило это свойство реализуется с помощью отражения."
  syntax:
    content: public abstract Type EventType { get; }
    return:
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип делегата для события.</xref:System.Type>"
  overload: System.ComponentModel.EventDescriptor.EventType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.IsMulticast
  id: IsMulticast
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
  fullName: System.ComponentModel.EventDescriptor.IsMulticast
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе получает значение, указывающее, является ли делегат события многоадресной рассылки."
  remarks: "Как правило это свойство реализуется с помощью отражения.       Делегат многоадресной рассылки отличается от обычного заключается в том, что он может содержать ссылки на более чем на один метод. Методы в групповой делегат, выполняются синхронно при вызове делегата, в том порядке, в котором они отображаются. Если для одного из вызванных методов возникает исключение, делегат прекращает обработку, и исключение передается в вызывающий делегат объект."
  syntax:
    content: public abstract bool IsMulticast { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если делегат является многоадресным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.EventDescriptor.IsMulticast*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  id: RemoveEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  langs:
  - csharp
  name: RemoveEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.RemoveEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.RemoveEventHandler(Object,Delegate)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "При переопределении в производном классе отменяет привязку делегата с компонентом, чтобы делегат больше не будет получать события из компонента."
  remarks: "Как правило этот метод реализуется с помощью отражения. Дополнительные сведения см. в разделах в [отражения](~/add/includes/ajax-current-ext-md.md).       Дополнительные сведения о делегатах см. в разделе [NIB: события и делегаты](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)."
  syntax:
    content: public abstract void RemoveEventHandler (object component, Delegate value);
    parameters:
    - id: component
      type: System.Object
      description: "Компонент, к которому привязан делегат."
    - id: value
      type: System.Delegate
      description: "Делегат, для отмены привязки из компонента."
  overload: System.ComponentModel.EventDescriptor.RemoveEventHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: System.ComponentModel.MemberDescriptor
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(MemberDescriptor)
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor)
- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(MemberDescriptor,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor(String,Attribute[])
  nameWithType: EventDescriptor.EventDescriptor(String,Attribute[])
  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(String,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: AddEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.AddEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.AddEventHandler(Object,Delegate)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.ComponentModel.EventDescriptor.ComponentType
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
  fullName: System.ComponentModel.EventDescriptor.ComponentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.EventDescriptor.EventType
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventType
  nameWithType: EventDescriptor.EventType
  fullName: System.ComponentModel.EventDescriptor.EventType
- uid: System.ComponentModel.EventDescriptor.IsMulticast
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
  fullName: System.ComponentModel.EventDescriptor.IsMulticast
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: RemoveEventHandler(Object,Delegate)
  nameWithType: EventDescriptor.RemoveEventHandler(Object,Delegate)
  fullName: System.ComponentModel.EventDescriptor.RemoveEventHandler(Object,Delegate)
- uid: System.ComponentModel.EventDescriptor.#ctor*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor.EventDescriptor
- uid: System.ComponentModel.EventDescriptor.AddEventHandler*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: AddEventHandler
  nameWithType: EventDescriptor.AddEventHandler
- uid: System.ComponentModel.EventDescriptor.ComponentType*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: EventDescriptor.ComponentType
- uid: System.ComponentModel.EventDescriptor.EventType*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: EventType
  nameWithType: EventDescriptor.EventType
- uid: System.ComponentModel.EventDescriptor.IsMulticast*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: IsMulticast
  nameWithType: EventDescriptor.IsMulticast
- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler*
  parent: System.ComponentModel.EventDescriptor
  isExternal: false
  name: RemoveEventHandler
  nameWithType: EventDescriptor.RemoveEventHandler
