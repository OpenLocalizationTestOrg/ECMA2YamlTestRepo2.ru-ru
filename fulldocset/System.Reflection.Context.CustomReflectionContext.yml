### YamlMime:ManagedReference
items:
- uid: System.Reflection.Context.CustomReflectionContext
  id: CustomReflectionContext
  children:
  - System.Reflection.Context.CustomReflectionContext.#ctor
  - System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  name: CustomReflectionContext
  nameWithType: CustomReflectionContext
  fullName: System.Reflection.Context.CustomReflectionContext
  type: Class
  summary: "Представляет настраиваемый контекст отражения."
  remarks: "CustomReflectionContext предоставляет способ для добавления или удаления настраиваемых атрибутов из объектов отражения или добавить фиктивные свойства этих объектов без повторной реализации модели завершения отражения. Значение по умолчанию CustomReflectionContext просто создает оболочку для объектов отражения без внесения изменений, но создание подклассов и переопределение необходимые методы, можно добавить, удалить, или изменить атрибуты, которые относятся к любому отраженного параметра или члену или добавления новых свойств отраженный тип.       Например предположим, что код соответствует соглашению применения атрибута к методам фабрики, но теперь требуется для работы с кодом сторонних разработчиков, не имеет атрибутов. Чтобы задать правило для идентификации объектов, которые должны иметь атрибуты и укажите объекты с этими атрибутами, при просмотре в коде можно использовать CustomReflectionContext.       Для эффективного использования CustomReflectionContext код, который использует отраженные объекты должны поддерживать понятие указав контекст отражения, вместо, предполагая, что все объекты отраженный связаны с контекст отражения среды выполнения. Многие методы отражение в .NET Framework предоставляют <xref:System.Reflection.ReflectionContext>параметр для этой цели.</xref:System.Reflection.ReflectionContext>       Чтобы изменить атрибуты, которые применяются к отраженного параметра или члена, переопределите <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29>или <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29>метод.</xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29> </xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29> Эти методы принимают отраженный объект и список атрибутов в текущем контексте отражения и возвращают список атрибутов, которые должны быть в контексте пользовательской отражения.      Настроек [!WARNING] настроек CustomReflectionContext методы должны не получить доступ к списку атрибутов отраженный объект или метод непосредственно, путем вызова <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>метод в предоставленном <xref:System.Reflection.MemberInfo>или <xref:System.Reflection.ParameterInfo>экземпляра, но вместо этого следует использовать `declaredAttributes` список, который передается в качестве параметра <xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A>перегруженных версий метода.</xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MemberInfo> </xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>       Добавление свойства отраженный тип переопределения <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>метод.</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> Метод принимает параметр, который указывает, отраженный тип и возвращает список дополнительных свойств. Следует использовать <xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>метод для создания объектов свойства для возвращения.</xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A> Делегаты можно указать, когда создание свойство, которое будет использоваться в качестве метода доступа свойства, можно опустить одного из методов доступа, чтобы создать свойство только для чтения или только для записи. Обратите внимание, что таких свойств не имеют метаданных или резервное копирование общих промежуточного языка (CIL).      Настроек [!WARNING] настроек следует осторожно равенство между объектами отражаются при работе с контексты отражения объектов может представлять объект того же отражаются в нескольких контекстах. Можно использовать <xref:System.Reflection.Context.CustomReflectionContext.MapType%2A>метод, чтобы получить контекст конкретного отражения версию объекта отраженный.</xref:System.Reflection.Context.CustomReflectionContext.MapType%2A>      Настроек [!WARNING] настроек объект CustomReflectionContext изменяет атрибуты, возвращаемые объектом определенного отражения, например идентификаторами, полученными при <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>метод.</xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> Не изменяет пользовательский атрибут данные, возвращенные <xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A>метод и эти два списка не будет соответствовать при использовании контекст отражения пользовательского.</xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A>"
  example:
  - "The following example demonstrates how to subclass  CustomReflectionContext to add a custom attribute to all the members of a given type whose names begin with \"To\". To run this code, paste it into an empty console project, and make sure to include a reference to System.Reflection.Context.dll.  \n  \n [!code-cs[System.Reflection.Context.CustomReflectionContext#1](~/add/codesnippet/csharp/system.reflection.context.customreflectioncontext.consoleapplication1/program.cs#1)]"
  syntax:
    content: 'public abstract class CustomReflectionContext : System.Reflection.ReflectionContext'
  inheritance:
  - System.Reflection.ReflectionContext
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CustomReflectionContext()
  nameWithType: CustomReflectionContext.CustomReflectionContext()
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
  type: Constructor
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Reflection.Context.CustomReflectionContext&quot;> </xref> класса."
  syntax:
    content: protected CustomReflectionContext ();
    parameters: []
  overload: System.Reflection.Context.CustomReflectionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  id: '#ctor(System.Reflection.ReflectionContext)'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CustomReflectionContext(ReflectionContext)
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  type: Constructor
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Reflection.Context.CustomReflectionContext&quot;> </xref> класса с использованием контекста указанной отражения в качестве базы."
  syntax:
    content: protected CustomReflectionContext (System.Reflection.ReflectionContext source);
    parameters:
    - id: source
      type: System.Reflection.ReflectionContext
      description: "Контекст отражения для использования в качестве базового."
  overload: System.Reflection.Context.CustomReflectionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  id: AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: AddProperties(Type)
  nameWithType: CustomReflectionContext.AddProperties(Type)
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(Type)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "При переопределении в производном классе предоставляет коллекцию дополнительных свойств для указанного типа, представленного в данном контексте отражения."
  remarks: "Переопределите этот метод, чтобы указать, какие свойства должны быть добавлены в заданный тип. Для создания свойств используется <xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>метод.</xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> AddProperties (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Тип для добавления свойств."
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "Коллекция дополнительных свойств для указанного типа."
  overload: System.Reflection.Context.CustomReflectionContext.AddProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Создает объект, представляющий свойство, чтобы добавить к типу, для использования с <xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>метод.</xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>"
  remarks: "Объекты, возвращаемые этим методом, не являются полными <xref:System.Reflection.PropertyInfo>объектов и должен использоваться только в контексте <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>метод.</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> </xref:System.Reflection.PropertyInfo>"
  syntax:
    content: protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func<object,object> getter, Action<object,object> setter);
    parameters:
    - id: propertyType
      type: System.Type
      description: "Тип свойства."
    - id: name
      type: System.String
      description: "Имя свойства для создания."
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "Объект, представляющий свойство <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "Объект, представляющий свойство <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метода доступа."
    return:
      type: System.Reflection.PropertyInfo
      description: "Объект, представляющий свойство."
  overload: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Создает объект, представляющий свойство, чтобы добавить к типу, для использования с <xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>и использованием указанными настраиваемыми атрибутами.</xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>"
  remarks: "Объекты, возвращаемые этим методом, не являются полными <xref:System.Reflection.PropertyInfo>объектов и должен использоваться только в контексте <xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>метод.</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A> </xref:System.Reflection.PropertyInfo>"
  syntax:
    content: protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func<object,object> getter, Action<object,object> setter, System.Collections.Generic.IEnumerable<Attribute> propertyCustomAttributes, System.Collections.Generic.IEnumerable<Attribute> getterCustomAttributes, System.Collections.Generic.IEnumerable<Attribute> setterCustomAttributes);
    parameters:
    - id: propertyType
      type: System.Type
      description: "Тип свойства."
    - id: name
      type: System.String
      description: "Имя свойства для создания."
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "Объект, представляющий свойство <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "Объект, представляющий свойство <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метода доступа."
    - id: propertyCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "Коллекция настраиваемых атрибутов для применения к свойству."
    - id: getterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "Коллекция настраиваемых атрибутов для применения к свойству <xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;> </xref> метода доступа."
    - id: setterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "Коллекция настраиваемых атрибутов для применения к свойству <xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref> метода доступа."
    return:
      type: System.Reflection.PropertyInfo
      description: "Объект, представляющий свойство."
  overload: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "При переопределении в производном классе предоставляет список настраиваемых атрибутов для заданного члена, представленного в данном контексте отражения."
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "Член, настраиваемые атрибуты которого будут возвращены."
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Коллекция атрибутов члена в текущем контексте."
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Коллекция, представляющая настраиваемые атрибуты заданного члена в данном контексте отражения."
  overload: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "При переопределении в производном классе предоставляет список настраиваемых атрибутов для заданного параметра, представленного в данном контексте отражения."
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.ParameterInfo parameter, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: parameter
      type: System.Reflection.ParameterInfo
      description: "Параметр, настраиваемые атрибуты которого будут возвращены."
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Коллекция атрибутов параметра в текущем контексте."
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "Коллекция, представляющая настраиваемые атрибуты заданного параметра в данном контексте отражения."
  overload: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: MapAssembly(Assembly)
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(Assembly)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Возвращает представление, в данном контексте отражения сборки, представленного объектом из другого контекста отражения."
  syntax:
    content: public override System.Reflection.Assembly MapAssembly (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "Представление внешних сборок для представления в этом контексте."
    return:
      type: System.Reflection.Assembly
      description: "Представление сборки в данном контексте отражения."
  overload: System.Reflection.Context.CustomReflectionContext.MapAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: MapType(TypeInfo)
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(TypeInfo)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "Возвращает представление, в данном контексте отражения типа, представленного объектом из другого контекста отражения."
  syntax:
    content: public override System.Reflection.TypeInfo MapType (System.Reflection.TypeInfo type);
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "Внешнее представление типа, представляющий в данном контексте."
    return:
      type: System.Reflection.TypeInfo
      description: "Представление типа в данном контексте отражения."
  overload: System.Reflection.Context.CustomReflectionContext.MapType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.ReflectionContext
  isExternal: false
  name: System.Reflection.ReflectionContext
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext()
  nameWithType: CustomReflectionContext.CustomReflectionContext()
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext(ReflectionContext)
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(ReflectionContext)
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: AddProperties(Type)
  nameWithType: CustomReflectionContext.AddProperties(Type)
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(Type)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Reflection.PropertyInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.Object,System.Object}
  parent: System
  isExternal: true
  name: Func<Object,Object>
  nameWithType: Func<Object,Object>
  fullName: System.Func<System.Object,System.Object>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{System.Object,System.Object}
  parent: System
  isExternal: true
  name: Action<Object,Object>
  nameWithType: Action<Object,Object>
  fullName: System.Action<System.Object,System.Object>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
- uid: System.Collections.Generic.IEnumerable{System.Attribute}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Attribute>
  nameWithType: IEnumerable<Attribute>
  fullName: System.Collections.Generic.IEnumerable<System.Attribute>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Attribute>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapAssembly(Assembly)
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapType(TypeInfo)
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(TypeInfo)
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: true
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Context.CustomReflectionContext.#ctor*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext
  nameWithType: CustomReflectionContext.CustomReflectionContext
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: AddProperties
  nameWithType: CustomReflectionContext.AddProperties
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty
  nameWithType: CustomReflectionContext.CreateProperty
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes
  nameWithType: CustomReflectionContext.GetCustomAttributes
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapAssembly
  nameWithType: CustomReflectionContext.MapAssembly
- uid: System.Reflection.Context.CustomReflectionContext.MapType*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapType
  nameWithType: CustomReflectionContext.MapType
