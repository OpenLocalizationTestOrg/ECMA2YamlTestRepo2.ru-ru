### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  id: SafeRegistryHandle
  children:
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  langs:
  - csharp
  name: SafeRegistryHandle
  nameWithType: SafeRegistryHandle
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  type: Class
  summary: "Представляет безопасный дескриптор для реестра Windows."
  remarks: "Можно воспользоваться платформой вызывать на собственный `RegCreateKeyEx` Windows для получения объекта SafeRegistryHandle и затем использовать его для создания разделов реестра с <xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName>метод.</xref:Microsoft.Win32.RegistryKey.FromHandle%2A?displayProperty=fullName>      Настроек [!IMPORTANT] настроек этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A>метод в `try` / `catch` блока.</xref:System.IDisposable.Dispose%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public sealed class SafeRegistryHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  implements: []
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  langs:
  - csharp
  name: SafeRegistryHandle(IntPtr,Boolean)
  nameWithType: SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: "Инициализирует новый экземпляр <xref href=&quot;Microsoft.Win32.SafeHandles.SafeRegistryHandle&quot;> </xref> класса."
  remarks: "Указание `false` для `ownsHandle` не рекомендуется."
  syntax:
    content: public SafeRegistryHandle (IntPtr preexistingHandle, bool ownsHandle);
    parameters:
    - id: preexistingHandle
      type: System.IntPtr
      description: "Объект, представляющий ранее существующий дескриптор для использования."
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы надежно освободить дескриптор на стадии завершения; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> чтобы запретить надежное освобождение."
  overload: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafeRegistryHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle()
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: "Для добавления."
  overload: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor(System.IntPtr,System.Boolean)
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  isExternal: false
  name: SafeRegistryHandle(IntPtr,Boolean)
  nameWithType: SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(IntPtr,Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeRegistryHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle()
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  isExternal: false
  name: SafeRegistryHandle
  nameWithType: SafeRegistryHandle.SafeRegistryHandle
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle*
  parent: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafeRegistryHandle.ReleaseHandle
