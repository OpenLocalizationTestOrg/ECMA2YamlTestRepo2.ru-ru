### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement
  id: UIElement
  children:
  - System.Windows.UIElement.#ctor
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.UIElement.GetUIParentCore
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MeasureCore(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnCreateAutomationPeer
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  langs:
  - csharp
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
  type: Class
  summary: "Элементов пользовательского интерфейса — базовый класс для реализаций уровня ядра WPF, основаны [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] элементов и базовых характеристиках представления."
  remarks: "Элементов пользовательского интерфейса служит отправной точкой для характеристик структуры элементов, а также представляет виртуальные методы, которые производные классы могут переопределять, влияющие макета, визуализации поведение элемента и его дочерних элементов.       Большую часть входных данных и поведение для элементов фокусировки в целом также определяется в классе элементов пользовательского интерфейса. Сюда входят события клавиатуры, мыши и ввод от пера и свойства связанных состояния. Многие из этих событий перенаправленных событий и многие события ввода имеют оба восходящей маршрутизацией версии, а также туннелирования версию события. Такие парные события обычно представляют наибольший интерес для разработчиков элементов управления.       Также включает UIElement [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] , которые связаны с [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] модель событий, включая методы, которые могут вызывать указанные перенаправленных событий, которые получают данные из экземпляра элемента.       С точки зрения архитектуры элементов пользовательского интерфейса можно считать приблизительно эквивалентен дескриптора окна в [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)] программирования или на элемент [!INCLUDE[TLA#tla_dhtml](~/add/includes/tlasharptla-dhtml-md.md)] программирования. Элементов пользовательского интерфейса — это базовый элемент на уровне ядра WPF.       UIElement имеет следующие возможности, специально определенные с помощью класса элементов пользовательского интерфейса:-могут отображаться в виде дочернего элемента (элементов пользовательского интерфейса является производным от <xref:System.Windows.Media.Visual>, высокий уровень графики класс) — содержит логику, используемую для определения размеров и позиционирования возможных дочерних элементов для элементов пользовательского интерфейса (при интерпретации системой структуры) - может отвечать на действия пользователя (в том числе управлять где ввода направляются посредством обработки маршрутизации событий или маршрутизации команд) - перенаправленных событий, которые перемещаются по логическому дереву элементов может вызвать - поддерживает некоторые аспекты системы анимации <xref:System.Windows.FrameworkElement>класс реализация уровня инфраструктуры WPF, основана на элементов пользовательского интерфейса и добавляет конкретных взаимодействий с уровня структуры WPF.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Media.Visual> <xref:System.Windows.FrameworkElement>Добавляет и определяет следующие возможности: - структуры для конкретной среды дополнительные характеристики - поддержка обширные возможности отчетности метаданных по свойствам - реализацию класса определенных входных базовых классов и их присоединенных свойств или событий - поддержка стилей — поддержка дополнительной анимации, другой связанных классов <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement></xref:System.Windows.FrameworkElement> <xref:System.Windows.ContentElement>Класс реализует многие из тех же членов, как и элементов пользовательского интерфейса; различие между этими двумя классами должен им месте в общей модели содержимого.</xref:System.Windows.ContentElement> Как правило, UIElement производный класс определяет относительно жесткую модель содержимого, это означает, что существуют ограничения на какие элементы могут быть дочерние элементы в разметке. Может существовать возможность принимать менее строгий дочернее содержимое в UIElement, но эта емкость обычно централизуются в выделенных свойствах содержимого. Объект <xref:System.Windows.ContentElement>производного класса обычно не накладывает содержимого для поддержки сценариев, таких как документы формата потока.</xref:System.Windows.ContentElement>      настроек [!IMPORTANT] настроек <xref:System.Windows.UIElement.Visibility%2A>состояния влияет на обработку всех входных по этому элементу.</xref:System.Windows.UIElement.Visibility%2A> Элементы, которые не видны не участвуют в проверке нажатия и не принимают события ввода, даже если указатель мыши находится на границах, где бы элемент Если были видны."
  syntax:
    content: >-
      [System.Windows.Markup.UidProperty("Uid")]

      public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  implements:
  - System.Windows.IInputElement
  - System.Windows.Media.Animation.IAnimatable
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.GetVisualChild(System.Int32)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualChildrenCount
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.UIElement.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.UIElement&quot;> </xref> класса."
  remarks: "Создание нового экземпляра, который имеет тип <xref:System.Windows.UIElement>обычно не в коде приложения, так как <xref:System.Windows.UIElement>является базовым элементом.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> В разделе [базовые элементы Обзор](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public UIElement ();
    parameters: []
  overload: System.Windows.UIElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента."
  remarks: "Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.       Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события."
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор для перенаправленного события для обработки."
    - id: handler
      type: System.Delegate
      description: "Ссылка на реализацию обработчика."
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет обработчик перенаправленного события для указанного маршрутизируемого события, помещая этот обработчик в коллекцию обработчиков текущего элемента. Укажите <code> handledEventsToo </code> как <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> чтобы предоставленный обработчик вызывался для перенаправленного события, которое уже было отмечено как обработанное другим элементом на маршруте события."
  remarks: "Обработка событий низкоуровневого ввода практическая является сложной задачей. Многие элементы управления реализуют поведение, определенное событие помечено как обработанное куда заменяется более интуитивным событием. Как правило элемент управления только отметит событие ввода платформы как обработанное при наличии намеренной таким образом. В некоторых сценариях желаемого возможно способа обработки входных событий. Он предназначен для этих сценариев, Регистрация обработчиков с `handledEventsToo` как `true` подходит. Однако не следует это регулярно. Вызов обработчиков в ответ на все события, даже в случае обработки усложнит собственную логику обработки событий в приложении. Снижение производительности могут появиться, если логику обработки является существенным. Необходимо зарезервировать использование присоединения обработчиков для уже обработанных событий для ситуаций, где были обнаружены в процессе разработки, некоторые элементы управления обработки событий, которые по-прежнему необходимо обработать с логикой приложения.       Предотвращение классов определенные сочетания элементов управления другим способом является использование события предварительного просмотра. Например если <xref:System.Windows.UIElement.MouseLeftButtonDown>помечено как обработанное обработкой классов, можно добавить обработчики для <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>вместо.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>       Можно добавить один и тот же обработчик для того же события несколько раз, не вызывая исключение. Тем не менее обработчик вызывается несколько раз, когда событие обрабатывается. Таким образом рассмотрим, как это поведение может иметь побочные эффекты, которые должны быть учтены в вашу реализацию обработчика.       Этот метод обычно используется для реализации метода доступа «добавить» для [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] шаблона доступа события пользовательского маршрутизируемого события."
  example:
  - "The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \n  \n [!code-cs[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/csharp/EventOvwSupport/page2.xaml.cs#addhandlerhandledtoo)]\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/add/codesnippet/visualbasic/eventovwsupport/page2.xaml.vb#addhandlerhandledtoo)]"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор для перенаправленного события для обработки."
    - id: handler
      type: System.Delegate
      description: "Ссылка на реализацию обработчика."
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для регистрации обработчика таким образом, чтобы он вызывался даже в том случае, если перенаправленное событие помечено как обработанное в его данных события. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для регистрации обработчика с условием по умолчанию, что он не будет вызван, если перенаправленное событие уже помечено как обработанное.       Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.       Не следует постоянно прибегать к повторной обработке перенаправленного события. Дополнительные сведения см. заметки."
  overload: System.Windows.UIElement.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Добавляет указанный обработчики <xref href=&quot;System.Windows.EventRoute&quot;> </xref> для текущего <xref href=&quot;System.Windows.UIElement&quot;> </xref> коллекции обработчиков событий."
  remarks: "Этот метод может использоваться элементами содержимого узла (либо те, которые реализуют <xref:System.Windows.IContentHost>или без них) для добавления обработчиков для дочерних элементов на <xref:System.Windows.EventRoute>.</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost> Как правило, это не является обязательным для <xref:System.Windows.UIElement>, так как обработчики автоматически добавляются для всех элементов, найденных в завершенном логическом дереве.</xref:System.Windows.UIElement> Однако в некоторых случаях где <xref:System.Windows.ContentElement>и <xref:System.Windows.UIElement>смешиваются в деревьях шаблонного промежуточные элементы, полученные из шаблона необходимость добавить маршрут.</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement> Оба <xref:System.Windows.ContentElement>и <xref:System.Windows.UIElement>поддерживает версию этого метода.</xref:System.Windows.UIElement> </xref:System.Windows.ContentElement>"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "Маршрут события, обработчики добавляются."
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Данные события, используемый для добавления обработчиков. Этот метод использует <xref:System.Windows.RoutedEventArgs.RoutedEvent*>Свойства данных для создания обработчиков событий.</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.UIElement.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, является ли этот элемент может использоваться как целевой объект операции перетаскивания и вставки.  Это свойство зависимостей."
  remarks: "Операции перетаскивания и вставки не включены по умолчанию и необходимо включить, задав значение AllowDrop намеренно `true`. Кроме данной базовой настройки, и перетащите поведение зависит от способа реализации и не определяется <xref:System.Windows.UIElement>или других класса. базовый элемент</xref:System.Windows.UIElement> Некоторые элементы управления, например, <xref:System.Windows.Controls.RichTextBox>, есть ли у поведение по умолчанию.</xref:System.Windows.Controls.RichTextBox> Дополнительные сведения об операции перетаскивания см. в разделе [Drop Обзор и перетащите](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.FrameworkElement>переопределяет метаданные для этого свойства зависимостей в своей реализации.</xref:System.Windows.FrameworkElement> В частности <xref:System.Windows.FrameworkElement>задает это свойство, чтобы разрешить наследование значения свойства (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> — `true` в метаданных).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> Наследование значения свойства в данном контексте означает, если дочерние элементы и не имеет значения для AllowDrop, назначенного с помощью локальных значений или стилей, значение ближайшего родительского элемента с назначенным данным значением (опять же, либо в стилях, с помощью значений по умолчанию или локальное значение), то значение родительского элемента будет назначен всем ранее неназначенным дочерним элементам системой свойств. На практике это означает, что можно указать, следует ли разрешить операции удаления в корневом элементе, и это значение будет распространено на все дочерние элементы, имеющие не было специально назначенный его как `false`.      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.AllowDropProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.AllowDropProperty>"
  example:
  - "The following markup example sets the AllowDrop property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in. For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/en-us/be90d645-dd61-4f53-93bb-87902d086ef7).  \n  \n [!code-xml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/add/codesnippet/xaml/dropopentextfile/window1.xaml#uielementallowdrop)]"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент может использоваться в качестве целевого объекта для операции перетаскивания и вставки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.AllowDrop*>свойство зависимостей.</xref:System.Windows.UIElement.AllowDrop*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Применяет анимацию к указанному свойству зависимостей для этого элемента. Все существующие анимации останавливаются и заменена новой анимацией."
  remarks: "Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска."
  example:
  - "In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling ApplyAnimationClock .  \n  \n [!code-cs[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/csharp/TimingBehavior_csharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]\n [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/add/codesnippet/visualbasic/timingbehavior_vb/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]"
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Идентификатор для свойства, для которого должна начаться анимация."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Таймер анимации, контролирующий и объявляющий анимацию."
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Применяет анимацию к указанному свойству зависимостей для этого элемента, с возможностью указать, что произойдет, если у свойства уже имеется запущенная анимация."
  remarks: "Чтобы удалить анимацию из свойства, укажите идентификатор для свойства в качестве `dp` и укажите `clock` как `null`. Это действие удаляет анимацию и анимированное свойство имеет значение к базовому значению. Тем не менее счетчик анимации не останавливается. Любая другая назначенная этим часам анимация будет продолжать запуска."
  syntax:
    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство."
    - id: clock
      type: System.Windows.Media.Animation.AnimationClock
      description: "Таймер анимации, контролирующий и объявляющий анимацию."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Значение перечисления. Значение по умолчанию — <xref href=&quot;System.Windows.Media.Animation.HandoffBehavior&quot;> </xref>, который останавливает все существующие анимации и заменить новым."
  overload: System.Windows.UIElement.ApplyAnimationClock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает значение, указывающее, захвачена ли к данному элементу по крайней мере одним касанием."
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один touch выделяется для этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.AreAnyTouchesCaptured*>свойство зависимостей.</xref:System.Windows.UIElement.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает значение, указывающее, захвачена ли хотя бы одна операция сенсорного ввода для этого элемента или для всех дочерних элементов в визуальном дереве."
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один touch выделяется для этого элемента или дочерние элементы в визуальном дереве; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>свойство зависимостей.</xref:System.Windows.UIElement.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, нажата ли хотя бы одним касанием над данным элементом."
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если по крайней мере один сенсорное нажатие этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>свойство зависимостей.</xref:System.Windows.UIElement.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, нажата ли хотя бы одним касанием данного элемента или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если хотя бы одно сенсорное нажатие данного элемента или дочерние элементы в визуальном дереве; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.AreAnyTouchesOver*>свойство зависимостей.</xref:System.Windows.UIElement.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  id: Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Размещает дочерние элементы и определяет размер для <xref href=&quot;System.Windows.UIElement&quot;> </xref>. Родительские элементы вызывают этот метод из своей <xref:System.Windows.UIElement.ArrangeCore*>реализацию (или эквивалента уровня инфраструктуры WPF) для формирования рекурсивного обновление макета.</xref:System.Windows.UIElement.ArrangeCore*> Этот метод образует второй проход обновления макета."
  remarks: "Для элемента уровня платформы WPF сценариям произведения, поведение для размещения не должны и невозможно, если скрытии изменить. Вместо этого необходимо переопределить <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>реализацию вашего класса.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> Ваш <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>Реализация вызывается внутри размещения как часть операций структуры уровня платформы WPF по умолчанию.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> Ваш <xref:System.Windows.UIElement.ArrangeCore%2A>реализации должен также вызывать <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>для каждого дочернего элемента, если он содержит дочерние элементы.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> </xref:System.Windows.UIElement.ArrangeCore%2A>       Для сценариев наследование элемента уровня ядра WPF, поведение для размещения не должны и невозможно, если скрытии изменить. Вместо этого следует переопределить <xref:System.Windows.UIElement.ArrangeCore%2A>вашего класса.</xref:System.Windows.UIElement.ArrangeCore%2A> Ваш <xref:System.Windows.UIElement.ArrangeCore%2A>Реализация вызывается внутри размещения как часть операций структуры уровня платформы WPF по умолчанию.</xref:System.Windows.UIElement.ArrangeCore%2A> Тем не менее это предполагает, что вы используете макет уровня платформы WPF и его система макета, так как это часто не в случае если вы специально производный элементы уровня ядра WPF от <xref:System.Windows.UIElement>базового элемента класса.</xref:System.Windows.UIElement> Ваш <xref:System.Windows.UIElement.ArrangeCore%2A>реализации должен также вызывать расположение для каждого дочернего элемента, если он содержит дочерние элементы.</xref:System.Windows.UIElement.ArrangeCore%2A> Примечание сценария уровня ядра WPF подразумевает, что вы используете не <xref:System.Windows.FrameworkElement>производного класса, поскольку <xref:System.Windows.FrameworkElement>печати <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.</xref:System.Windows.FrameworkElement.ArrangeCore%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       Расположение макета уровня платформы WPF, в вычисление [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] состоит из <xref:System.Windows.UIElement.Measure%2A>вызова и вызова расположение.</xref:System.Windows.UIElement.Measure%2A> Во время <xref:System.Windows.UIElement.Measure%2A>вызов, система макета определяет требования к размеру элемента, используя предоставленную <xref:System.Windows.Size>(`availableSize`) аргумент.</xref:System.Windows.Size> </xref:System.Windows.UIElement.Measure%2A> Во время вызова упорядочить система макета завершает размер и положение ограничивающего прямоугольника элемента.  Дополнительные сведения см. в разделе [макета](~/add/includes/ajax-current-ext-md.md).       `availableSize`может быть любое целое число от нуля до бесконечности. Элементы должны размещаться вернуть минимальное значение <xref:System.Windows.Size>ими через `availableSize` параметр.</xref:System.Windows.Size>       При создании макета она всегда получает <xref:System.Windows.UIElement.Measure%2A>вызывать перед расположение.</xref:System.Windows.UIElement.Measure%2A> Однако после первого прохода разметки, он может появиться вызова расположение без <xref:System.Windows.UIElement.Measure%2A>Это может происходить при изменении свойства, влияющие только расположение (например, выравнивание), или когда родительский Получает расположение без <xref:System.Windows.UIElement.Measure%2A>.</xref:System.Windows.UIElement.Measure%2A> </xref:System.Windows.UIElement.Measure%2A> Объект <xref:System.Windows.UIElement.Measure%2A>вызова автоматически сделает вызов расположение.</xref:System.Windows.UIElement.Measure%2A>       Обновления структуры обычно происходят асинхронно (во времени, определяемую системой макета). Элемент не может немедленно отражаются изменения свойств, которые влияют на изменение размера элемента (например, <xref:System.Windows.FrameworkElement.Width%2A>).</xref:System.Windows.FrameworkElement.Width%2A>      Настроек [!NOTE] настроек обновления макета можно выполнить принудительно с помощью <xref:System.Windows.UIElement.UpdateLayout%2A>метода; тем не менее, вызов этой функции не рекомендуется, поскольку он обычно нет необходимости и может привести к снижению производительности.</xref:System.Windows.UIElement.UpdateLayout%2A> Во многих случаях, когда вызов <xref:System.Windows.UIElement.UpdateLayout%2A>может быть целесообразным, система макета, вероятно, уже быть обработки обновлений.</xref:System.Windows.UIElement.UpdateLayout%2A> Система макета может обрабатывать изменения структуры таким образом, можно оптимизировать все необходимые обновления как часть пакета.       Система макета отслеживает двух отдельных очередей недопустимый макетов, один для <xref:System.Windows.UIElement.Measure%2A>и один для размещения.</xref:System.Windows.UIElement.Measure%2A> Очередь структур сортируется порядок элементов в визуальном дереве. Элементы, расположенные выше в дереве находились вверху очереди, во избежание избыточного структурирования повторяющихся изменений в родительских объектов. Дублирующиеся записи автоматически удаляются из очереди, а элементы автоматически удаляются из очереди, если они уже являются допустимыми.       При обновлении макета, <xref:System.Windows.UIElement.Measure%2A>освобождения очереди во-первых, следуют расположение очереди.</xref:System.Windows.UIElement.Measure%2A> Никогда не будут расположены элемента в расположение очереди, если элемент в <xref:System.Windows.UIElement.Measure%2A>очереди.</xref:System.Windows.UIElement.Measure%2A>"
  syntax:
    content: public void Arrange (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "Окончательный размер, вычисляемый родительским элементом для дочернего элемента, представленного как <xref href=&quot;System.Windows.Rect&quot;> </xref> экземпляра."
  overload: System.Windows.UIElement.Arrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  id: ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Определяет шаблон для определения макета упорядочивания WPF уровня ядра."
  remarks: >-
    > [!NOTE]

    >  Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.
  example:
  - "ArrangeCore implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation. The logic for the reconciliation aspect of a ArrangeCore implementation might vary, depending on the layout characteristics of your element. In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.  \n  \n [!code-cs[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementarrangeoverride)]\n [!code-vb[CorePseudocode#UIElementArrangeOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementarrangeoverride)]"
  syntax:
    content: protected virtual void ArrangeCore (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "Итоговая область в родительском элементе, этот элемент должен использовать для размещения себя и своих дочерних элементов."
  overload: System.Windows.UIElement.ArrangeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Запускает анимацию для указанного свойства данного элемента."
  remarks: "При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.       Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>для `animation` — `null`, любые текущие анимации будут удалены и текущее значение свойства удерживается.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска."
  example:
  - "The following example creates an animation, assigns it, and then calls BeginAnimation to start it.  \n  \n [!code-cs[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#beginanimation)]\n [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#beginanimation)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство, указанное как идентификатор свойства зависимостей."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Временная шкала должна начинаться анимация."
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Запускает указанную анимацию для указанного свойства данного элемента, с параметром, указывающим, что произойдет, если у свойства уже имеется запущенная анимация."
  remarks: "При возвращении анимировано ли свойство, обратите внимание, что анимация начнется считаться анимации при отображении первый кадр отправной точкой, без анимации.       Если <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>для `animation` — `null`, любые текущие анимации будут удалены и текущее значение свойства удерживается.</xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>       Если вся `animation` значение `null`, все анимации будут удалены из свойства, и свойство возвращается к базовому значению. Однако график анимации не останавливается. Любая другая назначенная этой шкале анимация будет продолжать запуска."
  example:
  - "The following example implements a handler that obtains an existing animation from a resource and then calls BeginAnimation with a specified handoff behavior.  \n  \n [!code-cs[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/csharp/BrushesIntroduction.BrushesIntroduction/SampleViewer.xaml.cs#beginanimationhandoff)]\n [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/add/codesnippet/visualbasic/brushesintroduction/sampleviewer.xaml.vb#beginanimationhandoff)]"
  syntax:
    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Анимируемое свойство, заданное в качестве идентификатора свойства зависимости."
    - id: animation
      type: System.Windows.Media.Animation.AnimationTimeline
      description: "Временная шкала для применения анимации."
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "Значение перечисления, которое указывает, как новая анимация взаимодействует с любыми текущими анимациями, которые уже влияют на значение свойства."
  overload: System.Windows.UIElement.BeginAnimation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffect
  id: BitmapEffect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает эффект растрового изображения, который применяется непосредственно к отображаемому содержимому этого элемента.  Это свойство зависимостей."
  remarks: "<xref:System.Windows.Media.Effects.BitmapEffect>является абстрактным типом, поэтому [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] использования требуется реализованный класс, производный от <xref:System.Windows.Media.Effects.BitmapEffect>, например <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>.</xref:System.Windows.Media.Effects.OuterGlowBitmapEffect> </xref:System.Windows.Media.Effects.BitmapEffect></xref:System.Windows.Media.Effects.BitmapEffect> Обратите внимание, что один реализованный производной класс является типом коллекции, которая позволяет указать несколько последовательных <xref:System.Windows.Media.Effects.BitmapEffect>, используя синтаксис вложенных тегов.</xref:System.Windows.Media.Effects.BitmapEffect>       Нет существующих производный класс от <xref:System.Windows.Media.Effects.BitmapEffect>поддерживает преобразователь типов, поэтому [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] синтаксиса, используемого для этого свойства обычно является синтаксис элемента свойства.</xref:System.Windows.Media.Effects.BitmapEffect>      <a name=&quot;dependencyPropertyInfo_BitmapEffect&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.BitmapEffectProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.BitmapEffectProperty>"
  example:
  - "The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  \n  \n [!code-cs[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/add/codesnippet/csharp/EffectsGallery/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffect
      description: "Применяемый эффект точечного рисунка."
  overload: System.Windows.UIElement.BitmapEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInput
  id: BitmapEffectInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает входной источник эффект растрового изображения, который применяется непосредственно к отображаемому содержимому этого элемента.  Это свойство зависимостей."
  remarks: "<a name=&quot;dependencyPropertyInfo_BitmapEffectInput&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.BitmapEffectInputProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.BitmapEffectInputProperty>"
  syntax:
    content: public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }
    return:
      type: System.Windows.Media.Effects.BitmapEffectInput
      description: "Источник эффектов для точечных рисунков."
  overload: System.Windows.UIElement.BitmapEffectInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  id: BitmapEffectInputProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.BitmapEffectInput*>свойство зависимостей.</xref:System.Windows.UIElement.BitmapEffectInput*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.BitmapEffectProperty
  id: BitmapEffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.BitmapEffect*>свойство зависимостей.</xref:System.Windows.UIElement.BitmapEffect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheMode
  id: CacheMode
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает кэшированное представление <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: "Задайте для свойства CacheMode при необходимости для повышения производительности для содержимого, которое занимает много времени для подготовки к просмотру. Дополнительные сведения см. в разделе <xref:System.Windows.Media.BitmapCache>.</xref:System.Windows.Media.BitmapCache>"
  syntax:
    content: public System.Windows.Media.CacheMode CacheMode { get; set; }
    return:
      type: System.Windows.Media.CacheMode
      description: "Объект <xref href=&quot;System.Windows.Media.CacheMode&quot;> </xref> содержащий кэшированное представление <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  overload: System.Windows.UIElement.CacheMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CacheModeProperty
  id: CacheModeProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.CacheMode*>свойство зависимостей.</xref:System.Windows.UIElement.CacheMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CacheModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку принудительного захвата мыши данным элементом."
  remarks: "Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.UIElement.IsEnabled%2A>— `true` перед вызовом метода CaptureMouse.</xref:System.Windows.UIElement.IsEnabled%2A>       Если вызов возвращает CaptureMouse `true`, затем <xref:System.Windows.UIElement.IsMouseCaptured%2A>также `true`.</xref:System.Windows.UIElement.IsMouseCaptured%2A>       Если вызов возвращает CaptureMouse `true`, то <xref:System.Windows.UIElement.GotMouseCapture>и <xref:System.Windows.UIElement.IsMouseCapturedChanged>событий, с <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>событий данные выводятся как элемент, в котором вызывается метод CaptureMouse.</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.UIElement.IsMouseCapturedChanged> </xref:System.Windows.UIElement.GotMouseCapture> При попытке захвата, возможен конфликт с уже существующим захватом, особенно с относящимися к перетаскивания и вставки с помощью мыши.       Чтобы очистить захват мыши из всех элементов, вызовите <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>с `element` указанный параметр как `null`.</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>"
  example:
  - "The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если успешно захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку захвата пера данным элементом."
  remarks: "Реализация по умолчанию, на основании основным устройством пера всегда возвращает `true`. Тем не менее при расширении устройств ввода, которые обеспечивают реализацию устройств для системы ввода, имеется возможность создать систему с альтернативной реализацией перьевого устройства, могут возвращать разные результаты.       При захвате пера элементом, он получает ввод от пера, даже если перо находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.       Вызов этого метода вызывает базовый статический <xref:System.Windows.Input.Stylus>метод <xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> Поведение самого захвата реализуется с помощью реализации устройства пера active.       Для отслеживания, необходимо включить элемент. Проверьте ли <xref:System.Windows.UIElement.IsEnabled%2A>— `true` возвращают перед вызовом метода CaptureStylus.</xref:System.Windows.UIElement.IsEnabled%2A>       Если вызов возвращает CaptureStylus `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A>также `true`.</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если перо успешно захвачено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку принудительного получения операции сенсорного ввода для этого элемента."
  remarks: "Возвращает CaptureTouch `false` Если <xref:System.Windows.Input.TouchDevice>записывается в настоящее время в другой элемент.</xref:System.Windows.Input.TouchDevice>       Возвращает CaptureTouch `true`, то <xref:System.Windows.UIElement.GotTouchCapture>события.</xref:System.Windows.UIElement.GotTouchCapture>       Чтобы освободить записи одним нажатием из этого элемента, используйте <xref:System.Windows.UIElement.ReleaseTouchCapture%2A>метод и указать устройство сенсорного ввода для освобождения.</xref:System.Windows.UIElement.ReleaseTouchCapture%2A> Чтобы освободить все изменения из этого элемента, используйте <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>метод.</xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "Устройство для записи."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанная операция сенсорного ввода выделяется для этого элемента; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.Clip
  id: Clip
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает геометрию, используемую для определения контура содержимого элемента.  Это свойство зависимостей."
  remarks: "Элементы за пределами геометрии визуально усекаются при отображении. Геометрия не обязательно должна быть прямоугольной.      <a name=&quot;dependencyPropertyInfo_Clip&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ClipProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.ClipProperty>"
  example:
  - "This example shows how to define a framework element'sClipregion. To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry>to set the element's Clipproperty. Only the area that is within the region of the geometry will be visible.  \n  \n The following example shows an <xref:System.Windows.Controls.Image>element without a defined clip region. Because no clip region is defined, the entire image is displayed.  \n  \n [!code-xml[ClipPathExample#2](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#2)]  \n  \n ![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png \"An object before applying a clip region\")  \nImage with No Clip Region  \n  \n In the next example, an identical Image is created, except that it has a defined clip region. Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry>will be displayed.  \n  \n [!code-xml[ClipPathExample#4](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#4)]  \n  \n ![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG \"A clipped object\")  \nImage with an Elliptical Clip Region  \n  \n The following example shows how animate a framework element's Clip region. In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element. A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150). The animation starts playing after the image is loaded and repeats indefinitely.  \n  \n [!code-xml[ClipPathExample#5](~/add/codesnippet/xaml/ClipPathExample/ClipExample.xaml#5)]  \n  \n For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/en-us/83043a0b-f824-445f-9675-103280c5ca67)."
  syntax:
    content: public System.Windows.Media.Geometry Clip { get; set; }
    return:
      type: System.Windows.Media.Geometry
      description: "Геометрия, используемая для определения размеров области отсечения. Значение по умолчанию равно null, <xref href=&quot;System.Windows.Media.Geometry&quot;> </xref>."
  overload: System.Windows.UIElement.Clip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipProperty
  id: ClipProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Clip*>свойство зависимостей.</xref:System.Windows.UIElement.Clip*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBounds
  id: ClipToBounds
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, следует ли усечение содержимого этого элемента (или содержимого, поступающего из его дочерних элементов данного элемента) в соответствии с размерами содержащего его элемента.   Это свойство зависимостей."
  remarks: "Для дочерних элементов, значение ClipToBounds имеет другой эффект на макет поведения в зависимости от того, является ли высоты и ширины родительского элемента определяются <xref:System.Windows.FrameworkElement.Height%2A>/ <xref:System.Windows.FrameworkElement.Width%2A>или <xref:System.Windows.FrameworkElement.MaxHeight%2A>/ <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> <xref:System.Windows.FrameworkElement.MaxHeight%2A>/ <xref:System.Windows.FrameworkElement.MaxWidth%2A>родительского элемента всегда учитывается независимо от значения значение ClipToBounds и эффективных вырезку всегда изменяет содержимое в зависимости от этих.</xref:System.Windows.FrameworkElement.MaxWidth%2A></xref:System.Windows.FrameworkElement.MaxHeight%2A> Родительский <xref:System.Windows.FrameworkElement.Height%2A>/ <xref:System.Windows.FrameworkElement.Width%2A>параметры не изменяет содержимое при значение ClipToBounds `false`, но будет усечение содержимого, если значение ClipToBounds `true`.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>       Обратите внимание, что по умолчанию принимается `false` является общее поведение, как он реализован в <xref:System.Windows.UIElement>классе.</xref:System.Windows.UIElement> Это возможно для любого заданного элемента, производного от <xref:System.Windows.UIElement>для переопределения метаданных свойства зависимостей для этого свойства в экземпляре по умолчанию `true` вместо.</xref:System.Windows.UIElement> Некоторые существующие производные классы переопределить эти метаданные и/или изменить значения по умолчанию для свойства зависимостей.       <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, и <xref:System.Windows.Controls.Primitives.Popup>каждого переопределить это значение по умолчанию должно быть `true`.</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Controls.InkPresenter></xref:System.Windows.Controls.InkCanvas>       <xref:System.Windows.FrameworkElement>переопределяет метаданные для этого свойства зависимостей.</xref:System.Windows.FrameworkElement> В частности <xref:System.Windows.FrameworkElement>задает это свойство, чтобы разрешить наследование значения свойства (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> — `true` в метаданных).</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> Наследование значения свойства в данном контексте означает, что если существуют дочерние элементы и не имеет значения для значение ClipToBounds, назначенного с помощью локальных значений или стилей, значение ближайшего родительского элемента с этим значением будет назначено (опять же, либо в стилях, с помощью значений по умолчанию или локального значения), а затем будет присвоено значение из родительского элемента Все неназначенные дочерним элементам системой свойств. На практике это означает, что можно указать, следует ли разрешить обрезать для границы в корневом элементе, и это значение будет распространено на все дочерние элементы, имеющие не было специально назначенный его как `false`.      <a name=&quot;dependencyPropertyInfo_ClipToBounds&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ClipToBoundsProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.ClipToBoundsProperty>"
  syntax:
    content: public bool ClipToBounds { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если содержимое должно быть обрезано; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.ClipToBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ClipToBoundsProperty
  id: ClipToBoundsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.ClipToBounds*>свойство зависимостей.</xref:System.Windows.UIElement.ClipToBounds*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.CommandBindings
  id: CommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает коллекцию <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> объекты, связанные с данным элементом. Объект <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> включает обработку команд для данного элемента и объявляет компоновку между командой, ее событиями и обработчиками, присоединяемыми этим элементом."
  remarks: "Другой способ заполнения коллекции поддержкой CommandBinding является использование <xref:System.Windows.Input.CommandManager>методы программным путем.</xref:System.Windows.Input.CommandManager>      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a>## Использование элемента свойства XAML ```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings     </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> ## значений XAML *oneOrMoreCommandBindings* один или несколько <xref:System.Windows.Input.CommandBinding>элементы.</xref:System.Windows.Input.CommandBinding>       Каждый из них должен иметь <xref:System.Windows.Input.CommandBinding.Command%2A>атрибут известной командой, и атрибуты устанавливаются для <xref:System.Windows.Input.CommandBinding.CanExecute>и <xref:System.Windows.Input.CommandBinding.Executed>реализаций обработчиков.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> Дополнительные сведения см. <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding>"
  example:
  - "The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup. Note that in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md).  \n  \n The following example does essentially the same thing in code:  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "Коллекция всех <xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref> объектов."
  overload: System.Windows.UIElement.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DesiredSize
  id: DesiredSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает размер, вычисленный этим элементом на этапе измерения процесса компоновки."
  remarks: "Значение, возвращаемое этим свойством только будет недопустимо, если значение <xref:System.Windows.UIElement.IsMeasureValid%2A>свойство `true`.</xref:System.Windows.UIElement.IsMeasureValid%2A>       Желаемый размер обычно проверяется как одним из факторов измерения при реализации поведения макета переопределяет, такие как <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, или <xref:System.Windows.UIElement.OnRender%2A>(в <xref:System.Windows.UIElement.OnRender%2A>случае можно проверить <xref:System.Windows.UIElement.RenderSize%2A>вместо этого, но это зависит от реализации).</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.UIElement.OnRender%2A> </xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement.ArrangeOverride%2A> В зависимости от сценария желаемый размер может полностью соблюдать логику реализации, могут применяться ограничения на желаемый размер и ограничения, может также изменить другие характеристики родительского элемента или дочернего элемента. Например элемент управления, который поддерживает прокручиваемые области (но не делает являются производными от управления уровня платформы WPF, которые уже позволяют прокручиваемые области) может сравнить доступный размер, чтобы желаемый размер. Элемент управления может затем устанавливать внутреннего состояния, включающее в [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] для этого элемента управления. Или, потенциально может DesiredSize также учитывается в некоторых сценариях."
  example:
  - "The following example shows DesiredSize as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation. Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining DesiredSize. This assures that DesiredSize holds a legitimate value.  \n  \n [!code-cs[PlotPanel#2](~/add/codesnippet/csharp/PlotPanel_csharp/PlotPanel.cs#2)]\n [!code-cpp[PlotPanel#2](~/add/codesnippet/cpp/plotpanel/PlotPanel.cpp#2)]\n [!code-vb[PlotPanel#2](~/add/codesnippet/visualbasic/PlotPanel/PlotPanel.vb#2)]"
  syntax:
    content: public System.Windows.Size DesiredSize { get; }
    return:
      type: System.Windows.Size
      description: "Вычисленный размер, который становится предпочтительным размером на этапе упорядочения."
  overload: System.Windows.UIElement.DesiredSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве цели перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragEnter часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> Обработчики событий, подключенные к событие DragEnter подключены к основному <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.DragEnterEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewDragEnter>.</xref:System.Windows.UIElement.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragEnterEvent>      -Переопределить <xref:System.Windows.UIElement.OnDragEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.DragEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragLeave часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию DragLeave присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.DragLeaveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.DragDrop.PreviewDragLeave>.</xref:System.Windows.DragDrop.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragLeaveEvent>      -Переопределить <xref:System.Windows.UIElement.OnDragLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.DragLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOver
  id: DragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели."
  remarks: "Это событие возникает, даже если источник перетаскивания находится в границах элемента. Если перетаскивание начинается за пределами границ, а затем перемещается, это событие также возникает, а также <xref:System.Windows.UIElement.DragEnter>и связанные события предварительного просмотра.</xref:System.Windows.UIElement.DragEnter>       Это событие создает псевдоним <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы DragOver часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> Обработчики событий, присоединенные к события DragOver присоединяются к базовому объекту <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_DragOver&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.DragOverEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.DragDrop.PreviewDragOver>.</xref:System.Windows.DragDrop.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DragOverEvent>      -Переопределить <xref:System.Windows.UIElement.OnDragOver%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.DragOver&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Drop
  id: Drop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве конечного расположения сброса."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>вложенное событие для этого класса, так что Drop входит в состав класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> Обработчики событий, подключенные к удалить событие подключены к основному <xref:System.Windows.DragDrop.Drop?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>      <a name=&quot;routedEventInfo_Drop&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.DropEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewDrop>.</xref:System.Windows.UIElement.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.DropEvent>      -Переопределить <xref:System.Windows.UIElement.OnDrop%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.DropEvent
  id: DropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.Drop&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Effect
  id: Effect
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает эффект растрового изображения, чтобы применить к <xref href=&quot;System.Windows.UIElement&quot;> </xref>. Это свойство зависимостей."
  remarks: "Используйте свойство эффект для применения эффекта для точечных рисунков на <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>      <a name=&quot;dependencyPropertyInfo_Effect&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.EffectProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.EffectProperty>"
  example:
  - "The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the Effect property.  \n  \n [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/add/codesnippet/xaml/ShaderEffectDemo/Window1.xaml#1000)]"
  syntax:
    content: public System.Windows.Media.Effects.Effect Effect { get; set; }
    return:
      type: System.Windows.Media.Effects.Effect
      description: "<xref href=&quot;System.Windows.Media.Effects.Effect&quot;> </xref> , Представляющий эффект растрового изображения."
  overload: System.Windows.UIElement.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.EffectProperty
  id: EffectProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Effect*>свойство зависимостей.</xref:System.Windows.UIElement.Effect*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty EffectProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focus
  id: Focus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимается попытка установить фокус на этом элементе."
  remarks: "Необходимо получить фокус, <xref:System.Windows.UIElement.Focusable%2A>и <xref:System.Windows.UIElement.IsEnabled%2A>должны быть `true`.</xref:System.Windows.UIElement.IsEnabled%2A> </xref:System.Windows.UIElement.Focusable%2A>       Даже если элемент является обработка событий может иметь фокус и включена, в составе определенного дерева, (например, для составного элемента управления) может реагировать на события предварительного просмотра фокуса фокус, так как не таким образом этот метод вернет `false`.       Фокус в общем случае характеризуется два разных понятия: фокус клавиатуры и логический фокус, которые не всегда совпадают.  Дополнительные сведения см. в разделе [фокус Обзор](~/add/includes/ajax-current-ext-md.md) или [фокусе](~/add/includes/ajax-current-ext-md.md).       Если вызов возвращает фокус `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A>и <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>также `true`.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement.IsKeyboardFocused%2A>       Если связанные свойства еще не `true`, при вызове фокус, один или несколько из следующих событий вызываются в следующем порядке: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>(источник — новый целевой фокус), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus>(источник — новый целевой фокус).</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> </xref:System.Windows.UIElement.IsKeyboardFocusedChanged> </xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.UIElement.PreviewLostKeyboardFocus>       В порядке для этого вызова для успешной работы другого элемента в приложении должны быть уже установлен фокус."
  example:
  - "The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.  \n  \n [!code-cs[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/csharp/CursorToEnd/Window1.xaml.cs#uielementfocus)]\n [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/add/codesnippet/visualbasic/CursorToEnd/Window1.xaml.vb#uielementfocus)]"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если фокус клавиатуры и логический фокус настроен для этого элемента; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> если только логический фокус было присвоено значение этого элемента, или вызов этого метода не привел к изменению фокуса."
  overload: System.Windows.UIElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Focusable
  id: Focusable
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, может ли элемент получать фокус.  Это свойство зависимостей."
  remarks: "Получать только элемент фокус ввода с клавиатуры.       Может иметь фокус — [!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)] доступа свойства для Какова на самом деле свойство зависимостей. Это свойство зависимостей конкретного довольно часто имеет значение «по умолчанию» по-разному в производных классах элементов, особенно в элементах управления. Это обычно происходит одним из двух способов: — свойство зависимостей наследуется от определенного производного класса, но этот производный класс переопределяет метаданные свойства зависимостей и изменяет значение свойства по умолчанию.      -Стиля или шаблона применяется к элементу, который устанавливает это значение свойства зависимостей по-разному.       Например, «по умолчанию» для Focusable для <xref:System.Windows.Controls.Button>элемент управления будет `true`, даже если <xref:System.Windows.Controls.Button>наследует Focusable как [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] свойство непосредственно из <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button> Это, поскольку значение примененных метаданных для свойства зависимостей может иметь фокус был переопределен в статическом конструкторе <xref:System.Windows.Controls.Control>базового класса, который располагается между <xref:System.Windows.Controls.Button>и <xref:System.Windows.UIElement>в иерархии классов.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Control>       Если наследуемые <xref:System.Windows.Controls.Control>или его производных классов <xref:System.Windows.Controls.Control>переопределяет значение по умолчанию этого свойства было `true`.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       При наследуются <xref:System.Windows.Controls.Label>(который является <xref:System.Windows.Controls.Control>производного класса), значение по умолчанию снова переопределен, чтобы быть `false`.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Label>      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.FocusableProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.FocusableProperty>"
  example:
  - "The following example code illustrates a control template for a particular custom control, which sets Focusable `false` on one of the elements within the template.  \n  \n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/richtextbox_noscrollviewer/window1.xaml#_controltemplate)]\n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/add/codesnippet/xaml/p-system.windows.uieleme_9_1.xaml)]"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данный элемент может иметь фокус; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, но см. примечания."
  overload: System.Windows.UIElement.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.Focusable*>изменения свойств.</xref:System.Windows.UIElement.Focusable*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Focusable*>свойство зависимостей.</xref:System.Windows.UIElement.Focusable*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  id: GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение базового свойства для указанного свойства данного элемента, без учета возможного анимированного значения из запущенной или остановленной анимации."
  remarks: "Если бы анимации не присоединялись к свойству, то возвращаемое значение GetAnimationBaseValue идентична всегда <xref:System.Windows.DependencyObject.GetValue%2A>возвращаемое значение.</xref:System.Windows.DependencyObject.GetValue%2A> Если прикреплена анимация, затем все возможные производные значения, включая начальные и остановки, игнорируются и значение свойства определяется в зависимости от всех других возможных входных значений. Дополнительные сведения см. в разделе [приоритет значения свойства зависимости](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.  \n  \n [!code-cs[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/csharp/TimingBehavior_csharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/add/codesnippet/visualbasic/timingbehavior_vb/getanimationbasevalueexample.vb#getanimationbasevalue)]"
  syntax:
    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Проверяемое свойство зависимостей."
    return:
      type: System.Object
      description: "Значение свойства, как если бы анимации не присоединялись к указанному свойству зависимостей."
  overload: System.Windows.UIElement.GetAnimationBaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  id: GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает альтернативную геометрию обрезки, представляющую область, которая будет отсечена, если <xref:System.Windows.UIElement.ClipToBounds*>было присвоено <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.ClipToBounds*>"
  remarks: "Реализация по умолчанию возвращает допустимое значение, но не использует `layoutSlotSize` параметр в вычислениях. Вместо этого он использует значение <xref:System.Windows.UIElement.RenderSize%2A>.</xref:System.Windows.UIElement.RenderSize%2A>       Большей части переопределить этот метод, немедленно производном <xref:System.Windows.FrameworkElement>класса и <xref:System.Windows.FrameworkElement>Переопределение создает более сложное поведение для общих элементов уровня платформы WPF.</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Дополнительные сведения см. в разделе <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.</xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);
    parameters:
    - id: layoutSlotSize
      type: System.Windows.Size
      description: "Доступный размер, предоставляемый элементом."
    return:
      type: System.Windows.Media.Geometry
      description: "Потенциальная геометрия обрезки."
  overload: System.Windows.UIElement.GetLayoutClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе, возвращает альтернативный [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] родительским для данного элемента, если существует визуального родительского объекта."
  remarks: "Виртуальная реализация по умолчанию этот метод возвращает `null`. <xref:System.Windows.FrameworkElement>предоставляет практической реализации.</xref:System.Windows.FrameworkElement>       Альтернативные родительские элементы используются для маршрутизации событий, в случаях, когда элемент создает альтернативную родительскую структуру, чтобы его события, в результате которого отличается от стандартного шаблона маршрутизации вверх по визуальному дереву родительскому элементу, или вниз к просмотру маршрутизации."
  syntax:
    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "Объект, если реализация производного класса имеет соединение альтернативный родительский отчет."
  overload: System.Windows.UIElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания и вставки, в котором участвует данный элемент."
  remarks: "Событие GiveFeedback позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки. Визуальную обратную связь для более глубокого, операции перетаскивания и вставки находится в процессе.       Это событие создает псевдоним <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>вложенное событие для этого класса, таким образом, GiveFeedback часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> Обработчики событий, присоединенные к событию GiveFeedback присоединяются к базовому объекту <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GiveFeedbackEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.GiveFeedbackEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewGiveFeedback>.</xref:System.Windows.UIElement.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.GiveFeedbackEvent>      -Переопределить <xref:System.Windows.UIElement.OnGiveFeedback%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GiveFeedback&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом логического фокуса."
  remarks: "Логический фокус отличается от фокуса, если он является результатом вызова метода, в на другом уровне существует предыдущий фокус клавиатуры. В этом случае фокус остается там, где это и элемент где <xref:System.Windows.UIElement.Focus%2A>вызывается метод по-прежнему возвращает логический фокус.</xref:System.Windows.UIElement.Focus%2A>       Точнее Интерпретация этого события является что он вызывается, когда значение <xref:System.Windows.UIElement.IsFocused%2A>Свойства элемента в маршруте изменяется с `false` для `true`.</xref:System.Windows.UIElement.IsFocused%2A>       Вследствие этого события восходящей маршрутизации, элемент, который получает фокус, может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, полученные фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_GotFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GotFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.RoutedEventHandler>|      -Нет соответствующего события нисходящей.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.GotFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnGotFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "<xref:System.Windows.UIElement.IsKeyboardFocusedChanged>аналогичные событие, которое отслеживает изменения состояния в свойство, которое поддерживает состояния фокуса для элемента; событие GotKeyboardFocus возникает в тех же условиях.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged>       Вследствие этого события восходящей маршрутизации, элемент, имеющий фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, имеющий фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы GotKeyboardFocus часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> Обработчики событий, которые прикреплены к событию GotKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GotKeyboardFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.</xref:System.Windows.UIElement.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.GotKeyboardFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GotKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при захвате мыши данным элементом."
  remarks: "При захвате мыши элементом, он получает ввод от мыши, даже если указатель мыши находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки и остается захваченной пока не произойдет действие операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>событий системы отслеживания измененных данных, чтобы определить фактический элемент, имеющий мыши.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы GotMouseCapture часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию GotMouseCapture присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GotMouseCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.GotMouseCaptureEvent>      -Переопределить <xref:System.Windows.UIElement.OnGotMouseCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GotMouseCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при захвате пера данным элементом."
  remarks: "При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки и сохраняет захват, пока не произойдет действие операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, захвативший может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, захвативший.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним для вложенного события для этого класса, чтобы GotStylusCapture входит в состав класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> Обработчики событий, присоединенные к событию GotStylusCapture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GotStylusCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.GotStylusCaptureEvent>      -Переопределить <xref:System.Windows.UIElement.OnGotStylusCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GotStylusCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда сенсорного этого элемента."
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.GotTouchCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.UIElement.OnGotTouchCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasAnimatedProperties
  id: HasAnimatedProperties
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли этот элемент имеет анимированные свойства."
  remarks: "Это свойство возвращает `true` для постоянных анимаций (без часов, всегда запущенной) или для анимаций, имеющих определенный график."
  syntax:
    content: public bool HasAnimatedProperties { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет анимированные свойства; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.HasAnimatedProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  id: HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Windows.UIElement&quot;> </xref> имеет фокус."
  remarks: "Подклассы могут переопределить это свойство, чтобы указать, когда элемент имеет фокус клавиатуры.  Это полезно, когда ваш <xref:System.Windows.UIElement>содержит элементы, которые могут иметь фокус клавиатуры и нужно вашего элемента отчета, что фокус.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual bool HasEffectiveKeyboardFocus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Windows.UIElement&quot;> </xref> имеет фокус; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  id: HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Реализует &lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt; для предоставления базы поведения проверки нажатия для элемента (возвращая <xref href=&quot;System.Windows.Media.GeometryHitTestResult&quot;> </xref>)."
  remarks: "См. исходный виртуальный метод <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>для сведения о переопределении этого метода в дальнейшей производных классов.</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> Обратите внимание, что некоторых элементов управления (<xref:System.Windows.Controls.TextBlock>, например) имеются разные реализации, которые переопределяют данную.</xref:System.Windows.Controls.TextBlock>       Этот метод не предназначен для непосредственного вызова из кода приложения. Этот метод поддерживает внутренние поведения проверки местонахождения пера, предоставляемые различными аспектами системы ввода (ли указатель мыши находится над элементом, например)."
  syntax:
    content: protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.GeometryHitTestParameters
      description: "Описывает проверку нажатия, включая начальную точку нажатия."
    return:
      type: System.Windows.Media.GeometryHitTestResult
      description: "Результаты теста, включая вычисленную геометрию."
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  id: HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Реализует <xref:System.Windows.Media.Visual.HitTestCore*>для предоставления базы поведения проверки нажатия для элемента (возвращая <xref href=&quot;System.Windows.Media.HitTestResult&quot;> </xref>).</xref:System.Windows.Media.Visual.HitTestCore*>"
  remarks: "См. исходный виртуальный метод <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName>для сведения о переопределении этого метода в дальнейшей производных классов.</xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> Обратите внимание, что некоторых элементов управления (<xref:System.Windows.Controls.TextBlock>, например) имеются разные реализации, которые переопределяют HitTestCore в соответствии с определением <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Controls.TextBlock>       Этот метод не предназначен для непосредственного вызова из кода приложения. Этот метод поддерживает внутренние поведения проверки местонахождения пера, предоставляемые различными аспектами системы ввода (ли указатель мыши находится над элементом, например)."
  syntax:
    content: protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);
    parameters:
    - id: hitTestParameters
      type: System.Windows.Media.PointHitTestParameters
      description: "Описывает проверку нажатия, включая начальную точку нажатия."
    return:
      type: System.Windows.Media.HitTestResult
      description: "Результаты теста, включая вычисленную точку."
  overload: System.Windows.UIElement.HitTestCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputBindings
  id: InputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает коллекцию привязок ввода, связанных с этим элементом."
  remarks: "Привязки ввода поддерживают привязку команд к устройствам ввода. Например <xref:System.Windows.Input.MouseBinding>реализует входных привязок, которые включают свойства, которые связаны с конкретными устройствами мыши.</xref:System.Windows.Input.MouseBinding>       Коллекция привязок ввода включает как привязки ввода, относящиеся к типу так и привязки ввода, объявленные в экземпляре.       Связанное свойство <xref:System.Windows.UIElement.CommandBindings%2A>, поддерживает коллекцию привязок команд.</xref:System.Windows.UIElement.CommandBindings%2A> Они отличаются от привязок ввода, в том, что они представляют следующего уровня вниз обработки команд - действий, привязанных к известным командам.      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a>## Использование элемента свойства XAML ```   <object>     <object.InputBindings>       oneOrMoreInputBindings     </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> ## значений XAML *oneOrMoreInputBindings* один или несколько <xref:System.Windows.Input.InputBinding>элементов (обычно <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>производных классах).</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       Каждый из них должен иметь <xref:System.Windows.Input.InputBinding.Command%2A>и <xref:System.Windows.Input.InputBinding.Gesture%2A>набором атрибутов.</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  example:
  - "The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-xml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n For more information about the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "Коллекция привязок ввода."
  overload: System.Windows.UIElement.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  id: InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает элемент ввода в текущий элемент, расположенный по указанным координатам относительно начала текущего элемента."
  remarks: "<xref:System.Windows.IInputElement>возвращается как тип возвращаемого значения, так как этот тип является общий интерфейс для обоих <xref:System.Windows.UIElement>и <xref:System.Windows.ContentElement>.</xref:System.Windows.ContentElement> </xref:System.Windows.UIElement></xref:System.Windows.IInputElement> Затем можно привести тип, возвращаемый соответствующим образом или использовать экземпляр интерфейса для определенных элементов, определяемых <xref:System.Windows.IInputElement>интерфейса.</xref:System.Windows.IInputElement>       Этот метод обычно не вызывается из кода приложения. Вызов этого метода подходит только в случае, если вы собираетесь повторно реализовать значительный объем низкоуровневых функций ввода, которые уже присутствуют, например воссоздание логики устройства мыши.       <xref:System.Windows.IContentHost>контракты <xref:System.Windows.IContentHost.InputHitTest%2A>метод с такой же сигнатурой, что выбрать некоторые элементы, чтобы явно реализовать.</xref:System.Windows.IContentHost.InputHitTest%2A></xref:System.Windows.IContentHost>"
  syntax:
    content: public System.Windows.IInputElement InputHitTest (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "Смещение координаты внутри этого элемента."
    return:
      type: System.Windows.IInputElement
      description: "Дочерний элемент, расположенный в заданной позиции."
  overload: System.Windows.UIElement.InputHitTest*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateArrange
  id: InvalidateArrange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Делает недействительным состояние компоновки (структуру) элемента. После недействительной элемент будет иметь в макете обновлены, что произойдет асинхронно, если не будет сделано принудительно <xref:System.Windows.UIElement.UpdateLayout*>.</xref:System.Windows.UIElement.UpdateLayout*>"
  remarks: "Часто использовать вызовы InvalidateArrange или в частности для <xref:System.Windows.UIElement.UpdateLayout%2A>приводит к увеличению производительности последствиям.</xref:System.Windows.UIElement.UpdateLayout%2A> Поэтому следует избегать вызова этого метода, если не требуется абсолютная точность состояния структуры для последующих вызовов других [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] в коде. Расширенный сценарий, где может вызывать InvalidateArrange — при создании <xref:System.Windows.PropertyChangedCallback>для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable>или <xref:System.Windows.FrameworkElement>производный класс, по-прежнему влияет на передачу размещения разметки при его изменении.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateArrange ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateArrange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateMeasure
  id: InvalidateMeasure
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Делает недействительным состояние измерения (структуру) элемента."
  remarks: "Вызывающий этот метод также вызывает <xref:System.Windows.UIElement.InvalidateArrange%2A>внутренним образом, нет необходимости вызывать InvalidateMeasure и <xref:System.Windows.UIElement.InvalidateArrange%2A>подряд.</xref:System.Windows.UIElement.InvalidateArrange%2A> </xref:System.Windows.UIElement.InvalidateArrange%2A> После недействительной, элемент будет иметь в макете обновлены, что произойдет асинхронно, если не <xref:System.Windows.UIElement.UpdateLayout%2A>вызывается принудительно изменять макет синхронной.</xref:System.Windows.UIElement.UpdateLayout%2A>       Система макета уровня платформы WPF выполняет собственную обработку изменений в визуальном дереве элемента, и в наиболее распространенных случаев недействительности система структуры вызывает эквивалент этого метода, при необходимости. Этот метод следует вызывать только при создании полной реализации структуры, которой прямая обработка дерева элементов или подобные сложных сценариях. Один таких сложных скриптов: при создании <xref:System.Windows.PropertyChangedCallback>для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable>или <xref:System.Windows.FrameworkElement>производный класс, по-прежнему влияет на передачу показателей разметки при его изменении.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>       Часто использовать вызовы InvalidateMeasure или в частности для <xref:System.Windows.UIElement.UpdateLayout%2A>приводит к увеличению производительности последствиям.</xref:System.Windows.UIElement.UpdateLayout%2A> Поэтому следует избегать вызова этого метода, если не требуется абсолютная точность состояния структуры для последующих вызовов других [!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)] в коде."
  syntax:
    content: public void InvalidateMeasure ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateMeasure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.InvalidateVisual
  id: InvalidateVisual
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Делает недействительной отрисовку элемента и принудительно новый полный этап разметки. <xref:System.Windows.UIElement.OnRender*>вызывается после завершения цикла разметки.</xref:System.Windows.UIElement.OnRender*>"
  remarks: "Этот метод вызывает метод <xref:System.Windows.UIElement.InvalidateArrange%2A>внутренне.</xref:System.Windows.UIElement.InvalidateArrange%2A>       Этот метод обычно не вызывается из кода приложения. Система макета уровня платформы WPF выполняет собственную обработку изменений в визуальном дереве элемента и будет вызывать эквивалент данного метода, при необходимости уже. Вызов этого метода необходим только в сложных сценариях. Один таких сложных скриптов: при создании <xref:System.Windows.PropertyChangedCallback>для свойства зависимостей, не принадлежащем <xref:System.Windows.Freezable>или <xref:System.Windows.FrameworkElement>производный класс, по-прежнему влияет на макет при его изменении.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Freezable> </xref:System.Windows.PropertyChangedCallback>"
  syntax:
    content: public void InvalidateVisual ();
    parameters: []
  overload: System.Windows.UIElement.InvalidateVisual*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsArrangeValid
  id: IsArrangeValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, допустимы ли вычисляемый размер и положение дочерних элементов в структуре данного элемента."
  remarks: "Можно принудительно выполнить компоновку недействительными, вызвав <xref:System.Windows.UIElement.InvalidateArrange%2A>для этого элемента (или его родительских объектов).</xref:System.Windows.UIElement.InvalidateArrange%2A> Это помечает структуру для рекомпозиции в тех пор, определяется системой структуры. В качестве альтернативы немедленный вызов метода <xref:System.Windows.UIElement.UpdateLayout%2A>может быть выполнено, но это следует делать только если известно, что без дальнейшей недействительности, ожидающих выполнения (большое число излишних принудительных обновлений окажет влияние на производительность).</xref:System.Windows.UIElement.UpdateLayout%2A>       Не может быть IsArrangeValid `true` Если <xref:System.Windows.UIElement.IsMeasureValid%2A>также `true` (в процессе разметки расположение не может быть допустимым без измерения, сначала являются допустимыми).</xref:System.Windows.UIElement.IsMeasureValid%2A>"
  syntax:
    content: public bool IsArrangeValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если размер и положение макета являются допустимыми; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsArrangeValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, включен ли этот элемент в [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей."
  remarks: "Обратите внимание, что это свойство зависит от реализации данного класса <xref:System.Windows.UIElement.IsEnabledCore%2A>на отдельных элементов, часто во время выполнения.</xref:System.Windows.UIElement.IsEnabledCore%2A> Таким образом значение по умолчанию, перечисленных здесь не иногда действует. Например <xref:System.Windows.Controls.Primitives.ScrollBar>будет IsEnabled `false` каждый раз, когда выясняется, что нет необходимости для поддержки прокрутки.</xref:System.Windows.Controls.Primitives.ScrollBar> Попытка задать это значение будет также может быть переопределено значения, возвращенного <xref:System.Windows.UIElement.IsEnabledCore%2A>.</xref:System.Windows.UIElement.IsEnabledCore%2A>       Элементы, которые не включены не участвуют в проверке нажатия или фокусе и таким образом, не могут быть источниками входных событий.      <a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsEnabledProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsEnabledProperty>"
  example:
  - "The following example shows a handler on one button that when executed will set IsEnabled `false` on another named button `b1`.  \n  \n [!code-cs[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/csharp/RoutedEventAddRemoveHandler/default.xaml.cs#handler)]\n [!code-vb[RoutedEventAddRemoveHandler#Handler](~/add/codesnippet/visualbasic/RoutedEventAddRemoveHandler/default.xaml.vb#handler)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент включен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsEnabled*>Свойства для данного элемента.</xref:System.Windows.UIElement.IsEnabled*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, возвращаемое значение становится <xref:System.Windows.UIElement.IsEnabled*>в производных классах.</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент включен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsEnabled*>свойство зависимостей.</xref:System.Windows.UIElement.IsEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocused
  id: IsFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, является ли этот элемент имеет логический фокус.  Это свойство зависимостей."
  remarks: "Логический фокус могут отличаться от фокус клавиатуры, если приложение имеет несколько фокусных секций, например между содержанием меню и остальной частью приложения. В этом случае фокус клавиатуры можно только на одном элементе пользовательского интерфейса приложения, но некоторые элементы в других разделах фокуса могут сохранять логический фокус. Дополнительные сведения о логическом фокусе см [фокус Обзор](~/add/includes/ajax-current-ext-md.md).       Не устанавливайте фокус, присвоив этому свойству (это только для чтения). Обычно это свойство используется для использования его в качестве свойства зависимостей <xref:System.Windows.Setter>или <xref:System.Windows.EventTrigger>.</xref:System.Windows.EventTrigger> </xref:System.Windows.Setter> Чтобы установить фокус программными средствами, вызовите <xref:System.Windows.UIElement.Focus%2A>.</xref:System.Windows.UIElement.Focus%2A> Также можно установить фокус, действием пользователя или реализацией управления, которые могут включать поведение захвата мыши.      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsFocusedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsFocusedProperty>"
  example:
  - "The following example is a code handler that changes the background of a control when it is focused.  \n  \n [!code-cs[PopupSimple#IsFocused](~/add/codesnippet/csharp/PopupPropertiesSample/Window1.xaml.cs#isfocused)]  \n  \n Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]. For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/en-us/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1)."
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет логический фокус; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsFocused*>свойство зависимостей.</xref:System.Windows.UIElement.IsFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, может ли этот элемент будет возвращен в результате проверки нажатия из какой-либо части его отображаемого содержимого. Это свойство зависимостей."
  remarks: "Действительное значение данного свойства зависит от относительные позиции поддерживающих проверку нажатия элементов в логическом дереве. Для экземпляра, если элемент является дочерним для элемента элемент, который является не нажатия видимым, действительное значение свойства для дочернего элемента останется `false`, даже если при попытке задать это значение локально. По этой причине важно не задано IsHitTestVisible `false` в составном элементе управления, если только не требуется никаких входных данных и попадания для данного элемента управления. Дополнительные сведения о проверке нажатия см. в разделе [нажатия на визуальном уровне](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsHitTestVisible&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsHitTestVisibleProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsHitTestVisibleProperty>"
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данный элемент может быть возвращен как результат проверки нажатия из по крайней мере одной точки; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsHitTestVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  id: IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsHitTestVisible*>изменения свойств зависимостей для этого элемента.</xref:System.Windows.UIElement.IsHitTestVisible*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsHitTestVisible*>свойство зависимостей.</xref:System.Windows.UIElement.IsHitTestVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли в системе метода ввода, такие как [!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)], активирована для обработки входных данных для этого элемента."
  remarks: "Это свойство возвращает значение, которое возвращается вложенное свойство <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>для в настоящий момент разрешенные методы ввода (клавиатуры, речи и других устройств ввода).</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если метод ввода активен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию базового прикрепленного свойства — <xref uid=&quot;langword_csharp_true;&quot; name=&quot;true;&quot; href=&quot;&quot;> </xref> тем не менее, это повлияет фактическое состояние методов ввода во время выполнения."
  overload: System.Windows.UIElement.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, является ли данный элемент фокус клавиатуры.  Это свойство зависимостей."
  remarks: "Изменения на определенное значение этого свойства может сопровождаться события, связанные с фокусом.       IsKeyboardFocused и <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>обычно используются в обработчиках событий класса для других событий, например для определения ли элемент уже имеет фокус клавиатуры или вносить решения при мыши события и события клавиатуры возникают вместе.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если этот элемент имеет фокус клавиатуры; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsKeyboardFocused*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsKeyboardFocused*>свойство зависимостей.</xref:System.Windows.UIElement.IsKeyboardFocused*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли фокус клавиатуры элемент или его дочерних элементах визуального дерева.  Это свойство зависимостей."
  remarks: "Изменения значения этого свойства обычно вызывают <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>событие, если производный класс не переопределяет <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A>Отключение событие.</xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>       Это свойство не задано непосредственно, но можно перевести фокус на элемент, вызвав <xref:System.Windows.UIElement.Focus%2A>, или путем создания <xref:System.Windows.UIElement.MoveFocus%2A>запроса.</xref:System.Windows.UIElement.MoveFocus%2A> </xref:System.Windows.UIElement.Focus%2A> Одно из этих вызовов метода может изменить значение этого свойства.       <xref:System.Windows.UIElement.IsKeyboardFocused%2A>и IsKeyboardFocusWithin обычно используются в обработчиках событий класса для других событий, например чтобы определить элемент уже имеет фокус клавиатуры, или делать решения при мыши события и события клавиатуры возникают вместе.</xref:System.Windows.UIElement.IsKeyboardFocused%2A>      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если фокус клавиатуры находится на элементе или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении значения свойства IsKeyboardFocusWithinChanged данного элемента."
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsKeyboardFocusWithin*>свойство зависимостей.</xref:System.Windows.UIElement.IsKeyboardFocusWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabled
  id: IsManipulationEnabled
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, указывающее, включены ли события манипуляции в данном <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: 'Если установлено значение true, если вы хотите <xref:System.Windows.UIElement>получать <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, и <xref:System.Windows.UIElement.ManipulationCompleted>события.</xref:System.Windows.UIElement.ManipulationCompleted> </xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.UIElement.ManipulationInertiaStarting> </xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement.ManipulationStarted> </xref:System.Windows.UIElement.ManipulationStarting> </xref:System.Windows.UIElement> Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).'
  example:
  - "The following example creates an application that has a red Rectangle.  The IsManipulationEnabled property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-xml[BasicManipulation#UI](~/add/codesnippet/xaml/basicmanipulation/mainwindow.xaml#ui)]"
  syntax:
    content: public bool IsManipulationEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если на это включены события манипуляции <xref href=&quot;System.Windows.UIElement&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsManipulationEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  id: IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsManipulationEnabled*>свойство зависимостей.</xref:System.Windows.UIElement.IsManipulationEnabled*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMeasureValid
  id: IsMeasureValid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, допустим ли текущий размер, возвращенный измерением структуры."
  remarks: "Можно принудительно измерение и компоновку недействительными, вызвав метод <xref:System.Windows.UIElement.InvalidateMeasure%2A>для этого элемента (или любого родительского элемента вверх по визуальному дереву).</xref:System.Windows.UIElement.InvalidateMeasure%2A> Это назначает структуру для рекомпозиции асинхронно, происходящих во время, определяемое системой макета. Кроме того можно внести немедленный вызов метода <xref:System.Windows.UIElement.UpdateLayout%2A>.</xref:System.Windows.UIElement.UpdateLayout%2A> Тем не менее, следует вызывать только <xref:System.Windows.UIElement.UpdateLayout%2A>Если весьма вероятно, что без дальнейшей недействительности, ожидающих выполнения (большое число излишних принудительных обновлений будет иметь влияние на производительность).</xref:System.Windows.UIElement.UpdateLayout%2A>       Если IsMeasureValid `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A>также должен быть `false` (логикой принудительно процесса компоновки, расположение не может быть допустимым без измерения, сначала являются допустимыми).</xref:System.Windows.UIElement.IsArrangeValid%2A>"
  syntax:
    content: public bool IsMeasureValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если проход измерения макета вернул значение действительными и текущими; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMeasureValid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, захвачена ли мышь к данному элементу.  Это свойство зависимостей."
  remarks: "Состояние захвата мыши соотносится с операции перетаскивания и вставки в процессе.      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsMouseCapturedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsMouseCapturedProperty>"
  example:
  - "The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.  \n  \n If mouse capture is elsewhere, the mouse capture is set to that element. If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with a null input.  \n  \n [!code-vb[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/visualbasic/mousesnippetsample/window1.xaml.vb#ismousecaptured)]\n [!code-cs[MouseSnippetSample#IsMouseCaptured](~/add/codesnippet/csharp/MouseSnippetSample/Window1.xaml.cs#ismousecaptured)]"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент имеет захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsMouseCaptured*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsMouseCaptured*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsMouseCaptured*>свойство зависимостей.</xref:System.Windows.UIElement.IsMouseCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, удерживается ли захват мыши данным элементом или дочерними элементами его визуального дерева. Это свойство зависимостей."
  remarks: "<a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент или содержащийся в нем элемент получил захват мыши; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinProperty&quot;> </xref> изменений для этого элемента."
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsMouseCaptureWithin*>свойство зависимостей.</xref:System.Windows.UIElement.IsMouseCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, соответствует ли позиция указателя мыши результатам проверки нажатия, которой учитывается компоновка элемента.  Это свойство зависимостей."
  remarks: "В отличие от <xref:System.Windows.UIElement.IsMouseOver%2A>, это свойство доступно только `true` если указатель мыши находится над элемент literal, как и для попаданий тест.</xref:System.Windows.UIElement.IsMouseOver%2A> Если указатель мыши находится над дочерним элементом, в частности по элементам, которые являются частью глубокого шаблона элемента и его композиции, это свойство будет `false`. Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.UIElement.IsMouseOver%2A>вместо.</xref:System.Windows.UIElement.IsMouseOver%2A>       Если мышь захвачена элементом, и это свойство является `true` во время записи, это свойство будет продолжать возвращать `true` пока захват мыши не будет потерян и указатель не выйдет за границы элемента.      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указатель мыши находится над тем же элементом проверки нажатия; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsMouseDirectlyOver*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsMouseDirectlyOver*>свойство зависимостей.</xref:System.Windows.UIElement.IsMouseDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли указатель мыши над данным элементом (включая дочерние элементы в визуальном дереве).  Это свойство зависимостей."
  remarks: "Как правило элементы управления составляются таким образом, что различные элементы внутри элемента управления (визуальное дерево) сообщают состояние мыши для вмещающего элемента управления. Например <xref:System.Windows.Controls.ListBox>стиля элемента управления сообщит IsMouseOver как `true` если указатель мыши в любом месте за геометрического объекта, включая любые <xref:System.Windows.Controls.ListBoxItem>.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox>       Несмотря на то, что аналогичные события «IsMouseOverChanged» не существует, выполните несколько схожих событий. Например, можно обработать <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>и <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> </xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.UIElement.MouseEnter>       При захвате мыши данным элементом, это свойство остается `true` пока захват мыши не будет потерян и указатель мыши покидает границы элемента.       Некоторые элементы управления произвольно захватывают мышь на определенные действия, которые не затрагивают мышь напрямую. Это может привести к состоянию IsMouseOver `true` несмотря на то, что мышь перемещена не очевидно.      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsMouseOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsMouseOverProperty>"
  example:
  - "The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \\<Style.Triggers> block. If the mouse is over the control, the control text turns blue and the cursor becomes a hand.  \n  \n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]\n [!code-xml[ListViewCheckBox#Trigger](~/add/codesnippet/xaml/p-system.windows.uieleme_12_1.xaml)]"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указатель мыши находится над элементом или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsMouseOver*>свойство зависимостей.</xref:System.Windows.UIElement.IsMouseOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, захвачено ли перо данным элементом.  Это свойство зависимостей."
  remarks: "Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsStylusCapturedProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент имеет захват пера; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsStylusCaptured*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsStylusCaptured*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsStylusCaptured*>свойство зависимостей.</xref:System.Windows.UIElement.IsStylusCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, является ли захват пера удерживается данным элементом или элементом в пределах границ элемента и его визуального дерева. Это свойство зависимостей."
  remarks: "Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [Touch поддержки входных данных в Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) и [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент или содержащийся в нем элемент получил захват пера; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsStylusCaptureWithin*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  remarks: "Это [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] события, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsStylusCaptureWithin*>свойство зависимостей.</xref:System.Windows.UIElement.IsStylusCaptureWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, соответствует ли позиция пера результатам проверки нажатия, которой учитывается компоновка элемента.  Это свойство зависимостей."
  remarks: "В отличие от <xref:System.Windows.UIElement.IsStylusOver%2A>, это свойство доступно только `true` если перо находится над элементом.</xref:System.Windows.UIElement.IsStylusOver%2A> Если перо находится над дочерним элементом или над элементами, которые являются частью глубокой композиции элемента (визуальное дерево), это свойство будет `false`.       Если вы не знаете как составного элемента управления (например, используется это свойство в пользовательский шаблон элемента управления для элемента управления, можно определить), это свойство может возвращать непредвиденные результаты. В большинстве сценариев, где вы не создаете элементы управления, использовать <xref:System.Windows.UIElement.IsStylusOver%2A>вместо.</xref:System.Windows.UIElement.IsStylusOver%2A>       Если этот элемент имеет захват пера, и это свойство является `true` во время записи, это свойство остается `true` пока не будет освобождено и перо не выйдет за границы элемента.       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указатель пера находится над тем же элементом проверки нажатия; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsStylusDirectlyOver*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  remarks: "Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsStylusDirectlyOver*>свойство зависимостей.</xref:System.Windows.UIElement.IsStylusDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, находится ли курсор пера над данным элементом (включая визуальные дочерние элементы).  Это свойство зависимостей."
  remarks: "Если этот элемент имеет захват пера, это свойство будет продолжать возвращать `true` пока не будет освобождено и указатель мыши выходит за его границы.       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsStylusOverProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если курсор пера находится над элементом или его дочерними элементами; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsStylusOver*>свойство зависимостей.</xref:System.Windows.UIElement.IsStylusOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, указывающее, видим ли данный элемент в [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей."
  remarks: "Определение значения IsVisible учитывает все факторы макета. Напротив <xref:System.Windows.UIElement.Visibility%2A>, являющееся задаваемое свойство только указывает на намерение программно сделать элемент видимым или невидимым.</xref:System.Windows.UIElement.Visibility%2A>       Элементы, где IsVisible `false` не участвуют в событиях ввода (или командах), не влияют на проход измерения или компоновки структуры, не получают фокус, не входящие в последовательность перехода и не будут включаться в проверки нажатия. В отличие от этого, элементы которой <xref:System.Windows.UIElement.IsEnabled%2A>— `false` по-прежнему будет участвовать в события и команды и попадания, хотя и не может иметь фокус.</xref:System.Windows.UIElement.IsEnabled%2A>      <a name=&quot;dependencyPropertyInfo_IsVisible&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.IsVisibleProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.IsVisibleProperty>"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент видим; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда значение <xref:System.Windows.UIElement.IsVisible*>изменения свойств для этого элемента.</xref:System.Windows.UIElement.IsVisible*>"
  remarks: "Это событие не происходит, если элемент не визуализируется системой структуры по причинам, отличным от значения <xref:System.Windows.UIElement.IsVisible%2A>свойство.</xref:System.Windows.UIElement.IsVisible%2A> Например элемент не может иметь связан визуальный.       Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.IsVisible*>свойство зависимостей.</xref:System.Windows.UIElement.IsVisible*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. События KeyDown является событием входной текст нижнего уровня, которое может работать некорректно, в некоторых элементах управления. Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы KeyDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> Обработчики событий, подключенные к событием KeyDown подключены к основному <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.KeyDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewKeyDown>.</xref:System.Windows.UIElement.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnKeyDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.KeyDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы KeyUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> Обработчики событий, присоединенные к событию KeyUp присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_KeyUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.KeyUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewKeyUp>.</xref:System.Windows.UIElement.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.KeyUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnKeyUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.KeyUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LayoutUpdated
  id: LayoutUpdated
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при различных визуальных элементов макета, связанной с текущим <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> изменений."
  remarks: "Обновление структуры может произойти в результате изменения свойства, изменения размеров окна или по явному запросу пользователя.       Этот член представляет [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] событий, не является маршрутизируемым."
  syntax:
    content: public event EventHandler LayoutUpdated;
    return:
      type: System.EventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере данным элементом логического фокуса."
  remarks: "Логический фокус отличается от фокуса, если фокус был намеренно вытеснен посредством вызова метода, но на другом уровне существует предыдущий фокус клавиатуры. В этом сценарии, остается фокус клавиатуры, там, где это и элемент где <xref:System.Windows.UIElement.Focus%2A>вызывается метод по-прежнему возвращает логический фокус.</xref:System.Windows.UIElement.Focus%2A>       Точнее интерпретацию этого события является что он вызывается, когда значение <xref:System.Windows.UIElement.IsFocused%2A>изменяет свойства элемента в маршруте с `true` для `false`.</xref:System.Windows.UIElement.IsFocused%2A>       Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, полученные фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>      <a name=&quot;routedEventInfo_LostFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.LostFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.RoutedEventHandler>|      -Нет соответствующего события нисходящей.</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement.LostFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnLostFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда на этот элемент больше не фокус ввода с клавиатуры."
  remarks: "Вследствие этого события восходящей маршрутизации, элемент, который потерял фокус ввода может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostKeyboardFocus часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию LostKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.LostKeyboardFocusEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.</xref:System.Windows.UIElement.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.LostKeyboardFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.LostKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата мыши."
  remarks: "При захвате мыши элементом, он получает ввод от мыши, даже если указатель находится вне границ элемента. Мышь обычно захватывается только во время операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, который теряет захват может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял захват.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostMouseCapture часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию LostMouseCapture присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.LostMouseCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.LostMouseCaptureEvent>      -Переопределить <xref:System.Windows.UIElement.OnLostMouseCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.LostMouseCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата пера."
  remarks: "При захвате пера элементом, он получает ввод от пера, даже если указатель находится вне границ элемента. Перо обычно захватывается только во время операции перетаскивания и вставки.       Вследствие этого события восходящей маршрутизации, элемент, который теряет фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы LostStylusCapture часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> Обработчики событий, присоединенные к событию LostStylusCapture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.LostStylusCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.LostStylusCaptureEvent>      -Переопределить <xref:System.Windows.UIElement.OnLostStylusCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.LostStylusCapture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при потере элементом захвата сенсорный ввод."
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.LostTouchCaptureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.UIElement.OnLostTouchCapture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  id: ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда манипуляция сталкивается с границей."
  remarks: "<a name=&quot;routedEventInfo_ManipulationBoundaryFeedback&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|</xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  id: ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> событий."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompleted
  id: ManipulationCompleted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда манипуляции и инерции в <xref href=&quot;System.Windows.UIElement&quot;> </xref> объекта завершена."
  remarks: "Это событие можно использовать для получения сведений о манипуляции после ее завершения.  Например, можно использовать <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>Изменить свойство для определения общей суммы позиции манипуляции.</xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName>       Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationCompleted&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationCompletedEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|</xref:System.Windows.Input.ManipulationCompletedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationCompletedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  id: ManipulationCompletedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDelta
  id: ManipulationDelta
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при устройство ввода меняет положение в процессе манипуляции."
  remarks: "Это событие ManipulationDelta возникает несколько раз, когда пользователь перетаскивает пальца по экрану во время обработки и при инерции.  Можно использовать <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>свойство, чтобы проверить, является ли событие происходит во время инерции.</xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A>       На элемент с событием ManipulationDelta влияния не оказывается каким-либо образом при возникновении события.  Необходимо предоставить логику для элемента, должны обрабатываться.  <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>И <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>Свойства, которые относятся к типу <xref:System.Windows.Input.ManipulationDelta>, содержат данные о изменение позиции манипуляций и интерпретируются как перемещение, изменение размера или поворот объекта.</xref:System.Windows.Input.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>  Эти сведения применяются для элемента, должны обрабатываться.       Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationDelta&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationDeltaEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|</xref:System.Windows.Input.ManipulationDeltaEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationDeltaEvent>"
  example:
  - "The following example shows an event handler for the ManipulationDelta event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.  The example also checks whether the ManipulationDelta event occurred during inertia and whether the rectangle is touching the edge of a window.  If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  id: ManipulationDeltaEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  id: ManipulationInertiaStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда устройство ввода теряет контакт с <xref href=&quot;System.Windows.UIElement&quot;> </xref> объект во время манипуляции и инерции начинается."
  remarks: "Это событие ManipulationInertiaStarting возникает, когда пользователь отрывает все пальцев на экране во время обработки. Например, если пользователь «вызывает» <xref:System.Windows.UIElement>по поверхности, пользователь будет затронуто <xref:System.Windows.UIElement>начинается действие перемещения пальцем по экрану для короткое расстояние и отпустите <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement> </xref:System.Windows.UIElement> Когда пользователь отпускает элемент, инерции начинается и событие ManipulationInertiaStarting.  <xref:System.Windows.UIElement>Продолжает получать <xref:System.Windows.UIElement.ManipulationDelta>события, чтобы указать, что происходит в элементе инерции.</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement>       Это событие можно использовать для указания поведения инерции.  Например можно задать начальную скорость, которая используется, когда начинается инерция.  Можно также указать величину инерции, задав требуемое замедление или установив нужное размещение.  Можно задать эти значения для каждого типа манипуляции (трансляции, расширения или вращения) независимо друг от друга.  Дополнительные сведения см. в разделе <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>       Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationInertiaStarting&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|</xref:System.Windows.Input.ManipulationInertiaStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>"
  example:
  - "The following example shows the ManipulationInertiaStarting event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationinertiastarting)]\n [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationinertiastarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  id: ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarted
  id: ManipulationStarted
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при начале манипуляции устройства ввода <xref href=&quot;System.Windows.UIElement&quot;> </xref> объекта."
  remarks: "Событие ManipulationStarted возникает после <xref:System.Windows.UIElement.ManipulationStarting>событий.</xref:System.Windows.UIElement.ManipulationStarting>  Действия с <xref:System.Windows.Input.ManipulationStartedEventArgs>:-получить элемент, позиция манипуляции относительно, используя <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A>свойство.</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> </xref:System.Windows.Input.ManipulationStartedEventArgs>      -Получение исходная точка манипуляции с помощью <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>свойство.</xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A>      -Отменить обработку путем вызова <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>метод.</xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A>       Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationStarted&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationStartedEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|</xref:System.Windows.Input.ManipulationStartedEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartedEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartedEvent
  id: ManipulationStartedEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStarting
  id: ManipulationStarting
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при создании обработчика манипуляции."
  remarks: "ManipulationStarting событие происходит на элемент, имеющий <xref:System.Windows.UIElement.IsManipulationEnabled%2A>свойство `true` когда пользователь помещает палец с ним</xref:System.Windows.UIElement.IsManipulationEnabled%2A> По умолчанию события манипуляции последующих отчетов позиции манипуляции относительно элемента, который имеет <xref:System.Windows.UIElement.IsManipulationEnabled%2A>равным `true`.</xref:System.Windows.UIElement.IsManipulationEnabled%2A>  Можно указать, что значение должно быть относительно другого элемента, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A>свойство.</xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> Например можно сделать обработки относительно родительского элемента.       Можно также выполнить следующие действия в обработчике событий для ManipulationStarting: — Укажите, должна ли пользователь более чем одним пальцем для манипуляций, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>свойство.</xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName>      -Указать, какие типы обработки включены, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>Свойства <xref:System.Windows.Input.ManipulationModes>перечисления.</xref:System.Windows.Input.ManipulationModes> </xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName>      -Укажите центр вращения касания одним пальцем, задав <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>свойство.</xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName>      -Отменить обработку путем вызова <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>метод.</xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName>       Дополнительные сведения о манипуляциях см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).  Пример приложения, который реагирует на манипуляции см. в разделе [Пошаговое руководство: создание первого Touch приложения](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_ManipulationStarting&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.ManipulationStartingEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|</xref:System.Windows.Input.ManipulationStartingEventArgs></xref:System.EventHandler%601></xref:System.Windows.UIElement.ManipulationStartingEvent>"
  example:
  - "The following example shows the event handler for the ManipulationStarting event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.  This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](../Topic/Walkthrough:%20Creating%20Your%20First%20Touch%20Application.md).  \n  \n [!code-cs[BasicManipulation#ManipulationStarting](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationstarting)]\n [!code-vb[BasicManipulation#ManipulationStarting](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationstarting)]"
  syntax:
    content: public event EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting;
    return:
      type: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ManipulationStartingEvent
  id: ManipulationStartingEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  id: Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Updates the <>*> of a <xref href=&quot;System.Windows.UIElement&quot;></xref>. Родительские элементы вызывают этот метод из своей собственной <> </> *настроек реализации для формирования структуры рекурсивного обновления. Вызов этого метода составляет первый проход (проход «Мера») обновления макета."
  remarks: "Расположение макета в вычислении [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] состоит вызова мер и <xref:System.Windows.UIElement.Arrange%2A>вызовите.</xref:System.Windows.UIElement.Arrange%2A> Во время вызова мер элемент определяет требования к его размер с помощью `availableSize` ввода. Во время <xref:System.Windows.UIElement.Arrange%2A>завершения вызова, размер элемента.</xref:System.Windows.UIElement.Arrange%2A>       `availableSize`может быть любое целое число от нуля до бесконечности. Элементы, которые участвуют в макете должен вернуть минимальное значение <xref:System.Windows.Size>им требуется для данной `availableSize`.</xref:System.Windows.Size>       При создании макета всегда получает вызов меры перед <xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> Однако после первого прохода разметки, он может появиться <xref:System.Windows.UIElement.Arrange%2A>вызывается без меры; это может произойти, если свойство, которое влияет только на <xref:System.Windows.UIElement.Arrange%2A>изменяется (например, выравнивание), или при получении родительского <xref:System.Windows.UIElement.Arrange%2A>без мера.</xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Arrange%2A> Автоматически сделает вызов мер <xref:System.Windows.UIElement.Arrange%2A>вызовите.</xref:System.Windows.UIElement.Arrange%2A>       Обновления макета выполняется асинхронно, таким образом, чтобы главный поток не ожидает каждого из возможных изменений структуры. Запрос элемента посредством проверки значений свойств кода может не сразу отражать изменения свойств, которые взаимодействуют с характеристиками размера или структуры ( <xref:System.Windows.FrameworkElement.Width%2A>Свойства, например).</xref:System.Windows.FrameworkElement.Width%2A>      Настроек [!NOTE] настроек обновления макета можно выполнить принудительно с помощью <xref:System.Windows.UIElement.UpdateLayout%2A>метод.</xref:System.Windows.UIElement.UpdateLayout%2A> Тем не менее вызов этого метода обычно нет необходимости и может привести к снижению производительности.       Система макета отслеживает двух отдельных очередей недопустимый макеты, для измерения и одну для <xref:System.Windows.UIElement.Arrange%2A>.</xref:System.Windows.UIElement.Arrange%2A> Очередь структур сортируется порядок элементов в визуальном дереве структурирования элементов; в верхней части очереди, во избежание избыточного структурирования повторяющихся изменений в родительских элементов, элементы, расположенные выше в дереве. Дублирующиеся записи автоматически удаляются из очереди, а элементы автоматически удаляются из очереди, если они уже проверены макета.       При обновлении макета, мера освобождения очереди во-первых, за которым следует <xref:System.Windows.UIElement.Arrange%2A>очереди.</xref:System.Windows.UIElement.Arrange%2A> На элемент <xref:System.Windows.UIElement.Arrange%2A>очереди никогда не быть упорядочены, если элемент в очередь мер.</xref:System.Windows.UIElement.Arrange%2A>"
  syntax:
    content: public void Measure (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "Доступное пространство, что родительский элемент может выделить дочернему элементу. Дочерний элемент может запросить больше пространства, чем доступно; Указанный размер может быть размещен, если возможна прокрутка в модели содержимого для текущего элемента."
  overload: System.Windows.UIElement.Measure*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  id: MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе предоставляет логику измерений для определения размеров данного элемента правильно, с учетом размера любого дочернего содержимого элемента."
  remarks: "Чаще всего для получения элемента из <xref:System.Windows.FrameworkElement>вместо <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.FrameworkElement> При наследовании от <xref:System.Windows.FrameworkElement>, обратите внимание, что переопределение MeasureCore на <xref:System.Windows.FrameworkElement>запечатывает метод MeasureCore.</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Таким образом можно переопределять только MeasureCore позволяет изменить характеристики измерения структуры при наследовании от <xref:System.Windows.UIElement>через наследование, которая не включает <xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> </xref:System.Windows.UIElement> Это может случиться, если вы пытаетесь использовать собственную реализацию [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] уровня ядра. В противном случае, если вы сделаете производный от <xref:System.Windows.FrameworkElement>, шаблон реализации мер поведение является <xref:System.Windows.FrameworkElement>реализация.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.</xref:System.Windows.FrameworkElement.MeasureOverride%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement>       Родительский элемент, содержащий дочерние элементы должны вызывать <xref:System.Windows.UIElement.Measure%2A>на каждый дочерний элемент, в противном случае эти дочерние элементы не размера или упорядочены и эффективно исчезнет из макета.</xref:System.Windows.UIElement.Measure%2A>"
  example:
  - "A typical override of MeasureCore follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).  \n  \n [!code-cs[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#uielementmeasureoverride)]\n [!code-vb[CorePseudocode#UIElementMeasureOverride](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#uielementmeasureoverride)]  \n  \n-   You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.  \n  \n-   Generally, your implementation should cache measurement information between the MeasureCore and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.  \n  \n-   Calling base implementations of MeasureCore is not required, but might be appropriate if the base implementation provides a desired layout capability.  \n  \n-   Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports. For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control."
  syntax:
    content: protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "Доступный размер, который можно выделить родительским элементом для дочернего элемента."
    return:
      type: System.Windows.Size
      description: "Нужный размер этого элемента в макете."
  overload: System.Windows.UIElement.MeasureCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDown
  id: MouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии любой кнопки мыши в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Обработчики событий, подключенные к MouseDown-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       MouseDown-событие часто возникает вместе с либо <xref:System.Windows.UIElement.MouseLeftButtonDown>или <xref:System.Windows.UIElement.MouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.UIElement.MouseLeftButtonDown>и <xref:System.Windows.UIElement.MouseRightButtonDown>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonDown></xref:System.Windows.UIElement.MouseLeftButtonDown> См. Примечания <xref:System.Windows.UIElement.MouseLeftButtonDown>или <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement.MouseLeftButtonDown>      Настроек [!IMPORTANT] настроек некоторые элементы управления могут иметь внутреннюю обработку классов для событий кнопок мыши. Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse>класс событие как обработанное.</xref:System.Windows.Input.Mouse> Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.       Можно устранить проблему, которая описана в Важном и продолжать получать события MouseDown для левой кнопки мыши событий в производном классе с обработкой класса с помощью любого из следующих решений:-присоединения обработчиков <xref:System.Windows.UIElement.PreviewMouseDown>события, который не помечен как обработанное в элементах управления.</xref:System.Windows.UIElement.PreviewMouseDown> Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.      -Регистрация обработчика в элементе управления с помощью процедур, вызвав <xref:System.Windows.UIElement.AddHandler%2A>и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewMouseDown>.</xref:System.Windows.UIElement.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnMouseDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда указатель мыши попадает внутрь границ данного элемента."
  remarks: "MouseEnter: использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       Несмотря на то, что MouseEnter отслеживает, когда указатель мыши попадает внутрь границ элемента, это событие более буквально о том, что <xref:System.Windows.UIElement.IsMouseOver%2A>значение свойства было изменено с `false` для `true` для этого элемента.</xref:System.Windows.UIElement.IsMouseOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseEnter часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> Обработчики событий, присоединенные к событие MouseEnter присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>       Объект <xref:System.Windows.Controls.Button>(или любой <xref:System.Windows.Controls.Primitives.ButtonBase>производный класс) имеет собственную обработку <xref:System.Windows.UIElement.KeyDown>событие, когда кнопка находится в фокусе, и нажатой клавише находится панель пространства</xref:System.Windows.UIElement.KeyDown> </xref:System.Windows.Controls.Primitives.ButtonBase> </xref:System.Windows.Controls.Button> Вызывает обработчики <xref:System.Windows.Controls.Primitives.ButtonBase.Click>событий с помощью кнопки, как источник, а также захватывает мышь, даже если для перемещения указателя мыши отображается.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> В результате захвата мыши событие MouseEnter также вызывается с помощью кнопки как источник. Как правило, если элемент управления захватил мышь, вызывается MouseEnter, а также <xref:System.Windows.UIElement.GotMouseCapture>и возможно другие события элемента управления.</xref:System.Windows.UIElement.GotMouseCapture>      <a name=&quot;routedEventInfo_MouseEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда указатель мыши покидает границы данного элемента."
  remarks: "MouseLeave: использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       MouseLeave отслеживает, когда указатель мыши покидает элемент, это событие более буквально о том, что <xref:System.Windows.UIElement.IsMouseOver%2A>значение свойства было изменено с `true` для `false` для этого элемента.</xref:System.Windows.UIElement.IsMouseOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseLeave часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> Обработчики событий, подключенные к MouseLeave-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии левой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить MouseLeftButtonDown обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Возможно в нем создается класс обработчика события, такие как <xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      Настроек [!IMPORTANT] настроек некоторые классы элементов управления могут иметь внутреннюю обработку классов для событий кнопок мыши. Событие нажатия кнопки мыши является наиболее вероятным событием с обработкой классов в элементе управления. Обработчик часто класса помечает базовый <xref:System.Windows.Input.Mouse>класс событие как обработанное.</xref:System.Windows.Input.Mouse> Когда событие помечено как обработанное, другие обработчики экземпляра, присоединенные к данному элементу, не инициируются. Любые другие обработчики класса или экземпляра, присоединенные к элементам в восходящем направлении к корню дерева пользовательского интерфейса, также обычно не инициируются.       Можно устранить проблему, которая описана в Важном и продолжать получать события MouseLeftButtonDown для левой кнопки мыши событий в производном классе с обработкой класса с помощью любого из следующих решений:-присоединения обработчиков <xref:System.Windows.UIElement.PreviewMouseDown>события, который не помечен как обработанное в элементах управления.</xref:System.Windows.UIElement.PreviewMouseDown> Обратите внимание, что это события предварительного просмотра, маршрут начинается с корневого элемента следует к элементу управления.      -Регистрация обработчика в элементе управления с помощью процедур, вызвав <xref:System.Windows.UIElement.AddHandler%2A>и выбрав параметр подписи, который позволяет обработчикам прослушивать события, даже если они помечены как обработанное в данные о событии.</xref:System.Windows.UIElement.AddHandler%2A>      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании левой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить MouseLeftButtonUp обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении указателя мыши над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> Обработчики событий, присоединенные события MouseMove присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewMouseMove>.</xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.MouseMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnMouseMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии правой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить MouseRightButtonDown обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Возможно в нем создается класс обработчика события, такие как <xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>       Часто сценарии приложений имеют обработчики для событий правой кнопки мыши. Например правой кнопкой мыши вниз может отображаться контекстное меню. В разделе [Обзор ContextMenu](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseRightButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании правой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это кажется маршруту через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить MouseRightButtonUp обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseRightButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUp
  id: MouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании любой кнопки мыши над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы MouseUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Обработчики событий, подключенные к MouseUp-событие подключены к основному <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       MouseUp-событие часто возникает вместе с либо <xref:System.Windows.UIElement.MouseLeftButtonUp>или <xref:System.Windows.UIElement.MouseRightButtonUp>, которые соответствуют выпуск одну из двух кнопок стандартных действий мыши.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.UIElement.MouseLeftButtonUp>и <xref:System.Windows.UIElement.MouseRightButtonUp>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.MouseRightButtonUp></xref:System.Windows.UIElement.MouseLeftButtonUp> См. Примечания <xref:System.Windows.UIElement.MouseLeftButtonUp>или <xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement.MouseLeftButtonUp>      <a name=&quot;routedEventInfo_MouseUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewMouseUp>.</xref:System.Windows.UIElement.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.MouseUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnMouseUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при вращении колесика мыши в момент, когда указатель мыши находится над данным элементом."
  remarks: "Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении события колесика мыши от элемента, или получившего, указатель мыши может быть фактически над другим элементом.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>присоединенные события для этого класса, чтобы колесика мыши входит в состав класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> Обработчики событий, присоединенные к событию колесика мыши присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>      <a name=&quot;routedEventInfo_MouseWheel&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.MouseWheelEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.MouseWheelEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewMouseWheel>.</xref:System.Windows.UIElement.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.MouseWheelEvent>      -Переопределить <xref:System.Windows.UIElement.OnMouseWheel%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.MouseWheel&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Пытается переместить фокус с данного элемента в другой элемент. Направление перемещения фокуса задается указанием направления, которое интерпретируется в организации визуального родителя данного элемента."
  remarks: "Убедитесь, что проверяйте возвращаемое значение этого метода. Возвращаемое значение `false` может быть возвращено, если затребована остановки вкладку и запрос обхода не запрашивали программы-оболочки."
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "Запрос обхода, который содержит свойство, которое определяет способ перемещения в порядке, или направление для визуального перемещения."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если запрос на перемещение было выполнено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса при клавиши доступа, которая может применяться для данного элемента вызывается."
  remarks: "Нет фактического события AccessKey в <xref:System.Windows.UIElement>класса или в других местах, который можно инициировать или прикрепить for. обработчики</xref:System.Windows.UIElement> Вместо этого событие инициируется посредством выделенного класса диспетчера, <xref:System.Windows.Input.AccessKeyManager>, после которого обрабатывает все входные данные для поиска клавиш доступа, применимых ко всей модели ввода.</xref:System.Windows.Input.AccessKeyManager>"
  syntax:
    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.AccessKeyEventArgs
      description: "Данные события для события клавиши доступа. Данные события сообщают, какая из клавиш была вызвана и указывает ли <xref href=&quot;System.Windows.Input.AccessKeyManager&quot;> </xref> объект, управляющий отправкой таких событий также отправляется этого вызова ключа доступа другие элементы."
  overload: System.Windows.UIElement.OnAccessKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  id: OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Поддерживает поведение структуры при изменении размера дочернего элемента."
  remarks: "Этот метод обычно не вызывается кодом приложения. Он предоставляется этот производный элемент, которую классы могут выполнять дальнейшие проверки для состояния возможно недействительного макета. Классы могут также пытаться выполнять оптимизацию, чтобы минимизировать время обработки прохода структуры на основе изменений размера дочерних элементов. Производный элемент пример класса, реализующего — OnChildDesiredSizeChanged <xref:System.Windows.Controls.Grid>управления.</xref:System.Windows.Controls.Grid>"
  syntax:
    content: protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "Дочерний элемент, изменяющего размеры."
  overload: System.Windows.UIElement.OnChildDesiredSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает характерные для класса <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> реализации для [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] инфраструктуры."
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "Конкретного типа <xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;> </xref> реализации."
  overload: System.Windows.UIElement.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> перенаправленного события с помощью предоставленных данных события."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные события. Данные о событии должны содержать идентификатор для <xref href=&quot;System.Windows.UIElement.GotFocus&quot;> </xref> событий."
  overload: System.Windows.UIElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.GotTouchCapture&quot;> </xref> перенаправленное событие, возникающее при сенсорного этого элемента."
  remarks: "Метод OnGotTouchCapture имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnGotTouchCapture <xref:System.Windows.UIElement.GotTouchCapture>событий.</xref:System.Windows.UIElement.GotTouchCapture> Необходимо вызвать метод OnGotTouchCapture базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsKeyboardFocusedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsKeyboardFocused%2A>изменения свойств зависимостей.</xref:System.Windows.UIElement.IsKeyboardFocused%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> Обратите внимание, что <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>событие не является маршрутизируемым.</xref:System.Windows.UIElement.IsKeyboardFocusedChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается непосредственно перед <xref href=&quot;System.Windows.UIElement.IsKeyboardFocusWithinChanged&quot;> </xref> события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>изменения свойств зависимостей.</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> Обратите внимание, что <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>событие не является маршрутизируемым.</xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsMouseCapturedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsMouseCaptured%2A>свойств зависимостей изменяется значение.</xref:System.Windows.UIElement.IsMouseCaptured%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsMouseCapturedChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsMouseCapturedChanged> Обратите внимание, что событие <xref:System.Windows.UIElement.IsMouseCapturedChanged>не перенаправленного события; Поэтому его нельзя пометить как обработанное в обработчике класса.</xref:System.Windows.UIElement.IsMouseCapturedChanged>       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsMouseCaptureWithinChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsMouseDirectlyOverChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A>свойств зависимостей изменяется значение.</xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> Обратите внимание, что <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>событие не является маршрутизируемым.</xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsStylusCapturedChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusCaptured%2A>свойств зависимостей изменяется значение.</xref:System.Windows.UIElement.IsStylusCaptured%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusCapturedChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsStylusCapturedChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Объект <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsStylusCaptureWithinChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A>свойств зависимостей изменяется значение.</xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.IsStylusDirectlyOverChanged&quot;> </xref> события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Этот виртуальный метод вызывается при значение <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A>свойств зависимостей изменяется значение.</xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> Виртуальный метод вызывается первым и может использовать данные события, при необходимости. Затем <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged>события с этого же экземпляра данных события.</xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> Обратите внимание, что событие не является маршрутизируемым. Поэтому его нельзя пометить как обработанное в обработчике класса.       У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований."
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> перенаправленного события с помощью предоставленных данных события."
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные события. Данные о событии должны содержать идентификатор для <xref href=&quot;System.Windows.UIElement.LostFocus&quot;> </xref> событий."
  overload: System.Windows.UIElement.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.LostTouchCapture&quot;> </xref> перенаправленного события, которое происходит при потере элементом захвата сенсорный ввод."
  remarks: "Метод OnLostTouchCapture имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnLostTouchCapture <xref:System.Windows.UIElement.LostTouchCapture>событий.</xref:System.Windows.UIElement.LostTouchCapture> Необходимо вызвать метод OnLostTouchCapture базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> событием."
  remarks: "Метод OnManipulationBoundaryFeedback имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationBoundaryFeedback <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>событий.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> Убедитесь, что вызвать метод OnManipulationBoundaryFeedback базового класса, чтобы базовые классы получили событие."
  syntax:
    content: protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "Данные для события."
  overload: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  id: OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда <xref href=&quot;System.Windows.UIElement.ManipulationCompleted&quot;> </xref> событием."
  remarks: "Метод OnManipulationCompleted имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationCompleted <xref:System.Windows.UIElement.ManipulationCompleted>событий.</xref:System.Windows.UIElement.ManipulationCompleted> Убедитесь, что вызвать метод OnManipulationCompleted базового класса, чтобы базовые классы получили событие."
  syntax:
    content: protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationCompletedEventArgs
      description: "Данные для события."
  overload: System.Windows.UIElement.OnManipulationCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  id: OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда <xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;> </xref> событием."
  remarks: "Метод OnManipulationDelta имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationDelta <xref:System.Windows.UIElement.ManipulationDelta>событий.</xref:System.Windows.UIElement.ManipulationDelta> Убедитесь, что вызвать метод OnManipulationDelta базового класса, чтобы базовые классы получили событие."
  syntax:
    content: protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationDeltaEventArgs
      description: "Данные для события."
  overload: System.Windows.UIElement.OnManipulationDelta*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  id: OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда <xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;> </xref> событием."
  remarks: "Метод OnManipulationInertiaStarting имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationInertiaStarting <xref:System.Windows.UIElement.ManipulationInertiaStarting>событий.</xref:System.Windows.UIElement.ManipulationInertiaStarting> Убедитесь, что вызвать метод OnManipulationInertiaStarting базового класса, чтобы базовые классы получили событие."
  syntax:
    content: protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationInertiaStartingEventArgs
      description: "Данные для события."
  overload: System.Windows.UIElement.OnManipulationInertiaStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  id: OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда <xref href=&quot;System.Windows.UIElement.ManipulationStarted&quot;> </xref> событием."
  remarks: "Метод OnManipulationStarted имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationStarted <xref:System.Windows.UIElement.ManipulationStarted>событий.</xref:System.Windows.UIElement.ManipulationStarted> Убедитесь, что вызвать метод OnManipulationStarted базового класса, чтобы базовые классы получили событие."
  syntax:
    content: protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartedEventArgs
      description: "Данные для события."
  overload: System.Windows.UIElement.OnManipulationStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  id: OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.ManipulationStarting&quot;> </xref> создан перенаправленное событие, возникающее при первом обработчика манипуляции."
  remarks: "Метод OnManipulationStarting имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnManipulationStarting <xref:System.Windows.UIElement.ManipulationStarting>событий.</xref:System.Windows.UIElement.ManipulationStarting> Необходимо вызвать метод OnManipulationStarting базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationStartingEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.ManipulationStartingEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnManipulationStarting*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии содержат сведения о нажатой кнопке мыши и состоянии обработки."
  overload: System.Windows.UIElement.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt; вложенное событие возникает для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt; вложенное событие возникает для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым, с прямой стратегией маршрутизации. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.MouseLeftButtonDown&quot;> </xref> перенаправленного события для этого элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.MouseLeftButtonDown>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.UIElement.MouseLeftButtonDown>.</xref:System.Windows.UIElement.MouseLeftButtonDown> </xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseLeftButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.MouseLeftButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnMouseLeftButtonDown.</xref:System.Windows.UIElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnMouseLeftButtonDown. Например, можно получить из <xref:System.Windows.Controls.Button>и переопределять OnMouseLeftButtonDown в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click>событий.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата левая кнопка мыши."
  overload: System.Windows.UIElement.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.MouseLeftButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.MouseLeftButtonUp>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.UIElement.MouseLeftButtonUp>.</xref:System.Windows.UIElement.MouseLeftButtonUp> </xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseLeftButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.MouseLeftButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnMouseLeftButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии левой кнопки мыши."
  overload: System.Windows.UIElement.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.MouseRightButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.MouseRightButtonDown>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> </xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseRightButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.MouseRightButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnMouseRightButtonDown.</xref:System.Windows.UIElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnMouseRightButtonDown. Например, можно получить из <xref:System.Windows.Controls.Control>и переопределения в производном классе без вызова базы OnMouseRightButtonDown; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control>поведение по умолчанию.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата правая кнопка мыши."
  overload: System.Windows.UIElement.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.MouseRightButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.MouseRightButtonUp>Событие отображается передавать маршруту, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>базовое событие, пузырьковая Маршрутизация и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой перенаправленное событие <xref:System.Windows.UIElement.MouseRightButtonUp>.</xref:System.Windows.UIElement.MouseRightButtonUp> </xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.MouseRightButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.MouseRightButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnMouseRightButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии правой кнопки мыши."
  overload: System.Windows.UIElement.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt; перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии кнопки мыши."
  overload: System.Windows.UIElement.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt; вложенное перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии информируют о нажатии одной или нескольких кнопок мыши."
  overload: System.Windows.UIElement.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> перенаправленное событие</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnPreviewMouseLeftButtonDown.</xref:System.Windows.UIElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnPreviewMouseLeftButtonDown. Например, можно получить из <xref:System.Windows.Controls.Button>и переопределять OnPreviewMouseLeftButtonDown в производном классе без вызова базовой реализации; Однако это переопределение отключает <xref:System.Windows.Controls.Primitives.ButtonBase.Click>событий.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата левая кнопка мыши."
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> перенаправленное событие</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnPreviewMouseLeftButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии левой кнопки мыши."
  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.PreviewMouseRightButtonDown>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.UIElement.MouseRightButtonDown>.</xref:System.Windows.UIElement.MouseRightButtonDown> перенаправленное событие</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnPreviewMouseRightButtonDown.</xref:System.Windows.UIElement>       Кроме того можно переопределить этот метод, чтобы изменить обработку события для конкретного состояния мыши. Вы можете отказаться от вызвать базовую реализацию зависит от сценария. Если не вызывается базовый отключает обработку ввода по умолчанию для этого события мыши в классах предка, которые также предполагается, что для вызова OnPreviewMouseRightButtonDown. Например, можно получить из <xref:System.Windows.Controls.Control>и переопределения в производном классе без вызова базы OnPreviewMouseRightButtonDown; Однако это переопределение отключает службы меню контекста на элементе управления, которые входят в состав из <xref:System.Windows.Controls.Control>поведение по умолчанию.</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные события сообщают, что была нажата правая кнопка мыши."
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;> </xref> перенаправленное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "<xref:System.Windows.UIElement.PreviewMouseRightButtonUp>Событие отображается передавать нисходящую, но фактически перемещается Косвенным способом.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>Базовый событие, которое направлено туннеля и каждого <xref:System.Windows.UIElement>вдоль событие маршрута использует одинаковые обработки событий для прямой <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> перенаправленное событие</xref:System.Windows.UIElement></xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Несмотря на то, что вы можете пометить <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>событие как обработанное в целях данного элемента, состояние обработки выполнения не является постоянным для остальных элементов на маршруте события.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> Тем не менее, может потребоваться пометить событие как обработанное, чтобы предотвратить общих обработчиков экземпляра (те, которые не указывает `handledEventsToo`) вызов.       Реализация по умолчанию для общих мыши обработка событий в <xref:System.Windows.UIElement>прослушивает <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>и преобразует его в соответствующее событие локального.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement> Если вы хотите переопределить данную логику, необходимо создать производный класс. В статическом конструкторе производного класса регистрация обработчика альтернативных класс <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Невозможно изменить поведение обработки мыши <xref:System.Windows.UIElement>путем переопределения OnPreviewMouseRightButtonUp.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии правой кнопки мыши."
  overload: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref> , Содержащий данные события. Данные о событии отжатии одной или нескольких кнопок мыши."
  overload: System.Windows.UIElement.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;> </xref> перенаправленное событие, возникающее при сенсорном нажатии этого элемента."
  remarks: "Метод OnPreviewTouchDown имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchDown <xref:System.Windows.UIElement.PreviewTouchDown>событий.</xref:System.Windows.UIElement.PreviewTouchDown> Необходимо вызвать метод OnPreviewTouchDown базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутри этого элемента."
  remarks: "Метод OnPreviewTouchMove имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchMove <xref:System.Windows.UIElement.PreviewTouchMove>событий.</xref:System.Windows.UIElement.PreviewTouchMove> Необходимо вызвать метод OnPreviewTouchMove базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;> </xref> перенаправленного события, которое происходит при отпускании касания внутри этого элемента."
  remarks: "Метод OnPreviewTouchUp имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnPreviewTouchUp <xref:System.Windows.UIElement.PreviewTouchUp>событий.</xref:System.Windows.UIElement.PreviewTouchUp> Необходимо вызвать метод OnPreviewTouchUp базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "<xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  id: OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе участвует в операциях отрисовки, направляемых системой макета. Инструкции отрисовки для данного элемента не используются непосредственно при вызове этого метода и вместо этого сохраняются для последующего асинхронного использования, компоновку и отрисовку."
  remarks: "Этот метод не имеет по умолчанию реализации в <xref:System.Windows.UIElement>классе.</xref:System.Windows.UIElement>"
  example:
  - "The following code example shows a possible implementation for a panel derived class.  \n  \n [!code-vb[LightWeightCustomPanel#1](~/add/codesnippet/visualbasic/light_custom_panel_vb/offsetpanel.vb#1)]\n [!code-cs[LightWeightCustomPanel#1](~/add/codesnippet/csharp/Light_Custom_Panel_csharp/OffsetPanel.cs#1)]"
  syntax:
    content: protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);
    parameters:
    - id: drawingContext
      type: System.Windows.Media.DrawingContext
      description: "Инструкции по указанному элементу отрисовке. Этот контекст передается система макета."
  overload: System.Windows.UIElement.OnRender*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе участвует в операциях отрисовки, направляемых системой макета. Этот метод вызывается после обновления макета и перед отрисовкой, если элемент <xref:System.Windows.UIElement.RenderSize*>изменилось в результате обновления макета.</xref:System.Windows.UIElement.RenderSize*>"
  remarks: "У этого метода нет реализации по умолчанию. Обычный элемент уровня платформы WPF использует реализации переопределения из <xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkElement>Делает недействительными реализации <xref:System.Windows.FrameworkElement.Width%2A>и <xref:System.Windows.FrameworkElement.Height%2A>свойств и дескрипторы основы изменяют макет.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement> Переопределение OnRenderSizeChanged на <xref:System.Windows.UIElement>уровне означает, что элемент реализации намеренно не используется реализация уровня инфраструктуры WPF, и таким образом элемент должен обрабатывать логику макета напрямую, обычно путем написания системе замены макета.</xref:System.Windows.UIElement>"
  syntax:
    content: protected virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);
    parameters:
    - id: info
      type: System.Windows.SizeChangedInfo
      description: "Упакованные параметры (<xref href=&quot;System.Windows.SizeChangedInfo&quot;></xref>), которая содержит старый и новый размеры и измерение, которое фактически изменяется."
  overload: System.Windows.UIElement.OnRenderSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt; присоединенные события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt; присоединенные события с помощью данного элемента. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "У этого метода нет реализации по умолчанию. Поскольку промежуточный класс в цепочке наследования может реализовать этот метод, рекомендуется вызывать базовую реализацию в реализации. Вызов базовой реализации можно до или после специальной обработки, в зависимости от требований.       Этот метод аналогичен [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] шаблона On * методы: этот метод предоставляет средства для обработки соответствующего события из производных классов с помощью обработчика класса вместо обработчика экземпляра. В этом случае соответствующее событие является маршрутизируемым. Пометка события обрабатываются по-прежнему полезно для предотвращения обработчиками (для которых не указан `handledEventsToo`) вызов."
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда необработанное &lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt; вложенное событие встречает на своем маршруте, производный от этого класса элемент. Реализуйте этот метод, чтобы добавить обработчик класса для данного события."
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.Windows.UIElement.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.TouchDown&quot;> </xref> перенаправленное событие, возникающее при сенсорном нажатии внутри этого элемента."
  remarks: "Метод OnTouchDown имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchDown <xref:System.Windows.UIElement.TouchDown>событий.</xref:System.Windows.UIElement.TouchDown> Необходимо вызвать метод OnTouchDown базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.TouchEnter&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутрь границ данного элемента."
  remarks: "У метода TheOnTouchEnter нет реализации по умолчанию. Переопределить в производном классе позволяет обработать OnTouchEnter <xref:System.Windows.UIElement.TouchEnter>событий.</xref:System.Windows.UIElement.TouchEnter> Необходимо вызвать метод OnTouchEnter базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.TouchLeave&quot;> </xref> перенаправленного события, которое происходит при перемещении касания за границы это <xref href=&quot;System.Windows.UIElement&quot;> </xref>."
  remarks: "Метод OnTouchLeave имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchLeave <xref:System.Windows.UIElement.TouchLeave>событий.</xref:System.Windows.UIElement.TouchLeave> Необходимо вызвать метод OnTouchLeave базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.TouchMove&quot;> </xref> перенаправленного события, которое происходит при перемещении касания внутри этого элемента."
  remarks: "Метод OnTouchMove имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchMove <xref:System.Windows.UIElement.TouchMove>событий.</xref:System.Windows.UIElement.TouchMove> Необходимо вызвать метод OnTouchMove базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предоставляет обработку класса для <xref href=&quot;System.Windows.UIElement.TouchUp&quot;> </xref> перенаправленного события, которое происходит при отпускании касания внутри этого элемента."
  remarks: "Метод OnTouchUp имеет реализация по умолчанию отсутствует. Переопределить в производном классе позволяет обработать OnTouchUp <xref:System.Windows.UIElement.TouchUp>событий.</xref:System.Windows.UIElement.TouchUp> Необходимо вызвать метод OnTouchUp базового класса, чтобы получать события, базовые классы."
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "Объект <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.Windows.UIElement.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывается, когда родительский элемент <xref href=&quot;System.Windows.UIElement&quot;> </xref> сообщает об изменении в базовой визуального родительского объекта."
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "Предыдущий родительский элемент. Это может быть указано как <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> ранее не имеет родительского элемента."
  overload: System.Windows.UIElement.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Opacity
  id: Opacity
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает коэффициент непрозрачности, применяемый ко всему <xref href=&quot;System.Windows.UIElement&quot;> </xref> при его отрисовке в [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].  Это свойство зависимостей."
  remarks: "1.0 по умолчанию используется значение по умолчанию, предоставляемые исходных метаданных этого свойства зависимостей для <xref:System.Windows.UIElement>класса.</xref:System.Windows.UIElement> Другие производные классы потенциально может изменить это значение по умолчанию, переопределяя метаданные в своем конструкторе класса.       Значение прозрачности не будет применяться к фактическая структура, если элемент видим также (<xref:System.Windows.UIElement.IsVisible%2A> — `true`).</xref:System.Windows.UIElement.IsVisible%2A>       Прозрачность применяется от родительских элементов на вниз по дереву элементов к дочерним элементам, но видимые эффекты вложенных настроек прозрачности не указано в значении свойства отдельных дочерних элементов. Например если список имеет прозрачность 50% (0,5) и один из его элементов есть собственная прозрачность 20% (0.2), чистая видимая прозрачность элемента списка будут отображаться как если бы он был 10% (0,1), но значение свойства элемента списка свойство прозрачности по-прежнему будет 0,2 при запросе.       Даже если объявленной или вычисленной прозрачности равно 0, элемент по-прежнему участвует в событиях ввода и командах и потенциально может получить фокус. Этот аспект может быть полезно, если для экземпляра можно использовать объект непрозрачности нуля (например, фигуры) для маскировки базовых объектов прозрачными элементами. Непрозрачность нулевой объект затем можно обработать все события ввода, обработки для базовой области. Тем не менее `Background` или `Fill` фигуры или объекта должно быть присвоено значение, даже если это <xref:System.Windows.Media.Brushes.Transparent%2A>, в противном случае попадания не включен, и события не принимаются.</xref:System.Windows.Media.Brushes.Transparent%2A>      <a name=&quot;dependencyPropertyInfo_Opacity&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.OpacityProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.OpacityProperty>"
  syntax:
    content: public double Opacity { get; set; }
    return:
      type: System.Double
      description: "Коэффициент непрозрачности. По умолчанию непрозрачность равна 1,0. Ожидаемые значения находятся в диапазоне от 0,0 до 1,0."
  overload: System.Windows.UIElement.Opacity*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMask
  id: OpacityMask
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает маску непрозрачности в виде <xref href=&quot;System.Windows.Media.Brush&quot;> </xref> реализацию, которая применяется для любого альфа канала маскировании отображаемого содержимого этого элемента.  Это свойство зависимостей."
  remarks: "Это свойство используется только любое значение альфа-канала — для предоставленного <xref:System.Windows.Media.Brush>.</xref:System.Windows.Media.Brush> Другие каналы <xref:System.Windows.Media.Brush>отображенное содержимое (красный, зеленый или синий) игнорируются.</xref:System.Windows.Media.Brush>       Наиболее распространенными <xref:System.Windows.Media.Brush>для этой цели <xref:System.Windows.Media.ImageBrush>, который может использоваться для различных фото маскировки методы, такие как виньетирования.</xref:System.Windows.Media.ImageBrush> </xref:System.Windows.Media.Brush> Но любые определенные <xref:System.Windows.Media.Brush>(такие как <xref:System.Windows.Media.LinearGradientBrush>) может использоваться.</xref:System.Windows.Media.LinearGradientBrush> </xref:System.Windows.Media.Brush>       В [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)], значение этого свойства можно использовать встроенный синтаксис, которая относится к каждой реализации <xref:System.Windows.Media.Brush>абстрактного класса.</xref:System.Windows.Media.Brush> Дополнительные сведения см. в разделе [Рисование с сплошные цвета и градиенты Обзор](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;dependencyPropertyInfo_OpacityMask&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.OpacityMaskProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.OpacityMaskProperty>"
  example:
  - "The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.  \n  \n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]\n [!code-xml[OpacityMasksExample#UIElementOpacityMask](~/add/codesnippet/xaml/p-system.windows.uieleme_6_1.xaml)]"
  syntax:
    content: public System.Windows.Media.Brush OpacityMask { get; set; }
    return:
      type: System.Windows.Media.Brush
      description: "Кисть для маски непрозрачности."
  overload: System.Windows.UIElement.OpacityMask*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityMaskProperty
  id: OpacityMaskProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.OpacityMask*>свойство зависимостей.</xref:System.Windows.UIElement.OpacityMask*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.OpacityProperty
  id: OpacityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Opacity*>свойство зависимостей.</xref:System.Windows.UIElement.Opacity*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OpacityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PersistId
  id: PersistId
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает значение, однозначно определяющее этот элемент."
  remarks: "PersistId однозначно идентифицирует каждый элемент. Сохраняет элемент того же PersistId каждый раз же [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] загружается (включая двоичные представления). Этот идентификатор используется для внутренней загрузки, синтаксического анализа и сериализации требований. Он не предназначен для использования в коде приложения.       Это свойство не имеет отношения к <xref:System.Object.GetHashCode%2A>результат для любого заданного экземпляра.</xref:System.Object.GetHashCode%2A>"
  syntax:
    content: public int PersistId { get; }
    return:
      type: System.Int32
      description: "Уникальный идентификатор для этого элемента."
  overload: System.Windows.UIElement.PersistId*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "При переопределении в производном классе, возвращает элемент, который должен получить фокус для указанного направления перемещения фокуса, без перемещения фокуса на этот элемент."
  remarks: "Реализация по умолчанию этого метода в данном классе является неполной и всегда возвращает `null`."
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "Направление запроса на перемещение фокуса."
    return:
      type: System.Windows.DependencyObject
      description: "Элемент, который будет получил фокус, если <xref:System.Windows.UIElement.MoveFocus*>были фактически вызывается.</xref:System.Windows.UIElement.MoveFocus*>"
  overload: System.Windows.UIElement.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве цели перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragEnter часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragEnter присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewDragEnterEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.DragEnter>.</xref:System.Windows.UIElement.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragEnterEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewDragEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewDragEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве источника перетаскивания."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragLeave часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragLeave присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewDragLeaveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.DragLeave>.</xref:System.Windows.UIElement.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragLeaveEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewDragLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewDragLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве потенциальной цели."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDragOver часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDragOver присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewDragOverEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.DragOver>.</xref:System.Windows.UIElement.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDragOverEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewDragOver%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewDragOver&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда система ввода сообщает о соответствующем событии перетаскивания, имеющем в качестве конечного расположения сброса."
  remarks: "Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewDrop часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewDrop присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewDropEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.DragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.Drop>.</xref:System.Windows.UIElement.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement.PreviewDropEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewDrop%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewDrop&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при начале операции перетаскивания и вставки."
  remarks: "Событие PreviewGiveFeedback позволяет источнику события перетаскивания изменять внешний вид указателя мыши, чтобы дать пользователю визуальную обратную связь во время операции перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewGiveFeedback часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewGiveFeedback присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.GiveFeedbackEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.GiveFeedback>.</xref:System.Windows.UIElement.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewGiveFeedback&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда фокус ввода с клавиатуры на данном элементе."
  remarks: "Так как это событие нисходящей маршрутизации элемент, имеющий фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, имеющий фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewGotKeyboardFocus часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewGotKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.GotKeyboardFocus>.</xref:System.Windows.UIElement.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewGotKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.UIElement.KeyDown>Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления.</xref:System.Windows.UIElement.KeyDown> Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewKeyDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewKeyDown присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewKeyDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.KeyDown>.</xref:System.Windows.UIElement.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewKeyDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewKeyDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании клавиши, когда фокус ввода установлен на данном элементе."
  remarks: "Обработка клавиш взаимодействует с другими функциями платформы, такие как выполнение команд и композиция текста. <xref:System.Windows.UIElement.KeyUp>Событие является событием входной текст нижнего уровня, могут работать некорректно, в некоторых элементах управления.</xref:System.Windows.UIElement.KeyUp> Это так, как некоторые элементы управления имеют композиции элементов управления или обработку ввода обработку класса, который предоставляет более высокого уровня версия текста, а также связанные события. Дополнительные сведения обратитесь к документации для отдельных элементов управления.       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewKeyUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewKeyUp присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewKeyUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.KeyUp>.</xref:System.Windows.UIElement.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement.PreviewKeyUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewKeyUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewKeyUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда на этот элемент больше не фокус ввода с клавиатуры."
  remarks: "Так как это событие нисходящей маршрутизации элемент, который потерял фокус может быть дочерний элемент, а не элемента, которому фактически присоединен обработчик событий. Проверьте <xref:System.Windows.RoutedEventArgs.Source%2A>в данных события, чтобы определить фактический элемент, который потерял фокус.</xref:System.Windows.RoutedEventArgs.Source%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewLostKeyboardFocus часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewLostKeyboardFocus присоединяются к базовому объекту <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.LostKeyboardFocus>.</xref:System.Windows.UIElement.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewLostKeyboardFocus&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии любой кнопки мыши в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseDown присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Событие PreviewMouseDown часто возникает вместе с либо <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>или <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>и <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonDown></xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> См. Примечания <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>или <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.</xref:System.Windows.UIElement.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.MouseDown>.</xref:System.Windows.UIElement.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии левой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить PreviewMouseLeftButtonDown обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Возможно в нем создается класс обработчика события, такие как <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании левой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить PreviewMouseLeftButtonUp обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseLeftButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении указателя мыши, когда указатель мыши находится над данным элементом."
  remarks: "Это событие происходит, и когда указатель мыши входит в пределы элемента, а также при перемещении указателя мыши оставаясь в пределах границ элемента.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseMove присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.MouseMove>.</xref:System.Windows.UIElement.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement.PreviewMouseMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии правой кнопки мыши, когда указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить PreviewMouseRightButtonDown обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> Возможно в нем создается класс обработчика события, такие как <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании правой кнопки мыши, пока указатель мыши находится над данным элементом."
  remarks: "Несмотря на то, что это может показаться шагом следовать нисходящую через дерево элементов, фактически является прямой перенаправленного события, которое возникает и восходящему на дереве элементов каждого <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Это событие является одним из нескольких связанных событий, сообщающих кнопки мыши базовая <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>события, который является вложенным событием, которое обрабатывается каждым элементом на маршруте событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Данные события данного события предоставляет данные события базового <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Если это событие помечено как обработанное на маршруте события, по-прежнему возникают определенные события кнопки мыши; Тем не менее, необходимо добавить обработчики событий кнопки мыши путем явного вызова <xref:System.Windows.UIElement.AddHandler%2A>, с помощью параметра для обработки событий, которые уже помечено как обработанное, чтобы быть прослушивателей события.</xref:System.Windows.UIElement.AddHandler%2A> Если пометить PreviewMouseRightButtonUp обрабатываются по существу пометка <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>обрабатываются для всех последующих прослушивателей в маршруте и на всех событий, связанных с.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       С концептуальной точки зрения это событие (и другие события кнопки мыши <xref:System.Windows.UIElement>) быть мыши «служба» (с помощью определения службы, предоставляемые <xref:System.Windows.Input.Mouse>класса).</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement> Событие добавляет удобство нет необходимости проверять состояние кнопок мыши (слева направо, вверх вниз) исходного события мыши в данных события. Для более сложных сценариев, таких как проверка состояния стандартным кнопок может потребоваться использовать [!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)] на <xref:System.Windows.Input.Mouse>класс, а не <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse>      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseRightButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании любой кнопки мыши, если указатель мыши находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewMouseUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewMouseUp присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       Событие PreviewMouseUp часто возникает вместе с либо <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>или <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, которые соответствуют нажмите одну из двух кнопок мыши стандартных.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>и <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>также перенаправленные события, но они являются прямой перенаправленные события, и возникает соответствующее событие кнопками при <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>событий достигает этого элемента на маршруте события.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseRightButtonUp></xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> См. Примечания <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>или <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.MouseUp>.</xref:System.Windows.UIElement.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement.PreviewMouseUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при вращении колесика мыши в момент, когда указатель мыши находится над данным элементом."
  remarks: "Фокус или захват мыши имеют приоритет над которого указатель мыши; Таким образом при получении этого события из элемента или получившего, указатель мыши может быть фактически над другим элементом.       Это событие создает псевдоним <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewMouseMove>входит в состав класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewMouseMove>событий присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewMouseMove>      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewMouseWheelEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.MouseWheelEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.MouseWheel>.</xref:System.Windows.UIElement.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement.PreviewMouseWheelEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewMouseWheel&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении состояния клавиатуры или мыши кнопки во время операции перетаскивания и вставки."
  remarks: "Событие PreviewQueryContinueDrag позволяет источнику перетаскивания для объявления, должна ли быть отменена операция перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewQueryContinueDrag часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewQueryContinueDrag присоединяются к базовому объекту <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.QueryContinueDragEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.QueryContinueDrag>.</xref:System.Windows.UIElement.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewQueryContinueDrag&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusButtonDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusButtonDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [Touch поддержки входных данных в Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) и [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusButtonDown>.</xref:System.Windows.UIElement.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании кнопки пера, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusButtonUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusButtonUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusButtonUp>.</xref:System.Windows.UIElement.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо касается дигитайзера, когда оно находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusDownEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusDown>.</xref:System.Windows.UIElement.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.PreviewStylusDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом без касания дигитайзера."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusInAirMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> Обработчики событий, подключенные к событие PreviewStylusInAirMove подключены к основному <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusInAirMove>.</xref:System.Windows.UIElement.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится достаточно близко от дигитайзера, чтобы быть обнаруженным, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusInRange часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusInRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusInRange>.</xref:System.Windows.UIElement.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusInRangeEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusInRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом. Перемещаемое перо должно обнаруживаться дигитайзером для вызова этого события, в противном случае <xref href=&quot;System.Windows.UIElement.PreviewStylusInAirMove&quot;> </xref> вызывается событие."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusMove присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusMove>.</xref:System.Windows.UIElement.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится слишком далеко от дигитайзера, чтобы быть обнаруженным."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusOutOfRange часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> Обработчики событий, которые прикреплены к событию PreviewStylusOutOfRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusOutOfRange>.</xref:System.Windows.UIElement.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusOutOfRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при использовании пользователем одного из жестов пером."
  remarks: "Сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewStylusSystemGesture часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewStylusSystemGesture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusSystemGesture>.</xref:System.Windows.UIElement.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusSystemGesture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда пользователь отрывает перо от планшета, когда перо находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>вложенное событие для этого класса, чтобы <xref:System.Windows.UIElement.PreviewStylusDown>входит в состав класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> Обработчики событий, присоединенные к <xref:System.Windows.UIElement.PreviewStylusDown>событий присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewStylusDown>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewStylusUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.StylusUp>.</xref:System.Windows.UIElement.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.PreviewStylusUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewStylusUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewStylusUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом текста аппаратно независимым способом."
  remarks: "Событие PreviewTextInput позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством PreviewTextInput; Однако речи, рукописного ввода и других устройств ввода можно также создавать PreviewTextInput.       Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.       Это событие создает псевдоним <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы PreviewTextInput часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> Обработчики событий, присоединенные к событию PreviewTextInput присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewTextInputEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.Windows.Input.TextCompositionEventHandler>|      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.TextInput>.</xref:System.Windows.UIElement.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.PreviewTextInputEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewTextInput%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewTextInput&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при касании пальцем экрана, когда палец находится над данным элементом."
  remarks: "По умолчанию, PreviewTouchDown и <xref:System.Windows.UIElement.TouchDown>событий не выполняется до пальцем экрана касается и перемещает.</xref:System.Windows.UIElement.TouchDown> Пальца на экране необходимо удерживать нажатой его без его перемещения нажатие и удерживайте поведение <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.       Вызвать PreviewTouchDown и <xref:System.Windows.UIElement.TouchDown>события к как можно скорее касании пальцем экрана, задать <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>присоединенному свойству `false` для этого элемента.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewTouchDownEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.TouchDown>.</xref:System.Windows.UIElement.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewTouchDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewTouchDown&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении пальца на экране, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewTouchMoveEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.TouchMove>.</xref:System.Windows.UIElement.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewTouchMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewTouchMove&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда палец отрывается экрана, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.PreviewTouchUpEvent>|   | Стратегия маршрутизации | Туннелирование |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие восходящей событие является <xref:System.Windows.UIElement.TouchUp>.</xref:System.Windows.UIElement.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.PreviewTouchUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnPreviewTouchUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.PreviewTouchUp&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при изменении состояния клавиатуры или мыши кнопки во время операции перетаскивания и вставки."
  remarks: "Событие QueryContinueDrag позволяет источнику перетаскивания определить, должна ли быть отменена операция перетаскивания и вставки.       Это событие создает псевдоним <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы QueryContinueDrag часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> Обработчики событий, которые прикреплены к событию QueryContinueDrag присоединяются к базовому объекту <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.QueryContinueDragEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.QueryContinueDragEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.</xref:System.Windows.UIElement.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement.QueryContinueDragEvent>      -Переопределить <xref:System.Windows.UIElement.OnQueryContinueDrag%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.QueryContinueDrag&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursor
  id: QueryCursor
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при запросе отображения курсора. Это событие возникает для элемента каждый раз, что указатель мыши перемещается в новое положение, что означает, что может потребоваться изменить объекта курсора на новое место."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы QueryCursor часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> Обработчики событий, присоединенные к событию QueryCursor присоединяются к базовому объекту <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       Курсор, который ссылается данное имя события не обязательно текстового курсора (которую иногда называют курсора). Вместо этого в данном контексте курсор является объект, который объявляет графическое отображение на экране, связанные с несколькими возможными устройствами ввода или концепциями в [!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)] программирования. Этот объект представляется <xref:System.Windows.Input.Cursor>в класс [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)].</xref:System.Windows.Input.Cursor> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] Система ввода позволяет изменять этот курсор, когда он представляет экранную позицию указателя мыши. Можно использовать стандартные значения из <xref:System.Windows.Input.Cursors>перечисления, либо можно объявить пользовательский курсор в файл изображения.</xref:System.Windows.Input.Cursors>       Прослушивание события QueryCursor не является эффективным методика управления курсора. Вместо этого каждый элемент должен определить свое поведение курсора, и <xref:System.Windows.FrameworkContentElement.Cursor%2A> <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>.</xref:System.Windows.FrameworkContentElement.ForceCursor%2A> </xref:System.Windows.FrameworkContentElement.Cursor%2A> Только следует полагаться на QueryCursor, если не используются базовые элементы уровня платформы WPF или в непредвиденных случаях когда определение работы курсоров, на основе каждого элемента не соответствует вашим потребностям. Дополнительные сведения о реализации поведение курсора в ответ на QueryCursor см. в разделе <xref:System.Windows.Input.QueryCursorEventHandler>.</xref:System.Windows.Input.QueryCursorEventHandler>      <a name=&quot;routedEventInfo_QueryCursor&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.QueryCursorEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.QueryCursorEventHandler>|      -Отсутствует соответствующее событие не определено туннелирования.</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.UIElement.QueryCursorEvent>      -Переопределить <xref:System.Windows.UIElement.OnQueryCursor%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.QueryCursor&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Вызывает определенное перенаправленное событие. <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> Вызываемого идентифицируется в <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> экземпляр, который предоставляется (как <xref:System.Windows.RoutedEventArgs.RoutedEvent*>свойство данных этого события).</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "`e` Параметр типизируется как общий базовый тип для всех данных маршрутизируемого события; тем не менее, данные о событии должны быть предоставлены как наиболее конкретный тип данных события, доступные для события, так как <xref:System.Windows.RoutedEventArgs>производные классы содержат определенные свойства данных, предназначенные для конкретного события, инициируемого.</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>не только свойства состояния события; Он также определяет какие перенаправленного события.</xref:System.Windows.RoutedEventArgs> Данный шаблон генерации событий и данные о событии и отличаться от [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] классы событий и данных, которые обычно содержат свойства, относящиеся к событию."
  example:
  - "The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \n  \n [!code-cs[RoutedEventCustom#RaiseEvent](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#raiseevent)]\n [!code-vb[RoutedEventCustom#RaiseEvent](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#raiseevent)]"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "Объект <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> , содержащий данные о событии, а также определяет события."
  overload: System.Windows.UIElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает все полученные сенсорные устройства из этого элемента."
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает захват мыши, если элемент произвел захват."
  remarks: "Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.UIElement.IsMouseCaptured%2A>перед вызовом этого метода.</xref:System.Windows.UIElement.IsMouseCaptured%2A>"
  example:
  - "The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.  \n  \n [!code-cs[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/csharp/CubeAnimation_XBAP/Trackball.cs#uielementmousecapture)]\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/add/codesnippet/visualbasic/cubeanimation_xbap/trackball.vb#uielementmousecapture)]"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Освобождает перо, если элемент произвел захват."
  remarks: "Если этот элемент не содержит записи, вызов этого метода не оказывает влияния. Рассмотрите возможность проверки значения <xref:System.Windows.UIElement.IsStylusCaptured%2A>перед вызовом этого метода.</xref:System.Windows.UIElement.IsStylusCaptured%2A>"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.UIElement.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Предпринимает попытку освободить заданное сенсорное устройство из этого элемента."
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "Устройство, чтобы освободить."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если устройство сенсорного ввода освободить; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Удаляет указанный обработчик маршрутизируемого события из этого элемента."
  remarks: "Наиболее распространенный сценарий с помощью этого [!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)] — при реализации [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] «программу-оболочку» события, связанный с пользовательских перенаправленных событий, особенно при реализовать логику «удалить» для обработчиков [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] уровне. Это в следующем примере иллюстрируются сценарием примечания.       Вызов этого метода имеет смысл, если обработчики, зарегистрированные с критериями, соответствующими входным параметрам для вызова данного метода, отсутствуют.       Если более чем один обработчик присоединяется, соответствующих критериям, только первый обработчик в случае, когда обработчик хранилище будет удалено. Такое поведение согласуется с [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] поведение `-=` оператор.       Ни `routedEvent` , ни `handler` может быть `null`. Попытка присвоить значение, либо как `null` вызовет исключение.       Этот метод игнорирует `handledEventsToo` добавлены сведения о параметрах, который предоставляется, если обработчик был первоначально с <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>подпись, которая включает обработку событий уже обработана.</xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> Любой из типов обработчика удаляется."
  example:
  - "The following example uses RemoveHandler as part of an event wrapper definition.  \n  \n [!code-cs[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/csharp/RoutedEventCustom/SDKSampleLibrary/class1.cs#addremovehandler)]\n [!code-vb[RoutedEventCustom#AddRemoveHandler](~/add/codesnippet/visualbasic/SDKSampleLibrary/Class1.vb#addremovehandler)]"
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "Идентификатор перенаправленного события, к которому присоединен обработчик."
    - id: handler
      type: System.Delegate
      description: "Конкретная реализация обработчика для удаления из коллекции обработчиков событий для этого элемента."
  overload: System.Windows.UIElement.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderSize
  id: RenderSize
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает (или задает, см. раздел Примечания) окончательный размер этого элемента отрисовки."
  remarks: "> [!IMPORTANT]Настроек не пытайтесь задать это свойство, либо в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] или в коде, если используется система макета уровня платформы WPF. Почти все сценарии типичного приложения будут использовать эту систему макета. Система макета не будут использовать размеры set в свойстве RenderSize напрямую. Свойство RenderSize объявлено для записи только для включения определенных мост вариантов, которые намеренно обойти типичное расположение протоколов, таких как поддержка <xref:System.Windows.Documents.Adorner>класса.</xref:System.Windows.Documents.Adorner> уровня ядра WPF       Это свойство может использоваться для проверки переопределяет размер отрисовки применимо в рамках системы макета, например <xref:System.Windows.UIElement.OnRender%2A>или <xref:System.Windows.UIElement.GetLayoutClip%2A>.</xref:System.Windows.UIElement.GetLayoutClip%2A> </xref:System.Windows.UIElement.OnRender%2A>       Обработка распространенный сценарий <xref:System.Windows.FrameworkElement.SizeChanged>переопределить событие с обработчиком класс или <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>событий.</xref:System.Windows.UIElement.OnRenderSizeChanged%2A> </xref:System.Windows.FrameworkElement.SizeChanged>      <a name=&quot;xamlTextUsage_RenderSize&quot;></a>## Использование текста XAML"
  example:
  - "The following example shows how a custom adorner uses the RenderSize value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A>implementation.  \n  \n [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/visualbasic/adornersmisccode/window1.xaml.vb#uielementdesiredsize)]\n [!code-cs[AdornersMiscCode#UIElementDesiredSize](~/add/codesnippet/csharp/AdornersMiscCode/Window1.xaml.cs#uielementdesiredsize)]"
  syntax:
    content: public System.Windows.Size RenderSize { get; set; }
    return:
      type: System.Windows.Size
      description: "Отрисовываемый размер этого элемента."
  overload: System.Windows.UIElement.RenderSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransform
  id: RenderTransform
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает информацию о преобразовании, которая влияет на позицию отрисовки данного элемента.  Это свойство зависимостей."
  remarks: "Преобразование визуализации повторно создать размер структуры или не отображают сведения о размере. Отображать преобразованиях обычно предназначены для анимации или применения временных эффектов к элементу. Например, элемент может масштабироваться при с фокусом ввода или наведении может флуктуаций при загрузке, чтобы привлечь внимание к этой части [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)].      <a name=&quot;dependencyPropertyInfo_RenderTransform&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.RenderTransformProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.RenderTransformProperty>"
  syntax:
    content: public System.Windows.Media.Transform RenderTransform { get; set; }
    return:
      type: System.Windows.Media.Transform
      description: "Описывает специфику желаемого преобразования визуализации. Значение по умолчанию — &lt;xref:System.Windows.Media.Transform.Identity%2A?displayProperty=fullName&gt;."
  overload: System.Windows.UIElement.RenderTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOrigin
  id: RenderTransformOrigin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает центральную точку любого возможного преобразования отображения для объявления <xref:System.Windows.UIElement.RenderTransform*>, относительно границ элемента.</xref:System.Windows.UIElement.RenderTransform*>  Это свойство зависимостей."
  remarks: "RenderTransformOrigin имеет несколько нестандартное использование <xref:System.Windows.Point>Структура значения, в том, что <xref:System.Windows.Point>не представляет абсолютное расположение, в системе координат.</xref:System.Windows.Point> </xref:System.Windows.Point> Вместо этого значения в диапазоне от 0 до 1, интерпретируются как коэффициент для диапазона текущего элемента в каждом осей x и y. Например, (значение&0;.5,0.5) вызовет преобразование при прорисовке центрирование по элементу, а (1,1) поместит преобразование при прорисовке в нижнем правом углу элемента. <xref:System.Double.NaN>не является приемлемым значением.</xref:System.Double.NaN>       Значения за 0 и 1, также являются допустимыми и приведет к более нестандартным эффектам преобразования. Например при установке RenderTransformOrigin (5,5), и затем применить <xref:System.Windows.Media.RotateTransform>, точки вращения будет также вне границ элемента.</xref:System.Windows.Media.RotateTransform> Преобразование будет вращать элемент по большому кругу, рассчитанная далеко внизу и справа. Источник может быть где-либо внутри родительского элемента и возможно, это будет возможно из кадра или представления. Отрицательные значения точек похожи, они будут выходят за рамки верхней левой границы.       Визуализации преобразований, не влияют на макет и обычно используются для анимации или применения временных эффектов к элементу.      <a name=&quot;xamlAttributeUsage_RenderTransformOrigin&quot;></a>## Использование атрибута XAML ```   <object RenderTransformOrigin=&quot;xOrigin, yOrigin&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_RenderTransformOrigin&quot;> </a> ## использование элемента свойства XAML ```   <object>     <object.RenderTransformOrigin>       <Point X=&quot; xOrigin &quot; Y=&quot; yOrigin &quot;/>     </object.RenderTransformOrigin>   </object>   ``` <a name=&quot;xamlValues_RenderTransformOrigin&quot;> </a> ## значений XAML *xOrigin* Горизонтальный коэффициент источника.             Обычно задается как значение от 0 до 1. См. заметки.       *yOrigin* вертикальный коэффициент источника. Обычно задается как значение от 0 до 1. См. заметки.      <a name=&quot;dependencyPropertyInfo_RenderTransformOrigin&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.RenderTransformOriginProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.RenderTransformOriginProperty>"
  example:
  - "The following example builds up elements in code, applies a RenderTransformOrigin, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.  \n  \n [!code-cs[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/csharp/transformanimations_snip.project/RotateAboutCenterExample.cs#uielementrendertransformorigin)]\n [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/add/codesnippet/visualbasic/project/rotateaboutcenterexample.vb#uielementrendertransformorigin)]"
  syntax:
    content: public System.Windows.Point RenderTransformOrigin { get; set; }
    return:
      type: System.Windows.Point
      description: "Значение, объявляющее преобразование при прорисовке. Значение по умолчанию — <xref href=&quot;System.Windows.Point&quot;> </xref> с координатами (0,0)."
  overload: System.Windows.UIElement.RenderTransformOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  id: RenderTransformOriginProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.RenderTransformOrigin*>свойство зависимостей.</xref:System.Windows.UIElement.RenderTransformOrigin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.RenderTransformProperty
  id: RenderTransformProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.RenderTransform*>свойство зависимостей.</xref:System.Windows.UIElement.RenderTransform*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty RenderTransformProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает, должны ли процессы сериализации сериализовать содержимое <xref:System.Windows.UIElement.CommandBindings*>Свойства для экземпляров этого класса.</xref:System.Windows.UIElement.CommandBindings*>"
  remarks: "Будет возвращен `true` Если <xref:System.Windows.UIElement.CommandBindings%2A>установлено локально.</xref:System.Windows.UIElement.CommandBindings%2A>       Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.CommandBindings%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.UIElement.CommandBindings%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при разработке либо конструктора, либо собственного элемента управления, включающего <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.UIElement.CommandBindings*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.CommandBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает, должны ли процессы сериализации сериализовать содержимое <xref:System.Windows.UIElement.InputBindings*>Свойства для экземпляров этого класса.</xref:System.Windows.UIElement.InputBindings*>"
  remarks: "Будет возвращен `true` Если <xref:System.Windows.UIElement.InputBindings%2A>установлено локально.</xref:System.Windows.UIElement.InputBindings%2A>       Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.UIElement.InputBindings%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.UIElement.InputBindings%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при разработке либо конструктора, либо собственного элемента управления, включающего <xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>       Дополнительные сведения см. в разделе [определение значения по умолчанию с ShouldSerialize и Reset методы](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.UIElement.InputBindings*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.UIElement.InputBindings*>"
  overload: System.Windows.UIElement.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixels
  id: SnapsToDevicePixels
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает значение, определяющее ли отображение этого элемента должны использоваться параметры пикселей для определенного устройства при отрисовке.  Это свойство зависимостей."
  remarks: "Это свойство можно задать `true` в корневом элементе, чтобы включить пикселей привязать визуализации на протяжении пользовательского интерфейса. Для устройств, работающих с более чем 96 [!INCLUDE[TLA#tla_dpi](~/add/includes/ajax-current-ext-md.md)], пикселей привязать визуализации можно свести к минимуму сглаживания visual артефактов вблизи сплошных линий одним.       Если наследуемые <xref:System.Windows.FrameworkElement>или какой-либо возможной производные классы, <xref:System.Windows.FrameworkElement>переопределяет метаданные для этого свойства зависимостей задать <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>Свойства метаданных для `true`.</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> Это достигается является необходимость указать SnapsToDevicePixels как внешнего элемента в поддереве `true`, так и все дочерние элементы элемента поддерево будет SnapsToDevicePixels как `true` и оказывает воздействия visual SnapsToDevicePixels.      <a name=&quot;dependencyPropertyInfo_SnapsToDevicePixels&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>"
  syntax:
    content: public bool SnapsToDevicePixels { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент должен отрисовываться соответствии с пикселями устройства; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию, объявленное в <xref href=&quot;System.Windows.UIElement&quot;> </xref> — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.UIElement.SnapsToDevicePixels*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  id: SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.SnapsToDevicePixels*>свойство зависимостей.</xref:System.Windows.UIElement.SnapsToDevicePixels*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при нажатии кнопки пера в тот момент, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusButtonDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusButtonDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusButtonDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusButtonDown>.</xref:System.Windows.UIElement.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusButtonDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusButtonDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при отпускании кнопки пера, когда указатель находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusButtonUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusButtonUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusButtonUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusButtonEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusButtonUp>.</xref:System.Windows.UIElement.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement.StylusButtonUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusButtonUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusButtonUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDown
  id: StylusDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо касается дигитайзера, когда перо находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusDown часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusDown присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusDownEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusDown>.</xref:System.Windows.UIElement.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement.StylusDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusDown&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnter
  id: StylusEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо попадает внутрь границ данного элемента."
  remarks: "StylusEnter: использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       StylusEnter отслеживает, когда перо попадает внутрь границ элемента, это событие более буквально о том, что <xref:System.Windows.UIElement.IsStylusOver%2A>значение свойства было изменено с `false` для `true` для этого элемента.</xref:System.Windows.UIElement.IsStylusOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusEnter часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusEnter присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnStylusEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusEnter&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над элементом без касания дигитайзера."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusInAirMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> Обработчики событий, подключенные к событие StylusInAirMove подключены к основному <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusInAirMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusInAirMove>.</xref:System.Windows.UIElement.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInAirMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusInAirMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRange
  id: StylusInRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится достаточно близко от дигитайзера, чтобы быть обнаруженным, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusInRange часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusInRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusInRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusInRangeEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusInRange>.</xref:System.Windows.UIElement.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusInRangeEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusInRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusInRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeave
  id: StylusLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо покидает границы элемента."
  remarks: "StylusLeave: использует прямой обработки стратегия маршрутизации события. Прямые перенаправленные события не вызываются по маршруту; Вместо этого они обрабатываются в том же элементе где они возникли. Тем не менее они включают другие аспекты поведения маршрутизируемых событий, например триггеры событий в стилях.       StylusLeave отслеживает, когда перо покидает границы элемента, это событие более буквально о том, что <xref:System.Windows.UIElement.IsStylusOver%2A>значение свойства было изменено с `true` для `false` для этого элемента.</xref:System.Windows.UIElement.IsStylusOver%2A>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusLeave часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusLeave присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Переопределить <xref:System.Windows.UIElement.OnStylusLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusLeave&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMove
  id: StylusMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при движении пера над данным элементом. Перо должно перемещаться по дигитайзеру для порождения этого события. В противном случае <xref href=&quot;System.Windows.UIElement.StylusInAirMove&quot;> </xref> вызывается событие."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusMove часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusMove присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusMove>.</xref:System.Windows.UIElement.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusMove&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда перо находится слишком далеко от дигитайзера для обнаружения, находясь над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusOutOfRange часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusOutOfRange присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusOutOfRangeEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.</xref:System.Windows.UIElement.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusOutOfRangeEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusOutOfRange%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusOutOfRange&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusPlugIns
  id: StylusPlugIns
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает коллекцию всех объектов пера подключаемого модуля (настройки), связанные с данным элементом."
  remarks: "Пример элемента управления, который заполняет этой коллекции является <xref:System.Windows.Controls.InkCanvas>.</xref:System.Windows.Controls.InkCanvas> <xref:System.Windows.Controls.InkCanvas>Добавляет <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>как элемент коллекции, который позволяет <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer>для взаимодействия с ввод от пера и создания уникальных визуализации в ответ на управляемых событий пера.</xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> </xref:System.Windows.Input.StylusPlugIns.DynamicRenderer></xref:System.Windows.Controls.InkCanvas>       Сведения о создании пользовательских подключаемых модулей, который может получать и интерпретировать ввод от пера, см. в разделе [от пера](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the StylusPlugIns collection for a custom ink handling control.  \n  \n [!code-vb[StylusPluginSamples#3](~/add/codesnippet/visualbasic/StylusPluginSamples/StylusControl.vb#3)]\n [!code-cs[StylusPluginSamples#3](~/add/codesnippet/csharp/StylusPluginSamples/StylusControl.cs#3)]"
  syntax:
    content: protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }
    return:
      type: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
      description: "Коллекция подключаемые модули пера, как специализированная коллекция."
  overload: System.Windows.UIElement.StylusPlugIns*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при использовании пользователем одного из жестов пером."
  remarks: "Дополнительные сведения о жестах пера см. в разделе <xref:System.Windows.Input.SystemGesture>.</xref:System.Windows.Input.SystemGesture>       Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusSystemGesture часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusSystemGesture присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusSystemGestureEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusSystemGestureEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.</xref:System.Windows.UIElement.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement.StylusSystemGestureEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusSystemGesture%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusSystemGesture&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUp
  id: StylusUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда пользователь отрывает перо от планшета, когда оно находится над данным элементом."
  remarks: "Это событие создает псевдоним <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы StylusUp часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> Обработчики событий, присоединенные к событию StylusUp присоединяются к базовому объекту <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       Сенсорный ввод, мышь и ввод от пера существует определенная связь. Дополнительные сведения см. в разделе [фокусе](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;routedEventInfo_StylusUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.StylusUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.StylusEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewStylusUp>.</xref:System.Windows.UIElement.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement.StylusUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnStylusUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.StylusUp&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInput
  id: TextInput
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при получении этим элементом текста аппаратно независимым способом."
  remarks: "> [!IMPORTANT]Настроек это событие уже может быть помечено как обработанное внутренними реализациями составных элементов управления. См. примечания ниже.       Событие TextInput уже могут быть помечены как обработанное внутренними реализациями составных элементов управления. Например <xref:System.Windows.Controls.TextBox>является составной элемент управления, где TextInput событие уже помечено как обработанное; внутри элемента.</xref:System.Windows.Controls.TextBox> Элементы управления этого, так как он должен определять некоторые виды ввода, например клавиши со стрелками, как имеющие специальное значение для этого элемента управления. Если вы используете <xref:System.Windows.UIElement.PreviewTextInput>как событий, где присоединение обработчиков для ввода текста, может получать более точные результаты.</xref:System.Windows.UIElement.PreviewTextInput> Этот прием позволяет обойти большинство случаях данное событие уже помечено как обработанное и предотвращает получение событий на маршруте события обработчиком композиции элемента управления.       Событие TextInput позволяет компонента или приложения для прослушивания ввода текста в аппаратно независимым способом. Клавиатура является основным средством TextInput, но речи, рукописного текста и других устройств ввода также могут вызывать TextInput.       Из-за сочетания клавиш — клавиатуры по умолчанию или редакторам методов ввода, несколько событий клавиш могут сгенерировать только одно событие ввода текста.       Это событие создает псевдоним <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>вложенное событие для этого класса, таким образом, чтобы TextInput часть класса список членов, когда <xref:System.Windows.UIElement>наследуется от базового элемента.</xref:System.Windows.UIElement> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> Обработчики событий, присоединенные к событию TextInput присоединяются к базовому объекту <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>вложенное событие и получить тот же экземпляр данных события.</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>      <a name=&quot;routedEventInfo_TextInput&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TextInputEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.Windows.Input.TextCompositionEventHandler>|      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewTextInput>.</xref:System.Windows.UIElement.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement.TextInputEvent>      -Переопределить <xref:System.Windows.UIElement.OnTextInput%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TextInput&quot;> </xref> перенаправленного события."
  remarks: "Идентификаторы перенаправленных событий создаются при их регистрации. Эти идентификаторы содержат идентификационное имя, тип владельца, тип обработчика, стратегию маршрутизации и служебный метод добавления владельцев события. Эти идентификаторы можно использовать для добавления обработчиков классов.       Дополнительные сведения о регистрации перенаправленных событий см. в разделе <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> Дополнительные сведения об использовании идентификаторов перенаправленных событий для добавления обработчиков класса см. в разделе <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDown
  id: TouchDown
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при касании пальцем экрана, когда палец находится над данным элементом."
  remarks: "По умолчанию <xref:System.Windows.UIElement.PreviewTouchDown>и TouchDown событий не выполняется до пальцем экрана касается и перемещает.</xref:System.Windows.UIElement.PreviewTouchDown> Пальца на экране необходимо удерживать нажатой его без его перемещения нажатие и удерживайте поведение <xref:System.Windows.Input.Stylus>.</xref:System.Windows.Input.Stylus> Поведение нажатия и удерживания соответствует щелчку правой кнопкой мыши.       Чтобы вызвать <xref:System.Windows.UIElement.PreviewTouchDown>и события TouchDown к как можно скорее касании пальцем экрана, установите <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>присоединенного свойства для `false` для этого элемента.</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TouchDownEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewTouchDown>.</xref:System.Windows.UIElement.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchDownEvent>      -Переопределить <xref:System.Windows.UIElement.OnTouchDown%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TouchDown&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnter
  id: TouchEnter
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении касания внутрь границ данного элемента."
  remarks: "Это событие всегда возникает, независимо от захвата сенсорного устройства данным элементом.      <a name=&quot;routedEventInfo_TouchEnter&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TouchEnterEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.UIElement.OnTouchEnter%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TouchEnter&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, переданные в этот элемент."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, переданные в этот элемент."
  overload: System.Windows.UIElement.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, переданные в этот элемент или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, переданные в этот элемент или всех дочерних элементов в визуальном дереве."
  overload: System.Windows.UIElement.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, находящиеся над данным элементом."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, которые являются над данным элементом."
  overload: System.Windows.UIElement.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchesOver
  id: TouchesOver
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Получает все сенсорные устройства, находящиеся над данным элементом или всех дочерних элементов в визуальном дереве."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "Перечисление <xref href=&quot;System.Windows.Input.TouchDevice&quot;> </xref> объекты, которые являются данного элемента или всех дочерних элементов в визуальном дереве."
  overload: System.Windows.UIElement.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeave
  id: TouchLeave
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении касания за границы данного элемента."
  remarks: "Это событие всегда возникает, независимо от захвата сенсорного устройства данным элементом.      <a name=&quot;routedEventInfo_TouchLeave&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TouchLeaveEvent>|   | Стратегия маршрутизации | Прямой |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Переопределить <xref:System.Windows.UIElement.OnTouchLeave%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TouchLeave&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMove
  id: TouchMove
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит при перемещении пальца на экране, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TouchMoveEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewTouchMove>.</xref:System.Windows.UIElement.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchMoveEvent>      -Переопределить <xref:System.Windows.UIElement.OnTouchMove%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TouchMove&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUp
  id: TouchUp
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Происходит, когда палец отрывается экрана, когда палец находится над данным элементом."
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a>## Направлено сведения о событии ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.TouchUpEvent>|   | Стратегия маршрутизации | Передача вверх |   | Делегат | <xref:System.EventHandler%601>типа <xref:System.Windows.Input.TouchEventArgs>. |      -Соответствующие туннелирования событие является <xref:System.Windows.UIElement.PreviewTouchUp>.</xref:System.Windows.UIElement.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement.TouchUpEvent>      -Переопределить <xref:System.Windows.UIElement.OnTouchUp%2A>реализации класса обработчик данного события в производных классах.</xref:System.Windows.UIElement.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref href=&quot;System.Windows.UIElement.TouchUp&quot;> </xref> перенаправленного события."
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  id: TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Преобразует точку относительно данного элемента в координаты относительно указанного элемента."
  remarks: "Передача `null` для `relativeTo` разрешена и указывает, что координаты должен указываться относительно корневого элемента в логическом дереве, к которому принадлежит этот элемент.       Этот метод используется для преобразования попаданий тестовые точки значения. Вызов этого метода имеет значение, главным образом, при разработке элемента управления и необходимо обработать ввод на более низком уровне. Если вы используете существующие элементы управления, можно считать, что готовые элементы будут сообщать правильно преобразованные результаты проверки нажатия."
  syntax:
    content: public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "Значение точки относительно данного элемента."
    - id: relativeTo
      type: System.Windows.UIElement
      description: "Элемент, который преобразуется данная точка в."
    return:
      type: System.Windows.Point
      description: "Значение точки, теперь относительно целевого элемента, а не исходного."
  overload: System.Windows.UIElement.TranslatePoint*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Uid
  id: Uid
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает уникальный идентификатор (в целях локализации) для этого элемента. Это свойство зависимостей."
  remarks: "Используемые конструкторы для получения `x:Uid` значение (в разделе [Общие сведения о локализации и глобализации WPF](~/add/includes/ajax-current-ext-md.md) для получения дополнительной информации).      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.UidProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.UidProperty>"
  syntax:
    content: public string Uid { get; set; }
    return:
      type: System.String
      description: "Строка, представляющая уникальный идентификатор для этого элемента."
  overload: System.Windows.UIElement.Uid*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UidProperty
  id: UidProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Uid*>свойство зависимостей.</xref:System.Windows.UIElement.Uid*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty UidProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.UpdateLayout
  id: UpdateLayout
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Обеспечивает правильно обновление всех визуальных дочерних элементов данного элемента для макета."
  remarks: "При вызове этого метода, элементы с <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` или <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` вызовет конкретного элемента <xref:System.Windows.UIElement.MeasureCore%2A>и <xref:System.Windows.UIElement.ArrangeCore%2A>методы, что заставляет макета обновления и будут проверены все размеры вычисляемый.</xref:System.Windows.UIElement.ArrangeCore%2A> </xref:System.Windows.UIElement.MeasureCore%2A> </xref:System.Windows.UIElement.IsArrangeValid%2A></xref:System.Windows.UIElement.IsMeasureValid%2A>       Вызов этого метода имеет смысл, если макет не содержит изменений или имеют недопустимое состояние упорядочение ни измерения макета. Тем не менее если в отношении либо Недопустимый макет, вызов UpdateLayout отменят всего макета. Поэтому следует избегать вызова UpdateLayout после каждого изменения добавочного, так и дополнительный номер в дереве элементов. Система макета выполнит макета элемента с отложенным способом, используя алгоритм балансирования производительности и денежных единиц и взвешенной стратегией отложить изменения корней, пока все дочерние элементы являются допустимыми. UpdateLayout следует вызывать только в том случае, если абсолютной необходимости в обновлении размеров и позиций, и только после того, что вы являетесь, что выполнены все изменения свойств, что элемент управления, которые может повлиять на макет."
  syntax:
    content: public void UpdateLayout ();
    parameters: []
  overload: System.Windows.UIElement.UpdateLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.Visibility
  id: Visibility
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Возвращает или задает [!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)] видимость данного элемента.  Это свойство зависимостей."
  remarks: "Задание этого свойства влияет на значение <xref:System.Windows.UIElement.IsVisible%2A>, который в свою очередь может вызвать <xref:System.Windows.UIElement.IsVisibleChanged>событий.</xref:System.Windows.UIElement.IsVisibleChanged> </xref:System.Windows.UIElement.IsVisible%2A> Однако <xref:System.Windows.UIElement.IsVisible%2A>есть другие факторы, которые влияют на его, например параметры видимости родительских элементов, содержащих его.</xref:System.Windows.UIElement.IsVisible%2A>       Элементы, которых не видимость <xref:System.Windows.Visibility>не участвуют в входного события (или командах), не влияют на этапах либо измерения или компоновки макета, не входящие в последовательность перехода и не будут включаться в проверки нажатия.</xref:System.Windows.Visibility>       Если наследуемые <xref:System.Windows.Window>или его производные классы <xref:System.Windows.Window>переопределяет значение по умолчанию для этого свойства значение <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.Window> Действует, не работающих передачу показателей разметки на первоначально созданный <xref:System.Windows.Window>, и <xref:System.Windows.UIElement.RenderSize%2A>возвращает (0,0).</xref:System.Windows.UIElement.RenderSize%2A> </xref:System.Windows.Window> Дополнительные сведения см. в разделе <xref:System.Windows.Window>.</xref:System.Windows.Window> <xref:System.Windows.Controls.Primitives.Popup>переопределяет значение по умолчанию, необходимо также <xref:System.Windows.Visibility>, с похожим поведением, полученный для <xref:System.Windows.Controls.Primitives.Popup>и его производные классы.</xref:System.Windows.Controls.Primitives.Popup> </xref:System.Windows.Visibility></xref:System.Windows.Controls.Primitives.Popup>      <a name=&quot;dependencyPropertyInfo_Visibility&quot;></a>## Сведения о свойстве зависимостей ^ ^ ^   |-|-|   | Поле идентификатора | <xref:System.Windows.UIElement.VisibilityProperty>|   | Значение свойства метаданных `true`| None |</xref:System.Windows.UIElement.VisibilityProperty>"
  example:
  - "The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface. Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility?displayProperty=fullName>, and the other button in the pair is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \n  \n [!code-cs[MediaElement_snip#UIElementVisibility](~/add/codesnippet/csharp/p-system.windows.uieleme_13_1.cs)]\n [!code-vb[MediaElement_snip#UIElementVisibility](~/add/codesnippet/visualbasic/p-system.windows.uieleme_13_1.vb)]"
  syntax:
    content: public System.Windows.Visibility Visibility { get; set; }
    return:
      type: System.Windows.Visibility
      description: "Значение перечисления. Значение по умолчанию — <xref href=&quot;System.Windows.Visibility&quot;> </xref>."
  overload: System.Windows.UIElement.Visibility*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement
  langs:
  - csharp
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "Идентифицирует <xref:System.Windows.UIElement.Visibility*>свойство зависимостей.</xref:System.Windows.UIElement.Visibility*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Visual
  isExternal: false
  name: System.Windows.Media.Visual
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.UIElement.#ctor
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement()
  nameWithType: UIElement.UIElement()
  fullName: System.Windows.UIElement.UIElement()
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement.AllowDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
  fullName: System.Windows.UIElement.AllowDrop
- uid: System.Windows.UIElement.AllowDropProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDropProperty
  nameWithType: UIElement.AllowDropProperty
  fullName: System.Windows.UIElement.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock)
- uid: System.Windows.Media.Animation.AnimationClock
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationClock
  nameWithType: AnimationClock
  fullName: System.Windows.Media.Animation.AnimationClock
- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
  fullName: System.Windows.UIElement.ApplyAnimationClock(DependencyProperty,AnimationClock,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.UIElement.AreAnyTouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedProperty
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.UIElement.AreAnyTouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
  fullName: System.Windows.UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.AreAnyTouchesOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement.AreAnyTouchesOverProperty
- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange(Rect)
  nameWithType: UIElement.Arrange(Rect)
  fullName: System.Windows.UIElement.Arrange(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore(Rect)
  nameWithType: UIElement.ArrangeCore(Rect)
  fullName: System.Windows.UIElement.ArrangeCore(Rect)
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline)
- uid: System.Windows.Media.Animation.AnimationTimeline
  parent: System.Windows.Media.Animation
  isExternal: false
  name: AnimationTimeline
  nameWithType: AnimationTimeline
  fullName: System.Windows.Media.Animation.AnimationTimeline
- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  nameWithType: UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
  fullName: System.Windows.UIElement.BeginAnimation(DependencyProperty,AnimationTimeline,HandoffBehavior)
- uid: System.Windows.UIElement.BitmapEffect
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
  fullName: System.Windows.UIElement.BitmapEffect
- uid: System.Windows.Media.Effects.BitmapEffect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffect
  nameWithType: BitmapEffect
  fullName: System.Windows.Media.Effects.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
  fullName: System.Windows.UIElement.BitmapEffectInput
- uid: System.Windows.Media.Effects.BitmapEffectInput
  parent: System.Windows.Media.Effects
  isExternal: false
  name: BitmapEffectInput
  nameWithType: BitmapEffectInput
  fullName: System.Windows.Media.Effects.BitmapEffectInput
- uid: System.Windows.UIElement.BitmapEffectInputProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInputProperty
  nameWithType: UIElement.BitmapEffectInputProperty
  fullName: System.Windows.UIElement.BitmapEffectInputProperty
- uid: System.Windows.UIElement.BitmapEffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectProperty
  nameWithType: UIElement.BitmapEffectProperty
  fullName: System.Windows.UIElement.BitmapEffectProperty
- uid: System.Windows.UIElement.CacheMode
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
  fullName: System.Windows.UIElement.CacheMode
- uid: System.Windows.Media.CacheMode
  parent: System.Windows.Media
  isExternal: false
  name: CacheMode
  nameWithType: CacheMode
  fullName: System.Windows.Media.CacheMode
- uid: System.Windows.UIElement.CacheModeProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheModeProperty
  nameWithType: UIElement.CacheModeProperty
  fullName: System.Windows.UIElement.CacheModeProperty
- uid: System.Windows.UIElement.CaptureMouse
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse()
  nameWithType: UIElement.CaptureMouse()
  fullName: System.Windows.UIElement.CaptureMouse()
- uid: System.Windows.UIElement.CaptureStylus
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus()
  nameWithType: UIElement.CaptureStylus()
  fullName: System.Windows.UIElement.CaptureStylus()
- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.UIElement.Clip
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
  fullName: System.Windows.UIElement.Clip
- uid: System.Windows.Media.Geometry
  parent: System.Windows.Media
  isExternal: false
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.UIElement.ClipProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipProperty
  nameWithType: UIElement.ClipProperty
  fullName: System.Windows.UIElement.ClipProperty
- uid: System.Windows.UIElement.ClipToBounds
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
  fullName: System.Windows.UIElement.ClipToBounds
- uid: System.Windows.UIElement.ClipToBoundsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBoundsProperty
  nameWithType: UIElement.ClipToBoundsProperty
  fullName: System.Windows.UIElement.ClipToBoundsProperty
- uid: System.Windows.UIElement.CommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
  fullName: System.Windows.UIElement.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.UIElement.DesiredSize
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
  fullName: System.Windows.UIElement.DesiredSize
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.UIElement.DragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnter
  nameWithType: UIElement.DragEnter
  fullName: System.Windows.UIElement.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.UIElement.DragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragEnterEvent
  nameWithType: UIElement.DragEnterEvent
  fullName: System.Windows.UIElement.DragEnterEvent
- uid: System.Windows.UIElement.DragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeave
  nameWithType: UIElement.DragLeave
  fullName: System.Windows.UIElement.DragLeave
- uid: System.Windows.UIElement.DragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragLeaveEvent
  nameWithType: UIElement.DragLeaveEvent
  fullName: System.Windows.UIElement.DragLeaveEvent
- uid: System.Windows.UIElement.DragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOver
  nameWithType: UIElement.DragOver
  fullName: System.Windows.UIElement.DragOver
- uid: System.Windows.UIElement.DragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DragOverEvent
  nameWithType: UIElement.DragOverEvent
  fullName: System.Windows.UIElement.DragOverEvent
- uid: System.Windows.UIElement.Drop
  parent: System.Windows.UIElement
  isExternal: false
  name: Drop
  nameWithType: UIElement.Drop
  fullName: System.Windows.UIElement.Drop
- uid: System.Windows.UIElement.DropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: DropEvent
  nameWithType: UIElement.DropEvent
  fullName: System.Windows.UIElement.DropEvent
- uid: System.Windows.UIElement.Effect
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
  fullName: System.Windows.UIElement.Effect
- uid: System.Windows.Media.Effects.Effect
  parent: System.Windows.Media.Effects
  isExternal: false
  name: Effect
  nameWithType: Effect
  fullName: System.Windows.Media.Effects.Effect
- uid: System.Windows.UIElement.EffectProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: EffectProperty
  nameWithType: UIElement.EffectProperty
  fullName: System.Windows.UIElement.EffectProperty
- uid: System.Windows.UIElement.Focus
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus()
  nameWithType: UIElement.Focus()
  fullName: System.Windows.UIElement.Focus()
- uid: System.Windows.UIElement.Focusable
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
  fullName: System.Windows.UIElement.Focusable
- uid: System.Windows.UIElement.FocusableChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableChanged
  nameWithType: UIElement.FocusableChanged
  fullName: System.Windows.UIElement.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement.FocusableProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: FocusableProperty
  nameWithType: UIElement.FocusableProperty
  fullName: System.Windows.UIElement.FocusableProperty
- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue(DependencyProperty)
  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)
  fullName: System.Windows.UIElement.GetAnimationBaseValue(DependencyProperty)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip(Size)
  nameWithType: UIElement.GetLayoutClip(Size)
  fullName: System.Windows.UIElement.GetLayoutClip(Size)
- uid: System.Windows.UIElement.GetUIParentCore
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: UIElement.GetUIParentCore()
  fullName: System.Windows.UIElement.GetUIParentCore()
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.UIElement.GiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedback
  nameWithType: UIElement.GiveFeedback
  fullName: System.Windows.UIElement.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.UIElement.GiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: UIElement.GiveFeedbackEvent
  fullName: System.Windows.UIElement.GiveFeedbackEvent
- uid: System.Windows.UIElement.GotFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocus
  nameWithType: UIElement.GotFocus
  fullName: System.Windows.UIElement.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement.GotFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotFocusEvent
  nameWithType: UIElement.GotFocusEvent
  fullName: System.Windows.UIElement.GotFocusEvent
- uid: System.Windows.UIElement.GotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: UIElement.GotKeyboardFocus
  fullName: System.Windows.UIElement.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.UIElement.GotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: UIElement.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement.GotKeyboardFocusEvent
- uid: System.Windows.UIElement.GotMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCapture
  nameWithType: UIElement.GotMouseCapture
  fullName: System.Windows.UIElement.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.UIElement.GotMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: UIElement.GotMouseCaptureEvent
  fullName: System.Windows.UIElement.GotMouseCaptureEvent
- uid: System.Windows.UIElement.GotStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCapture
  nameWithType: UIElement.GotStylusCapture
  fullName: System.Windows.UIElement.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.UIElement.GotStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: UIElement.GotStylusCaptureEvent
  fullName: System.Windows.UIElement.GotStylusCaptureEvent
- uid: System.Windows.UIElement.GotTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCapture
  nameWithType: UIElement.GotTouchCapture
  fullName: System.Windows.UIElement.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.GotTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: UIElement.GotTouchCaptureEvent
  fullName: System.Windows.UIElement.GotTouchCaptureEvent
- uid: System.Windows.UIElement.HasAnimatedProperties
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
  fullName: System.Windows.UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
  fullName: System.Windows.UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(GeometryHitTestParameters)
  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(GeometryHitTestParameters)
- uid: System.Windows.Media.GeometryHitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestResult
  nameWithType: GeometryHitTestResult
  fullName: System.Windows.Media.GeometryHitTestResult
- uid: System.Windows.Media.GeometryHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: GeometryHitTestParameters
  nameWithType: GeometryHitTestParameters
  fullName: System.Windows.Media.GeometryHitTestParameters
- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore(PointHitTestParameters)
  nameWithType: UIElement.HitTestCore(PointHitTestParameters)
  fullName: System.Windows.UIElement.HitTestCore(PointHitTestParameters)
- uid: System.Windows.Media.HitTestResult
  parent: System.Windows.Media
  isExternal: false
  name: HitTestResult
  nameWithType: HitTestResult
  fullName: System.Windows.Media.HitTestResult
- uid: System.Windows.Media.PointHitTestParameters
  parent: System.Windows.Media
  isExternal: false
  name: PointHitTestParameters
  nameWithType: PointHitTestParameters
  fullName: System.Windows.Media.PointHitTestParameters
- uid: System.Windows.UIElement.InputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
  fullName: System.Windows.UIElement.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest(Point)
  nameWithType: UIElement.InputHitTest(Point)
  fullName: System.Windows.UIElement.InputHitTest(Point)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.UIElement.InvalidateArrange
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange()
  nameWithType: UIElement.InvalidateArrange()
  fullName: System.Windows.UIElement.InvalidateArrange()
- uid: System.Windows.UIElement.InvalidateMeasure
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure()
  nameWithType: UIElement.InvalidateMeasure()
  fullName: System.Windows.UIElement.InvalidateMeasure()
- uid: System.Windows.UIElement.InvalidateVisual
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual()
  nameWithType: UIElement.InvalidateVisual()
  fullName: System.Windows.UIElement.InvalidateVisual()
- uid: System.Windows.UIElement.IsArrangeValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
  fullName: System.Windows.UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
  fullName: System.Windows.UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledChanged
  nameWithType: UIElement.IsEnabledChanged
  fullName: System.Windows.UIElement.IsEnabledChanged
- uid: System.Windows.UIElement.IsEnabledCore
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
  fullName: System.Windows.UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledProperty
  nameWithType: UIElement.IsEnabledProperty
  fullName: System.Windows.UIElement.IsEnabledProperty
- uid: System.Windows.UIElement.IsFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
  fullName: System.Windows.UIElement.IsFocused
- uid: System.Windows.UIElement.IsFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocusedProperty
  nameWithType: UIElement.IsFocusedProperty
  fullName: System.Windows.UIElement.IsFocusedProperty
- uid: System.Windows.UIElement.IsHitTestVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
  fullName: System.Windows.UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsHitTestVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleChanged
  nameWithType: UIElement.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement.IsHitTestVisibleChanged
- uid: System.Windows.UIElement.IsHitTestVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisibleProperty
  nameWithType: UIElement.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement.IsHitTestVisibleProperty
- uid: System.Windows.UIElement.IsInputMethodEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
  fullName: System.Windows.UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
  fullName: System.Windows.UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusedChanged
- uid: System.Windows.UIElement.IsKeyboardFocusedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusedProperty
- uid: System.Windows.UIElement.IsKeyboardFocusWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement.IsKeyboardFocusWithinProperty
- uid: System.Windows.UIElement.IsManipulationEnabled
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
  fullName: System.Windows.UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsManipulationEnabledProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabledProperty
  nameWithType: UIElement.IsManipulationEnabledProperty
  fullName: System.Windows.UIElement.IsManipulationEnabledProperty
- uid: System.Windows.UIElement.IsMeasureValid
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
  fullName: System.Windows.UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
  fullName: System.Windows.UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: UIElement.IsMouseCapturedChanged
  fullName: System.Windows.UIElement.IsMouseCapturedChanged
- uid: System.Windows.UIElement.IsMouseCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: UIElement.IsMouseCapturedProperty
  fullName: System.Windows.UIElement.IsMouseCapturedProperty
- uid: System.Windows.UIElement.IsMouseCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
  fullName: System.Windows.UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement.IsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement.IsMouseCaptureWithinProperty
- uid: System.Windows.UIElement.IsMouseDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
  fullName: System.Windows.UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement.IsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement.IsMouseDirectlyOverProperty
- uid: System.Windows.UIElement.IsMouseOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
  fullName: System.Windows.UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsMouseOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: UIElement.IsMouseOverProperty
  fullName: System.Windows.UIElement.IsMouseOverProperty
- uid: System.Windows.UIElement.IsStylusCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
  fullName: System.Windows.UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCapturedChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: UIElement.IsStylusCapturedChanged
  fullName: System.Windows.UIElement.IsStylusCapturedChanged
- uid: System.Windows.UIElement.IsStylusCapturedProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: UIElement.IsStylusCapturedProperty
  fullName: System.Windows.UIElement.IsStylusCapturedProperty
- uid: System.Windows.UIElement.IsStylusCaptureWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
  fullName: System.Windows.UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement.IsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement.IsStylusCaptureWithinProperty
- uid: System.Windows.UIElement.IsStylusDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
  fullName: System.Windows.UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement.IsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement.IsStylusDirectlyOverProperty
- uid: System.Windows.UIElement.IsStylusOver
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
  fullName: System.Windows.UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsStylusOverProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: UIElement.IsStylusOverProperty
  fullName: System.Windows.UIElement.IsStylusOverProperty
- uid: System.Windows.UIElement.IsVisible
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
  fullName: System.Windows.UIElement.IsVisible
- uid: System.Windows.UIElement.IsVisibleChanged
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleChanged
  nameWithType: UIElement.IsVisibleChanged
  fullName: System.Windows.UIElement.IsVisibleChanged
- uid: System.Windows.UIElement.IsVisibleProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisibleProperty
  nameWithType: UIElement.IsVisibleProperty
  fullName: System.Windows.UIElement.IsVisibleProperty
- uid: System.Windows.UIElement.KeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDown
  nameWithType: UIElement.KeyDown
  fullName: System.Windows.UIElement.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement.KeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyDownEvent
  nameWithType: UIElement.KeyDownEvent
  fullName: System.Windows.UIElement.KeyDownEvent
- uid: System.Windows.UIElement.KeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUp
  nameWithType: UIElement.KeyUp
  fullName: System.Windows.UIElement.KeyUp
- uid: System.Windows.UIElement.KeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: KeyUpEvent
  nameWithType: UIElement.KeyUpEvent
  fullName: System.Windows.UIElement.KeyUpEvent
- uid: System.Windows.UIElement.LayoutUpdated
  parent: System.Windows.UIElement
  isExternal: false
  name: LayoutUpdated
  nameWithType: UIElement.LayoutUpdated
  fullName: System.Windows.UIElement.LayoutUpdated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.UIElement.LostFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocus
  nameWithType: UIElement.LostFocus
  fullName: System.Windows.UIElement.LostFocus
- uid: System.Windows.UIElement.LostFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostFocusEvent
  nameWithType: UIElement.LostFocusEvent
  fullName: System.Windows.UIElement.LostFocusEvent
- uid: System.Windows.UIElement.LostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: UIElement.LostKeyboardFocus
  fullName: System.Windows.UIElement.LostKeyboardFocus
- uid: System.Windows.UIElement.LostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: UIElement.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement.LostKeyboardFocusEvent
- uid: System.Windows.UIElement.LostMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCapture
  nameWithType: UIElement.LostMouseCapture
  fullName: System.Windows.UIElement.LostMouseCapture
- uid: System.Windows.UIElement.LostMouseCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: UIElement.LostMouseCaptureEvent
  fullName: System.Windows.UIElement.LostMouseCaptureEvent
- uid: System.Windows.UIElement.LostStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCapture
  nameWithType: UIElement.LostStylusCapture
  fullName: System.Windows.UIElement.LostStylusCapture
- uid: System.Windows.UIElement.LostStylusCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: UIElement.LostStylusCaptureEvent
  fullName: System.Windows.UIElement.LostStylusCaptureEvent
- uid: System.Windows.UIElement.LostTouchCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCapture
  nameWithType: UIElement.LostTouchCapture
  fullName: System.Windows.UIElement.LostTouchCapture
- uid: System.Windows.UIElement.LostTouchCaptureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: UIElement.LostTouchCaptureEvent
  fullName: System.Windows.UIElement.LostTouchCaptureEvent
- uid: System.Windows.UIElement.ManipulationBoundaryFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedback
  nameWithType: UIElement.ManipulationBoundaryFeedback
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedback
- uid: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  nameWithType: EventHandler<ManipulationBoundaryFeedbackEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
    name: ManipulationBoundaryFeedbackEventArgs
    nameWithType: ManipulationBoundaryFeedbackEventArgs
    fullName: ManipulationBoundaryFeedbackEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationBoundaryFeedbackEvent
  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent
  fullName: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
- uid: System.Windows.UIElement.ManipulationCompleted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompleted
  nameWithType: UIElement.ManipulationCompleted
  fullName: System.Windows.UIElement.ManipulationCompleted
- uid: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationCompletedEventArgs>
  nameWithType: EventHandler<ManipulationCompletedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationCompletedEventArgs
    name: ManipulationCompletedEventArgs
    nameWithType: ManipulationCompletedEventArgs
    fullName: ManipulationCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationCompletedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationCompletedEvent
  nameWithType: UIElement.ManipulationCompletedEvent
  fullName: System.Windows.UIElement.ManipulationCompletedEvent
- uid: System.Windows.UIElement.ManipulationDelta
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDelta
  nameWithType: UIElement.ManipulationDelta
  fullName: System.Windows.UIElement.ManipulationDelta
- uid: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationDeltaEventArgs>
  nameWithType: EventHandler<ManipulationDeltaEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationDeltaEventArgs
    name: ManipulationDeltaEventArgs
    nameWithType: ManipulationDeltaEventArgs
    fullName: ManipulationDeltaEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationDeltaEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationDeltaEvent
  nameWithType: UIElement.ManipulationDeltaEvent
  fullName: System.Windows.UIElement.ManipulationDeltaEvent
- uid: System.Windows.UIElement.ManipulationInertiaStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStarting
  nameWithType: UIElement.ManipulationInertiaStarting
  fullName: System.Windows.UIElement.ManipulationInertiaStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationInertiaStartingEventArgs>
  nameWithType: EventHandler<ManipulationInertiaStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
    name: ManipulationInertiaStartingEventArgs
    nameWithType: ManipulationInertiaStartingEventArgs
    fullName: ManipulationInertiaStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationInertiaStartingEvent
  nameWithType: UIElement.ManipulationInertiaStartingEvent
  fullName: System.Windows.UIElement.ManipulationInertiaStartingEvent
- uid: System.Windows.UIElement.ManipulationStarted
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarted
  nameWithType: UIElement.ManipulationStarted
  fullName: System.Windows.UIElement.ManipulationStarted
- uid: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartedEventArgs>
  nameWithType: EventHandler<ManipulationStartedEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartedEventArgs
    name: ManipulationStartedEventArgs
    nameWithType: ManipulationStartedEventArgs
    fullName: ManipulationStartedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartedEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartedEvent
  nameWithType: UIElement.ManipulationStartedEvent
  fullName: System.Windows.UIElement.ManipulationStartedEvent
- uid: System.Windows.UIElement.ManipulationStarting
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStarting
  nameWithType: UIElement.ManipulationStarting
  fullName: System.Windows.UIElement.ManipulationStarting
- uid: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ManipulationStartingEventArgs>
  nameWithType: EventHandler<ManipulationStartingEventArgs>
  fullName: System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.ManipulationStartingEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.ManipulationStartingEventArgs
    name: ManipulationStartingEventArgs
    nameWithType: ManipulationStartingEventArgs
    fullName: ManipulationStartingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.ManipulationStartingEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: ManipulationStartingEvent
  nameWithType: UIElement.ManipulationStartingEvent
  fullName: System.Windows.UIElement.ManipulationStartingEvent
- uid: System.Windows.UIElement.Measure(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure(Size)
  nameWithType: UIElement.Measure(Size)
  fullName: System.Windows.UIElement.Measure(Size)
- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore(Size)
  nameWithType: UIElement.MeasureCore(Size)
  fullName: System.Windows.UIElement.MeasureCore(Size)
- uid: System.Windows.UIElement.MouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDown
  nameWithType: UIElement.MouseDown
  fullName: System.Windows.UIElement.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement.MouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseDownEvent
  nameWithType: UIElement.MouseDownEvent
  fullName: System.Windows.UIElement.MouseDownEvent
- uid: System.Windows.UIElement.MouseEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnter
  nameWithType: UIElement.MouseEnter
  fullName: System.Windows.UIElement.MouseEnter
- uid: System.Windows.UIElement.MouseEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseEnterEvent
  nameWithType: UIElement.MouseEnterEvent
  fullName: System.Windows.UIElement.MouseEnterEvent
- uid: System.Windows.UIElement.MouseLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeave
  nameWithType: UIElement.MouseLeave
  fullName: System.Windows.UIElement.MouseLeave
- uid: System.Windows.UIElement.MouseLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: UIElement.MouseLeaveEvent
  fullName: System.Windows.UIElement.MouseLeaveEvent
- uid: System.Windows.UIElement.MouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: UIElement.MouseLeftButtonDown
  fullName: System.Windows.UIElement.MouseLeftButtonDown
- uid: System.Windows.UIElement.MouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.MouseLeftButtonDownEvent
- uid: System.Windows.UIElement.MouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: UIElement.MouseLeftButtonUp
  fullName: System.Windows.UIElement.MouseLeftButtonUp
- uid: System.Windows.UIElement.MouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.MouseLeftButtonUpEvent
- uid: System.Windows.UIElement.MouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMove
  nameWithType: UIElement.MouseMove
  fullName: System.Windows.UIElement.MouseMove
- uid: System.Windows.UIElement.MouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseMoveEvent
  nameWithType: UIElement.MouseMoveEvent
  fullName: System.Windows.UIElement.MouseMoveEvent
- uid: System.Windows.UIElement.MouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: UIElement.MouseRightButtonDown
  fullName: System.Windows.UIElement.MouseRightButtonDown
- uid: System.Windows.UIElement.MouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: UIElement.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement.MouseRightButtonDownEvent
- uid: System.Windows.UIElement.MouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: UIElement.MouseRightButtonUp
  fullName: System.Windows.UIElement.MouseRightButtonUp
- uid: System.Windows.UIElement.MouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: UIElement.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement.MouseRightButtonUpEvent
- uid: System.Windows.UIElement.MouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUp
  nameWithType: UIElement.MouseUp
  fullName: System.Windows.UIElement.MouseUp
- uid: System.Windows.UIElement.MouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseUpEvent
  nameWithType: UIElement.MouseUpEvent
  fullName: System.Windows.UIElement.MouseUpEvent
- uid: System.Windows.UIElement.MouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheel
  nameWithType: UIElement.MouseWheel
  fullName: System.Windows.UIElement.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement.MouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: MouseWheelEvent
  nameWithType: UIElement.MouseWheelEvent
  fullName: System.Windows.UIElement.MouseWheelEvent
- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement.OnAccessKey(AccessKeyEventArgs)
- uid: System.Windows.Input.AccessKeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: AccessKeyEventArgs
  nameWithType: AccessKeyEventArgs
  fullName: System.Windows.Input.AccessKeyEventArgs
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged(UIElement)
  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)
  fullName: System.Windows.UIElement.OnChildDesiredSizeChanged(UIElement)
- uid: System.Windows.UIElement
  parent: System.Windows
  isExternal: false
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Windows.UIElement.OnCreateAutomationPeer
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: UIElement.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted(ManipulationCompletedEventArgs)
  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)
- uid: System.Windows.Input.ManipulationCompletedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationCompletedEventArgs
  nameWithType: ManipulationCompletedEventArgs
  fullName: System.Windows.Input.ManipulationCompletedEventArgs
- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta(ManipulationDeltaEventArgs)
  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
  fullName: System.Windows.UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)
- uid: System.Windows.Input.ManipulationInertiaStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationInertiaStartingEventArgs
  nameWithType: ManipulationInertiaStartingEventArgs
  fullName: System.Windows.Input.ManipulationInertiaStartingEventArgs
- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted(ManipulationStartedEventArgs)
  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarted(ManipulationStartedEventArgs)
- uid: System.Windows.Input.ManipulationStartedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartedEventArgs
  nameWithType: ManipulationStartedEventArgs
  fullName: System.Windows.Input.ManipulationStartedEventArgs
- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting(ManipulationStartingEventArgs)
  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
  fullName: System.Windows.UIElement.OnManipulationStarting(ManipulationStartingEventArgs)
- uid: System.Windows.Input.ManipulationStartingEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationStartingEventArgs
  nameWithType: ManipulationStartingEventArgs
  fullName: System.Windows.Input.ManipulationStartingEventArgs
- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender(DrawingContext)
  nameWithType: UIElement.OnRender(DrawingContext)
  fullName: System.Windows.UIElement.OnRender(DrawingContext)
- uid: System.Windows.Media.DrawingContext
  parent: System.Windows.Media
  isExternal: false
  name: DrawingContext
  nameWithType: DrawingContext
  fullName: System.Windows.Media.DrawingContext
- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.UIElement.OnRenderSizeChanged(SizeChangedInfo)
- uid: System.Windows.SizeChangedInfo
  parent: System.Windows
  isExternal: false
  name: SizeChangedInfo
  nameWithType: SizeChangedInfo
  fullName: System.Windows.SizeChangedInfo
- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement.OnStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement.OnTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.UIElement.Opacity
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
  fullName: System.Windows.UIElement.Opacity
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.UIElement.OpacityMask
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
  fullName: System.Windows.UIElement.OpacityMask
- uid: System.Windows.Media.Brush
  parent: System.Windows.Media
  isExternal: false
  name: Brush
  nameWithType: Brush
  fullName: System.Windows.Media.Brush
- uid: System.Windows.UIElement.OpacityMaskProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMaskProperty
  nameWithType: UIElement.OpacityMaskProperty
  fullName: System.Windows.UIElement.OpacityMaskProperty
- uid: System.Windows.UIElement.OpacityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityProperty
  nameWithType: UIElement.OpacityProperty
  fullName: System.Windows.UIElement.OpacityProperty
- uid: System.Windows.UIElement.PersistId
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
  fullName: System.Windows.UIElement.PersistId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.UIElement.PreviewDragEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnter
  nameWithType: UIElement.PreviewDragEnter
  fullName: System.Windows.UIElement.PreviewDragEnter
- uid: System.Windows.UIElement.PreviewDragEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: UIElement.PreviewDragEnterEvent
  fullName: System.Windows.UIElement.PreviewDragEnterEvent
- uid: System.Windows.UIElement.PreviewDragLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeave
  nameWithType: UIElement.PreviewDragLeave
  fullName: System.Windows.UIElement.PreviewDragLeave
- uid: System.Windows.UIElement.PreviewDragLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: UIElement.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement.PreviewDragLeaveEvent
- uid: System.Windows.UIElement.PreviewDragOver
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOver
  nameWithType: UIElement.PreviewDragOver
  fullName: System.Windows.UIElement.PreviewDragOver
- uid: System.Windows.UIElement.PreviewDragOverEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: UIElement.PreviewDragOverEvent
  fullName: System.Windows.UIElement.PreviewDragOverEvent
- uid: System.Windows.UIElement.PreviewDrop
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDrop
  nameWithType: UIElement.PreviewDrop
  fullName: System.Windows.UIElement.PreviewDrop
- uid: System.Windows.UIElement.PreviewDropEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewDropEvent
  nameWithType: UIElement.PreviewDropEvent
  fullName: System.Windows.UIElement.PreviewDropEvent
- uid: System.Windows.UIElement.PreviewGiveFeedback
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: UIElement.PreviewGiveFeedback
  fullName: System.Windows.UIElement.PreviewGiveFeedback
- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement.PreviewGiveFeedbackEvent
- uid: System.Windows.UIElement.PreviewGotKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocus
- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewGotKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewKeyDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDown
  nameWithType: UIElement.PreviewKeyDown
  fullName: System.Windows.UIElement.PreviewKeyDown
- uid: System.Windows.UIElement.PreviewKeyDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: UIElement.PreviewKeyDownEvent
  fullName: System.Windows.UIElement.PreviewKeyDownEvent
- uid: System.Windows.UIElement.PreviewKeyUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUp
  nameWithType: UIElement.PreviewKeyUp
  fullName: System.Windows.UIElement.PreviewKeyUp
- uid: System.Windows.UIElement.PreviewKeyUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: UIElement.PreviewKeyUpEvent
  fullName: System.Windows.UIElement.PreviewKeyUpEvent
- uid: System.Windows.UIElement.PreviewLostKeyboardFocus
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocus
- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement.PreviewLostKeyboardFocusEvent
- uid: System.Windows.UIElement.PreviewMouseDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDown
  nameWithType: UIElement.PreviewMouseDown
  fullName: System.Windows.UIElement.PreviewMouseDown
- uid: System.Windows.UIElement.PreviewMouseDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: UIElement.PreviewMouseDownEvent
  fullName: System.Windows.UIElement.PreviewMouseDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMove
  nameWithType: UIElement.PreviewMouseMove
  fullName: System.Windows.UIElement.PreviewMouseMove
- uid: System.Windows.UIElement.PreviewMouseMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: UIElement.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement.PreviewMouseMoveEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDown
- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonDownEvent
- uid: System.Windows.UIElement.PreviewMouseRightButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUp
- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement.PreviewMouseRightButtonUpEvent
- uid: System.Windows.UIElement.PreviewMouseUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUp
  nameWithType: UIElement.PreviewMouseUp
  fullName: System.Windows.UIElement.PreviewMouseUp
- uid: System.Windows.UIElement.PreviewMouseUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: UIElement.PreviewMouseUpEvent
  fullName: System.Windows.UIElement.PreviewMouseUpEvent
- uid: System.Windows.UIElement.PreviewMouseWheel
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: UIElement.PreviewMouseWheel
  fullName: System.Windows.UIElement.PreviewMouseWheel
- uid: System.Windows.UIElement.PreviewMouseWheelEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: UIElement.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement.PreviewMouseWheelEvent
- uid: System.Windows.UIElement.PreviewQueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: UIElement.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement.PreviewQueryContinueDragEvent
- uid: System.Windows.UIElement.PreviewStylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: UIElement.PreviewStylusButtonDown
  fullName: System.Windows.UIElement.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonDownEvent
- uid: System.Windows.UIElement.PreviewStylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: UIElement.PreviewStylusButtonUp
  fullName: System.Windows.UIElement.PreviewStylusButtonUp
- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement.PreviewStylusButtonUpEvent
- uid: System.Windows.UIElement.PreviewStylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDown
  nameWithType: UIElement.PreviewStylusDown
  fullName: System.Windows.UIElement.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.UIElement.PreviewStylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: UIElement.PreviewStylusDownEvent
  fullName: System.Windows.UIElement.PreviewStylusDownEvent
- uid: System.Windows.UIElement.PreviewStylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: UIElement.PreviewStylusInAirMove
  fullName: System.Windows.UIElement.PreviewStylusInAirMove
- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusInAirMoveEvent
- uid: System.Windows.UIElement.PreviewStylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: UIElement.PreviewStylusInRange
  fullName: System.Windows.UIElement.PreviewStylusInRange
- uid: System.Windows.UIElement.PreviewStylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusInRangeEvent
- uid: System.Windows.UIElement.PreviewStylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMove
  nameWithType: UIElement.PreviewStylusMove
  fullName: System.Windows.UIElement.PreviewStylusMove
- uid: System.Windows.UIElement.PreviewStylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: UIElement.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement.PreviewStylusMoveEvent
- uid: System.Windows.UIElement.PreviewStylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: UIElement.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement.PreviewStylusOutOfRange
- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement.PreviewStylusOutOfRangeEvent
- uid: System.Windows.UIElement.PreviewStylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: UIElement.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement.PreviewStylusSystemGestureEvent
- uid: System.Windows.UIElement.PreviewStylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUp
  nameWithType: UIElement.PreviewStylusUp
  fullName: System.Windows.UIElement.PreviewStylusUp
- uid: System.Windows.UIElement.PreviewStylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: UIElement.PreviewStylusUpEvent
  fullName: System.Windows.UIElement.PreviewStylusUpEvent
- uid: System.Windows.UIElement.PreviewTextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInput
  nameWithType: UIElement.PreviewTextInput
  fullName: System.Windows.UIElement.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.UIElement.PreviewTextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: UIElement.PreviewTextInputEvent
  fullName: System.Windows.UIElement.PreviewTextInputEvent
- uid: System.Windows.UIElement.PreviewTouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDown
  nameWithType: UIElement.PreviewTouchDown
  fullName: System.Windows.UIElement.PreviewTouchDown
- uid: System.Windows.UIElement.PreviewTouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: UIElement.PreviewTouchDownEvent
  fullName: System.Windows.UIElement.PreviewTouchDownEvent
- uid: System.Windows.UIElement.PreviewTouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMove
  nameWithType: UIElement.PreviewTouchMove
  fullName: System.Windows.UIElement.PreviewTouchMove
- uid: System.Windows.UIElement.PreviewTouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: UIElement.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement.PreviewTouchMoveEvent
- uid: System.Windows.UIElement.PreviewTouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUp
  nameWithType: UIElement.PreviewTouchUp
  fullName: System.Windows.UIElement.PreviewTouchUp
- uid: System.Windows.UIElement.PreviewTouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: UIElement.PreviewTouchUpEvent
  fullName: System.Windows.UIElement.PreviewTouchUpEvent
- uid: System.Windows.UIElement.QueryContinueDrag
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDrag
  nameWithType: UIElement.QueryContinueDrag
  fullName: System.Windows.UIElement.QueryContinueDrag
- uid: System.Windows.UIElement.QueryContinueDragEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: UIElement.QueryContinueDragEvent
  fullName: System.Windows.UIElement.QueryContinueDragEvent
- uid: System.Windows.UIElement.QueryCursor
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursor
  nameWithType: UIElement.QueryCursor
  fullName: System.Windows.UIElement.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.UIElement.QueryCursorEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: QueryCursorEvent
  nameWithType: UIElement.QueryCursorEvent
  fullName: System.Windows.UIElement.QueryCursorEvent
- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement.ReleaseAllTouchCaptures()
- uid: System.Windows.UIElement.ReleaseMouseCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: UIElement.ReleaseMouseCapture()
  fullName: System.Windows.UIElement.ReleaseMouseCapture()
- uid: System.Windows.UIElement.ReleaseStylusCapture
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: UIElement.ReleaseStylusCapture()
  fullName: System.Windows.UIElement.ReleaseStylusCapture()
- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.UIElement.RenderSize
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
  fullName: System.Windows.UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
  fullName: System.Windows.UIElement.RenderTransform
- uid: System.Windows.Media.Transform
  parent: System.Windows.Media
  isExternal: false
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.UIElement.RenderTransformOrigin
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
  fullName: System.Windows.UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.RenderTransformOriginProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOriginProperty
  nameWithType: UIElement.RenderTransformOriginProperty
  fullName: System.Windows.UIElement.RenderTransformOriginProperty
- uid: System.Windows.UIElement.RenderTransformProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformProperty
  nameWithType: UIElement.RenderTransformProperty
  fullName: System.Windows.UIElement.RenderTransformProperty
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement.ShouldSerializeCommandBindings()
- uid: System.Windows.UIElement.ShouldSerializeInputBindings
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement.ShouldSerializeInputBindings()
- uid: System.Windows.UIElement.SnapsToDevicePixels
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
  fullName: System.Windows.UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixelsProperty
  nameWithType: UIElement.SnapsToDevicePixelsProperty
  fullName: System.Windows.UIElement.SnapsToDevicePixelsProperty
- uid: System.Windows.UIElement.StylusButtonDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDown
  nameWithType: UIElement.StylusButtonDown
  fullName: System.Windows.UIElement.StylusButtonDown
- uid: System.Windows.UIElement.StylusButtonDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: UIElement.StylusButtonDownEvent
  fullName: System.Windows.UIElement.StylusButtonDownEvent
- uid: System.Windows.UIElement.StylusButtonUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUp
  nameWithType: UIElement.StylusButtonUp
  fullName: System.Windows.UIElement.StylusButtonUp
- uid: System.Windows.UIElement.StylusButtonUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: UIElement.StylusButtonUpEvent
  fullName: System.Windows.UIElement.StylusButtonUpEvent
- uid: System.Windows.UIElement.StylusDown
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDown
  nameWithType: UIElement.StylusDown
  fullName: System.Windows.UIElement.StylusDown
- uid: System.Windows.UIElement.StylusDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusDownEvent
  nameWithType: UIElement.StylusDownEvent
  fullName: System.Windows.UIElement.StylusDownEvent
- uid: System.Windows.UIElement.StylusEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnter
  nameWithType: UIElement.StylusEnter
  fullName: System.Windows.UIElement.StylusEnter
- uid: System.Windows.UIElement.StylusEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusEnterEvent
  nameWithType: UIElement.StylusEnterEvent
  fullName: System.Windows.UIElement.StylusEnterEvent
- uid: System.Windows.UIElement.StylusInAirMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMove
  nameWithType: UIElement.StylusInAirMove
  fullName: System.Windows.UIElement.StylusInAirMove
- uid: System.Windows.UIElement.StylusInAirMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: UIElement.StylusInAirMoveEvent
  fullName: System.Windows.UIElement.StylusInAirMoveEvent
- uid: System.Windows.UIElement.StylusInRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRange
  nameWithType: UIElement.StylusInRange
  fullName: System.Windows.UIElement.StylusInRange
- uid: System.Windows.UIElement.StylusInRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: UIElement.StylusInRangeEvent
  fullName: System.Windows.UIElement.StylusInRangeEvent
- uid: System.Windows.UIElement.StylusLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeave
  nameWithType: UIElement.StylusLeave
  fullName: System.Windows.UIElement.StylusLeave
- uid: System.Windows.UIElement.StylusLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: UIElement.StylusLeaveEvent
  fullName: System.Windows.UIElement.StylusLeaveEvent
- uid: System.Windows.UIElement.StylusMove
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMove
  nameWithType: UIElement.StylusMove
  fullName: System.Windows.UIElement.StylusMove
- uid: System.Windows.UIElement.StylusMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusMoveEvent
  nameWithType: UIElement.StylusMoveEvent
  fullName: System.Windows.UIElement.StylusMoveEvent
- uid: System.Windows.UIElement.StylusOutOfRange
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRange
  nameWithType: UIElement.StylusOutOfRange
  fullName: System.Windows.UIElement.StylusOutOfRange
- uid: System.Windows.UIElement.StylusOutOfRangeEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: UIElement.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement.StylusOutOfRangeEvent
- uid: System.Windows.UIElement.StylusPlugIns
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
  fullName: System.Windows.UIElement.StylusPlugIns
- uid: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
  parent: System.Windows.Input.StylusPlugIns
  isExternal: false
  name: StylusPlugInCollection
  nameWithType: StylusPlugInCollection
  fullName: System.Windows.Input.StylusPlugIns.StylusPlugInCollection
- uid: System.Windows.UIElement.StylusSystemGesture
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGesture
  nameWithType: UIElement.StylusSystemGesture
  fullName: System.Windows.UIElement.StylusSystemGesture
- uid: System.Windows.UIElement.StylusSystemGestureEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: UIElement.StylusSystemGestureEvent
  fullName: System.Windows.UIElement.StylusSystemGestureEvent
- uid: System.Windows.UIElement.StylusUp
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUp
  nameWithType: UIElement.StylusUp
  fullName: System.Windows.UIElement.StylusUp
- uid: System.Windows.UIElement.StylusUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusUpEvent
  nameWithType: UIElement.StylusUpEvent
  fullName: System.Windows.UIElement.StylusUpEvent
- uid: System.Windows.UIElement.TextInput
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInput
  nameWithType: UIElement.TextInput
  fullName: System.Windows.UIElement.TextInput
- uid: System.Windows.UIElement.TextInputEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TextInputEvent
  nameWithType: UIElement.TextInputEvent
  fullName: System.Windows.UIElement.TextInputEvent
- uid: System.Windows.UIElement.TouchDown
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDown
  nameWithType: UIElement.TouchDown
  fullName: System.Windows.UIElement.TouchDown
- uid: System.Windows.UIElement.TouchDownEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchDownEvent
  nameWithType: UIElement.TouchDownEvent
  fullName: System.Windows.UIElement.TouchDownEvent
- uid: System.Windows.UIElement.TouchEnter
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnter
  nameWithType: UIElement.TouchEnter
  fullName: System.Windows.UIElement.TouchEnter
- uid: System.Windows.UIElement.TouchEnterEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchEnterEvent
  nameWithType: UIElement.TouchEnterEvent
  fullName: System.Windows.UIElement.TouchEnterEvent
- uid: System.Windows.UIElement.TouchesCaptured
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
  fullName: System.Windows.UIElement.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement.TouchesCapturedWithin
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
  fullName: System.Windows.UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
  fullName: System.Windows.UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
  fullName: System.Windows.UIElement.TouchesOver
- uid: System.Windows.UIElement.TouchLeave
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeave
  nameWithType: UIElement.TouchLeave
  fullName: System.Windows.UIElement.TouchLeave
- uid: System.Windows.UIElement.TouchLeaveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: UIElement.TouchLeaveEvent
  fullName: System.Windows.UIElement.TouchLeaveEvent
- uid: System.Windows.UIElement.TouchMove
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMove
  nameWithType: UIElement.TouchMove
  fullName: System.Windows.UIElement.TouchMove
- uid: System.Windows.UIElement.TouchMoveEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchMoveEvent
  nameWithType: UIElement.TouchMoveEvent
  fullName: System.Windows.UIElement.TouchMoveEvent
- uid: System.Windows.UIElement.TouchUp
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUp
  nameWithType: UIElement.TouchUp
  fullName: System.Windows.UIElement.TouchUp
- uid: System.Windows.UIElement.TouchUpEvent
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchUpEvent
  nameWithType: UIElement.TouchUpEvent
  fullName: System.Windows.UIElement.TouchUpEvent
- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint(Point,UIElement)
  nameWithType: UIElement.TranslatePoint(Point,UIElement)
  fullName: System.Windows.UIElement.TranslatePoint(Point,UIElement)
- uid: System.Windows.UIElement.Uid
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
  fullName: System.Windows.UIElement.Uid
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.UIElement.UidProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: UidProperty
  nameWithType: UIElement.UidProperty
  fullName: System.Windows.UIElement.UidProperty
- uid: System.Windows.UIElement.UpdateLayout
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout()
  nameWithType: UIElement.UpdateLayout()
  fullName: System.Windows.UIElement.UpdateLayout()
- uid: System.Windows.UIElement.Visibility
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
  fullName: System.Windows.UIElement.Visibility
- uid: System.Windows.Visibility
  parent: System.Windows
  isExternal: false
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement.VisibilityProperty
  parent: System.Windows.UIElement
  isExternal: false
  name: VisibilityProperty
  nameWithType: UIElement.VisibilityProperty
  fullName: System.Windows.UIElement.VisibilityProperty
- uid: System.Windows.UIElement.#ctor*
  parent: System.Windows.UIElement
  isExternal: false
  name: UIElement
  nameWithType: UIElement.UIElement
- uid: System.Windows.UIElement.AddHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddHandler
  nameWithType: UIElement.AddHandler
- uid: System.Windows.UIElement.AddToEventRoute*
  parent: System.Windows.UIElement
  isExternal: false
  name: AddToEventRoute
  nameWithType: UIElement.AddToEventRoute
- uid: System.Windows.UIElement.AllowDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement.AllowDrop
- uid: System.Windows.UIElement.ApplyAnimationClock*
  parent: System.Windows.UIElement
  isExternal: false
  name: ApplyAnimationClock
  nameWithType: UIElement.ApplyAnimationClock
- uid: System.Windows.UIElement.AreAnyTouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement.AreAnyTouchesCaptured
- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement.AreAnyTouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement.AreAnyTouchesOver
- uid: System.Windows.UIElement.Arrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: Arrange
  nameWithType: UIElement.Arrange
- uid: System.Windows.UIElement.ArrangeCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: ArrangeCore
  nameWithType: UIElement.ArrangeCore
- uid: System.Windows.UIElement.BeginAnimation*
  parent: System.Windows.UIElement
  isExternal: false
  name: BeginAnimation
  nameWithType: UIElement.BeginAnimation
- uid: System.Windows.UIElement.BitmapEffect*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffect
  nameWithType: UIElement.BitmapEffect
- uid: System.Windows.UIElement.BitmapEffectInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: BitmapEffectInput
  nameWithType: UIElement.BitmapEffectInput
- uid: System.Windows.UIElement.CacheMode*
  parent: System.Windows.UIElement
  isExternal: false
  name: CacheMode
  nameWithType: UIElement.CacheMode
- uid: System.Windows.UIElement.CaptureMouse*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureMouse
  nameWithType: UIElement.CaptureMouse
- uid: System.Windows.UIElement.CaptureStylus*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureStylus
  nameWithType: UIElement.CaptureStylus
- uid: System.Windows.UIElement.CaptureTouch*
  parent: System.Windows.UIElement
  isExternal: false
  name: CaptureTouch
  nameWithType: UIElement.CaptureTouch
- uid: System.Windows.UIElement.Clip*
  parent: System.Windows.UIElement
  isExternal: false
  name: Clip
  nameWithType: UIElement.Clip
- uid: System.Windows.UIElement.ClipToBounds*
  parent: System.Windows.UIElement
  isExternal: false
  name: ClipToBounds
  nameWithType: UIElement.ClipToBounds
- uid: System.Windows.UIElement.CommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement.CommandBindings
- uid: System.Windows.UIElement.DesiredSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: DesiredSize
  nameWithType: UIElement.DesiredSize
- uid: System.Windows.UIElement.Effect*
  parent: System.Windows.UIElement
  isExternal: false
  name: Effect
  nameWithType: UIElement.Effect
- uid: System.Windows.UIElement.Focus*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focus
  nameWithType: UIElement.Focus
- uid: System.Windows.UIElement.Focusable*
  parent: System.Windows.UIElement
  isExternal: false
  name: Focusable
  nameWithType: UIElement.Focusable
- uid: System.Windows.UIElement.GetAnimationBaseValue*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetAnimationBaseValue
  nameWithType: UIElement.GetAnimationBaseValue
- uid: System.Windows.UIElement.GetLayoutClip*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetLayoutClip
  nameWithType: UIElement.GetLayoutClip
- uid: System.Windows.UIElement.GetUIParentCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: UIElement.GetUIParentCore
- uid: System.Windows.UIElement.HasAnimatedProperties*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasAnimatedProperties
  nameWithType: UIElement.HasAnimatedProperties
- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: HasEffectiveKeyboardFocus
  nameWithType: UIElement.HasEffectiveKeyboardFocus
- uid: System.Windows.UIElement.HitTestCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: HitTestCore
  nameWithType: UIElement.HitTestCore
- uid: System.Windows.UIElement.InputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputBindings
  nameWithType: UIElement.InputBindings
- uid: System.Windows.UIElement.InputHitTest*
  parent: System.Windows.UIElement
  isExternal: false
  name: InputHitTest
  nameWithType: UIElement.InputHitTest
- uid: System.Windows.UIElement.InvalidateArrange*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateArrange
  nameWithType: UIElement.InvalidateArrange
- uid: System.Windows.UIElement.InvalidateMeasure*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateMeasure
  nameWithType: UIElement.InvalidateMeasure
- uid: System.Windows.UIElement.InvalidateVisual*
  parent: System.Windows.UIElement
  isExternal: false
  name: InvalidateVisual
  nameWithType: UIElement.InvalidateVisual
- uid: System.Windows.UIElement.IsArrangeValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsArrangeValid
  nameWithType: UIElement.IsArrangeValid
- uid: System.Windows.UIElement.IsEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement.IsEnabled
- uid: System.Windows.UIElement.IsEnabledCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement.IsEnabledCore
- uid: System.Windows.UIElement.IsFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsFocused
  nameWithType: UIElement.IsFocused
- uid: System.Windows.UIElement.IsHitTestVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement.IsHitTestVisible
- uid: System.Windows.UIElement.IsInputMethodEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement.IsInputMethodEnabled
- uid: System.Windows.UIElement.IsKeyboardFocused*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement.IsKeyboardFocused
- uid: System.Windows.UIElement.IsKeyboardFocusWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement.IsKeyboardFocusWithin
- uid: System.Windows.UIElement.IsManipulationEnabled*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsManipulationEnabled
  nameWithType: UIElement.IsManipulationEnabled
- uid: System.Windows.UIElement.IsMeasureValid*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMeasureValid
  nameWithType: UIElement.IsMeasureValid
- uid: System.Windows.UIElement.IsMouseCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement.IsMouseCaptured
- uid: System.Windows.UIElement.IsMouseCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement.IsMouseCaptureWithin
- uid: System.Windows.UIElement.IsMouseDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement.IsMouseDirectlyOver
- uid: System.Windows.UIElement.IsMouseOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement.IsMouseOver
- uid: System.Windows.UIElement.IsStylusCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement.IsStylusCaptured
- uid: System.Windows.UIElement.IsStylusCaptureWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement.IsStylusCaptureWithin
- uid: System.Windows.UIElement.IsStylusDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement.IsStylusDirectlyOver
- uid: System.Windows.UIElement.IsStylusOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement.IsStylusOver
- uid: System.Windows.UIElement.IsVisible*
  parent: System.Windows.UIElement
  isExternal: false
  name: IsVisible
  nameWithType: UIElement.IsVisible
- uid: System.Windows.UIElement.Measure*
  parent: System.Windows.UIElement
  isExternal: false
  name: Measure
  nameWithType: UIElement.Measure
- uid: System.Windows.UIElement.MeasureCore*
  parent: System.Windows.UIElement
  isExternal: false
  name: MeasureCore
  nameWithType: UIElement.MeasureCore
- uid: System.Windows.UIElement.MoveFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: MoveFocus
  nameWithType: UIElement.MoveFocus
- uid: System.Windows.UIElement.OnAccessKey*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnAccessKey
  nameWithType: UIElement.OnAccessKey
- uid: System.Windows.UIElement.OnChildDesiredSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnChildDesiredSizeChanged
  nameWithType: UIElement.OnChildDesiredSizeChanged
- uid: System.Windows.UIElement.OnCreateAutomationPeer*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: UIElement.OnCreateAutomationPeer
- uid: System.Windows.UIElement.OnDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragEnter
  nameWithType: UIElement.OnDragEnter
- uid: System.Windows.UIElement.OnDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragLeave
  nameWithType: UIElement.OnDragLeave
- uid: System.Windows.UIElement.OnDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDragOver
  nameWithType: UIElement.OnDragOver
- uid: System.Windows.UIElement.OnDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnDrop
  nameWithType: UIElement.OnDrop
- uid: System.Windows.UIElement.OnGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGiveFeedback
  nameWithType: UIElement.OnGiveFeedback
- uid: System.Windows.UIElement.OnGotFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotFocus
  nameWithType: UIElement.OnGotFocus
- uid: System.Windows.UIElement.OnGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: UIElement.OnGotKeyboardFocus
- uid: System.Windows.UIElement.OnGotMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: UIElement.OnGotMouseCapture
- uid: System.Windows.UIElement.OnGotStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: UIElement.OnGotStylusCapture
- uid: System.Windows.UIElement.OnGotTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: UIElement.OnGotTouchCapture
- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: UIElement.OnIsKeyboardFocusedChanged
- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement.OnIsMouseCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: UIElement.OnIsMouseCapturedChanged
- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: UIElement.OnIsMouseCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: UIElement.OnIsMouseDirectlyOverChanged
- uid: System.Windows.UIElement.OnIsStylusCapturedChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: UIElement.OnIsStylusCapturedChanged
- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: UIElement.OnIsStylusCaptureWithinChanged
- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: UIElement.OnIsStylusDirectlyOverChanged
- uid: System.Windows.UIElement.OnKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyDown
  nameWithType: UIElement.OnKeyDown
- uid: System.Windows.UIElement.OnKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnKeyUp
  nameWithType: UIElement.OnKeyUp
- uid: System.Windows.UIElement.OnLostFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostFocus
  nameWithType: UIElement.OnLostFocus
- uid: System.Windows.UIElement.OnLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: UIElement.OnLostKeyboardFocus
- uid: System.Windows.UIElement.OnLostMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: UIElement.OnLostMouseCapture
- uid: System.Windows.UIElement.OnLostStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: UIElement.OnLostStylusCapture
- uid: System.Windows.UIElement.OnLostTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: UIElement.OnLostTouchCapture
- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: UIElement.OnManipulationBoundaryFeedback
- uid: System.Windows.UIElement.OnManipulationCompleted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationCompleted
  nameWithType: UIElement.OnManipulationCompleted
- uid: System.Windows.UIElement.OnManipulationDelta*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationDelta
  nameWithType: UIElement.OnManipulationDelta
- uid: System.Windows.UIElement.OnManipulationInertiaStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationInertiaStarting
  nameWithType: UIElement.OnManipulationInertiaStarting
- uid: System.Windows.UIElement.OnManipulationStarted*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarted
  nameWithType: UIElement.OnManipulationStarted
- uid: System.Windows.UIElement.OnManipulationStarting*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnManipulationStarting
  nameWithType: UIElement.OnManipulationStarting
- uid: System.Windows.UIElement.OnMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseDown
  nameWithType: UIElement.OnMouseDown
- uid: System.Windows.UIElement.OnMouseEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseEnter
  nameWithType: UIElement.OnMouseEnter
- uid: System.Windows.UIElement.OnMouseLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeave
  nameWithType: UIElement.OnMouseLeave
- uid: System.Windows.UIElement.OnMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: UIElement.OnMouseLeftButtonDown
- uid: System.Windows.UIElement.OnMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: UIElement.OnMouseLeftButtonUp
- uid: System.Windows.UIElement.OnMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseMove
  nameWithType: UIElement.OnMouseMove
- uid: System.Windows.UIElement.OnMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: UIElement.OnMouseRightButtonDown
- uid: System.Windows.UIElement.OnMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: UIElement.OnMouseRightButtonUp
- uid: System.Windows.UIElement.OnMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseUp
  nameWithType: UIElement.OnMouseUp
- uid: System.Windows.UIElement.OnMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnMouseWheel
  nameWithType: UIElement.OnMouseWheel
- uid: System.Windows.UIElement.OnPreviewDragEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: UIElement.OnPreviewDragEnter
- uid: System.Windows.UIElement.OnPreviewDragLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: UIElement.OnPreviewDragLeave
- uid: System.Windows.UIElement.OnPreviewDragOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: UIElement.OnPreviewDragOver
- uid: System.Windows.UIElement.OnPreviewDrop*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewDrop
  nameWithType: UIElement.OnPreviewDrop
- uid: System.Windows.UIElement.OnPreviewGiveFeedback*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: UIElement.OnPreviewGiveFeedback
- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: UIElement.OnPreviewGotKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewKeyDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: UIElement.OnPreviewKeyDown
- uid: System.Windows.UIElement.OnPreviewKeyUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: UIElement.OnPreviewKeyUp
- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: UIElement.OnPreviewLostKeyboardFocus
- uid: System.Windows.UIElement.OnPreviewMouseDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: UIElement.OnPreviewMouseDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: UIElement.OnPreviewMouseLeftButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: UIElement.OnPreviewMouseLeftButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: UIElement.OnPreviewMouseMove
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: UIElement.OnPreviewMouseRightButtonDown
- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: UIElement.OnPreviewMouseRightButtonUp
- uid: System.Windows.UIElement.OnPreviewMouseUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: UIElement.OnPreviewMouseUp
- uid: System.Windows.UIElement.OnPreviewMouseWheel*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: UIElement.OnPreviewMouseWheel
- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: UIElement.OnPreviewQueryContinueDrag
- uid: System.Windows.UIElement.OnPreviewStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: UIElement.OnPreviewStylusButtonDown
- uid: System.Windows.UIElement.OnPreviewStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: UIElement.OnPreviewStylusButtonUp
- uid: System.Windows.UIElement.OnPreviewStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: UIElement.OnPreviewStylusDown
- uid: System.Windows.UIElement.OnPreviewStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: UIElement.OnPreviewStylusInAirMove
- uid: System.Windows.UIElement.OnPreviewStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: UIElement.OnPreviewStylusInRange
- uid: System.Windows.UIElement.OnPreviewStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: UIElement.OnPreviewStylusMove
- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: UIElement.OnPreviewStylusOutOfRange
- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: UIElement.OnPreviewStylusSystemGesture
- uid: System.Windows.UIElement.OnPreviewStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: UIElement.OnPreviewStylusUp
- uid: System.Windows.UIElement.OnPreviewTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: UIElement.OnPreviewTextInput
- uid: System.Windows.UIElement.OnPreviewTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: UIElement.OnPreviewTouchDown
- uid: System.Windows.UIElement.OnPreviewTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: UIElement.OnPreviewTouchMove
- uid: System.Windows.UIElement.OnPreviewTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: UIElement.OnPreviewTouchUp
- uid: System.Windows.UIElement.OnQueryContinueDrag*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: UIElement.OnQueryContinueDrag
- uid: System.Windows.UIElement.OnQueryCursor*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnQueryCursor
  nameWithType: UIElement.OnQueryCursor
- uid: System.Windows.UIElement.OnRender*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRender
  nameWithType: UIElement.OnRender
- uid: System.Windows.UIElement.OnRenderSizeChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnRenderSizeChanged
  nameWithType: UIElement.OnRenderSizeChanged
- uid: System.Windows.UIElement.OnStylusButtonDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: UIElement.OnStylusButtonDown
- uid: System.Windows.UIElement.OnStylusButtonUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: UIElement.OnStylusButtonUp
- uid: System.Windows.UIElement.OnStylusDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusDown
  nameWithType: UIElement.OnStylusDown
- uid: System.Windows.UIElement.OnStylusEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusEnter
  nameWithType: UIElement.OnStylusEnter
- uid: System.Windows.UIElement.OnStylusInAirMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: UIElement.OnStylusInAirMove
- uid: System.Windows.UIElement.OnStylusInRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusInRange
  nameWithType: UIElement.OnStylusInRange
- uid: System.Windows.UIElement.OnStylusLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusLeave
  nameWithType: UIElement.OnStylusLeave
- uid: System.Windows.UIElement.OnStylusMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusMove
  nameWithType: UIElement.OnStylusMove
- uid: System.Windows.UIElement.OnStylusOutOfRange*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: UIElement.OnStylusOutOfRange
- uid: System.Windows.UIElement.OnStylusSystemGesture*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: UIElement.OnStylusSystemGesture
- uid: System.Windows.UIElement.OnStylusUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnStylusUp
  nameWithType: UIElement.OnStylusUp
- uid: System.Windows.UIElement.OnTextInput*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTextInput
  nameWithType: UIElement.OnTextInput
- uid: System.Windows.UIElement.OnTouchDown*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchDown
  nameWithType: UIElement.OnTouchDown
- uid: System.Windows.UIElement.OnTouchEnter*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchEnter
  nameWithType: UIElement.OnTouchEnter
- uid: System.Windows.UIElement.OnTouchLeave*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchLeave
  nameWithType: UIElement.OnTouchLeave
- uid: System.Windows.UIElement.OnTouchMove*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchMove
  nameWithType: UIElement.OnTouchMove
- uid: System.Windows.UIElement.OnTouchUp*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnTouchUp
  nameWithType: UIElement.OnTouchUp
- uid: System.Windows.UIElement.OnVisualParentChanged*
  parent: System.Windows.UIElement
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: UIElement.OnVisualParentChanged
- uid: System.Windows.UIElement.Opacity*
  parent: System.Windows.UIElement
  isExternal: false
  name: Opacity
  nameWithType: UIElement.Opacity
- uid: System.Windows.UIElement.OpacityMask*
  parent: System.Windows.UIElement
  isExternal: false
  name: OpacityMask
  nameWithType: UIElement.OpacityMask
- uid: System.Windows.UIElement.PersistId*
  parent: System.Windows.UIElement
  isExternal: false
  name: PersistId
  nameWithType: UIElement.PersistId
- uid: System.Windows.UIElement.PredictFocus*
  parent: System.Windows.UIElement
  isExternal: false
  name: PredictFocus
  nameWithType: UIElement.PredictFocus
- uid: System.Windows.UIElement.RaiseEvent*
  parent: System.Windows.UIElement
  isExternal: false
  name: RaiseEvent
  nameWithType: UIElement.RaiseEvent
- uid: System.Windows.UIElement.ReleaseAllTouchCaptures*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: UIElement.ReleaseAllTouchCaptures
- uid: System.Windows.UIElement.ReleaseMouseCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: UIElement.ReleaseMouseCapture
- uid: System.Windows.UIElement.ReleaseStylusCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: UIElement.ReleaseStylusCapture
- uid: System.Windows.UIElement.ReleaseTouchCapture*
  parent: System.Windows.UIElement
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: UIElement.ReleaseTouchCapture
- uid: System.Windows.UIElement.RemoveHandler*
  parent: System.Windows.UIElement
  isExternal: false
  name: RemoveHandler
  nameWithType: UIElement.RemoveHandler
- uid: System.Windows.UIElement.RenderSize*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderSize
  nameWithType: UIElement.RenderSize
- uid: System.Windows.UIElement.RenderTransform*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransform
  nameWithType: UIElement.RenderTransform
- uid: System.Windows.UIElement.RenderTransformOrigin*
  parent: System.Windows.UIElement
  isExternal: false
  name: RenderTransformOrigin
  nameWithType: UIElement.RenderTransformOrigin
- uid: System.Windows.UIElement.ShouldSerializeCommandBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: UIElement.ShouldSerializeCommandBindings
- uid: System.Windows.UIElement.ShouldSerializeInputBindings*
  parent: System.Windows.UIElement
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: UIElement.ShouldSerializeInputBindings
- uid: System.Windows.UIElement.SnapsToDevicePixels*
  parent: System.Windows.UIElement
  isExternal: false
  name: SnapsToDevicePixels
  nameWithType: UIElement.SnapsToDevicePixels
- uid: System.Windows.UIElement.StylusPlugIns*
  parent: System.Windows.UIElement
  isExternal: false
  name: StylusPlugIns
  nameWithType: UIElement.StylusPlugIns
- uid: System.Windows.UIElement.TouchesCaptured*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement.TouchesCaptured
- uid: System.Windows.UIElement.TouchesCapturedWithin*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement.TouchesCapturedWithin
- uid: System.Windows.UIElement.TouchesDirectlyOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement.TouchesDirectlyOver
- uid: System.Windows.UIElement.TouchesOver*
  parent: System.Windows.UIElement
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement.TouchesOver
- uid: System.Windows.UIElement.TranslatePoint*
  parent: System.Windows.UIElement
  isExternal: false
  name: TranslatePoint
  nameWithType: UIElement.TranslatePoint
- uid: System.Windows.UIElement.Uid*
  parent: System.Windows.UIElement
  isExternal: false
  name: Uid
  nameWithType: UIElement.Uid
- uid: System.Windows.UIElement.UpdateLayout*
  parent: System.Windows.UIElement
  isExternal: false
  name: UpdateLayout
  nameWithType: UIElement.UpdateLayout
- uid: System.Windows.UIElement.Visibility*
  parent: System.Windows.UIElement
  isExternal: false
  name: Visibility
  nameWithType: UIElement.Visibility
