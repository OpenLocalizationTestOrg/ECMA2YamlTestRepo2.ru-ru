### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Представляет метод, который выполняется на <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "При создании управляемого потока, метод, который выполняется в потоке представленного: - <xref:System.Threading.ThreadStart>делегат, который передается <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>конструктор.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  Любой метод, который не имеет параметров и возвращает `void` в C#, или `Sub` процедуры на языке Visual Basic может представлять делегат.      -ParameterizedThreadStart делегат, передаваемый <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>конструктор.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> Любой метод, который принимает один параметр типа <xref:System.Object>, возвращает значение void в C# или процедуру Sub в Visual Basic может представлять делегат.</xref:System.Object>       Поток не запускается до <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>вызывается метод.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> <xref:System.Threading.ThreadStart>Или ParameterizedThreadStart делегат вызывается в потоке, и начинается выполнение в первой строке метода, представленному делегатом.</xref:System.Threading.ThreadStart> В случае объект, передаваемый делегату ParameterizedThreadStart <xref:System.Threading.Thread.Start%28System.Object%29>методу передается в делегат.</xref:System.Threading.Thread.Start%28System.Object%29>      Настроек [!NOTE] настроек пользователей Visual Basic и C# можно опустить <xref:System.Threading.ThreadStart>или ParameterizedThreadStart конструктора делегата при создании потока.</xref:System.Threading.ThreadStart> В Visual Basic, используйте `AddressOf` оператор при передаче в метод <xref:System.Threading.Thread.%23ctor%2A>конструктор, например `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> В C# просто укажите имя процедуры потока. Компилятор выбирает соответствующий конструктор делегата.      Настроек [!NOTE] настроек при создании ParameterizedThreadStart делегат для метода экземпляра в C++, первый параметр конструктора является переменной экземпляра. Для статического метода первый параметр конструктора равно нулю. Для статического метода, конструктора делегата требуется только один параметр: адрес метода обратного вызова, дополненное имя класса.       Делегат ParameterizedThreadStart и <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>легким для передачи данных в процедуру потока, но этот метод является не типобезопасным из любого объекта может быть передан в <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> убедитесь перегрузка метода</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Для размещения процедуры потока и полей данных в рабочий объект является более надежным способом передачи данных в процедуре потока. Дополнительные сведения см. в разделе [создание потоков и передача данных во время запуска](~/add/includes/ajax-current-ext-md.md).       Делегат ParameterizedThreadStart поддерживает только один параметр. Можно передать несколько элементов данных ParameterizedThreadStart, делая этого параметра, один из следующих: - массив.      -Тип коллекции, если все элементы данных того же типа.      -Кортежный тип, например <xref:System.Tuple%602>или <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
