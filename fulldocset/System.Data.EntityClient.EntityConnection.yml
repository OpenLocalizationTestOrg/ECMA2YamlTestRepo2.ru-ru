### YamlMime:ManagedReference
items:
- uid: System.Data.EntityClient.EntityConnection
  id: EntityConnection
  children:
  - System.Data.EntityClient.EntityConnection.#ctor
  - System.Data.EntityClient.EntityConnection.#ctor(System.String)
  - System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  - System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.BeginTransaction
  - System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  - System.Data.EntityClient.EntityConnection.Close
  - System.Data.EntityClient.EntityConnection.ConnectionString
  - System.Data.EntityClient.EntityConnection.ConnectionTimeout
  - System.Data.EntityClient.EntityConnection.CreateCommand
  - System.Data.EntityClient.EntityConnection.CreateDbCommand
  - System.Data.EntityClient.EntityConnection.Database
  - System.Data.EntityClient.EntityConnection.DataSource
  - System.Data.EntityClient.EntityConnection.DbProviderFactory
  - System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  - System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  - System.Data.EntityClient.EntityConnection.Open
  - System.Data.EntityClient.EntityConnection.ServerVersion
  - System.Data.EntityClient.EntityConnection.State
  - System.Data.EntityClient.EntityConnection.StoreConnection
  langs:
  - csharp
  name: EntityConnection
  nameWithType: EntityConnection
  fullName: System.Data.EntityClient.EntityConnection
  type: Class
  summary: "Содержит ссылку на концептуальной модели и подключение к источнику данных. Этот класс не наследуется."
  remarks: "Чтобы избежать случайного размещения объектов такие как <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>не синхронизирована с метаданными EntityConnection должен заблокировать ее метаданные.</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных:-экземпляр EntityConnection создается через конструктор по умолчанию или посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>конструктор, который принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      Экземпляр EntityConnection создается через <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>конструктор, который принимает <xref:System.Data.Metadata.Edm.MetadataWorkspace>и <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных EntityConnection концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.       Примеры кода см. в разделе [работа с EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: 'public sealed class EntityConnection : System.Data.Common.DbConnection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.GetSchema
  - System.Data.Common.DbConnection.GetSchema(System.String)
  - System.Data.Common.DbConnection.GetSchema(System.String,System.String[])
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor
  id: '#ctor'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;></xref> class."
  remarks: "Во избежание случайного размещения объектов например <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>синхронизирован с их метаданные <xref:System.Data.EntityClient.EntityConnection>должен заблокировать ее метаданные.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных: - <xref:System.Data.EntityClient.EntityConnection>создан через конструктор по умолчанию или посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>конструктор, который принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>Экземпляр создается через <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>конструктор, который принимает <xref:System.Data.Metadata.Edm.MetadataWorkspace>и <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных <xref:System.Data.EntityClient.EntityConnection>концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.</xref:System.Data.EntityClient.EntityConnection>       Примеры кода см. в разделе [работа с EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: public EntityConnection ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> класса, на основе строки подключения."
  remarks: "Создать строку подключения с именем, которая хранится в файле конфигурации приложения. Это именованную строку соединения можно указать вместо `connectionString` параметр при создании экземпляра <xref:System.Data.EntityClient.EntityConnection>класса.</xref:System.Data.EntityClient.EntityConnection>       Чтобы избежать случайного размещения объектов <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>синхронизирован с их метаданные <xref:System.Data.EntityClient.EntityConnection>должен заблокировать ее метаданные.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных: - <xref:System.Data.EntityClient.EntityConnection>создан через конструктор по умолчанию, или этот конструктор (EntityConnection), которая принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>Экземпляр создается через <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>конструктор, который принимает <xref:System.Data.Metadata.Edm.MetadataWorkspace>и <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных <xref:System.Data.EntityClient.EntityConnection>концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.</xref:System.Data.EntityClient.EntityConnection>       Примеры кода см. в разделе [работа с EntityClient](http://msdn.microsoft.com/en-us/dec4728c-8dff-4e30-abe0-0f78fb5d5af5)."
  syntax:
    content: public EntityConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "Строка подключения для конкретного поставщика."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Предоставляется с ключевым словом строки соединения недопустим или не была предоставлена это ключевое слово строки подключения обязательным."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  id: '#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)'
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> класса с заданными <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> и <xref href=&quot;System.Data.Common.DbConnection&quot;> </xref>."
  remarks: "Этот конструктор позволяет создавать <xref:System.Data.EntityClient.EntityConnection>из метаданных, которые не из файла на диске или из ресурса, внедренного в сборку.</xref:System.Data.EntityClient.EntityConnection>       Во избежание случайного размещения объектов например <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>синхронизирован с их метаданные <xref:System.Data.EntityClient.EntityConnection>должен заблокировать ее метаданные.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных: - <xref:System.Data.EntityClient.EntityConnection>создан через конструктор по умолчанию или посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>конструктор, который принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>Экземпляр создается через этот конструктор (EntityConnection), который принимает <xref:System.Data.Metadata.Edm.MetadataWorkspace>и <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных <xref:System.Data.EntityClient.EntityConnection>концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public EntityConnection (System.Data.Metadata.Edm.MetadataWorkspace workspace, System.Data.Common.DbConnection connection);
    parameters:
    - id: workspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "Объект <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> нужно связать с этим <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>."
    - id: connection
      type: System.Data.Common.DbConnection
      description: "Подключение для этого источника данных <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> объекта."
  overload: System.Data.EntityClient.EntityConnection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>workspace</code> or <code>connection</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "В рабочей области отсутствует концептуальной модели.       - или - отсутствует файл сопоставлений из рабочей области.       - или - в рабочей области отсутствует в модели хранения.       - или - <code> connection </code> не находится в закрытом состоянии."
  - type: System.Data.ProviderIncompatibleException
    commentId: T:System.Data.ProviderIncompatibleException
    description: "<code> connection </code> Не от поставщика ADO.NET Entity Framework совместимой."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Для добавления."
    return:
      type: System.Data.Common.DbTransaction
      description: "Для добавления."
  overload: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Начинает транзакцию с помощью базового поставщика."
  remarks: "Использует метод BeginTransaction <xref:System.Data.IsolationLevel>уровень изоляции транзакции.</xref:System.Data.IsolationLevel> Чтобы указать другой уровень изоляции, вызовите <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> Это значение может интерпретироваться базовыми поставщиками по по-разному. Если требуется, чтобы приложение для переноски нескольких поставщиков, его следует явно указать уровень изоляции транзакции, вызвав <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>       В любой конкретный момент может быть только одна активная транзакция, которая была создана с помощью BeginTransaction. Попытка вызвать перегрузок BeginTransaction, на <xref:System.Data.EntityClient.EntityConnection>который уже имеет текущие результаты транзакции в <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. Возвращенный <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;> </xref> экземпляр более поздней версии может быть связано с <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> для выполнения команды в рамках этой транзакции."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Базовый поставщик не известен.       был выполнен вызов для BeginTransaction - или - <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> с текущей транзакции.       - или - состояние <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> не <xref href=&quot;System.Data.ConnectionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Начинает транзакцию с указанным уровнем изоляции с помощью базового поставщика."
  remarks: "В любой конкретный момент может быть только одна активная транзакция, которая была создана с помощью <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A> Попытка вызвать <xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>перегрузку <xref:System.Data.EntityClient.EntityConnection>, уже имеет текущие результаты транзакции в <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.EntityClient.EntityConnection.BeginTransaction%2A>"
  syntax:
    content: public System.Data.EntityClient.EntityTransaction BeginTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "Уровень изоляции транзакции."
    return:
      type: System.Data.EntityClient.EntityTransaction
      description: "A new <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;></xref>. Возвращенный <xref href=&quot;System.Data.EntityClient.EntityTransaction&quot;> </xref> экземпляр более поздней версии может быть связано с <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> для выполнения команды в рамках этой транзакции."
  overload: System.Data.EntityClient.EntityConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Базовый поставщик не известен.       - или - вызов <xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>был произведен <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> с текущей транзакции.</xref:System.Data.EntityClient.EntityConnection.BeginTransaction*>       - или - состояние <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> не <xref href=&quot;System.Data.ConnectionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Не поддерживается."
  remarks: "Метод ChangeDatabase является обязательным при создании производной от <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> Этот метод не поддерживается и будет вызывать <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public override void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "Не поддерживается."
  overload: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "При вызове метода."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Close
  id: Close
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Закрывает соединение с базой данных."
  remarks: "Если базовый поставщик данных неизвестен, вызову для закрытия не выполняет никаких действий."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Close*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Произошла ошибка при закрытии соединения."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> строку подключения."
  remarks: "An `EntityClient` connection string consists of a sequence of keyword/value parameter pairs separated by semicolons. The equals sign (=) connects each keyword and its value. The following table lists the valid names for keyword values in the ConnectionString.  \n  \n|Keyword|Description|  \n|-------------|-----------------|  \n|`Provider`|Required if the `Name` keyword is not specified. The provider name, which is used to retrieve the <xref:System.Data.Common.DbProviderFactory> object for the underlying provider. This value is constant.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty value for the `Provider` keyword is required. This keyword is mutually exclusive with the `Name` keyword.|  \n|`Provider Connection String`|Optional. Specifies the provider-specific connection string that is passed to the underlying data source. This connection string is expressed by using valid keyword/value pairs for the data provider. An invalid `Provider Connection String` will cause a run-time error when it is evaluated by the data source.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.<br /><br /> The value of the `Provider Connection String` must be surrounded by quotes. The following is an example:<br /><br /> `Provider Connection String =\"Server=serverName; User ID = userID\";`<br /><br /> The following example is not going to work:<br /><br /> `Provider Connection String =Server=serverName; User ID = userID`|  \n|`Metadata`|Required if the `Name` keyword is not specified. A pipe-delimited list of directories, files, and resource locations in which to look for model and mapping information. The following is an example:<br /><br /> `Metadata=`<br /><br /> `c:\\model &#124; c:\\model\\sql\\mapping.msl;`<br /><br /> Blank spaces on each side of the pipe separator are ignored.<br /><br /> This keyword is mutually exclusive with the `Name` keyword.|  \n|`Name`|The application can optionally specify the connection name in an application configuration file that provides the required keyword/value connection string values. In this case, you cannot supply them directly in the connection string. The `Name` keyword is not allowed in a configuration file.<br /><br /> When the `Name` keyword is not included in the connection string, a non-empty values for Provider keyword is required.<br /><br /> This keyword is mutually exclusive with all the other connection string keywords.|  \n  \n The application can supply the keyword/values directly in the ConnectionString property, or it can specify a value for the `Name` keyword. If the `Name` keyword is specified, the connection string keyword/values are retrieved from an application configuration file, as follows:  \n  \n `Name=AdventureWorksEntities;`  \n  \n If the `Name` keyword is used in the ConnectionString property, other keywords are not allowed. The `Name` keyword refers to a named connection string that is stored in the `connectionStrings` section in an application configuration file, as shown in the following example. The `Provider`, `Metadata`, and `Provider Connection String` values are retrieved from the configuration file at run time.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The keyword/value pairs can also be supplied directly in the ConnectionString property, as shown in the following example. In this case, the `Name` keyword is not used.  \n  \n```  \n\"Provider=System.Data.SqlClient;  \nMetadata=c:\\metadata|c:\\Metadata\\Sql;  \nProvider Connection String= 'Data Source=localhost;  \n    Initial Catalog=AdventureWorks;Integrated Security=True;Connection Timeout=60' \"  \n```  \n  \n To avoid inadvertently putting objects such as <xref:System.Data.Common.CommandTrees> and <xref:System.Data.Objects.ObjectContext> out of sync with their metadata, <xref:System.Data.EntityClient.EntityConnection> must lock its metadata. No changes to the connection string are allowed after the metadata is locked. The following are two scenarios in which metadata is locked:  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the default constructor, or through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> constructor, which accepts a connection string. In either case the connection string might be changed multiple times before the connection is opened. Calling <xref:System.Data.EntityClient.EntityConnection.Open%2A> or <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> locks the metadata.  \n  \n-   The <xref:System.Data.EntityClient.EntityConnection> instance is constructed through the <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> constructor, which accepts a <xref:System.Data.Metadata.Edm.MetadataWorkspace> and a <xref:System.Data.Common.DbConnection>. In this case the metadata is locked at construction time. No changes to the connection string are ever allowed.  \n  \n When metadata is loaded, the <xref:System.Data.EntityClient.EntityConnection> verifies that the conceptual model, the storage model, and the mapping file are all present."
  example:
  - "The following example demonstrates how to use the <xref:System.Data.EntityClient.EntityConnectionStringBuilder> in conjunction with a <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code sets properties of a `SqlConnectionStringBuilder` to create a <xref:System.Data.SqlClient.SqlConnection> string that supplies part of the underlying provider connection string. Note that the `Provider` name cannot be set by using the `SqlConnectionStringBuilder`, because it does not use valid `SqlConnection` syntax. The code creates the <xref:System.Data.EntityClient.EntityConnection> string by setting `EntityConnectionStringBuilder` properties.  \n  \n [!code-vb[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/visualbasic/eSQLExamplesVB/Program.vb#buildingconnectionstringwithentitycommand)]\n [!code-cs[eSQLBasicExamples#BuildingConnectionStringWithEntityCommand](~/add/codesnippet/csharp/eSQLExamplesCS/Program.cs#buildingconnectionstringwithentitycommand)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "Строка подключения, необходимые для установления начального соединения с источником данных. Значение по умолчанию — пустая строка. Для закрытого соединения, установленного в настоящее время возвращаемое значение. Если значение не задано, возвращается пустая строка."
  overload: System.Data.EntityClient.EntityConnection.ConnectionString*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Попытка установить свойства ConnectionString после [EntityConnection](~/add/includes/ajax-current-ext-md.md) <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> был инициализирован. [MetadataWorkspace](~/add/includes/ajax-current-ext-md.md) — инициализирован либо если <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref> создан через перегрузку, принимающую <xref href=&quot;System.Data.Odbc.OdbcError&quot;> </xref> как параметр, или когда <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> экземпляр был открыт."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Предоставляется с ключевым словом строки соединения недопустим или не была предоставлена это ключевое слово строки подключения обязательным."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает количество секунд ожидания при попытке установки подключения, по истечении которого попытка завершается и создается ошибка."
  remarks: "Возвращает нуль, если базовый поставщик данных неизвестен."
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "Время (в секундах) ожидания открытия соединения. Значение по умолчанию — по умолчанию время ожидания базового поставщика данных."
  overload: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Заданное значение меньше 0."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Создает новый экземпляр <xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref>, с <xref:System.Data.EntityClient.EntityCommand.Connection*>установлено в <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>.</xref:System.Data.EntityClient.EntityCommand.Connection*>"
  syntax:
    content: public System.Data.EntityClient.EntityCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.EntityClient.EntityCommand
      description: "<xref href=&quot;System.Data.EntityClient.EntityCommand&quot;> </xref> Объекта."
  overload: System.Data.EntityClient.EntityConnection.CreateCommand*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Имя базового поставщика данных неизвестно."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "Для добавления."
  overload: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Database
  id: Database
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Получает имя текущей базы данных или базы данных, которая будет использоваться после открытия подключения."
  remarks: "Для значения определенные ключевые слова такие как `Database`, который сопоставляет свойство базы данных, см. в документации для базового поставщика данных. Для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] эквивалентные ключевые слова, см. в документации для <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "Значение <xref uid=&quot;langword_csharp_Database&quot; name=&quot;Database&quot; href=&quot;&quot;> </xref> свойства базового поставщика данных."
  overload: System.Data.EntityClient.EntityConnection.Database*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Базовый поставщик данных неизвестен."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DataSource
  id: DataSource
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает имя или сетевой адрес источника данных для подключения."
  remarks: "Для значения определенные ключевые слова такие как `DataSource`, который сопоставляет свойство источника данных, см. в документации для базового поставщика данных. Для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] эквивалентные ключевые слова, см. в документации для <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>свойство.</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "Имя источника данных. Значение по умолчанию — пустая строка."
  overload: System.Data.EntityClient.EntityConnection.DataSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Базовый поставщик данных неизвестен."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "Для добавления."
  overload: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Для добавления."
  overload: System.Data.EntityClient.EntityConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Это прикрепляет <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> указанную транзакцию."
  remarks: "Этот метод пересылает в переданных <xref:System.Transactions.Transaction>.</xref:System.Transactions.Transaction> явно прикрепить его вызов для соединения с источником данных"
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "Объект транзакции для прикрепления."
  overload: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Состояние <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> не <xref href=&quot;System.Data.ConnectionState&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  id: GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает <xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> связанный с этим <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>."
  remarks: "Объект <xref:System.Data.Metadata.Edm.MetadataWorkspace>создается автоматически при <xref:System.Data.EntityClient.EntityConnection>создан класс.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> Процесс создания может вызывать исключения, связанные с метаданными. Метаданные загружаются в память и сущностной модели данных (EDM) приложение использует эти метаданные для доступа к сведениям о базовом источнике данных. Дополнительные сведения см. в разделе [метаданных ADO.NET](http://msdn.microsoft.com/en-us/196097a5-a791-4ac4-9e6a-805685d481d5).       Во избежание случайного размещения объектов например <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>синхронизирован с их метаданные <xref:System.Data.EntityClient.EntityConnection>должен заблокировать ее метаданные.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных: - <xref:System.Data.EntityClient.EntityConnection>создан через конструктор по умолчанию или посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>конструктор, который принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> В любом случае строку подключения можно изменить несколько раз до открытия подключения. <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A></xref:System.Data.EntityClient.EntityConnection.Open%2A>      <xref:System.Data.EntityClient.EntityConnection>Экземпляр создается через <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>конструктор, который принимает <xref:System.Data.Metadata.Edm.MetadataWorkspace>и <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных <xref:System.Data.EntityClient.EntityConnection>концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public System.Data.Metadata.Edm.MetadataWorkspace GetMetadataWorkspace ();
    parameters: []
    return:
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "<xref href=&quot;System.Data.Metadata.Edm.MetadataWorkspace&quot;> </xref> Связанный с этим <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>."
  overload: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  exceptions:
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "Встроенная строка подключения содержит недопустимый <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref> значение ключевого слова."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.Open
  id: Open
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Устанавливает соединение с источником данных, вызвав базовый поставщик данных<xref uid=&quot;langword_csharp_ Open&quot; name=&quot; Open&quot; href=&quot;&quot;> </xref> метод."
  remarks: "Во избежание случайного размещения объектов например <xref:System.Data.Common.CommandTrees>и <xref:System.Data.Objects.ObjectContext>синхронизирован с их метаданные <xref:System.Data.EntityClient.EntityConnection>должен заблокировать ее метаданные.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Common.CommandTrees> Изменения в строку соединения не допускаются после блокировки метаданных. Ниже приведены два сценария, в которых блокировки метаданных: - <xref:System.Data.EntityClient.EntityConnection>создан через конструктор по умолчанию или посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29>конструктор, который принимает строку подключения.</xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.String%29> </xref:System.Data.EntityClient.EntityConnection> В любом случае строка подключения может быть изменена несколько раз до открытия соединения. Вызов <xref:System.Data.EntityClient.EntityConnection.Open%2A>или <xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A>блокировки метаданных.</xref:System.Data.EntityClient.EntityConnection.GetMetadataWorkspace%2A> </xref:System.Data.EntityClient.EntityConnection.Open%2A>      - <xref:System.Data.EntityClient.EntityConnection>Создан посредством <xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29>конструктор, который принимает, <xref:System.Data.Metadata.Edm.MetadataWorkspace>а <xref:System.Data.Common.DbConnection>.</xref:System.Data.Common.DbConnection> </xref:System.Data.Metadata.Edm.MetadataWorkspace> </xref:System.Data.EntityClient.EntityConnection.%23ctor%28System.Data.Metadata.Edm.MetadataWorkspace%2CSystem.Data.Common.DbConnection%29> </xref:System.Data.EntityClient.EntityConnection> В этом случае метаданные блокируются во время создания. Когда-либо изменения в строку подключения запрещены.       При загрузке метаданных <xref:System.Data.EntityClient.EntityConnection>концептуальной модели, модели хранения и файл сопоставления проверяет, содержатся ли все.</xref:System.Data.EntityClient.EntityConnection>"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.EntityClient.EntityConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Произошла ошибка при открытии соединения или имя базового поставщика данных неизвестно."
  - type: System.Data.MetadataException
    commentId: T:System.Data.MetadataException
    description: "Встроенная строка подключения содержит недопустимый <xref uid=&quot;langword_csharp_Metadata&quot; name=&quot;Metadata&quot; href=&quot;&quot;> </xref> значение ключевого слова."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает строку, содержащую версию источника данных, к которому подключен клиент."
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "Версия источника данных, содержащихся в строке подключения к поставщику."
  overload: System.Data.EntityClient.EntityConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Соединение закрыто."
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.State
  id: State
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Возвращает <xref href=&quot;System.Data.ConnectionState&quot;> </xref> свойства базового поставщика Если <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> открыт. В противном случае возвращает <xref href=&quot;System.Data.ConnectionState&quot;> </xref>."
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;></xref>, если и только если оба <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>его внутреннее состояние и базовый поставщик <xref href=&quot;System.Data.ConnectionState&quot;> </xref> открыты. Если <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref>но поставщика открыто <xref href=&quot;System.Data.ConnectionState&quot;> </xref> закрыт, это свойство возвращает <xref href=&quot;System.Data.ConnectionState&quot;> </xref>. В противном случае он возвращает <xref href=&quot;System.Data.ConnectionState&quot;> </xref>."
  overload: System.Data.EntityClient.EntityConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  id: StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  langs:
  - csharp
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.EntityClient
  summary: "Предоставляет доступ к базовой соединение с источником данных, используемый <xref href=&quot;System.Data.EntityClient.EntityConnection&quot;> </xref> объекта."
  remarks: "Если <xref:System.Data.EntityClient.EntityConnection>Объект закрыт, будет закрыто соединение с источником данных, возвращенных.</xref:System.Data.EntityClient.EntityConnection> Если он открыт, будет возвращаться подключение к данным источника. Если сведения о соединении источника данных, возвращаемое значение всегда равно отличных от null. Если нет сведений о соединения источника данных (например, если использовался конструктор по умолчанию, а строка подключения не был задан после него), возвращается пустая ссылка.       Одного подключения к источнику данных используется платформой Entity Framework можно совместно с другими частями приложения. Соединение с источником данных возвращается в виде <xref:System.Data.Common.DbConnection>объекта из <xref:System.Data.Objects.ObjectContext.Connection%2A>свойство <xref:System.Data.Objects.ObjectContext>, или из свойства StoreConnection <xref:System.Data.EntityClient.EntityConnection>.</xref:System.Data.EntityClient.EntityConnection> </xref:System.Data.Objects.ObjectContext> </xref:System.Data.Objects.ObjectContext.Connection%2A> </xref:System.Data.Common.DbConnection>"
  syntax:
    content: public System.Data.Common.DbConnection StoreConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "<xref href=&quot;System.Data.Common.DbConnection&quot;> </xref> Для соединения с источником данных."
  overload: System.Data.EntityClient.EntityConnection.StoreConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.ProviderIncompatibleException
  parent: System.Data
  isExternal: false
  name: ProviderIncompatibleException
  nameWithType: ProviderIncompatibleException
  fullName: System.Data.ProviderIncompatibleException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.MetadataException
  parent: System.Data
  isExternal: false
  name: MetadataException
  nameWithType: MetadataException
  fullName: System.Data.MetadataException
- uid: System.Data.EntityClient.EntityConnection.#ctor
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection()
  nameWithType: EntityConnection.EntityConnection()
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection()
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(String)
  nameWithType: EntityConnection.EntityConnection(String)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.EntityClient.EntityConnection.#ctor(System.Data.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection(MetadataWorkspace,DbConnection)
  nameWithType: EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
  fullName: System.Data.EntityClient.EntityConnection.EntityConnection(MetadataWorkspace,DbConnection)
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: EntityConnection.BeginTransaction()
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction()
- uid: System.Data.EntityClient.EntityTransaction
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityTransaction
  nameWithType: EntityTransaction
  fullName: System.Data.EntityClient.EntityTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: EntityConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.EntityClient.EntityConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase(System.String)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: EntityConnection.ChangeDatabase(String)
  fullName: System.Data.EntityClient.EntityConnection.ChangeDatabase(String)
- uid: System.Data.EntityClient.EntityConnection.Close
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close()
  nameWithType: EntityConnection.Close()
  fullName: System.Data.EntityClient.EntityConnection.Close()
- uid: System.Data.EntityClient.EntityConnection.ConnectionString
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
  fullName: System.Data.EntityClient.EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
  fullName: System.Data.EntityClient.EntityConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityClient.EntityConnection.CreateCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: EntityConnection.CreateCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateCommand()
- uid: System.Data.EntityClient.EntityCommand
  parent: System.Data.EntityClient
  isExternal: false
  name: EntityCommand
  nameWithType: EntityCommand
  fullName: System.Data.EntityClient.EntityCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: EntityConnection.CreateDbCommand()
  fullName: System.Data.EntityClient.EntityConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.EntityClient.EntityConnection.Database
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
  fullName: System.Data.EntityClient.EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
  fullName: System.Data.EntityClient.EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
  fullName: System.Data.EntityClient.EntityConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose(System.Boolean)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EntityConnection.Dispose(Boolean)
  fullName: System.Data.EntityClient.EntityConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: EntityConnection.EnlistTransaction(Transaction)
  fullName: System.Data.EntityClient.EntityConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace()
  nameWithType: EntityConnection.GetMetadataWorkspace()
  fullName: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace()
- uid: System.Data.EntityClient.EntityConnection.Open
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open()
  nameWithType: EntityConnection.Open()
  fullName: System.Data.EntityClient.EntityConnection.Open()
- uid: System.Data.EntityClient.EntityConnection.ServerVersion
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
  fullName: System.Data.EntityClient.EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
  fullName: System.Data.EntityClient.EntityConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.EntityClient.EntityConnection.StoreConnection
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
  fullName: System.Data.EntityClient.EntityConnection.StoreConnection
- uid: System.Data.EntityClient.EntityConnection.#ctor*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EntityConnection
  nameWithType: EntityConnection.EntityConnection
- uid: System.Data.EntityClient.EntityConnection.BeginDbTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: EntityConnection.BeginDbTransaction
- uid: System.Data.EntityClient.EntityConnection.BeginTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: EntityConnection.BeginTransaction
- uid: System.Data.EntityClient.EntityConnection.ChangeDatabase*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: EntityConnection.ChangeDatabase
- uid: System.Data.EntityClient.EntityConnection.Close*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Close
  nameWithType: EntityConnection.Close
- uid: System.Data.EntityClient.EntityConnection.ConnectionString*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionString
  nameWithType: EntityConnection.ConnectionString
- uid: System.Data.EntityClient.EntityConnection.ConnectionTimeout*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: EntityConnection.ConnectionTimeout
- uid: System.Data.EntityClient.EntityConnection.CreateCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateCommand
  nameWithType: EntityConnection.CreateCommand
- uid: System.Data.EntityClient.EntityConnection.CreateDbCommand*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: EntityConnection.CreateDbCommand
- uid: System.Data.EntityClient.EntityConnection.Database*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Database
  nameWithType: EntityConnection.Database
- uid: System.Data.EntityClient.EntityConnection.DataSource*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DataSource
  nameWithType: EntityConnection.DataSource
- uid: System.Data.EntityClient.EntityConnection.DbProviderFactory*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: EntityConnection.DbProviderFactory
- uid: System.Data.EntityClient.EntityConnection.Dispose*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Dispose
  nameWithType: EntityConnection.Dispose
- uid: System.Data.EntityClient.EntityConnection.EnlistTransaction*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: EntityConnection.EnlistTransaction
- uid: System.Data.EntityClient.EntityConnection.GetMetadataWorkspace*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: GetMetadataWorkspace
  nameWithType: EntityConnection.GetMetadataWorkspace
- uid: System.Data.EntityClient.EntityConnection.Open*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: Open
  nameWithType: EntityConnection.Open
- uid: System.Data.EntityClient.EntityConnection.ServerVersion*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: ServerVersion
  nameWithType: EntityConnection.ServerVersion
- uid: System.Data.EntityClient.EntityConnection.State*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: State
  nameWithType: EntityConnection.State
- uid: System.Data.EntityClient.EntityConnection.StoreConnection*
  parent: System.Data.EntityClient.EntityConnection
  isExternal: false
  name: StoreConnection
  nameWithType: EntityConnection.StoreConnection
