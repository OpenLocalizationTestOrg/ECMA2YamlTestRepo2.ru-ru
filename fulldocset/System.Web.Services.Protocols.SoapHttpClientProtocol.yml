### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol
  id: SoapHttpClientProtocol
  children:
  - System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  - System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  - System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  - System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  langs:
  - csharp
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol
  type: Class
  summary: "Указывает класс клиента, учетные записи-посредники являются производными от при использовании SOAP."
  remarks: "При создании клиента XML-веб-службы, затем прокси-класс, производный прямо или косвенно от <xref:System.Web.Services.Protocols.WebClientProtocol>должны быть созданы для веб-службу XML.</xref:System.Web.Services.Protocols.WebClientProtocol> Когда клиент XML-веб-службы вызывает метод с использованием SOAP, прокси-класс должен быть производным от SoapHttpClientProtocol, который является производным от <xref:System.Web.Services.Protocols.HttpWebClientProtocol>.</xref:System.Web.Services.Protocols.HttpWebClientProtocol> <xref:System.Web.Services.Protocols.HttpWebClientProtocol>, в свою очередь, является производным от <xref:System.Web.Services.Protocols.WebClientProtocol>.</xref:System.Web.Services.Protocols.WebClientProtocol></xref:System.Web.Services.Protocols.HttpWebClientProtocol>       Взаимодействие с веб-служб XML, создание прокси-класс, производный прямо или косвенно от <xref:System.Web.Services.Protocols.WebClientProtocol>для XML-веб-службы, необходимо вызвать.</xref:System.Web.Services.Protocols.WebClientProtocol> Вместо создания прокси-класса вручную, используйте средство языка описания веб-служб (Wsdl.exe) для создания прокси-класса для описания данного XML-веб-службы. Класс-посредник, созданный для протокола SOAP, синхронные вызовы методов выполняются через <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>метода, в то время как асинхронные вызовы выполняются с использованием <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A>метод и <xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A>метод.</xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.EndInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.BeginInvoke%2A> </xref:System.Web.Services.Protocols.HttpSimpleClientProtocol.Invoke%2A>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. The proxy class derives from SoapHttpClientProtocol, which derives from the abstract <xref:System.Web.Services.Protocols.WebClientProtocol> class.  \n  \n [!code-cs[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_15_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_15_1.vb)]\n [!code-cpp[Classic SoapHttpClientProtocol Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_15_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was generated.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SoapHttpClientProtocol : System.Web.Services.Protocols.HttpWebClientProtocol
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Web.Services.Protocols.WebClientProtocol
  - System.Web.Services.Protocols.HttpWebClientProtocol
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Web.Services.Protocols.HttpWebClientProtocol.AllowAutoRedirect
  - System.Web.Services.Protocols.HttpWebClientProtocol.CancelAsync(System.Object)
  - System.Web.Services.Protocols.HttpWebClientProtocol.ClientCertificates
  - System.Web.Services.Protocols.HttpWebClientProtocol.CookieContainer
  - System.Web.Services.Protocols.HttpWebClientProtocol.EnableDecompression
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type,System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GenerateXmlMappings(System.Type[],System.Collections.ArrayList)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest)
  - System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)
  - System.Web.Services.Protocols.HttpWebClientProtocol.Proxy
  - System.Web.Services.Protocols.HttpWebClientProtocol.UnsafeAuthenticatedConnectionSharing
  - System.Web.Services.Protocols.HttpWebClientProtocol.UserAgent
  - System.Web.Services.Protocols.WebClientProtocol.Abort
  - System.Web.Services.Protocols.WebClientProtocol.AddToCache(System.Type,System.Object)
  - System.Web.Services.Protocols.WebClientProtocol.ConnectionGroupName
  - System.Web.Services.Protocols.WebClientProtocol.Credentials
  - System.Web.Services.Protocols.WebClientProtocol.GetFromCache(System.Type)
  - System.Web.Services.Protocols.WebClientProtocol.PreAuthenticate
  - System.Web.Services.Protocols.WebClientProtocol.RequestEncoding
  - System.Web.Services.Protocols.WebClientProtocol.Timeout
  - System.Web.Services.Protocols.WebClientProtocol.Url
  - System.Web.Services.Protocols.WebClientProtocol.UseDefaultCredentials
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.Services.Protocols.SoapHttpClientProtocol&quot;> </xref> класса."
  syntax:
    content: public SoapHttpClientProtocol ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  id: BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Начинает асинхронный вызов метода XML-веб-службы, с помощью протокола SOAP."
  remarks: "Как правило не вызывается метод BeginInvoke напрямую, если выполнялось построение собственного класса прокси-сервера для веб-служб XML.       Прокси-класс, созданный средством языка описания веб-служб (Wsdl.exe) из описания службы предоставляет методы XML-веб-службы, как имена, производный от класса прокси-сервера для синхронно вызывать методы XML-веб-службы. Асинхронный вызов методов XML-веб-службы, добавляются два дополнительных метода в прокси-класс для каждого метода XML-веб-службы, с `Begin` префикс, добавляемый к имени метода XML-веб-службы, и одна с `End` префиксом.       Прокси-класса, вызывает метод BeginInvoke для запуска асинхронного вызова метода XML-веб-службы. Например, если веб-служба XML предоставляет метод XML-веб-службы с именем `Add`, прокси-класс содержит метод с именем `BeginAdd`, для начала асинхронного вызова для XML-веб-метода службы. Внутри кода для `BeginAdd`, вызов метода BeginInvoke и результаты помещаются в ожидаемый тип возвращаемого значения для `Add`.       `methodName` Используется для обнаружения настраиваемых атрибутов, которые могут быть добавлены к методу, например <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>Дополнительные сведения о производном методе, который требуется для протокола SOAP.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>       `asyncState`передается в `callback` и включается в <xref:System.IAsyncResult>, возвращаемый методом BeginInvoke.</xref:System.IAsyncResult> `asyncState` Используется для передачи сведений о контексте асинхронного вызова, указанного в `callback` параметра в делегат, обрабатывающий результат."
  example:
  - "The following code example is a proxy class generated by the Web Services Description Language tool (Wsdl.exe) for the `Math` XML Web service. Within the `BeginAdd` method of the proxy class, the BeginInvoke method is starting an asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/cpp/81aca43b-c3a8-42d4-aae1-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/csharp/81aca43b-c3a8-42d4-aae1-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.BeginInvoke Example#1](~/add/codesnippet/visualbasic/81aca43b-c3a8-42d4-aae1-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected IAsyncResult BeginInvoke (string methodName, object[] parameters, AsyncCallback callback, object asyncState);
    parameters:
    - id: methodName
      type: System.String
      description: "Имя метода XML-веб-службы в производном классе, который вызывает метод BeginInvoke."
    - id: parameters
      type: System.Object[]
      description: "Массив объектов, содержащий параметры для передачи в веб-службу XML. Порядок значений в массиве соответствует порядку параметров в вызывающем методе производного класса."
    - id: callback
      type: System.AsyncCallback
      description: "Делегат, вызываемый при завершении асинхронного вызова метода. Если `callback` — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, делегат не вызывается."
    - id: asyncState
      type: System.Object
      description: "Дополнительные сведения, предоставляемые вызывающим объектом."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>, Передаваемое в <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*>метод для получения возвращаемых значений из удаленного вызова метода.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*> </xref:System.IAsyncResult>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "Запрос достигает сервера, но не был обработан успешно."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Недопустимый запрос для текущего состояния объекта."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Произошла ошибка при попытке доступа к сети."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  id: Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Динамически связывает веб-служб XML описывается в документе обнаружения по адресу <xref:System.Web.Services.Protocols.WebClientProtocol.Url*>.</xref:System.Web.Services.Protocols.WebClientProtocol.Url*>"
  remarks: "Клиент XML-веб-службы можно динамически привязать к XML-веб-службы, отличной от той, на которые ссылается класс прокси-сервера, с помощью метода обнаружения. Как правило <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>свойство ссылается на базовый адрес веб-службу XML.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Тем не менее, перед вызовом метода обнаружения, задать <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>Свойства на URL-адрес документа обнаружения.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A> Метод Discover пытается найти совпадение в документе обнаружения по привязке, определенной в прокси-класса и динамически привязать к нему. В случае успешного выполнения, дальнейшие вызовы метода направляются XML-веб-службы, описанной в документе обнаружения.       Если прокси-класс создается с помощью средства языка описания веб-служб (Wsdl.exe), прокси-класс определяет привязку, реализованный в методах, которые она вызывает, с помощью <xref:System.Web.Services.WebServiceBindingAttribute>.</xref:System.Web.Services.WebServiceBindingAttribute> Если веб-служб XML реализует несколько привязок, Wsdl.exe создает класс-посредник для каждой привязки. Применяется к каждому прокси-класс — <xref:System.Web.Services.WebServiceBindingAttribute>, определяющий имя привязки и его пространство имен.</xref:System.Web.Services.WebServiceBindingAttribute> Документ обнаружения, задать <xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>свойства должен содержать ссылку на веб-служб XML, реализующий одно и то же имя привязки и пространство имен, или выдается исключение.</xref:System.Web.Services.Protocols.WebClientProtocol.Url%2A>"
  example:
  - "The following code example is a proxy class generated using the Wsdl.exe utility for the `Math` XML Web service. A <xref:System.Web.Services.WebServiceBindingAttribute> is applied to the `Math` proxy class setting the binding name to `MathSoap` and its namespace to `http://tempuri.org/`.  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_8_1.cs)]\n [!code-cpp[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_8_1.cpp)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_1.vb)]  \n  \n The following code example is a Web Service client using the preceding proxy class. Within the `EnterBtn_Click` event of the Web Form, the XML Web service client calls the Discover method attempting to dynamically bind to the URL supplied by the user.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/csharp/m-system.web.services.pr_8_2.aspx)]\n [!code-vb[SoapHttpClientProtocol.Discover Example#2](~/add/codesnippet/visualbasic/m-system.web.services.pr_8_2.aspx)]"
  syntax:
    content: public void Discover ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Класс прокси-сервер не имеет привязки, определенной."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Завершает асинхронный вызов метода XML-веб-службы, с помощью протокола SOAP."
  remarks: "Как правило не вызывается метод EndInvoke напрямую, если выполнялось построение собственного класса прокси-сервера для веб-служб XML.       Методы XML-веб-службы предоставляет прокси-класс, созданный средством языка описания веб-служб (Wsdl.exe) веб-служб XML как имена за пределами прокси-класса для синхронного вызова методов XML-веб-службы. Для асинхронного вызова методов XML-веб-службы, добавляются два дополнительных метода в прокси-класс для каждого метода XML-веб-службы, с `Begin` префикс, добавляемый к имени метода XML-веб-службы, и одна с `End` префиксом.       Прокси-класса, вызывает метод EndInvoke для завершения асинхронного вызова метода XML-веб-службы. Например, если веб-служба XML предоставляет метод XML-веб-службы с именем `Add`, прокси-класс содержит метод с именем `EndAdd`, метод для завершения асинхронного вызова XML-веб-службы. Внутри кода для `EndAdd` вызов метода EndInvoke и затем результаты помещаются в ожидаемый тип возвращаемого значения для `Add`."
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `EndAdd` method of the proxy class, the EndInvoke method completes the asynchronous invocation to the `Add` XML Web service method.  \n  \n [!code-vb[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/visualbasic/d0f11dd9-cadb-4640-91aa-_1.vb)]\n [!code-cs[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/csharp/d0f11dd9-cadb-4640-91aa-_1.cs)]\n [!code-cpp[Classic SoapHttpClientProtocol.EndInvoke Example#1](~/add/codesnippet/cpp/d0f11dd9-cadb-4640-91aa-_1.cpp)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] EndInvoke (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Возвращенные <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*>метод.</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object[]
      description: "Массив объектов, содержащий возвращаемое значение и любой по ссылке или <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> параметры метода производного класса."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>не является значение, возвращаемое <xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*> метод."
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "Запрос достигает сервера, но не был обработан успешно."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Недопустимый запрос для текущего состояния объекта."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Произошла ошибка при попытке доступа к сети."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Возвращает <xref:System.Xml.XmlReader>инициализируется <xref:System.Web.Services.Protocols.SoapMessage.Stream*>свойство <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> параметр.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  syntax:
    content: protected virtual System.Xml.XmlReader GetReaderForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "Объект <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> , предоставляющий <xref:System.Web.Services.Protocols.SoapMessage.Stream*>для инициализации <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "Размер начальной буфера, <xref:System.IO.StreamReader>используемого <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> </xref:System.IO.StreamReader>"
    return:
      type: System.Xml.XmlReader
      description: "Объект <xref:System.Xml.XmlReader>инициализируется <xref:System.Web.Services.Protocols.SoapMessage.Stream*>свойство <code> message </code> параметр.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlReader>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  id: GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Создает <xref:System.Net.WebRequest>для указанного <code> uri </code>.</xref:System.Net.WebRequest>"
  remarks: "Этот метод может быть переопределен для настройки <xref:System.Net.WebRequest>перед XML-веб-службы запрос.</xref:System.Net.WebRequest> Например удалось добавить пользовательский заголовок к запросу."
  syntax:
    content: protected override System.Net.WebRequest GetWebRequest (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "<xref:System.Uri>Для использования при создании <xref:System.Net.WebRequest>.</xref:System.Net.WebRequest> </xref:System.Uri>"
    return:
      type: System.Net.WebRequest
      description: "<xref:System.Net.WebRequest>Для указанного URI.</xref:System.Net.WebRequest>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <code>uri</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  id: GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Возвращает <xref:System.Xml.XmlWriter>инициализируется <xref:System.Web.Services.Protocols.SoapMessage.Stream*>свойство <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> параметр.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  syntax:
    content: protected virtual System.Xml.XmlWriter GetWriterForMessage (System.Web.Services.Protocols.SoapClientMessage message, int bufferSize);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapClientMessage
      description: "Объект <xref href=&quot;System.Web.Services.Protocols.SoapClientMessage&quot;> </xref> , предоставляющий <xref:System.Web.Services.Protocols.SoapMessage.Stream*>для инициализации <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> </xref:System.Web.Services.Protocols.SoapMessage.Stream*>"
    - id: bufferSize
      type: System.Int32
      description: "Размер начальной буфера, <xref:System.IO.StreamWriter>используемого <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> </xref:System.IO.StreamWriter>"
    return:
      type: System.Xml.XmlWriter
      description: "Объект <xref:System.Xml.XmlWriter>инициализируется <xref:System.Web.Services.Protocols.SoapMessage.Stream*>свойство <code> message </code> параметр.</xref:System.Web.Services.Protocols.SoapMessage.Stream*> </xref:System.Xml.XmlWriter>"
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Вызывает метод XML-веб-службы, синхронно с помощью протокола SOAP."
  remarks: "Как правило не вызывается метод Invoke напрямую, если вы создаете свой собственный класс прокси-сервера для веб-служб XML.       Прокси-класс, созданный средством языка описания веб-служб (Wsdl.exe) веб-служб XML предоставляет методы XML-веб-службы, как имена за пределами класса прокси-сервера. Прокси-класса, вызывает метод Invoke для вызова неуправляемого кода для вызова метода XML-веб-службы. Например, если веб-служба XML предоставляет метод XML-веб-службы с именем `Add`, прокси-класс также содержит метод с именем `Add`. Внутри кода для `Add` методу прокси-класса, выполняется синхронный вызов метода XML-веб-службы через метод Invoke и затем результаты помещаются в ожидаемый тип возвращаемого значения для `Add`.       `methodName` Параметр используется для обнаружения настраиваемых атрибутов, которые могут быть добавлены к методу, например <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>Дополнительные сведения об производного метода, который требуется для протокола SOAP.</xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute>"
  example:
  - "The following code example is a proxy class generated by Wsdl.exe for the `Math` XML Web service. Within the `Add` method of the proxy class, the Invoke method is calling the `Add` XML Web service method.  \n  \n [!code-cpp[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/cpp/0fe8d4bc-686d-467a-8cdd-_1.cpp)]\n [!code-cs[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/csharp/0fe8d4bc-686d-467a-8cdd-_1.cs)]\n [!code-vb[Classic SoapHttpClientProtocol.Invoke Example#1](~/add/codesnippet/visualbasic/0fe8d4bc-686d-467a-8cdd-_1.vb)]  \n  \n The following code example is the `Math` XML Web service, from which the preceding proxy class was created.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: protected object[] Invoke (string methodName, object[] parameters);
    parameters:
    - id: methodName
      type: System.String
      description: "Имя метода XML-веб-службы."
    - id: parameters
      type: System.Object[]
      description: "Массив объектов, содержащий параметры для передачи в веб-службу XML. Порядок значений в массиве соответствует порядку параметров в вызывающем методе производного класса."
    return:
      type: System.Object[]
      description: "Массив объектов, содержащий возвращаемое значение и любые <xref uid=&quot;langword_csharp_reference&quot; name=&quot;reference&quot; href=&quot;&quot;> </xref> или <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> параметры метода производного класса."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  exceptions:
  - type: System.Web.Services.Protocols.SoapException
    commentId: T:System.Web.Services.Protocols.SoapException
    description: "Запрос достигает сервера, но не был обработан успешно."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Недопустимый запрос для текущего состояния объекта."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "Произошла ошибка при попытке доступа к сети."
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Асинхронно вызывает указанный метод."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback);
    parameters:
    - id: methodName
      type: System.String
      description: "Имя вызываемого метода."
    - id: parameters
      type: System.Object[]
      description: "Параметры для передачи в метод."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "Делегат, вызываемый при завершении вызова метода."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  id: InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Асинхронно вызывает указанный метод."
  syntax:
    content: protected void InvokeAsync (string methodName, object[] parameters, System.Threading.SendOrPostCallback callback, object userState);
    parameters:
    - id: methodName
      type: System.String
      description: "Имя вызываемого метода."
    - id: parameters
      type: System.Object[]
      description: "Параметры для передачи в метод."
    - id: callback
      type: System.Threading.SendOrPostCallback
      description: "Делегат, вызываемый при завершении вызова метода."
    - id: userState
      type: System.Object
      description: "Объект, используемый для передачи информации о состоянии в `callback` делегата."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  id: SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  langs:
  - csharp
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Возвращает или задает версию протокола SOAP, используемого для выполнения запроса SOAP в веб-службу XML."
  remarks: "SoapVersion свойству прокси-класса, создаваемого средством языка описания веб-служб (Wsdl.exe) <xref:System.Web.Services.Protocols.SoapProtocolVersion>по умолчанию, если документ WSDL для веб-служб XML поддерживает SOAP версии 1.1.</xref:System.Web.Services.Protocols.SoapProtocolVersion> Тем не менее если веб-служб XML поддерживает только протокол SOAP 1.2, Wsdl.exe задает свойство SoapVersion <xref:System.Web.Services.Protocols.SoapProtocolVersion>.</xref:System.Web.Services.Protocols.SoapProtocolVersion> Чтобы выбрать версию протокола SOAP, при создании класса прокси-сервера с помощью Wsdl.exe, используйте `/protocol` переключиться с `SOAP` или `SOAP12` параметры, чтобы задать свойство SoapVersion <xref:System.Web.Services.Protocols.SoapProtocolVersion>и <xref:System.Web.Services.Protocols.SoapProtocolVersion>соответственно.</xref:System.Web.Services.Protocols.SoapProtocolVersion> </xref:System.Web.Services.Protocols.SoapProtocolVersion>"
  example:
  - "The following code example sets the version of the protocol used to communicate with an XML Web service to SOAP 1.2.  \n  \n [!code-cs[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/csharp/p-system.web.services.pr_20_1.aspx)]\n [!code-vb[SoapHttpClientProtocol.SoapVersion#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_20_1.aspx)]"
  syntax:
    content: public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; set; }
    return:
      type: System.Web.Services.Protocols.SoapProtocolVersion
      description: "Один из <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref> значения. Значение по умолчанию — <xref href=&quot;System.Web.Services.Protocols.SoapProtocolVersion&quot;> </xref>."
  overload: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Services.Protocols.HttpWebClientProtocol
  isExternal: false
  name: System.Web.Services.Protocols.HttpWebClientProtocol
- uid: System.Web.Services.Protocols.SoapException
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapException
  nameWithType: SoapException
  fullName: System.Web.Services.Protocols.SoapException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol()
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapHttpClientProtocol()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke(String,Object[],AsyncCallback,Object)
  nameWithType: SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke(String,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover()
  nameWithType: SoapHttpClientProtocol.Discover()
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover()
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(System.IAsyncResult)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: SoapHttpClientProtocol.EndInvoke(IAsyncResult)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke(IAsyncResult)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Web.Services.Protocols.SoapClientMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapClientMessage
  nameWithType: SoapClientMessage
  fullName: System.Web.Services.Protocols.SoapClientMessage
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(System.Uri)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest(Uri)
  nameWithType: SoapHttpClientProtocol.GetWebRequest(Uri)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest(Uri)
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(System.Web.Services.Protocols.SoapClientMessage,System.Int32)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage(SoapClientMessage,Int32)
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage(SoapClientMessage,Int32)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(System.String,System.Object[])
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: SoapHttpClientProtocol.Invoke(String,Object[])
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String,Object[])
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: true
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(System.String,System.Object[],System.Threading.SendOrPostCallback,System.Object)
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync(String,Object[],SendOrPostCallback,Object)
  nameWithType: SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync(String,Object[],SendOrPostCallback,Object)
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
  fullName: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion
- uid: System.Web.Services.Protocols.SoapProtocolVersion
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapProtocolVersion
  nameWithType: SoapProtocolVersion
  fullName: System.Web.Services.Protocols.SoapProtocolVersion
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.#ctor*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapHttpClientProtocol
  nameWithType: SoapHttpClientProtocol.SoapHttpClientProtocol
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: BeginInvoke
  nameWithType: SoapHttpClientProtocol.BeginInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Discover*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Discover
  nameWithType: SoapHttpClientProtocol.Discover
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.EndInvoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: EndInvoke
  nameWithType: SoapHttpClientProtocol.EndInvoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetReaderForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetReaderForMessage
  nameWithType: SoapHttpClientProtocol.GetReaderForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWebRequest*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWebRequest
  nameWithType: SoapHttpClientProtocol.GetWebRequest
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.GetWriterForMessage*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: GetWriterForMessage
  nameWithType: SoapHttpClientProtocol.GetWriterForMessage
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: Invoke
  nameWithType: SoapHttpClientProtocol.Invoke
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.InvokeAsync*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: InvokeAsync
  nameWithType: SoapHttpClientProtocol.InvokeAsync
- uid: System.Web.Services.Protocols.SoapHttpClientProtocol.SoapVersion*
  parent: System.Web.Services.Protocols.SoapHttpClientProtocol
  isExternal: false
  name: SoapVersion
  nameWithType: SoapHttpClientProtocol.SoapVersion
