### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.SpeechSynthesizer
  id: SpeechSynthesizer
  children:
  - System.Speech.Synthesis.SpeechSynthesizer.#ctor
  - System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  - System.Speech.Synthesis.SpeechSynthesizer.Dispose
  - System.Speech.Synthesis.SpeechSynthesizer.Finalize
  - System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  - System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.Pause
  - System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  - System.Speech.Synthesis.SpeechSynthesizer.Rate
  - System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  - System.Speech.Synthesis.SpeechSynthesizer.Resume
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  - System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  - System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  - System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  - System.Speech.Synthesis.SpeechSynthesizer.State
  - System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  - System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  - System.Speech.Synthesis.SpeechSynthesizer.Voice
  - System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  - System.Speech.Synthesis.SpeechSynthesizer.Volume
  langs:
  - csharp
  name: SpeechSynthesizer
  nameWithType: SpeechSynthesizer
  fullName: System.Speech.Synthesis.SpeechSynthesizer
  type: Class
  summary: "Предоставляет доступ к функциям установленных синтеза речи."
  remarks: "При создании нового объекта SpeechSynthesizer, она использует голос системы по умолчанию. Чтобы настроить SpeechSynthesizer с использованием одного из установленных речи голосов синтеза (преобразования текста в речь), используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> Чтобы получить сведения о том, какие установлены голоса, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Этот класс также предоставляет контроль над следующими аспектами синтеза речи: - Чтобы настроить вывод SpeechSynthesizer объекта, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>      -Для формирования речи, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> SpeechSynthesizer может привести к речи из текста, <xref:System.Speech.Synthesis.Prompt>или <xref:System.Speech.Synthesis.PromptBuilder>объекта, или из [язык разметки синтеза речи (SSML) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201763).</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.Prompt>      — Чтобы приостанавливать и возобновлять синтеза речи, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>и <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>      — Чтобы добавить или удалить словари, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>и <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A> SpeechSynthesizer можно использовать один или несколько словари вспомогательными его произношения слов.      — Чтобы изменить доставки вывода речи, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A>и <xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A>Свойства.</xref:System.Speech.Synthesis.SpeechSynthesizer.Volume%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Rate%2A>       SpeechSynthesizer инициирует события при возникновении некоторых функций в запросах: (<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>, <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>).</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> </xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> </xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> </xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> Он также вызывает события, которые отчетов при запуске (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>) и окончания (<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>) из говорят на операции и изменений, голоса (<xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>).</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>      Настроек [!NOTE] настроек вызова всегда <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A>перед освобождением последней ссылки на SpeechSynthesizer.</xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose%2A> В противном случае им ресурсы не будут освобождены, пока сборщик мусора вызывает объект SpeechSynthesizer <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A>"
  example:
  - "The following example is part of a console application that initializes a SpeechSynthesizer object and speaks a string.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a string.  \n      synth.Speak(\"This example demonstrates a basic use of Speech Synthesizer\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: 'public sealed class SpeechSynthesizer : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeechSynthesizer()
  nameWithType: SpeechSynthesizer.SpeechSynthesizer()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> класса."
  remarks: "При инициализации нового <xref:System.Speech.Synthesis.SpeechSynthesizer>экземпляр, он использует голос системы по умолчанию.</xref:System.Speech.Synthesis.SpeechSynthesizer> Чтобы настроить <xref:System.Speech.Synthesis.SpeechSynthesizer>для использования голоса (преобразования текста в речь) синтеза речи, установленного используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Чтобы получить сведения о том, какие установлены голоса, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>"
  syntax:
    content: public SpeechSynthesizer ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  id: AddLexicon(System.Uri,System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: AddLexicon(Uri,String)
  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Добавляет лексики для <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: "Лексики произношение — это совокупность слов или фраз, а также их произношения, состоящие из буквы и символы из поддерживаемых фонетического алфавита. Лексики позволяет указать пользовательские произношения специализированных терминов в приложении.       Произношения, определенных в файле внешних лексики имеют приоритет над произношение внутреннего лексикона или словаря синтезаторов речи. Однако произношение указанное встроенный в запросах, созданных с помощью любой из <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, или <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>методы имеют приоритет над произношение, указанный в любой лексики.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> Встроенная произношение применяются только к одним вхождением слова. В разделе [словари и алфавитах фонетического](http://msdn.microsoft.com/en-us/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) для получения дополнительной информации.       Объект <xref:System.Speech.Synthesis.SpeechSynthesizer>можно добавить несколько словари. Два значения в настоящее время поддерживаются `mediaType` параметра:-значение `application/pls+xml` указывает, соответствует лексики [спецификации лексики произношение (PLS) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201766).</xref:System.Speech.Synthesis.SpeechSynthesizer> Это предпочтительный формат для использования.      -Значение `application/vdn.ms-sapi-lex` указывает, что формат лексики несжатые лексикона, формат защитой прав собственности корпорации Майкрософт. Это устаревший формат, и мы рекомендуем использовать формат PLS, описанных выше."
  example:
  - "The following example demonstrates the effect of adding and removing a lexicon that contains a custom pronunciation for the word \"blue\". The lexicon defines the pronunciation of \"blue\" to sound like \"bleep\". While the lexicon is loaded, the speech synthesizer uses the pronunciation defined in the lexicon.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n  \n        // Add a lexicon that changes the pronunciation of \"blue\".  \n        synth.AddLexicon(new Uri(\"C:\\\\test\\\\Blue.pls\"), \"application/pls+xml\");  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n  \n        // Remove the lexicon.  \n        synth.RemoveLexicon(new Uri(\"C:\\\\test\\\\Blue.pls\"));  \n  \n        // Speak the prompt.  \n        synth.Speak(\"My favorite color is blue.\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```  \n  \n Following are the contents of the lexicon file Blue.pls:  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n  \n<lexicon version=\"1.0\"   \n      xmlns=\"http://www.w3.org/2005/01/pronunciation-lexicon\"  \n      alphabet=\"x-microsoft-ups\" xml:lang=\"en-US\">  \n  \n  <lexeme>  \n    <grapheme> blue </grapheme>  \n    <phoneme> B L I P </phoneme>  \n  </lexeme>  \n  \n</lexicon>  \n```"
  syntax:
    content: public void AddLexicon (Uri uri, string mediaType);
    parameters:
    - id: uri
      type: System.Uri
      description: "Расположение лексики сведения."
    - id: mediaType
      type: System.String
      description: "Тип носителя для правила. Значения типа носителя не учитывается регистр."
  overload: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  id: BookmarkReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: BookmarkReached
  nameWithType: SpeechSynthesizer.BookmarkReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> обнаруживает закладки в строке."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Это событие вызывается при обработке любого из <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Сведения о данных, связанный с событием в разделе <xref:System.Speech.Synthesis.BookmarkReachedEventArgs>.</xref:System.Speech.Synthesis.BookmarkReachedEventArgs>       Можно добавлять закладки с помощью <xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A>метод.</xref:System.Speech.Synthesis.PromptBuilder.AppendBookmark%2A>"
  example:
  - "The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the BookmarkReached event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt and append bookmarks.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.AppendBookmark(\"Daytime forecast\");  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.AppendBookmark(\"Nightime forecast\");  \n  \n        // Add a handler for the BookmarkReached event.  \n        synth.BookmarkReached +=  \n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write the name and position of the bookmark to the console.  \n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \n    {  \n      Console.WriteLine(\"Bookmark ({0}) reached at: {1} \",  \n        e.Bookmark, e.AudioPosition);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs> BookmarkReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose
  id: Dispose
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Dispose()
  nameWithType: SpeechSynthesizer.Dispose()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Удаляет <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта и выпусках ресурсы, используемые во время сеанса."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize
  id: Finalize
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Finalize()
  nameWithType: SpeechSynthesizer.Finalize()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выступает в качестве меры предосторожности, чтобы очистить ресурсы, в случае, если <xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*>метод не вызывается.</xref:System.Speech.Synthesis.SpeechSynthesizer.Dispose*>"
  syntax:
    content: ~SpeechSynthesizer ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  id: GetCurrentlySpokenPrompt
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetCurrentlySpokenPrompt()
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает строку, <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> общаются."
  remarks: ''
  example:
  - "```c#  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt GetCurrentlySpokenPrompt ();
    parameters: []
    return:
      type: System.Speech.Synthesis.Prompt
      description: "Возвращает объект запроса, в настоящее время говорят."
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  id: GetInstalledVoices
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetInstalledVoices()
  nameWithType: SpeechSynthesizer.GetInstalledVoices()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает все установленные речи голоса синтеза (преобразования текста в речь)."
  remarks: "Голоса — это ядро для синтеза речи (преобразования текста в речь или TTS), установленного в системе."
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices (engines for speech synthesis) and demonstrates the information that is available for each voice.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices.   \n        Console.WriteLine(\"Installed voices -\");  \n        foreach (InstalledVoice voice in synth.GetInstalledVoices())  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          string AudioFormats = \"\";  \n          foreach (SpeechAudioFormatInfo fmt in info.SupportedAudioFormats)  \n          {  \n            AudioFormats += String.Format(\"{0}\\n\",  \n            fmt.EncodingFormat.ToString());  \n          }  \n  \n          Console.WriteLine(\" Name:          \" + info.Name);  \n          Console.WriteLine(\" Culture:       \" + info.Culture);  \n          Console.WriteLine(\" Age:           \" + info.Age);  \n          Console.WriteLine(\" Gender:        \" + info.Gender);  \n          Console.WriteLine(\" Description:   \" + info.Description);  \n          Console.WriteLine(\" ID:            \" + info.Id);  \n          Console.WriteLine(\" Enabled:       \" + voice.Enabled);  \n          if (info.SupportedAudioFormats.Count != 0)  \n          {  \n            Console.WriteLine( \" Audio formats: \" + AudioFormats);  \n          }  \n          else  \n          {  \n            Console.WriteLine(\" No supported audio formats found\");  \n          }  \n  \n          string AdditionalInfo = \"\";  \n          foreach (string key in info.AdditionalInfo.Keys)  \n          {  \n            AdditionalInfo += String.Format(\"  {0}: {1}\\n\", key, info.AdditionalInfo[key]);  \n          }  \n  \n          Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n          Console.WriteLine();  \n        }  \n      }  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
      description: "Возвращает коллекцию только для чтения голоса, установленные в системе."
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  id: GetInstalledVoices(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: GetInstalledVoices(CultureInfo)
  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает все установленные речи голоса синтеза (преобразования текста в речь), поддерживающих определенного языкового стандарта."
  remarks: "Если ни один из установленных голосов поддержки указанного языкового стандарта, этот метод возвращает пустую коллекцию.       Microsoft Windows и System.Speech API принять все допустимые коды страны языка. Для выполнения преобразования текста в речь на языке, указанном в свойстве языка и региональных параметров, необходимо установить модуль синтеза речи, который поддерживает этот код страны языка. Ядра синтеза речи, которая поставлялась с работой Microsoft Windows 7 со следующими кодами языка страны:-en US. Английский (США) - zh-CN. Китайский (Китай) - zh-TW. Также допускаются китайского двухбуквенный (Тайвань) кодов языка, например «en»."
  example:
  - "The following example is part of a console application that initializes a <xref:System.Speech.Synthesis.SpeechSynthesizer> object and outputs to the console a list of the installed voices that support the en-US locale.  \n  \n```c#  \nusing System;  \nusing System.Globalization;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synthesizer = new SpeechSynthesizer())  \n      {  \n  \n        // Output information about all of the installed voices that  \n        // support the en-US locacale.   \n        Console.WriteLine(\"Installed voices for the en-US locale:\");  \n        foreach (InstalledVoice voice in  \n          synthesizer.GetInstalledVoices(new CultureInfo(\"en-US\")))  \n        {  \n          VoiceInfo info = voice.VoiceInfo;  \n          OutputVoiceInfo(info);  \n        }  \n  \n        // Output information about the current voice.  \n        Console.WriteLine();  \n        Console.WriteLine(\"Current voice:\");  \n        OutputVoiceInfo(synthesizer.Voice);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Display information about a synthesizer voice.  \n    private static void OutputVoiceInfo(VoiceInfo info)  \n    {  \n      Console.WriteLine(\"  Name: {0}, culture: {1}, gender: {2}, age: {3}.\",  \n        info.Name, info.Culture, info.Gender, info.Age);  \n      Console.WriteLine(\"    Description: {0}\", info.Description);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice> GetInstalledVoices (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Языковой стандарт, должен поддерживать голоса."
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
      description: "Возвращает коллекцию только для чтения из голосов, установленные в системе, поддерживающих указанный языковой стандарт."
  overload: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause
  id: Pause
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Pause()
  nameWithType: SpeechSynthesizer.Pause()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Приостанавливает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Pause*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  id: PhonemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: PhonemeReached
  nameWithType: SpeechSynthesizer.PhonemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Вызывается, когда достигается фонемы."
  remarks: "Фонемы является основным компонентом письменного языка, обычно буквы алфавита (или сочетания из двух букв), представляющий один или несколько отдельных звуков. Например буква «c» является фонему, который может показаться как символ «s» из «шлакобетона» или как «k» в «catch». Запись слово является сборка фонемы. Изменение фонемы в слове приведут к изменению его написании.       Объект <xref:System.Speech.Synthesis.SpeechSynthesizer>экземпляр создает событие PhonemeReached для каждой части слова, составляющее фонему.</xref:System.Speech.Synthesis.SpeechSynthesizer> Например для слова «тема» создал бы три PhonemeReached события; один для «th» звук, один для звука «e» и по одному для звук «m» (me).       Например и сведения о данных, связанный с событием в разделе <xref:System.Speech.Synthesis.PhonemeReachedEventArgs>.</xref:System.Speech.Synthesis.PhonemeReachedEventArgs>"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs> PhonemeReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate
  id: Rate
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает или задает скорость озвучивания <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: ''
  example:
  - "The following example speaks a string with the speaking rate set to -2.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Set a value for the speaking rate.  \n      synth.Rate = -2;  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a text string synchronously.  \n      synth.Speak(\"This example speaks a string with the speaking rate set to -2.\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }     \n  }    \n}  \n```"
  syntax:
    content: public int Rate { get; set; }
    return:
      type: System.Int32
      description: "Возвращает скорость озвучивания <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта в диапазоне от -10 до 10."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Rate*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  id: RemoveLexicon(System.Uri)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: RemoveLexicon(Uri)
  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Удаляет лексики из <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: "В разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>пример.</xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>"
  syntax:
    content: public void RemoveLexicon (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "Расположение документа лексики."
  overload: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume
  id: Resume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Resume()
  nameWithType: SpeechSynthesizer.Resume()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Резюме <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект после приостановки."
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.Resume*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  id: SelectVoice(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoice(String)
  nameWithType: SpeechSynthesizer.SelectVoice(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выбор конкретного голоса по имени."
  remarks: "Используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс, чтобы получить имена установлены голоса преобразования текста в речь (TTS), которые можно выбрать.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для выбора голоса, передайте все содержимое <xref:System.Speech.Synthesis.VoiceInfo.Name%2A>свойство в качестве аргумента для метода SelectVoice.</xref:System.Speech.Synthesis.VoiceInfo.Name%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>Выбирает первый установленный голоса, который содержит `name` голосом <xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName>свойство.</xref:System.Speech.Synthesis.VoiceInfo.Name%2A?displayProperty=fullName> </xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer>Выполняет сравнение с учетом регистра, substring для определения соответствия голос `name`.</xref:System.Speech.Synthesis.SpeechSynthesizer>       Если приложение вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, метод проверяет, каждый из голоса, он находит в реестре заданным критериям минимальный.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для любого голоса, не прошедшей проверку <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>задает его <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>Свойства `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Приложение не может выбрать голос которого <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Как правило, приложения не задано голосовых <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>       Для выбора голоса, пол, возраст или языкового стандарта, используйте один из <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>"
  syntax:
    content: public void SelectVoice (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя голос для выбора."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выбирает с определенной Пол голоса."
  remarks: "Используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс, чтобы получить имена установлены голоса преобразования текста в речь (TTS), которые можно выбрать.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>Выбирает первый установленных голосовых которого <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>совпадений свойство `gender` параметр.</xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>       Если приложение вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, метод проверяет, каждый из голоса, он находит в реестре заданным критериям минимальный.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для любого голоса, не прошедшей проверку <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>задает его <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>Свойства `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Приложение не может выбрать голос которого <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Как правило, приложения не задано голосовых <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>       Для выбора голоса, на основе других характеристик см. другой <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>       Для выбора голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Пол используемого голоса для выбора."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выбирает голосовой с определенной пол и возраст."
  remarks: "Используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс, чтобы получить имена установлены голоса преобразования текста в речь (TTS), которые можно выбрать.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>Выбирает первый установленных голосовых которого <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>и <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>соответствия свойства `gender` и `age` параметров.</xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>       Если приложение вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, метод проверяет, каждый из голоса, он находит в реестре заданным критериям минимальный.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для любого голоса, не прошедшей проверку <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>задает его <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>Свойства `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Приложение не может выбрать голос которого <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Как правило, приложения не задано голосовых <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>       Для выбора голоса, на основе других характеристик см. другой <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>       Для выбора голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Пол используемого голоса для выбора."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "Возраст используемого голоса для выбора."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выбирает голоса с определенной пол и возраст, исходя из позиции, в котором упорядочены голосов."
  remarks: "Используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс, чтобы получить имена установлены голоса преобразования текста в речь (TTS), которые можно выбрать.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>Объекта, находит установлен voices которого <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>и <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>соответствия свойства `gender` и `age` параметров.</xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer>Количество совпадений, он находит и возвращает голос, если счетчик равен `voiceAlternate` параметр.</xref:System.Speech.Synthesis.SpeechSynthesizer>       Если приложение вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, метод проверяет, каждый из голоса, он находит в реестре заданным критериям минимальный.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для любого голоса, не прошедшей проверку <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>задает его <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>Свойства `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Приложение не может выбрать голос которого <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Как правило, приложения не задано голосовых <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>       Для выбора голоса, на основе других характеристик см. другой <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>перегрузок.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>       Для выбора голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Пол используемого голоса для выбора."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "Возраст используемого голоса для выбора."
    - id: voiceAlternate
      type: System.Int32
      description: "Позиция голос для выбора."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  id: SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Выбирает голоса с определенной пол, возраст и языкового стандарта, исходя из позиции, в котором упорядочены голосов."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Объекта, находит voices которого <xref:System.Speech.Synthesis.VoiceInfo.Gender%2A>, <xref:System.Speech.Synthesis.VoiceInfo.Age%2A>, и <xref:System.Speech.Synthesis.VoiceInfo.Culture%2A>соответствия свойства `gender`, `age`, и `culture` параметров.</xref:System.Speech.Synthesis.VoiceInfo.Culture%2A> </xref:System.Speech.Synthesis.VoiceInfo.Age%2A> </xref:System.Speech.Synthesis.VoiceInfo.Gender%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer>Количество совпадений, он находит и возвращает голос, если счетчик равен `voiceAlternate` параметр.</xref:System.Speech.Synthesis.SpeechSynthesizer>       Microsoft Windows и System.Speech API принять все допустимые коды страны языка. Для выполнения преобразования текста в речь, с помощью языка, заданного параметром `culture` параметр, синтеза речи, поддерживающий, что код страны языка должны быть установлены. Ядра синтеза речи, которая поставлялась с работой Microsoft Windows 7 со следующими кодами языка страны:-en US. Английский (США) - zh-CN. Китайский (Китай) - zh-TW. Также допускаются китайского двухбуквенный (Тайвань) кодов языка, например «en».       Если приложение вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>, метод проверяет, каждый из голоса, он находит в реестре заданным критериям минимальный.</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Для любого голоса, не прошедшей проверку <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>задает его <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>Свойства `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> Приложение не может выбрать голос которого <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство `False`.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A> Как правило, приложения не задано голосовых <xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>свойство.</xref:System.Speech.Synthesis.InstalledVoice.Enabled%2A>       Для выбора голоса, на основе других характеристик см. другой <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>перегрузок.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>       Для выбора голоса по имени, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>"
  syntax:
    content: public void SelectVoiceByHints (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate, System.Globalization.CultureInfo culture);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "Пол используемого голоса для выбора."
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "Возраст используемого голоса для выбора."
    - id: voiceAlternate
      type: System.Int32
      description: "Позиция голос для выбора."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "Языковой стандарт для выбора голоса."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  id: SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект дописать выходные данные в поток звука."
  remarks: "Вызовите <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>для освобождения <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на поток.</xref:System.Speech.Synthesis.SpeechSynthesizer> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>       Другие выходные данные настройки в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>"
  syntax:
    content: public void SetOutputToAudioStream (System.IO.Stream audioDestination, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);
    parameters:
    - id: audioDestination
      type: System.IO.Stream
      description: "Поток, к которому добавляются синтеза выходных данных."
    - id: formatInfo
      type: System.Speech.AudioFormat.SpeechAudioFormatInfo
      description: "Формат вывода синтеза."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  id: SetOutputToDefaultAudioDevice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToDefaultAudioDevice()
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект для отправки вывода звуковое устройство по умолчанию."
  remarks: "Можно использовать **звук** окна в Windows **панели управления** Настройка звуковое устройство по умолчанию для компьютера.       Другие выходные данные настройки в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>"
  example:
  - "The following example uses the synthesizer to speak a phrase to the default audio output.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the synthesizer to send output to the default audio device.  \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak a phrase.  \n        synth.Speak(\"This is sample text-to-speech output.\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToDefaultAudioDevice ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  id: SetOutputToNull
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToNull()
  nameWithType: SpeechSynthesizer.SetOutputToNull()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект не должен отправлять выходные данные от операций синтеза устройство, файл или поток."
  remarks: "Используйте этот метод для освобождения <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на файл или поток.</xref:System.Speech.Synthesis.SpeechSynthesizer> В разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>пример.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>       Другие выходные данные настройки в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>"
  syntax:
    content: public void SetOutputToNull ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  id: SetOutputToWaveFile(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveFile(String)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект дописать выходные данные в файл, содержащий аудио формат звукового сигнала."
  remarks: "Чтобы настроить вывод и указать формат аудио, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>"
  example:
  - "The following example uses an instance of <xref:System.Media.SoundPlayer> to play a prompt that has been output to a .wav file. Because the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> call is asynchronous, the <xref:System.Media.SoundPlayer> instance is created (and the <xref:System.Media.SoundPlayer.Play%2A> method invoked) in the handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToWaveFile(@\"C:\\Test\\Sample.wav\");  \n  \n      // Register for the SpeakCompleted event.  \n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \n  \n      // Build a prompt.  \n      PromptBuilder builder = new PromptBuilder();  \n      builder.AppendText(\"This sample asynchronously speaks a prompt to a WAVE file.\");  \n  \n      // Speak the string asynchronously.  \n      synth.SpeakAsync(builder);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Handle the SpeakCompleted event.  \n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \n    {  \n  \n      // Create a SoundPlayer instance to play the output audio file.  \n      System.Media.SoundPlayer m_SoundPlayer =  \n        new System.Media.SoundPlayer(@\"C:\\Test\\Sample.wav\");  \n  \n      //  Play the output file.  \n      m_SoundPlayer.Play();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void SetOutputToWaveFile (string path);
    parameters:
    - id: path
      type: System.String
      description: "Путь к файлу."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  id: SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект, добавляемый в файл звуковой формат звукового сигнала в формате выходных данных."
  remarks: ''
  example:
  - "The following example specifies the format of the output of speech synthesis and sends it to a WAV file.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\temp\\test.wav\",   \n          new SpeechAudioFormatInfo(32000, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  \n  \n        // Create a SoundPlayer instance to play output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =   \n          new System.Media.SoundPlayer(@\"C:\\temp\\test.wav\");  \n  \n        // Build a prompt.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is sample output to a WAVE file.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToWaveFile (string path, System.Speech.AudioFormat.SpeechAudioFormatInfo formatInfo);
    parameters:
    - id: path
      type: System.String
      description: "Путь к файлу."
    - id: formatInfo
      type: System.Speech.AudioFormat.SpeechAudioFormatInfo
      description: "Звуковой формат сведения."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  id: SetOutputToWaveStream(System.IO.Stream)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SetOutputToWaveStream(Stream)
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Настраивает <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объект дописать выходные данные в поток, содержащий аудио формат звукового сигнала."
  remarks: "Чтобы освободить <xref:System.Speech.Synthesis.SpeechSynthesizer>ссылку на поток, синтезатору выходных данных, например, путем вызова <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> reconfigure</xref:System.Speech.Synthesis.SpeechSynthesizer>       Другие выходные данные настройки в разделе <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A>, и <xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream%2A>"
  example:
  - "The following example outputs a phrase to a WAV stream.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the speech synthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      using (MemoryStream stream = new MemoryStream())  \n      {  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        MemoryStream streamAudio = new MemoryStream();  \n        System.Media.SoundPlayer m_SoundPlayer = new System.Media.SoundPlayer();  \n  \n        // Configure the synthesizer to output to an audio stream.  \n        synth.SetOutputToWaveStream(streamAudio);  \n  \n        // Speak a phrase.  \n        synth.Speak(\"This is sample text-to-speech output.\");  \n        streamAudio.Position = 0;  \n        m_SoundPlayer.Stream = streamAudio;  \n        m_SoundPlayer.Play();  \n  \n        // Set the synthesizer output to null to release the stream.   \n        synth.SetOutputToNull();  \n  \n        // Insert code to persist or process the stream contents here.  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SetOutputToWaveStream (System.IO.Stream audioDestination);
    parameters:
    - id: audioDestination
      type: System.IO.Stream
      description: "Поток, к которому добавляются синтеза выходных данных."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  id: Speak(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(Prompt)
  nameWithType: SpeechSynthesizer.Speak(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Синхронно говорит содержимое <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref> объекта."
  remarks: "Чтобы асинхронно обратиться содержимое <xref:System.Speech.Synthesis.Prompt>объекта, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.Prompt>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the Speak method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a prompt from a string.  \n        Prompt color = new Prompt(\"What is your favorite color?\");  \n  \n        // Speak the contents of the prompt synchronously.  \n        synth.Speak(color);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "Содержимое речи."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  id: Speak(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(PromptBuilder)
  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Синхронно говорит содержимое <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> объекта."
  remarks: "Чтобы асинхронно обратиться содержимое <xref:System.Speech.Synthesis.PromptBuilder>объекта, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.PromptBuilder>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the Speak method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a text string.  \n        PromptBuilder song = new PromptBuilder();  \n        song.AppendText(\"Say the name of the song you want to hear\");  \n  \n        // Speak the contents of the prompt synchronously.  \n        synth.Speak(song);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "Содержимое речи."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  id: Speak(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Speak(String)
  nameWithType: SpeechSynthesizer.Speak(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Синхронно говорит содержимое строки."
  remarks: "Чтобы синхронно говорят строка, содержащая разметку SSML, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> Чтобы асинхронно обратиться содержимого строки, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>"
  example:
  - "As shown in the following example, the Speak method provides the simplest means to generate speech output synchronously.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Speak a string synchronously.  \n        synth.Speak(\"What is your favorite color?\");  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void Speak (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Текст, который говорите."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  id: SpeakAsync(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Асинхронно говорит содержимое <xref href=&quot;System.Speech.Synthesis.Prompt&quot;> </xref> объекта."
  remarks: "Вы можете отменить асинхронную говоря о строке с <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>       Синхронно оперировать содержимое <xref:System.Speech.Synthesis.Prompt>объекта, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.Prompt>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.Prompt> object from a string and passes the object as an argument to the SpeakAsync method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Create a prompt from a string.  \n      Prompt color = new Prompt(\"What is your favorite color?\");  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakAsync(color);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void SpeakAsync (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "Содержимое речи."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  id: SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(PromptBuilder)
  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Асинхронно говорит содержимое <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref> объекта."
  remarks: "Синхронно оперировать содержимое <xref:System.Speech.Synthesis.PromptBuilder>объекта, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.PromptBuilder>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from a string and passes the object as an argument to the SpeakAsync method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Create a PromptBuilder object and append a text string.  \n      PromptBuilder song = new PromptBuilder();  \n      song.AppendText(\"Say the name of the song you want to hear\");  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakAsync(song);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakAsync (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "Содержимое речи."
    return:
      type: System.Speech.Synthesis.Prompt
      description: "Возвращает объект, содержащий содержимое оперировать."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  id: SpeakAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsync(String)
  nameWithType: SpeechSynthesizer.SpeakAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Асинхронно говорит содержимое строки."
  remarks: "Чтобы асинхронно обратиться строка, содержащая разметку SSML, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> Чтобы синхронно говорят содержимого строки, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> Вы можете отменить асинхронную говоря о строке с <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel%2A>"
  example:
  - "As shown in the following example, the SpeakAsync method provides the simplest means to generate speech output asynchronously.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Speak a string asynchronously.  \n      synth.SpeakAsync(\"What is your favorite color?\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakAsync (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Текст, который говорите."
    return:
      type: System.Speech.Synthesis.Prompt
      description: "Возвращает объект, содержащий содержимое оперировать."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  id: SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsyncCancel(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Отменяет операцию асинхронного синтеза по запросу в очереди."
  remarks: "Этот метод также можно использовать для отмены асинхронного говорят на операцию для выполнения следующего:-содержимое <xref:System.String>заданные <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> </xref:System.String>      -Содержимое <xref:System.Speech.Synthesis.PromptBuilder>заданные <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> </xref:System.Speech.Synthesis.PromptBuilder>      -Содержимое <xref:System.String>содержащий SSML, определяемое <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.String>       При вызове <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>, создает System.Speech <xref:System.Speech.Synthesis.Prompt>и заполняет ее содержимое параметра метода и возвращает <xref:System.Speech.Synthesis.Prompt>объекта.</xref:System.Speech.Synthesis.Prompt> </xref:System.Speech.Synthesis.Prompt> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A?displayProperty=fullName> Если вы сохраните копию возвращаемый <xref:System.Speech.Synthesis.Prompt>, его можно передавать в SpeakAsyncCancel для отмены озвучивания содержимого, заданного в <xref:System.String>или <xref:System.Speech.Synthesis.PromptBuilder>объекта.</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.String> </xref:System.Speech.Synthesis.Prompt>"
  syntax:
    content: public void SpeakAsyncCancel (System.Speech.Synthesis.Prompt prompt);
    parameters:
    - id: prompt
      type: System.Speech.Synthesis.Prompt
      description: "Содержимое, для которого требуется отменить операцию speak."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  id: SpeakAsyncCancelAll
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakAsyncCancelAll()
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Отменяет операции синтеза речи всех обновляемых посредством очередей, асинхронный."
  remarks: ''
  example:
  - "The following example show a use of SpeakAsyncCancelAll to cancel the asynchronous speaking of a prompt, so that a new prompt can be spoken. Note that the <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> event fires when a <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> operation is cancelled.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \nusing System.Threading;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Subscribe to the StateChanged event.  \n      synth.StateChanged += new EventHandler<StateChangedEventArgs>(synth_StateChanged);  \n  \n      // Subscribe to the SpeakProgress event.  \n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n      // Subscribe to the SpeakCompleted event.  \n      synth.SpeakCompleted += new EventHandler<SpeakCompletedEventArgs>(synth_SpeakCompleted);  \n  \n      // Begin speaking a text string asynchronously.  \n      synth.SpeakAsync(\"Speech is an effective and natural way for people to interact with applications, \" +  \n        \"complementing or even replacing the use of mice, keyboards, controllers, and gestures.\");  \n  \n      // Speak for four seconds.  \n      Thread.Sleep(4000);  \n  \n      // Cancel the SpeakAsync operation and wait one second.  \n      synth.SpeakAsyncCancelAll();  \n      Thread.Sleep(1000);  \n  \n      // Speak a new text string.  \n      synth.Speak(\"An urgent email message has arrived. Do you want to hear it?\");  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write to the console when the SpeakAsync operation has been cancelled.  \n    static void synth_SpeakCompleted(object sender, SpeakCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"\\nThe SpeakAsync operation was cancelled!!\");  \n    }  \n  \n    // When it changes, write the state of the SpeechSynthesizer to the console.  \n    static void synth_StateChanged(object sender, StateChangedEventArgs e)  \n    {  \n      Console.WriteLine(\"\\nSynthesizer State: {0}    Previous State: {1}\\n\", e.State, e.PreviousState);  \n    }  \n  \n    // Write the text being spoken by the SpeechSynthesizer to the console.  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(e.Text);  \n    }      \n  }    \n}  \n  \n```"
  syntax:
    content: public void SpeakAsyncCancelAll ();
    parameters: []
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  id: SpeakCompleted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakCompleted
  nameWithType: SpeechSynthesizer.SpeakCompleted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> завершения говоря в строке."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Вызывает событие SpeakCompleted по завершении любого <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>       <xref:System.Speech.Synthesis.SpeakCompletedEventArgs>Класс не имеет параметров и не возвращает данные из события SpeakCompleted.</xref:System.Speech.Synthesis.SpeakCompletedEventArgs> Он предоставляется для разрешения записи обработчиков событий для события SpeakCompleted разработчикам приложений."
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs> SpeakCompleted;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  id: SpeakProgress
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakProgress
  nameWithType: SpeechSynthesizer.SpeakProgress
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает после <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> говорит каждого отдельного слова запрос."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Вызывает это событие для каждого нового слова, он говорит в командной строке, с помощью любого из <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Дополнительные сведения о данных, связанный с событием и пример см. <xref:System.Speech.Synthesis.SpeakProgressEventArgs>.</xref:System.Speech.Synthesis.SpeakProgressEventArgs>"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs> SpeakProgress;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  id: SpeakSsml(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakSsml(String)
  nameWithType: SpeechSynthesizer.SpeakSsml(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Синхронно говорит <xref:System.String>, содержащий разметку SSML.</xref:System.String>"
  remarks: "Содержимое `textToSpeak` необходимо включить параметр `speak` элемент и должны соответствовать [язык разметки синтеза речи (SSML) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). Дополнительные сведения см. в разделе [языка разметки синтеза речи](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).       Чтобы асинхронно обратиться строка, содержащая разметку SSML, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> Можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>для инициирования синхронные говоря о строке, которая содержит разметку SSML.</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>       При вызове этого метода <xref:System.Speech.Synthesis.SpeechSynthesizer>может инициировать следующие события:- <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged> </xref:System.Speech.Synthesis.SpeechSynthesizer> Вызывается, когда изменяется состояние синтезатора речи.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> Вызывается, когда начинается синтезатора речи создания.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> Возникает каждый раз, когда достигает синтезатору буквы или сочетание букв, которые составляют отдельные значения звука речи на языке.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> Возникает каждый раз при синтезатору завершает произношения слова.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> Возникает каждый раз, текст требует изменения положения лицу или мышцы лиц, используемую для создания речи.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> Вызывается, когда синтезатору обнаруживает закладки в строке.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> Возникает при изменении голоса для синтезатора.       <xref:System.Speech.Synthesis.SpeechSynthesizer>Не вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>событий во время обработки метода SpeakSsml.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> </xref:System.Speech.Synthesis.SpeechSynthesizer>"
  example:
  - "The following example renders the date 1/29/2009 as a date, in month, day, year order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Build an SSML prompt in a string.  \n      string str = \"<speak version=\\\"1.0\\\"\";  \n      str += \" xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"\";  \n      str += \" xml:lang=\\\"en-US\\\">\";  \n      str += \"<say-as type=\\\"date:mdy\\\"> 1/29/2009 </say-as>\";  \n      str += \"</speak>\";  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakSsml(str);  \n  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void SpeakSsml (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Строка SSML речи."
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  id: SpeakSsmlAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakSsmlAsync(String)
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Асинхронно говорит <xref:System.String>, содержащий разметку SSML.</xref:System.String>"
  remarks: "Содержимое `textToSpeak` необходимо включить параметр `speak` элемент и должны соответствовать [язык разметки синтеза речи (SSML) версии 1.0](http://go.microsoft.com/fwlink/?LinkId=201763). Дополнительные сведения см. в разделе [языка разметки синтеза речи](http://msdn.microsoft.com/en-us/0c51279e-84d2-4f73-a924-8832039abf94).       Чтобы синхронно говорят строка, содержащая разметку SSML, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> Можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>для запуска асинхронной говоря о строке, которая содержит разметку SSML.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>       При вызове этого метода <xref:System.Speech.Synthesis.SpeechSynthesizer>может инициировать следующие события:- <xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged>.</xref:System.Speech.Synthesis.SpeechSynthesizer.StateChanged> </xref:System.Speech.Synthesis.SpeechSynthesizer> Вызывается, когда изменяется состояние синтезатора речи.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted> Вызывается, когда начинается синтезатора речи создания.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> Возникает каждый раз, когда достигает синтезатору буквы или сочетание букв, которые составляют отдельные значения звука речи на языке.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> Возникает каждый раз при синтезатору завершает произношения слова.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VisemeReached> Возникает каждый раз, текст требует изменения положения лицу или мышцы лиц, используемую для создания речи.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>.</xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> Вызывается, когда синтезатору обнаруживает закладки в строке.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange>.</xref:System.Speech.Synthesis.SpeechSynthesizer.VoiceChange> Возникает при изменении голоса для синтезатора.      -   <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted>.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted> Вызывается, когда синтезатору завершает обработку операции SpeakSsmlAsync.       Если не требуется выполнять задачи при повторной dos вашего приложения, можно использовать <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>метод для создания речи синхронно.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>"
  example:
  - "```  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer();  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Build an SSML prompt in a string.  \n      string str = \"<speak version=\\\"1.0\\\"\";  \n      str += \" xmlns=\\\"http://www.w3.org/2001/10/synthesis\\\"\";  \n      str += \" xml:lang=\\\"en-US\\\">\";  \n      str += \"<say-as type=\\\"date:mdy\\\"> 1/29/2009 </say-as>\";  \n      str += \"</speak>\";  \n  \n      // Speak the contents of the prompt asynchronously.  \n      synth.SpeakSsmlAsync(str);  \n  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public System.Speech.Synthesis.Prompt SpeakSsmlAsync (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "Разметка SMML речи."
    return:
      type: System.Speech.Synthesis.Prompt
      description: "Асинхронно говорит <xref:System.String>, содержащий разметку SSML.</xref:System.String>"
  overload: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  id: SpeakStarted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: SpeakStarted
  nameWithType: SpeechSynthesizer.SpeakStarted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> начинает говоря в строке."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Вызывает это событие, если оно начинает обработку из строки с помощью любого из <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>       <xref:System.Speech.Synthesis.SpeakStartedEventArgs>Класс не имеет параметров и не возвращает данные из события SpeakStarted.</xref:System.Speech.Synthesis.SpeakStartedEventArgs> Он предоставляется для разрешения записи обработчиков событий для события SpeakStarted разработчикам приложений."
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs> SpeakStarted;
    return:
      type: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.State
  id: State
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: State
  nameWithType: SpeechSynthesizer.State
  fullName: System.Speech.Synthesis.SpeechSynthesizer.State
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает текущий произношения состояние <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: "Чтобы получить новое состояние <xref:System.Speech.Synthesis.SpeechSynthesizer>после его изменения, используйте <xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A>Свойства <xref:System.Speech.Synthesis.StateChangedEventArgs>класса.</xref:System.Speech.Synthesis.StateChangedEventArgs> </xref:System.Speech.Synthesis.StateChangedEventArgs.State%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer>"
  example:
  - "The following example illustrates the state of the <xref:System.Speech.Synthesis.SpeechSynthesizer> before, during, and after speaking a prompt.  \n  \n```c#  \nusing System;  \nusing System.Threading;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      SpeechSynthesizer synth = new SpeechSynthesizer() ;  \n  \n      // Configure the audio output.   \n      synth.SetOutputToDefaultAudioDevice();  \n  \n      // Subscribe to the SpeakProgress event.         \n      synth.SpeakProgress += new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  \n  \n      // Write the state of the SpeechSynthesizer to the console.  \n      Console.WriteLine(\"Current Synthesizer state: \" + synth.State + \"\\n\");  \n  \n      // Speak a string asynchronously.  \n      synth.SpeakAsync(\"What is your favorite color?\");  \n  \n      // Write the state of the SpeechSynthesizer to the console while it is speaking.  \n      Thread.Sleep(1000);  \n      Console.WriteLine(\"\\n - Current Synthesizer state: \" + synth.State + \" - \\n\");  \n  \n      // Write the state of the SpeechSynthesizer to the console after it is done speaking.  \n      Thread.Sleep(2000);  \n      Console.WriteLine(\"\\nCurrent Synthesizer state: \" + synth.State);  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  \n    {  \n      Console.WriteLine(e.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.SynthesizerState State { get; }
    return:
      type: System.Speech.Synthesis.SynthesizerState
      description: "Возвращает текущее состояние озвучивания <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  overload: System.Speech.Synthesis.SpeechSynthesizer.State*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  id: StateChanged
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: StateChanged
  nameWithType: SpeechSynthesizer.StateChanged
  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда состояние <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> изменений."
  remarks: "<xref:System.Speech.Synthesis.SpeechSynthesizer>Это событие вызывается при его говоря <xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A>изменения.</xref:System.Speech.Synthesis.SpeechSynthesizer.State%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Дополнительные сведения о данных, связанный с событием и пример см. <xref:System.Speech.Synthesis.StateChangedEventArgs>.</xref:System.Speech.Synthesis.StateChangedEventArgs>       Чтобы приостанавливать и возобновлять синтеза речи, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>и <xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.Resume%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Pause%2A>"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.StateChangedEventArgs> StateChanged;
    return:
      type: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  id: VisemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: VisemeReached
  nameWithType: SpeechSynthesizer.VisemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда достигается viseme."
  remarks: "Viseme — это основные положение рот и отдельных в произношении фонемы. Visemes являются визуальными представлениями фонемы.       System.Speech поддерживает 21 visemes для английского языка, каждый из которых соответствует один или несколько фонемы.  VisemeReached событий после другой соответствующий viseme чем предыдущих фонемы достигнут новый фонемы достигнут. Так как некоторые visemes представляют несколько фонему, событие VisemeReached не создается, если достигнут следующую фонему соответствует же viseme как предыдущих фонемы. Например, для произносимых слов «это зону» <xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached>событие «s» в «this» и «z» в «zone».</xref:System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached> Однако событие VisemeReached не вызывается для «z» в «zone», так как он соответствует viseme же, как «s» в «this».       Ниже приведен список 21 фонемы SAPI и фонемы групп, соответствующих viseme в английский (США).      | Viseme | Phoneme(s) |   |------------|------------------|   |&0; | бездействия |   |&1; | ae, ax, ah |   |&2; | aa |   |&3; | ao |   |&4; | ли, eh, ой |   |&5; | er |   |&6; | y, iy, системы, ix |   |&7; | w, uw |   |&8; | Разрешить |   |&9; | выполненного |   |&10; | oy |   |&11; | ay |   |&12; | h |   |&13; | r |   |&14; | l |   |&15; | s, z |   |&16; | sh, ch, jh, zh |   |&17; | th, Диффи-Хелмана |   |&18; | f, v |   |&19; | d, t, n |   |&20; | k &quot;,&quot; g &quot;,&quot; ng |   |&21; | p &quot;,&quot; b &quot;,&quot; m |       Дополнительные сведения о данных, связанных с `VisemeReached` событий, в разделе <xref:System.Speech.Synthesis.VisemeReachedEventArgs>.</xref:System.Speech.Synthesis.VisemeReachedEventArgs>"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs> VisemeReached;
    return:
      type: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice
  id: Voice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возвращает сведения о текущем голос <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: "При инициализации нового <xref:System.Speech.Synthesis.SpeechSynthesizer>, он использует голос системы по умолчанию.</xref:System.Speech.Synthesis.SpeechSynthesizer> Чтобы настроить <xref:System.Speech.Synthesis.SpeechSynthesizer>объекта используйте один из синтеза речи установленных голосов, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>метод.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> Чтобы получить сведения о том, какие установлены голоса, используйте <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>метод и <xref:System.Speech.Synthesis.VoiceInfo>класс.</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>"
  example:
  - "The following example initializes an instance of <xref:System.Speech.Synthesis.SpeechSynthesizer>and gets information about the current voice.  \n  \n```c#  \nusing System;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \nusing System.Speech.AudioFormat;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Get information about supported audio formats.  \n        string AudioFormats = \"\";  \n        foreach (SpeechAudioFormatInfo fmt in synth.Voice.SupportedAudioFormats)  \n        {  \n          AudioFormats += String.Format(\"{0}\\n\",  \n          fmt.EncodingFormat.ToString());  \n        }  \n  \n        // Write information about the voice to the console.  \n        Console.WriteLine(\" Name:          \" + synth.Voice.Name);  \n        Console.WriteLine(\" Culture:       \" + synth.Voice.Culture);  \n        Console.WriteLine(\" Age:           \" + synth.Voice.Age);  \n        Console.WriteLine(\" Gender:        \" + synth.Voice.Gender);  \n        Console.WriteLine(\" Description:   \" + synth.Voice.Description);  \n        Console.WriteLine(\" ID:            \" + synth.Voice.Id);  \n        if (synth.Voice.SupportedAudioFormats.Count != 0)  \n        {  \n          Console.WriteLine(\" Audio formats: \" + AudioFormats);  \n        }  \n        else  \n        {  \n          Console.WriteLine(\" No supported audio formats found\");  \n        }  \n  \n        // Get additional information about the voice.  \n        string AdditionalInfo = \"\";  \n        foreach (string key in synth.Voice.AdditionalInfo.Keys)  \n        {  \n          AdditionalInfo += String.Format(\"  {0}: {1}\\n\",  \n            key, synth.Voice.AdditionalInfo[key]);  \n        }  \n  \n        Console.WriteLine(\" Additional Info - \" + AdditionalInfo);  \n        Console.WriteLine();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Synthesis.VoiceInfo Voice { get; }
    return:
      type: System.Speech.Synthesis.VoiceInfo
      description: "Возвращает сведения о текущем голос <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Voice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  id: VoiceChange
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: VoiceChange
  nameWithType: SpeechSynthesizer.VoiceChange
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Возникает, когда голосовой из <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> изменений."
  remarks: "Например и сведения о данных, связанный с событием в разделе <xref:System.Speech.Synthesis.VoiceChangeEventArgs>.</xref:System.Speech.Synthesis.VoiceChangeEventArgs>       Можно изменить голос, <xref:System.Speech.Synthesis.SpeechSynthesizer>используется с любым из <xref:System.Speech.Synthesis.PromptBuilder> <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>методы или <xref:System.Speech.Synthesis.SpeechSynthesizer> <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A>или <xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A>методы.</xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SelectVoice%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer> </xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A> </xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.SpeechSynthesizer>"
  syntax:
    content: public event EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs> VoiceChange;
    return:
      type: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume
  id: Volume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  langs:
  - csharp
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "Получает или задает объем выходных данных <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref> объекта."
  remarks: ''
  example:
  - "The following example sets the volume of the <xref:System.Speech.Synthesis.SpeechSynthesizer>'s audio output for the synthesized voice and the WAV file.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Set the volume of the SpeechSynthesizer's ouput.  \n        synth.Volume = 60;  \n  \n        // Build a prompt containing recorded audio and synthesized speech.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendAudio(\"C:\\\\Test\\\\WelcomeToContosoRadio.wav\");  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public int Volume { get; set; }
    return:
      type: System.Int32
      description: "Возвращает объем <xref href=&quot;System.Speech.Synthesis.SpeechSynthesizer&quot;> </xref>, от 0 до 100."
  overload: System.Speech.Synthesis.SpeechSynthesizer.Volume*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeechSynthesizer()
  nameWithType: SpeechSynthesizer.SpeechSynthesizer()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeechSynthesizer()
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(System.Uri,System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: AddLexicon(Uri,String)
  nameWithType: SpeechSynthesizer.AddLexicon(Uri,String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon(Uri,String)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: BookmarkReached
  nameWithType: SpeechSynthesizer.BookmarkReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached
- uid: System.EventHandler{System.Speech.Synthesis.BookmarkReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<BookmarkReachedEventArgs>
  nameWithType: EventHandler<BookmarkReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.BookmarkReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.BookmarkReachedEventArgs
    name: BookmarkReachedEventArgs
    nameWithType: BookmarkReachedEventArgs
    fullName: BookmarkReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Dispose()
  nameWithType: SpeechSynthesizer.Dispose()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Dispose()
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Finalize()
  nameWithType: SpeechSynthesizer.Finalize()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Finalize()
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetCurrentlySpokenPrompt()
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt()
- uid: System.Speech.Synthesis.Prompt
  parent: System.Speech.Synthesis
  isExternal: false
  name: Prompt
  nameWithType: Prompt
  fullName: System.Speech.Synthesis.Prompt
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices()
  nameWithType: SpeechSynthesizer.GetInstalledVoices()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Synthesis.InstalledVoice}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<InstalledVoice>
  nameWithType: ReadOnlyCollection<InstalledVoice>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Synthesis.InstalledVoice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.InstalledVoice
    name: InstalledVoice
    nameWithType: InstalledVoice
    fullName: InstalledVoice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices(CultureInfo)
  nameWithType: SpeechSynthesizer.GetInstalledVoices(CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Pause()
  nameWithType: SpeechSynthesizer.Pause()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Pause()
- uid: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: PhonemeReached
  nameWithType: SpeechSynthesizer.PhonemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.PhonemeReached
- uid: System.EventHandler{System.Speech.Synthesis.PhonemeReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<PhonemeReachedEventArgs>
  nameWithType: EventHandler<PhonemeReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.PhonemeReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.PhonemeReachedEventArgs
    name: PhonemeReachedEventArgs
    nameWithType: PhonemeReachedEventArgs
    fullName: PhonemeReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Rate
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(System.Uri)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: RemoveLexicon(Uri)
  nameWithType: SpeechSynthesizer.RemoveLexicon(Uri)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon(Uri)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Resume()
  nameWithType: SpeechSynthesizer.Resume()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Resume()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoice(String)
  nameWithType: SpeechSynthesizer.SelectVoice(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender)
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge)
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32,System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  nameWithType: SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints(VoiceGender,VoiceAge,Int32,CultureInfo)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream(Stream,SpeechAudioFormatInfo)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Speech.AudioFormat.SpeechAudioFormatInfo
  parent: System.Speech.AudioFormat
  isExternal: false
  name: SpeechAudioFormatInfo
  nameWithType: SpeechAudioFormatInfo
  fullName: System.Speech.AudioFormat.SpeechAudioFormatInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToDefaultAudioDevice()
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToNull()
  nameWithType: SpeechSynthesizer.SetOutputToNull()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile(String)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(System.String,System.Speech.AudioFormat.SpeechAudioFormatInfo)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile(String,SpeechAudioFormatInfo)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(System.IO.Stream)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveStream(Stream)
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream(Stream)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream(Stream)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(Prompt)
  nameWithType: SpeechSynthesizer.Speak(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(PromptBuilder)
  nameWithType: SpeechSynthesizer.Speak(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(PromptBuilder)
- uid: System.Speech.Synthesis.PromptBuilder
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak(String)
  nameWithType: SpeechSynthesizer.Speak(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Speak(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsync(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(PromptBuilder)
  nameWithType: SpeechSynthesizer.SpeakAsync(PromptBuilder)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(PromptBuilder)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync(String)
  nameWithType: SpeechSynthesizer.SpeakAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(System.Speech.Synthesis.Prompt)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancel(Prompt)
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel(Prompt)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel(Prompt)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancelAll()
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll()
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll()
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakCompleted
  nameWithType: SpeechSynthesizer.SpeakCompleted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakCompleted
- uid: System.EventHandler{System.Speech.Synthesis.SpeakCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakCompletedEventArgs>
  nameWithType: EventHandler<SpeakCompletedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakCompletedEventArgs
    name: SpeakCompletedEventArgs
    nameWithType: SpeakCompletedEventArgs
    fullName: SpeakCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakProgress
  nameWithType: SpeechSynthesizer.SpeakProgress
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress
- uid: System.EventHandler{System.Speech.Synthesis.SpeakProgressEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakProgressEventArgs>
  nameWithType: EventHandler<SpeakProgressEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakProgressEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakProgressEventArgs
    name: SpeakProgressEventArgs
    nameWithType: SpeakProgressEventArgs
    fullName: SpeakProgressEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsml(String)
  nameWithType: SpeechSynthesizer.SpeakSsml(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(System.String)
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsmlAsync(String)
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync(String)
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync(String)
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakStarted
  nameWithType: SpeechSynthesizer.SpeakStarted
  fullName: System.Speech.Synthesis.SpeechSynthesizer.SpeakStarted
- uid: System.EventHandler{System.Speech.Synthesis.SpeakStartedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeakStartedEventArgs>
  nameWithType: EventHandler<SpeakStartedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.SpeakStartedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.SpeakStartedEventArgs
    name: SpeakStartedEventArgs
    nameWithType: SpeakStartedEventArgs
    fullName: SpeakStartedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.State
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: State
  nameWithType: SpeechSynthesizer.State
  fullName: System.Speech.Synthesis.SpeechSynthesizer.State
- uid: System.Speech.Synthesis.SynthesizerState
  parent: System.Speech.Synthesis
  isExternal: false
  name: SynthesizerState
  nameWithType: SynthesizerState
  fullName: System.Speech.Synthesis.SynthesizerState
- uid: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: StateChanged
  nameWithType: SpeechSynthesizer.StateChanged
  fullName: System.Speech.Synthesis.SpeechSynthesizer.StateChanged
- uid: System.EventHandler{System.Speech.Synthesis.StateChangedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<StateChangedEventArgs>
  nameWithType: EventHandler<StateChangedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.StateChangedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.StateChangedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.StateChangedEventArgs
    name: StateChangedEventArgs
    nameWithType: StateChangedEventArgs
    fullName: StateChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: VisemeReached
  nameWithType: SpeechSynthesizer.VisemeReached
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VisemeReached
- uid: System.EventHandler{System.Speech.Synthesis.VisemeReachedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<VisemeReachedEventArgs>
  nameWithType: EventHandler<VisemeReachedEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.VisemeReachedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.VisemeReachedEventArgs
    name: VisemeReachedEventArgs
    nameWithType: VisemeReachedEventArgs
    fullName: VisemeReachedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Voice
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: VoiceChange
  nameWithType: SpeechSynthesizer.VoiceChange
  fullName: System.Speech.Synthesis.SpeechSynthesizer.VoiceChange
- uid: System.EventHandler{System.Speech.Synthesis.VoiceChangeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<VoiceChangeEventArgs>
  nameWithType: EventHandler<VoiceChangeEventArgs>
  fullName: System.EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Synthesis.VoiceChangeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Synthesis.VoiceChangeEventArgs
    name: VoiceChangeEventArgs
    nameWithType: VoiceChangeEventArgs
    fullName: VoiceChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
  fullName: System.Speech.Synthesis.SpeechSynthesizer.Volume
- uid: System.Speech.Synthesis.SpeechSynthesizer.#ctor*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeechSynthesizer
  nameWithType: SpeechSynthesizer.SpeechSynthesizer
- uid: System.Speech.Synthesis.SpeechSynthesizer.AddLexicon*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: AddLexicon
  nameWithType: SpeechSynthesizer.AddLexicon
- uid: System.Speech.Synthesis.SpeechSynthesizer.Dispose*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Dispose
  nameWithType: SpeechSynthesizer.Dispose
- uid: System.Speech.Synthesis.SpeechSynthesizer.Finalize*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Finalize
  nameWithType: SpeechSynthesizer.Finalize
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetCurrentlySpokenPrompt*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetCurrentlySpokenPrompt
  nameWithType: SpeechSynthesizer.GetCurrentlySpokenPrompt
- uid: System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: GetInstalledVoices
  nameWithType: SpeechSynthesizer.GetInstalledVoices
- uid: System.Speech.Synthesis.SpeechSynthesizer.Pause*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Pause
  nameWithType: SpeechSynthesizer.Pause
- uid: System.Speech.Synthesis.SpeechSynthesizer.Rate*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Rate
  nameWithType: SpeechSynthesizer.Rate
- uid: System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: RemoveLexicon
  nameWithType: SpeechSynthesizer.RemoveLexicon
- uid: System.Speech.Synthesis.SpeechSynthesizer.Resume*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Resume
  nameWithType: SpeechSynthesizer.Resume
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoice
  nameWithType: SpeechSynthesizer.SelectVoice
- uid: System.Speech.Synthesis.SpeechSynthesizer.SelectVoiceByHints*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SelectVoiceByHints
  nameWithType: SpeechSynthesizer.SelectVoiceByHints
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToAudioStream*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToAudioStream
  nameWithType: SpeechSynthesizer.SetOutputToAudioStream
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToDefaultAudioDevice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToDefaultAudioDevice
  nameWithType: SpeechSynthesizer.SetOutputToDefaultAudioDevice
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToNull*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToNull
  nameWithType: SpeechSynthesizer.SetOutputToNull
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveFile*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveFile
  nameWithType: SpeechSynthesizer.SetOutputToWaveFile
- uid: System.Speech.Synthesis.SpeechSynthesizer.SetOutputToWaveStream*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SetOutputToWaveStream
  nameWithType: SpeechSynthesizer.SetOutputToWaveStream
- uid: System.Speech.Synthesis.SpeechSynthesizer.Speak*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Speak
  nameWithType: SpeechSynthesizer.Speak
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsync
  nameWithType: SpeechSynthesizer.SpeakAsync
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancel*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancel
  nameWithType: SpeechSynthesizer.SpeakAsyncCancel
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakAsyncCancelAll*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakAsyncCancelAll
  nameWithType: SpeechSynthesizer.SpeakAsyncCancelAll
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsml
  nameWithType: SpeechSynthesizer.SpeakSsml
- uid: System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: SpeakSsmlAsync
  nameWithType: SpeechSynthesizer.SpeakSsmlAsync
- uid: System.Speech.Synthesis.SpeechSynthesizer.State*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: State
  nameWithType: SpeechSynthesizer.State
- uid: System.Speech.Synthesis.SpeechSynthesizer.Voice*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Voice
  nameWithType: SpeechSynthesizer.Voice
- uid: System.Speech.Synthesis.SpeechSynthesizer.Volume*
  parent: System.Speech.Synthesis.SpeechSynthesizer
  isExternal: false
  name: Volume
  nameWithType: SpeechSynthesizer.Volume
