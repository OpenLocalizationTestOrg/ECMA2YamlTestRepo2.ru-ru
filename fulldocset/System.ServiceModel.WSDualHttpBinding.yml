### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.WSDualHttpBinding
  id: WSDualHttpBinding
  children:
  - System.ServiceModel.WSDualHttpBinding.#ctor
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  - System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  - System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  - System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  - System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  - System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  - System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  - System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  - System.ServiceModel.WSDualHttpBinding.MessageEncoding
  - System.ServiceModel.WSDualHttpBinding.ProxyAddress
  - System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ReliableSession
  - System.ServiceModel.WSDualHttpBinding.Scheme
  - System.ServiceModel.WSDualHttpBinding.Security
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  - System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  - System.ServiceModel.WSDualHttpBinding.TextEncoding
  - System.ServiceModel.WSDualHttpBinding.TransactionFlow
  - System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  langs:
  - csharp
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding
  fullName: System.ServiceModel.WSDualHttpBinding
  type: Class
  summary: "Безопасная привязка, которая предназначена для использования с дуплексными контрактами служб и позволяющая и службам и клиентам отправлять и получать сообщения."
  remarks: "WSDualHttpBinding предоставляет такую же поддержку протоколам веб-службы как <xref:System.ServiceModel.WSHttpBinding>, но для использования с дуплексными контрактами.</xref:System.ServiceModel.WSHttpBinding> WSDualHttpBinding поддерживает только безопасность SOAP и требует надежного обмена сообщениями. Для этой привязки необходимо, чтобы клиент имел открытый URI, который предоставляет конечную точку обратного вызова для службы. Это обеспечивается <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A>.</xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A> Двойная привязка предоставляет IP-адрес клиента к службе. Клиент должен использовать безопасности, чтобы убедиться, что он только подключение к службам доверенным.       По умолчанию WSDualHttpBinding формирует следующий стек элементов привязки:- <xref:System.ServiceModel.Channels.TransactionFlowBindingElement>- <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>- <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>- <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement>- <xref:System.ServiceModel.Channels.OneWayBindingElement>- <xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement>- <xref:System.ServiceModel.Channels.HttpTransportBindingElement></xref:System.ServiceModel.Channels.HttpTransportBindingElement> </xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement> </xref:System.ServiceModel.Channels.OneWayBindingElement> </xref:System.ServiceModel.Channels.CompositeDuplexBindingElement> </xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> </xref:System.ServiceModel.Channels.ReliableSessionBindingElement> </xref:System.ServiceModel.Channels.TransactionFlowBindingElement>"
  example:
  - "The following example shows how to specify the `wsDualHttpBinding` binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#134](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#134)]"
  syntax:
    content: 'public class WSDualHttpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences'
  inheritance:
  - System.ServiceModel.Channels.Binding
  implements:
  - System.ServiceModel.Channels.IBindingRuntimePreferences
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  id: '#ctor'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> класса."
  remarks: ''
  example:
  - "The following example shows how to use the default constructor for wsDualHttpBinding.  \n  \n [!code-cs[S_dualhttp#1](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#1)]\n [!code-vb[S_dualhttp#1](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#1)]"
  syntax:
    content: public WSDualHttpBinding ();
    parameters: []
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  id: '#ctor(System.ServiceModel.WSDualHttpSecurityMode)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> класса с указанным типом безопасности, используемым привязкой."
  remarks: "Требуется надежный обмен сообщениями <xref:System.ServiceModel.WSDualHttpBinding>поэтому нет конструктора, предоставляющий коммутатора, чтобы отключить его, как в <xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29>конструктор для <xref:System.ServiceModel.WSHttpBinding>.</xref:System.ServiceModel.WSHttpBinding> </xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29> </xref:System.ServiceModel.WSDualHttpBinding>"
  example:
  - "The following example shows how to use the `wsDualHttpBinding` constructor with a security mode.  \n  \n [!code-cs[S_dualhttp#3](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#3)]\n [!code-vb[S_dualhttp#3](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#3)]"
  syntax:
    content: public WSDualHttpBinding (System.ServiceModel.WSDualHttpSecurityMode securityMode);
    parameters:
    - id: securityMode
      type: System.ServiceModel.WSDualHttpSecurityMode
      description: "Значение <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref> , указывающее тип безопасности, используемый с сообщением SOAP и для клиента."
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref> класса с привязкой, заданной именем ее конфигурации."
  syntax:
    content: public WSDualHttpBinding (string configName);
    parameters:
    - id: configName
      type: System.String
      description: "Имя конфигурации привязки <xref href=&quot;System.ServiceModel.Configuration.WSHttpBindingElement&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Элемент привязки с именем <code> configurationName </code> не найден."
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает значение, указывающее, следует ли обходить прокси-сервер для локальных адресов."
  remarks: "Интернет-ресурс является локальным, если у него локальный адрес. Локальный адрес — это адрес, расположенный на том же компьютере, в локальной сети или в интрасети, синтаксически идентифицируемый отсутствием точки (.) как идентификаторы URI «http://webserver/» и «http://localhost/».       Установка BypassProxyOnLocal свойство определяет ли конечные точки, настроенные с <xref:System.ServiceModel.WSDualHttpBinding>использовать прокси-сервер при доступе к локальным ресурсам.</xref:System.ServiceModel.WSDualHttpBinding>       Если BypassProxyOnLocal `true`, запросы к локальным Интернет-ресурсам не используют прокси-сервера. Используйте имя узла (а не `localhost`) Если требуется, чтобы клиенты проходили через прокси при взаимодействии со службами на том же компьютере, если это свойство имеет значение `true`.       При BypassProxyOnLocal `false`, все интернет-запросы выполняются через прокси-сервер."
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following example sets this property to indicate that the proxy should be bypassed for local resources.  \n  \n [!code-cs[S_dualhttp#6](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#6)]\n [!code-vb[S_dualhttp#6](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#6)]  \n  \n The value of this property can also be set in the configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для обхода прокси-сервер для локальных адресов. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  id: ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает базовый адрес клиента."
  remarks: "Этот общий URI для клиента предоставляет конечную точку обратного вызова, необходимые для службы для связи с клиентом, если контракт является дуплексным."
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#8](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#8)]\n [!code-vb[S_dualhttp#8](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#8)]"
  syntax:
    content: public Uri ClientBaseAddress { get; set; }
    return:
      type: System.Uri
      description: "<xref:System.Uri>, Базовый адрес клиента.</xref:System.Uri> Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  id: CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает упорядоченную коллекцию элементов привязки, содержащихся в текущей привязке."
  remarks: ''
  example:
  - "The following example shows how to get an ordered collection of binding elements contained in the current binding.  \n  \n [!code-cs[S_dualhttp#20](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#20)]\n [!code-vb[S_dualhttp#20](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#20)]"
  syntax:
    content: public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.BindingElementCollection
      description: "Объект <xref:System.ServiceModel.Channels.BindingElementCollection>, включающего <xref href=&quot;System.ServiceModel.Channels.TransactionFlowBindingElement&quot;> </xref> и, так как требуется для надежного сеанса <xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref>, <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref>.</xref:System.ServiceModel.Channels.BindingElementCollection>"
  overload: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  id: EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает версию протокола SOAP, используемого для сообщений, обрабатываемых данной привязкой."
  remarks: ''
  example:
  - "The following example shows how to get the version of SOAP that is used for messages that are processed by this binding.  \n  \n [!code-cs[S_dualhttp#21](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#21)]\n [!code-vb[S_dualhttp#21](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#21)]"
  syntax:
    content: public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }
    return:
      type: System.ServiceModel.EnvelopeVersion
      description: "Значение <xref:System.ServiceModel.EnvelopeVersion>, используемый с данной привязкой.</xref:System.ServiceModel.EnvelopeVersion> Значение всегда должно быть SOAP 1.2."
  overload: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  id: HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает значение, указывающее, используется ли имя узла для доступа к службе при сопоставлении по URI."
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#9](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#9)]\n [!code-vb[S_dualhttp#9](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#9)]"
  syntax:
    content: public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }
    return:
      type: System.ServiceModel.HostNameComparisonMode
      description: "<xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*>Значение, указывающее, используется ли имя узла для доступа к службе при сопоставлении по URI.</xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*> Значение по умолчанию — <xref href=&quot;System.ServiceModel.HostNameComparisonMode&quot;> </xref>, который в найденном соответствии."
  overload: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  id: MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает максимальный объем памяти в байтах, которые могут быть выделены для диспетчера буферов сообщений, получать сообщения с конечными точками, настроенными с этой привязкой."
  remarks: "<xref:System.ServiceModel.Channels.BufferManager>Позволяет минимизировать затраты на использование буферов с помощью буферного пула.</xref:System.ServiceModel.Channels.BufferManager> Буферы требуются для обработки сообщений службой приходящих из канала. Если не достаточный объем памяти буферного пула для обработки потока сообщений <xref:System.ServiceModel.Channels.BufferManager>должен выделить дополнительную память из кучи CLR, что увеличивает нагрузку по сбору мусора.</xref:System.ServiceModel.Channels.BufferManager> Интенсивное выделение памяти из мусорной кучи CLR — это описание, что размер буферного пула слишком мал и производительность можно повысить выделения большего объема памяти путем увеличения предельного количества MaxBufferPoolSize.       Ограничения на размер буфера, устанавливаемые предназначены для оптимизации производительности обмена сообщениями. Если размер сообщения превышает максимальное значение, заданное для буфера, они не удаляются. Вместо этого из кучи CLR запрашивается дополнительная память, и это влечет за собой дополнительные сборки мусора времени по сравнению с использованием буферов."
  example:
  - "The following example shows how to set the `MaxBufferPoolSize`.  \n  \n [!code-cs[S_dualhttp#10](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#10)]\n [!code-vb[S_dualhttp#10](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#10)]"
  syntax:
    content: public long MaxBufferPoolSize { get; set; }
    return:
      type: System.Int64
      description: "Максимальный размер в байтах для пула буферов, используемых с конечной точкой, настроенной с этой привязкой. Значение по умолчанию — 524288 байт."
  overload: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  id: MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает максимальный размер в байтах сообщения, которое можно получить по каналу, настроенному с использованием этой привязки."
  remarks: "Размер сообщений, которые могут быть получены по сети с помощью службы <xref:System.ServiceModel.WSDualHttpBinding>ограничен объемом памяти, выделенной для каждого сообщения.</xref:System.ServiceModel.WSDualHttpBinding> Это ограничение размера сообщения предназначено позволяет снизить уязвимость для АТАК типа.       Обратите внимание, что параметры <xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A>и <xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A>являются локальными параметрами поведения.</xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A> </xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A> Это означает, что они не передаются другим конечным точкам в метаданных. При создании учетной записи-посредника для службы с максимальным размером сообщения 2 ГБ из метаданных прокси-сервер по-прежнему имеет значение по умолчанию 64 КБ. Это позволяет контролировать соответствующие параметры сообщения, а также размер буфера сообщений в области действия локальных администраторов."
  example:
  - "The following example shows how to get the MaxReceivedMessageSize property.  \n  \n [!code-cs[S_dualhttp#22](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#22)]\n [!code-vb[S_dualhttp#22](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#22)]"
  syntax:
    content: public long MaxReceivedMessageSize { get; set; }
    return:
      type: System.Int64
      description: "Максимальный размер в байтах для сообщений, обрабатываемых этой привязкой. Значение по умолчанию — 65 536 байт."
  overload: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Значение меньше нуля."
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  id: MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает MTOM или Text/XML, используемый для кодирования сообщений SOAP."
  remarks: ''
  example:
  - "The following example shows how to set the `WSMessageEncoding` property to MTOM.  \n  \n [!code-cs[S_dualhttp#11](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#11)]\n [!code-vb[S_dualhttp#11](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#11)]"
  syntax:
    content: public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }
    return:
      type: System.ServiceModel.WSMessageEncoding
      description: "Значение <xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref> , указывающее, что MTOM или Text/XML используется для кодирования сообщений SOAP. Значение по умолчанию — <xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  id: ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает URI-адрес прокси-сервера HTTP."
  remarks: "Если <xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>имеет значение `true`, значение ProxyAddress игнорируется.</xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>"
  example:
  - "The following example shows how to specify the address of the HTTP proxy.  \n  \n [!code-cs[S_dualhttp#12](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#12)]\n [!code-vb[S_dualhttp#12](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#12)]"
  syntax:
    content: public Uri ProxyAddress { get; set; }
    return:
      type: System.Uri
      description: "Объект <xref:System.Uri>, служит в качестве адреса прокси-сервера HTTP.</xref:System.Uri> Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  id: ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает ограничения по сложности сообщений SOAP, которые могут обрабатываться конечными точками, настроенными с этой привязкой."
  remarks: "Ограничения по сложности включают такие элементы, как максимальная глубина элемента и максимальная длина строкового содержимого сообщения. Ограничения защититься от атак отказа в обслуживании (DOS), сложность сообщения используется для перегрузки ресурсов процессора конечной точки."
  example:
  - "The following example shows how to get the `ReaderQuotas` property.  \n  \n [!code-cs[S_dualhttp#13](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#13)]\n [!code-vb[S_dualhttp#13](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#13)]"
  syntax:
    content: public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }
    return:
      type: System.Xml.XmlDictionaryReaderQuotas
      description: "<xref:System.Xml.XmlDictionaryReaderQuotas>, Задает ограничения по сложности.</xref:System.Xml.XmlDictionaryReaderQuotas>"
  overload: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  id: ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает объект, обеспечивающий удобный доступ к свойствам элемента привязки надежного сеанса, доступные при использовании одной из предоставляемых системой привязок."
  remarks: "Надежный сеанс не требуется для служб, настроенных с <xref:System.ServiceModel.WSDualHttpBinding>.</xref:System.ServiceModel.WSDualHttpBinding>"
  example:
  - "The following example shows how to get the ReliableSession property.  \n  \n [!code-cs[S_dualhttp#14](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#14)]\n [!code-vb[S_dualhttp#14](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#14)]"
  syntax:
    content: public System.ServiceModel.ReliableSession ReliableSession { get; set; }
    return:
      type: System.ServiceModel.ReliableSession
      description: "<xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref> , Обеспечивающий удобный доступ к свойствам элемента привязки надежного сеанса, доступные при использовании одной из предоставляемых системой привязок."
  overload: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  id: Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает схему транспорта URI для каналов и прослушивателей, настроенных с этой привязкой."
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#15](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#15)]\n [!code-vb[S_dualhttp#15](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#15)]"
  syntax:
    content: public override string Scheme { get; }
    return:
      type: System.String
      description: 'Схема транспорта: «http».'
  overload: System.ServiceModel.WSDualHttpBinding.Scheme*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Security
  id: Security
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает объект, который определяет параметры безопасности, используемые с данной привязкой."
  remarks: "Двойная привязка предоставляет IP-адрес клиента к службе. Клиент должен использовать безопасности, чтобы убедиться, что он только подключение к службам доверенным."
  example:
  - "The following example shows how to get the type of security of the binding.  \n  \n [!code-cs[S_dualhttp#16](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#16)]\n [!code-vb[S_dualhttp#16](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#16)]"
  syntax:
    content: public System.ServiceModel.WSDualHttpSecurity Security { get; set; }
    return:
      type: System.ServiceModel.WSDualHttpSecurity
      description: "<xref href=&quot;System.ServiceModel.WSDualHttpSecurity&quot;> </xref> , Указывающий параметры безопасности, используемые с данной привязкой. Значение по умолчанию <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref> — <xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.Security*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  id: ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает значение, указывающее, является ли <xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>свойства отличается от значения по умолчанию и должно быть сериализовано.</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  syntax:
    content: public bool ShouldSerializeReaderQuotas ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  id: ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает значение, указывающее, является ли <xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>свойства отличается от значения по умолчанию и должно быть сериализовано.</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  syntax:
    content: public bool ShouldSerializeReliableSession ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  id: ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает значение, указывающее, является ли <xref:System.ServiceModel.WSDualHttpBinding.Security*>свойства отличается от значения по умолчанию и должно быть сериализовано.</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  syntax:
    content: public bool ShouldSerializeSecurity ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ServiceModel.WSDualHttpBinding.Security*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  id: ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает значение, указывающее, является ли <xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>свойства отличается от значения по умолчанию и должно быть сериализовано.</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  syntax:
    content: public bool ShouldSerializeTextEncoding ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>значение свойства должно быть сериализованы; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  id: System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  isEii: true
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Получает значение, указывающее, синхронно или асинхронно обрабатываются входящие запросы."
  remarks: "Это значение можно изменить с помощью поведения модели службы."
  example:
  - "The following examples show how to get the <xref:System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> value.  \n  \n [!code-cs[S_dualhttp#23](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#23)]\n [!code-vb[S_dualhttp#23](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#23)]  \n  \n [!code-cs[S_dualhttp#24](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#24)]\n [!code-vb[S_dualhttp#24](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#24)]"
  syntax:
    content: bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если запросы обрабатываются синхронно. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Если обрабатываются асинхронно. Возвращается значение всегда является <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, асинхронная обработка запросов."
  overload: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  id: TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает кодировку, используемый для текста сообщения."
  remarks: ''
  example:
  - "The following example shows how to get the character encoding that is used for the message text.  \n  \n [!code-cs[S_dualhttp#17](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#17)]\n [!code-vb[S_dualhttp#17](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#17)]"
  syntax:
    content: public System.Text.Encoding TextEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>Указывает кодировку символов, который используется.</xref:System.Text.Encoding> Значение по умолчанию — <xref:System.Text.UTF8Encoding>.</xref:System.Text.UTF8Encoding>"
  overload: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  id: TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает значение, указывающее, поддерживает ли эта привязка потоковые спецификации WS-Transactions."
  remarks: "Значение по умолчанию указывает, что клиенты потоком транзакций, а службы отклоняют сообщения с заголовком поточной транзакции."
  example:
  - "The following example shows how to set the `TransactionFlow` property to support the flowing of transactions.  \n  \n [!code-cs[S_dualhttp#18](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#18)]\n [!code-vb[S_dualhttp#18](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#18)]"
  syntax:
    content: public bool TransactionFlow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если поточные транзакции поддерживаются; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  id: UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "Возвращает или задает значение, указывающее, должен ли использоваться автоматически настроенный прокси-сервер HTTP системы, если он доступен."
  remarks: ''
  example:
  - "The following example shows how to set the `UseDefaultWebProxy` property to use the auto-configured HTTP proxy of the system.  \n  \n [!code-cs[S_dualhttp#19](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#19)]\n [!code-vb[S_dualhttp#19](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#19)]"
  syntax:
    content: public bool UseDefaultWebProxy { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если должен использоваться автоматически настроенный прокси-сервер HTTP системы, если таковой имеется. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.Binding
  isExternal: false
  name: System.ServiceModel.Channels.Binding
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
- uid: System.ServiceModel.WSDualHttpSecurityMode
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurityMode
  nameWithType: WSDualHttpSecurityMode
  fullName: System.ServiceModel.WSDualHttpSecurityMode
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
- uid: System.ServiceModel.Channels.BindingElementCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingElementCollection
  nameWithType: BindingElementCollection
  fullName: System.ServiceModel.Channels.BindingElementCollection
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.EnvelopeVersion
  parent: System.ServiceModel
  isExternal: true
  name: EnvelopeVersion
  nameWithType: EnvelopeVersion
  fullName: System.ServiceModel.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.HostNameComparisonMode
  parent: System.ServiceModel
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: HostNameComparisonMode
  fullName: System.ServiceModel.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSMessageEncoding
  parent: System.ServiceModel
  isExternal: false
  name: WSMessageEncoding
  nameWithType: WSMessageEncoding
  fullName: System.ServiceModel.WSMessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
- uid: System.Xml.XmlDictionaryReaderQuotas
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryReaderQuotas
  nameWithType: XmlDictionaryReaderQuotas
  fullName: System.Xml.XmlDictionaryReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.ReliableSession
  parent: System.ServiceModel
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpSecurity
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurity
  nameWithType: WSDualHttpSecurity
  fullName: System.ServiceModel.WSDualHttpSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
- uid: System.ServiceModel.WSDualHttpBinding.#ctor*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding.WSDualHttpBinding
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements
  nameWithType: WSDualHttpBinding.CreateBindingElements
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
