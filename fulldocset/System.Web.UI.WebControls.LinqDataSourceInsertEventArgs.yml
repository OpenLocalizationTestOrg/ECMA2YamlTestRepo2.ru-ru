### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  id: LinqDataSourceInsertEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  type: Class
  summary: "Предоставляет данные для <xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Inserting&quot;> </xref> событий."
  remarks: "Объект LinqDataSourceInsertEventArgs передается в любой обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>событий.</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>Свойство содержит данные, которые будут вставлены.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>       Объект LinqDataSourceInsertEventArgs можно использовать для изучения данных перед выполнением операции insert в источнике данных. Затем можно проверить данные, проверки на наличие ошибок проверки в классе данных или изменить значение перед обновлением. Также можно отменить операцию вставки.       Если объект, представляющий источник данных вызывает исключение проверки, прежде чем он вставляет данные, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>свойство содержит экземпляр <xref:System.Web.UI.WebControls.LinqDataSourceValidationException>класса.</xref:System.Web.UI.WebControls.LinqDataSourceValidationException> </xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Вы можете получить все исключения проверки через <xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>свойство.</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> Если не вызывается исключение проверки, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>свойство содержит `null`.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> Если обрабатывать исключения проверки и не должны быть повторно исключение, установите <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>Свойства `true`.</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_258_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_258_1.vb)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;> </xref> класса."
  syntax:
    content: public LinqDataSourceInsertEventArgs (object newObject);
    parameters:
    - id: newObject
      type: System.Object
      description: "Объект, содержащий данные для вставки."
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;> </xref> класса и указывает, предоставленных исключения."
  syntax:
    content: public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "Исключение, возникшее при проверке данных для вставки."
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает исключение, выданное при проверке данных перед выполнением операции вставки."
  remarks: "Если перед выполнением операции вставки, вызывается исключение проверки, исключение хранится в свойстве исключение. В обработчике <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>событий, можно получить исключение с помощью исключение свойства.</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "Исключение, если произошла ошибка; в противном случае <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает или задает значение, указывающее, было ли обработано исключение и должно ли оно выдаваться снова."
  remarks: "Возможно создание обработчиков событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>событий для проверки исключений проверки, которые произошли перед выполнением операции вставки.</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> Если обработки исключения и не хотите быть создано снова, задайте свойства ExceptionHandled `true`. Если не задано свойство ExceptionHandled `true`, исключение распространяется на Далее в стеке вызовов обработчика событий."
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если исключение обработано; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "Возвращает объект, содержащий данные для вставки."
  remarks: "Свойство NewObject содержит данные, будет вставлен в источнике данных. Создание обработчика для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>событий и извлечь свойство NewObject для проверки данных, изменить данные или отменить операцию вставки, перед выполнением операции с данными.</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>       Свойство NewObject возвращает объект типа <xref:System.Object>.</xref:System.Object> Можно привести этот объект к типу класса, представляющего данные."
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the NewObject property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_170_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_170_1.vb)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "Объект, содержащий данные для вставки."
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
