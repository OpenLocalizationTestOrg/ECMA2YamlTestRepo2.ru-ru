### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "Исключение, которое возникает, когда выполняется вызов <xref:System.Threading.Thread.Abort*>метод.</xref:System.Threading.Thread.Abort*> Этот класс не наследуется."
  remarks: "Когда выполняется вызов для <xref:System.Threading.Thread.Abort%2A>метод для уничтожения потока, общеязыковая среда выполнения создает исключение ThreadAbortException.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException имеет специальное исключение, которое может быть перехвачено, но он будет вызвано снова в конце `catch` блока. Когда вызывается это исключение, среда выполнения выполняет все `finally` блоки до завершения потока. Так как поток может выполнять код `finally` блоков или вызов <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>для отмены инструкции abort, нет никакой гарантии, поток никогда не будет завершен.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Если необходимо дождаться завершения прерванный поток, можно вызвать <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>метод.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>является блокирующий вызов, который не возвращает до действительного окончания выполнения потока.</xref:System.Threading.Thread.Join%2A>      Настроек [!NOTE] настроек при остановке threadsafter фона сделал все потоки переднего плана в управляемом исполняемом файле общеязыковой среды выполнения (CLR), он не использует <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> Таким образом нельзя использовать ThreadAbortException определить, когда завершаются фоновые потоки в в среде CLR.       ThreadAbortException использует COR_E_THREADABORTED HRESULT, который имеет значение 0x80131530.      Настроек [!NOTE] настроек значение наследуемого <xref:System.Exception.Data%2A>свойство всегда имеет `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Возвращает объект, содержащий сведения о приложении, связанные с прерывание потока."
  remarks: "Объект, возвращаемый этим свойством, указывается с помощью `stateInfo` параметр <xref:System.Threading.Thread.Abort%2A>метод.</xref:System.Threading.Thread.Abort%2A> Точное содержимое и использование этого объекта является определяются приложением; обычно используется для передачи информации, имеющее смысл аварийно завершающимся потоком."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Объект, содержащий сведения о приложении."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
