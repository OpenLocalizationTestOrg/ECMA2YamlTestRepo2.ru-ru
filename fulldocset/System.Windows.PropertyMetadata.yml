### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "Определяет некоторые аспекты поведения свойства зависимостей применительно к определенному типу, включая условия, которые она была зарегистрирована."
  remarks: "Метаданные свойства могут быть определены и используется во время регистрации свойства зависимостей, при вызове <xref:System.Windows.DependencyProperty.Register%2A>метод (или вариантов для присоединенных свойств или свойств зависимостей только для чтения) или после исходной регистрации владельца при вызове <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>метода.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>Кроме того, принимает метаданные свойства.</xref:System.Windows.DependencyProperty.AddOwner%2A>       Этот класс является конкретного базового класса, который может использоваться в каждом из этих вызовов. Однако это очень часто, чтобы указать метаданные с помощью одного из производных классов, таких как <xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata> Эти производные классы поддерживают более подробные метаданные, передающиеся как логические значения свойств, которые полезны для определения или некоторые свойства системы и макет поведения, реализованных в [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] уровня структуры.       Некоторые свойства этого класса, чтения и записи к объектной модели, но также могут быть записаны только до экземпляра, используемых в операции системы свойств, например <xref:System.Windows.DependencyProperty.Register%2A>или <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> Каждое из этих свойств может также быть заданы с помощью конструктора, а предоставляются, чтобы <xref:System.Windows.PropertyMetadata.Merge%2A>реализации методов можно задать их.</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a>## Использование текста XAML этого типа и членов этого типа обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> класса."
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> класса указанное значение по умолчанию для свойства зависимостей, применяются эти метаданные."
  remarks: "Тип значения, заданного для `defaultValue` должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей. Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).       Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, `defaultValue` из <xref:System.Windows.DependencyProperty.UnsetValue>не может быть указан.</xref:System.Windows.DependencyProperty.UnsetValue> Попытка выполнить такую операцию вызовет исключение."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Значение по умолчанию, чтобы задать для свойства зависимостей, обычно предоставляется в качестве значения определенного типа."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>не может быть присвоено значение <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; см. заметки."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> класса с заданным <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> Справочник по реализации."
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Ссылка на реализацию обработчика, который должен вызываться в системе свойств при каждом изменении значения свойства."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> класса, используя значение заданного по умолчанию и <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> Справочник по реализации."
  remarks: "Тип значения, заданного `defaultValue` должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей. Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).       Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, `defaultValue` из <xref:System.Windows.DependencyProperty.UnsetValue>не может быть указан.</xref:System.Windows.DependencyProperty.UnsetValue> Попытка выполнить такую операцию вызовет исключение."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Значение по умолчанию свойства зависимостей, обычно как значение определенного типа."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Ссылка на реализацию обработчика, который должен вызываться в системе свойств при каждом изменении значения свойства."
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>не может быть присвоено значение <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; см. заметки."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> с указанным значением по умолчанию и обратные вызовы."
  remarks: "Если вы хотите указать <xref:System.Windows.CoerceValueCallback>, но не <xref:System.Windows.PropertyChangedCallback>, можно передать `null` для `propertyChangedCallback` параметр.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Тип значения, заданного для `defaultValue` должен соответствовать или относиться к типу, заданному в исходной регистрации применяются эти метаданные свойства зависимостей. Несоответствие между типом значений метаданных по умолчанию и типом свойства зависимостей, к которому он применяется к может быть трудно отлаживать, из-за рассогласования не удается обнаружить во время компиляции (несовпадение вызовет исключение во время выполнения).       Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, `defaultValue` из <xref:System.Windows.DependencyProperty.UnsetValue>не может быть указан.</xref:System.Windows.DependencyProperty.UnsetValue> Попытка выполнить такую операцию вызовет исключение."
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "Значение по умолчанию свойства зависимостей, обычно как значение определенного типа."
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "Ссылка на реализацию обработчика, который должен вызываться в системе свойств при каждом изменении значения свойства."
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "Ссылка на реализацию обработчика, который должен вызываться всякий раз, когда в системе свойств вызывает <xref:System.Windows.DependencyObject.CoerceValue*>для этого свойства.</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>не может быть присвоено значение <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; см. заметки."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Возвращает или задает ссылку на <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> реализацию, заданную в метаданных."
  remarks: "Ответы свойства метаданных не являются обычно открытых членов в содержащем типе, поэтому значение этого свойства не является важным для большинства сценариев, которые просто поглощают метаданные существующего свойства зависимостей. Является одной из причин этого свойства предоставляется, чтобы подклассы метаданных могут осуществлять необходимую логику совмещения, если основные метаданные и переопределение Добавление метаданных укажите <xref:System.Windows.CoerceValueCallback>.</xref:System.Windows.CoerceValueCallback> Тем не менее логика CoerceValueCallback слияния по умолчанию — замена предыдущего.       CoerceValueCallback определяется в объектной модели для чтения записи. Это можно изменить после инициализации CoerceValueCallback <xref:System.Windows.PropertyMetadata>сам объект.</xref:System.Windows.PropertyMetadata> Тем не менее когда метаданные используются как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Попытка задать один раз CoerceValueCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>— `true` на эти метаданные экземпляра вызовет исключение.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "Объект <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> Справочник по реализации."
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Невозможно задать свойство метаданных после применения операции свойства зависимостей."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Возвращает или задает значение по умолчанию свойства зависимостей."
  remarks: "Значение по умолчанию определяется в объектной модели как чтения и записи. Это значение по умолчанию можно изменить после инициализации <xref:System.Windows.PropertyMetadata>сам объект.</xref:System.Windows.PropertyMetadata> Тем не менее когда метаданные используются как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Попытка задать значение по умолчанию один раз <xref:System.Windows.PropertyMetadata.IsSealed%2A>— `true` на эти метаданные экземпляра вызовет исключение.</xref:System.Windows.PropertyMetadata.IsSealed%2A>       Несмотря на то, что он подразумевается по умолчанию на конструктор без параметров, `defaultValue` из <xref:System.Windows.DependencyProperty.UnsetValue>Невозможно задать DefaultValue или конструктора.</xref:System.Windows.DependencyProperty.UnsetValue> Попытка выполнить такую операцию вызовет исключение.      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a>## XAML текст использования члены этого типа обычно не используются в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "Значение по умолчанию свойства. Значение по умолчанию <xref href=&quot;System.Windows.PropertyMetadata&quot;> </xref> экземпляр, созданный с помощью конструктора без параметров будет <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; см. заметки."
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Не может быть присвоено значение <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref> при создании; см. заметки."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Невозможно задать свойство метаданных после применения операции свойства зависимостей."
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Возвращает значение, определяющее, была ли применена метаданных свойству определенным образом, что приводит к запрету этого экземпляра метаданных."
  remarks: "Различные свойства <xref:System.Windows.PropertyMetadata>, такие как <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, определенные в объектной модели для чтения записи.</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> Поэтому эти свойства можно изменить после инициализации <xref:System.Windows.PropertyMetadata>сам объект.</xref:System.Windows.PropertyMetadata> Тем не менее после применения метаданные свойства зависимостей в рамках вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Во время этих вызовов <xref:System.Windows.PropertyMetadata.OnApply%2A>вызывается, и значение этого свойства равно `true`.</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если экземпляр метаданных является неизменяемым; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Объединяет эти метаданные с основными."
  remarks: "Этот метод используется внутренне при переопределении метаданных (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> метода).</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "Базовые метаданные для слияния со значениями данного экземпляра."
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Свойство зависимостей, к которому применяются эти метаданные."
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Вызывается, когда применены эти метаданные свойства, которое указывает, что метаданные запечатываются."
  remarks: "Подклассы должны убедиться, что все изменения структуры данных <xref:System.Windows.PropertyMetadata>подкласс должен быть помечен как неизменяемое после вызова OnApply.</xref:System.Windows.PropertyMetadata> Вызывается после применения метаданных операции системы свойств (регистрация, добавление владельца, переопределения метаданных)."
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "Свойство зависимостей, к которому был применен метаданных."
    - id: targetType
      type: System.Type
      description: "Тип, связанный с этими метаданными, если это метаданные определенного типа. Если это метаданные по умолчанию, это значение является пустой ссылкой."
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Возвращает или задает ссылку на <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> реализацию, заданную в метаданных."
  remarks: "Обратные вызовы свойства метаданных не обычно открытых членов, определяющего типа, поэтому значение этого свойства не является важным для большинства сценариев, которые просто поглощают метаданные существующего свойства зависимостей. Является одной из причин этого свойства предоставляется, чтобы классы метаданных могут осуществлять необходимую логику совмещения, если основные метаданные и переопределение Добавление метаданных укажите <xref:System.Windows.PropertyChangedCallback>.</xref:System.Windows.PropertyChangedCallback> Логики слияния по умолчанию для является поддерживать все реализации PropertyChangedCallback в таблице и вызов каждой из них, с глубокой классом в иерархии, запуск первого установления обратных вызовов.       PropertyChangedCallback определяется в объектной модели для чтения записи. Это можно изменить после инициализации PropertyChangedCallback <xref:System.Windows.PropertyMetadata>сам объект.</xref:System.Windows.PropertyMetadata> Тем не менее когда метаданные используются как часть вызова <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, или <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, в системе свойств будет запечатать этот экземпляр метаданных и свойств теперь считаются неизменяемыми.</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> Попытка задать один раз PropertyChangedCallback <xref:System.Windows.PropertyMetadata.IsSealed%2A>— `true` на эти метаданные экземпляра вызовет исключение.</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "Объект <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref> Справочник по реализации."
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Невозможно задать свойство метаданных после применения операции свойства зависимостей."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
