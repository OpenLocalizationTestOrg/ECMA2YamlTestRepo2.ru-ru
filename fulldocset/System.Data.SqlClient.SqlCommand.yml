### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlCommand
  id: SqlCommand
  children:
  - System.Data.SqlClient.SqlCommand.#ctor
  - System.Data.SqlClient.SqlCommand.#ctor(System.String)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  - System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  - System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  - System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  - System.Data.SqlClient.SqlCommand.Cancel
  - System.Data.SqlClient.SqlCommand.Clone
  - System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  - System.Data.SqlClient.SqlCommand.CommandText
  - System.Data.SqlClient.SqlCommand.CommandTimeout
  - System.Data.SqlClient.SqlCommand.CommandType
  - System.Data.SqlClient.SqlCommand.Connection
  - System.Data.SqlClient.SqlCommand.CreateDbParameter
  - System.Data.SqlClient.SqlCommand.CreateParameter
  - System.Data.SqlClient.SqlCommand.DbConnection
  - System.Data.SqlClient.SqlCommand.DbParameterCollection
  - System.Data.SqlClient.SqlCommand.DbTransaction
  - System.Data.SqlClient.SqlCommand.DesignTimeVisible
  - System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  - System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReader
  - System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteScalar
  - System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  - System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlCommand.Notification
  - System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  - System.Data.SqlClient.SqlCommand.Parameters
  - System.Data.SqlClient.SqlCommand.Prepare
  - System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  - System.Data.SqlClient.SqlCommand.StatementCompleted
  - System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  - System.Data.SqlClient.SqlCommand.Transaction
  - System.Data.SqlClient.SqlCommand.UpdatedRowSource
  langs:
  - csharp
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
  type: Class
  summary: "Представляет инструкцию Transact-SQL или хранимую процедуру для выполнения в базе данных SQL Server. Этот класс не наследуется."
  remarks: "При создании экземпляра объекта SqlCommand свойства чтения/записи задаются их начальные значения. Список этих значений см. конструктор SqlCommand.       SqlCommand содержит следующие методы для выполнения команд в базе данных SQL Server: | Элемент | Описание |   |----------|-----------------|   | <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>| Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в этом SqlCommand обычно выполнение команд, таких как инструкции INSERT, DELETE, UPDATE и НАБОР.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Каждый вызов <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>должны составлять пару с вызов к <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>, которая завершает операцию, обычно в отдельном потоке. |   | <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>| Инициирует асинхронное выполнение инструкции Transact-SQL или хранимые процедуры, описанной в этом SqlCommand и извлекает результаты одного или нескольких задает с сервера.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Каждый вызов <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>должны составлять пару с вызов к <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>, которая завершает операцию, обычно в отдельном потоке. |   | <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>| Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в этом SqlCommand.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Каждый вызов `BeginExecuteXmlReader` должны составлять пару с вызовом `EndExecuteXmlReader`, которая завершает операцию, обычно в отдельном потоке и возвращает объект <xref:System.Xml.XmlReader>. |   | <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>| Выполняет команды, которые возвращают строки.</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> </xref:System.Xml.XmlReader> Для повышения производительности <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>команд с помощью Transact-SQL вызывает `sp_executesql` системной хранимой процедуры.</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Таким образом, <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>может не иметь эффекта, если используется для выполнения команд, таких как инструкции Transact-SQL SET. |   | <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>| Выполняет команды, такие как инструкции Transact-SQL INSERT, DELETE, UPDATE и НАБОР. |   | <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A>| Извлекает из базы данных одно значение (например, статистическое значение). |   | <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>| Отправляет <xref:System.Data.SqlClient.SqlCommand.CommandText%2A> <xref:System.Data.SqlClient.SqlCommand.Connection%2A>и создает объект <xref:System.Xml.XmlReader>. |       Вы можете сбросить <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>свойство и повторное использование объекта SqlCommand.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> </xref:System.Xml.XmlReader> </xref:System.Data.SqlClient.SqlCommand.Connection%2A> </xref:System.Data.SqlClient.SqlCommand.CommandText%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteScalar%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Тем не менее, необходимо закрыть <xref:System.Data.SqlClient.SqlDataReader>перед выполнением новой или предыдущей команды.</xref:System.Data.SqlClient.SqlDataReader>       Если <xref:System.Data.SqlClient.SqlException>создается с помощью метода выполнение SqlCommand <xref:System.Data.SqlClient.SqlConnection>остается открытым, если уровень важности не превышает 19.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlException> Когда уровень важности превышает 20, сервер обычно закрывает <xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> Тем не менее пользователь может опять открыть подключение и продолжить работу.      Настроек [!NOTE] настроек Nameless, также называемый порядковый номер, параметры не поддерживаются поставщиком данных .NET Framework для SQL Server."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a SqlCommand, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader> and then the <xref:System.Data.SqlClient.SqlConnection> as it exits the `Using` code blocks.  \n  \n [!code-cs[Classic WebData SqlCommand Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._6_1.cs)]\n [!code-vb[Classic WebData SqlCommand Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._6_1.vb)]  \n  \n The following sample shows how to create and execute different types of SqlCommand objects.  \n  \n First you must create the sample database, by executing the following script:  \n  \n```  \nUSE [master]  \nGO  \n  \nCREATE DATABASE [MySchool]  \nGO  \n  \nUSE [MySchool]  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE procedure [dbo].[CourseExtInfo] @CourseId int  \nas  \nselect c.CourseID,c.Title,c.Credits,d.Name as DepartmentName  \nfrom Course as c left outer join Department as d on c.DepartmentID=d.DepartmentID  \nwhere c.CourseID=@CourseId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate procedure [dbo].[DepartmentInfo] @DepartmentId int,@CourseCount int output  \nas  \nselect @CourseCount=Count(c.CourseID)  \nfrom course as c  \nwhere c.DepartmentID=@DepartmentId  \n  \nselect d.DepartmentID,d.Name,d.Budget,d.StartDate,d.Administrator  \nfrom Department as d  \nwhere d.DepartmentID=@DepartmentId  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCreate PROCEDURE [dbo].[GetDepartmentsOfSpecifiedYear]   \n@Year int,@BudgetSum money output  \nAS  \nBEGIN  \n        SELECT @BudgetSum=SUM([Budget])  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year   \n  \nSELECT [DepartmentID]  \n      ,[Name]  \n      ,[Budget]  \n      ,[StartDate]  \n      ,[Administrator]  \n  FROM [MySchool].[dbo].[Department]  \n  Where YEAR([StartDate])=@Year  \n  \nEND  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,  \n[Year] [smallint] NOT NULL,  \n[Title] [nvarchar](100) NOT NULL,  \n[Credits] [int] NOT NULL,  \n[DepartmentID] [int] NOT NULL,  \n CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   \n(  \n[CourseID] ASC,  \n[Year] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[Name] [nvarchar](50) NOT NULL,  \n[Budget] [money] NOT NULL,  \n[StartDate] [datetime] NOT NULL,  \n[Administrator] [int] NULL,  \n CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   \n(  \n[DepartmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[Person](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[LastName] [nvarchar](50) NOT NULL,  \n[FirstName] [nvarchar](50) NOT NULL,  \n[HireDate] [datetime] NULL,  \n[EnrollmentDate] [datetime] NULL,  \n CONSTRAINT [PK_School.Student] PRIMARY KEY CLUSTERED   \n(  \n[PersonID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \nCREATE TABLE [dbo].[StudentGrade](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,  \n[CourseID] [nvarchar](10) NOT NULL,  \n[StudentID] [int] NOT NULL,  \n[Grade] [decimal](3, 2) NOT NULL,  \n CONSTRAINT [PK_StudentGrade] PRIMARY KEY CLUSTERED   \n(  \n[EnrollmentID] ASC  \n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  \n  \nGO  \n  \nSET ANSI_NULLS ON  \nGO  \nSET QUOTED_IDENTIFIER ON  \nGO  \ncreate view [dbo].[EnglishCourse]  \nas  \nselect c.CourseID,c.Title,c.Credits,c.DepartmentID  \nfrom Course as c join Department as d on c.DepartmentID=d.DepartmentID  \nwhere d.Name=N'English'  \n  \nGO  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  \nINSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  \nSET IDENTITY_INSERT [dbo].[Department] ON   \n  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  \nINSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  \nSET IDENTITY_INSERT [dbo].[Department] OFF  \nSET IDENTITY_INSERT [dbo].[Person] ON   \n  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (1, N'Hu', N'Nan', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (2, N'Norman', N'Laura', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (3, N'Olivotto', N'Nino', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (4, N'Anand', N'Arturo', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (5, N'Jai', N'Damien', NULL, CAST(0x0000A0BF00000000 AS DateTime))  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (6, N'Holt', N'Roger', CAST(0x000097F100000000 AS DateTime), NULL)  \nINSERT [dbo].[Person] ([PersonID], [LastName], [FirstName], [HireDate], [EnrollmentDate]) VALUES (7, N'Martin', N'Randall', CAST(0x00008B1A00000000 AS DateTime), NULL)  \nSET IDENTITY_INSERT [dbo].[Person] OFF  \nSET IDENTITY_INSERT [dbo].[StudentGrade] ON   \n  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (1, N'C1045', 1, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (2, N'C1045', 2, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (3, N'C1045', 3, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (4, N'C1045', 4, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (5, N'C1045', 5, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (6, N'C1061', 1, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (7, N'C1061', 3, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (8, N'C1061', 4, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (9, N'C1061', 5, CAST(1.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (10, N'C2021', 1, CAST(2.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (11, N'C2021', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (12, N'C2021', 4, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (13, N'C2021', 5, CAST(3.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (14, N'C2042', 1, CAST(2.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (15, N'C2042', 2, CAST(3.50 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (16, N'C2042', 3, CAST(4.00 AS Decimal(3, 2)))  \nINSERT [dbo].[StudentGrade] ([EnrollmentID], [CourseID], [StudentID], [Grade]) VALUES (17, N'C2042', 5, CAST(3.00 AS Decimal(3, 2)))  \nSET IDENTITY_INSERT [dbo].[StudentGrade] OFF  \nALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  \nREFERENCES [dbo].[Department] ([DepartmentID])  \nGO  \nALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  \nGO  \nALTER TABLE [dbo].[StudentGrade]  WITH CHECK ADD  CONSTRAINT [FK_StudentGrade_Student] FOREIGN KEY([StudentID])  \nREFERENCES [dbo].[Person] ([PersonID])  \nGO  \nALTER TABLE [dbo].[StudentGrade] CHECK CONSTRAINT [FK_StudentGrade_Student]  \nGO  \n```  \n  \n Next, compile and execute the following:  \n  \n```  \nusing System;  \nusing System.Data;  \nusing System.Data.SqlClient;  \nusing System.Threading.Tasks;  \n  \nclass Program {  \n  \n   static class SqlHelper {  \n      // Set the connection, command, and then execute the command with non query.  \n      public static Int32 ExecuteNonQuery(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n               // There're three command types: StoredProcedure, Text, TableDirect. The TableDirect   \n               // type is only for OLE DB.    \n               cmd.CommandType = commandType;  \n               cmd.Parameters.AddRange(parameters);  \n  \n               conn.Open();  \n               return cmd.ExecuteNonQuery();  \n            }  \n         }  \n      }  \n  \n      // Set the connection, command, and then execute the command and only return one value.  \n      public static Object ExecuteScalar(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         using (SqlConnection conn = new SqlConnection(connectionString)) {  \n            using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n               cmd.CommandType = commandType;  \n               cmd.Parameters.AddRange(parameters);  \n  \n               conn.Open();  \n               return cmd.ExecuteScalar();  \n            }  \n         }  \n      }  \n  \n      // Set the connection, command, and then execute the command with query and return the reader.  \n      public static SqlDataReader ExecuteReader(String connectionString, String commandText,  \n          CommandType commandType, params SqlParameter[] parameters) {  \n         SqlConnection conn = new SqlConnection(connectionString);  \n  \n         using (SqlCommand cmd = new SqlCommand(commandText, conn)) {  \n            cmd.CommandType = commandType;  \n            cmd.Parameters.AddRange(parameters);  \n  \n            conn.Open();  \n            // When using CommandBehavior.CloseConnection, the connection will be closed when the   \n            // IDataReader is closed.  \n            SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);  \n  \n            return reader;  \n         }  \n      }  \n   }  \n  \n   static void Main(string[] args) {  \n      String connectionString = \"Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;\";  \n  \n      CountCourses(connectionString, 2012);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Following result is the departments that started from 2007:\");  \n      GetDepartments(connectionString, 2007);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Add the credits when the credits of course is lower than 4.\");  \n      AddCredits(connectionString, 4);  \n      Console.WriteLine();  \n  \n      Console.WriteLine(\"Please press any key to exit...\");  \n      Console.ReadKey();  \n   }  \n  \n   static void CountCourses(String connectionString, Int32 year) {  \n      String commandText = \"Select Count([CourseID]) FROM [MySchool].[dbo].[Course] Where Year=@Year\";  \n      SqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);  \n      parameterYear.Value = year;  \n  \n      Object oValue = SqlHelper.ExecuteScalar(connectionString, commandText, CommandType.Text, parameterYear);  \n      Int32 count;  \n      if (Int32.TryParse(oValue.ToString(), out count))  \n         Console.WriteLine(\"There {0} {1} course{2} in {3}.\", count > 1 ? \"are\" : \"is\", count, count > 1 ? \"s\" : null, year);  \n   }  \n  \n   // Display the Departments that start from the specified year.  \n   static void GetDepartments(String connectionString, Int32 year) {  \n      String commandText = \"dbo.GetDepartmentsOfSpecifiedYear\";  \n  \n      // Specify the year of StartDate  \n      SqlParameter parameterYear = new SqlParameter(\"@Year\", SqlDbType.Int);  \n      parameterYear.Value = year;  \n  \n      // When the direction of parameter is set as Output, you can get the value after   \n      // executing the command.  \n      SqlParameter parameterBudget = new SqlParameter(\"@BudgetSum\", SqlDbType.Money);  \n      parameterBudget.Direction = ParameterDirection.Output;  \n  \n      using (SqlDataReader reader = SqlHelper.ExecuteReader(connectionString, commandText,  \n          CommandType.StoredProcedure, parameterYear, parameterBudget)) {  \n         Console.WriteLine(\"{0,-20}{1,-20}{2,-20}{3,-20}\", \"Name\", \"Budget\", \"StartDate\",  \n             \"Administrator\");  \n         while (reader.Read()) {  \n            Console.WriteLine(\"{0,-20}{1,-20:C}{2,-20:d}{3,-20}\", reader[\"Name\"],  \n                reader[\"Budget\"], reader[\"StartDate\"], reader[\"Administrator\"]);  \n         }  \n      }  \n      Console.WriteLine(\"{0,-20}{1,-20:C}\", \"Sum:\", parameterBudget.Value);  \n   }  \n  \n   // If credits of course is lower than the certain value, the method will add the credits.  \n   static void AddCredits(String connectionString, Int32 creditsLow) {  \n      String commandText = \"Update [MySchool].[dbo].[Course] Set Credits=Credits+1 Where Credits<@Credits\";  \n  \n      SqlParameter parameterCredits = new SqlParameter(\"@Credits\", creditsLow);  \n  \n      Int32 rows = SqlHelper.ExecuteNonQuery(connectionString, commandText, CommandType.Text, parameterCredits);  \n  \n      Console.WriteLine(\"{0} row{1} {2} updated.\", rows, rows > 1 ? \"s\" : null, rows > 1 ? \"are\" : \"is\");  \n   }  \n}  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RecordsAffected")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlCommandDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem(true)]

      public sealed class SqlCommand : System.Data.Common.DbCommand, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbCommand
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbCommand.ExecuteNonQueryAsync
  - System.Data.Common.DbCommand.ExecuteScalarAsync
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Connection
  - System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader
  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters
  - System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand()
  nameWithType: SqlCommand.SqlCommand()
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Initializes a new instance of the <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref> class."
  remarks: "Базовый конструктор инициализирует все поля значениями по умолчанию. В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Data.SqlClient.SqlCommand>.</xref:System.Data.SqlClient.SqlCommand>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>| пустая строка (»») |   | <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>| `CommandType.Text`|   | <xref:System.Data.SqlClient.SqlCommand.Connection%2A>| Значение NULL |       Можно изменить значение для любого из этих свойств, вызвав его отдельно.</xref:System.Data.SqlClient.SqlCommand.Connection%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandText%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets the `CommandTimeout` property.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._39_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._39_1.cs)]"
  syntax:
    content: public SqlCommand ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String)
  nameWithType: SqlCommand.SqlCommand(String)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> класса с текстом запроса."
  remarks: "При создании экземпляра <xref:System.Data.SqlClient.SqlCommand>создается следующие начальные значения задаются свойства чтения и записи.</xref:System.Data.SqlClient.SqlCommand>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>| `cmdText`|   | <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>| `CommandType.Text`|   | <xref:System.Data.SqlClient.SqlCommand.Connection%2A>| null |       Можно изменить значение для любого из этих свойств, вызвав его отдельно.</xref:System.Data.SqlClient.SqlCommand.Connection%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandText%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, passing in the connection string and command text.  \n  \n [!code-vb[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._21_1.vb)]\n [!code-cs[Classic WebData SqlCommand.SqlCommand1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._21_1.cs)]"
  syntax:
    content: public SqlCommand (string cmdText);
    parameters:
    - id: cmdText
      type: System.String
      description: "Текст запроса."
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> класса с текстом запроса и <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Data.SqlClient.SqlCommand>.</xref:System.Data.SqlClient.SqlCommand>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>| `cmdText`|   | <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>| `CommandType.Text`|   | <xref:System.Data.SqlClient.SqlCommand.Connection%2A>| Новый <xref:System.Data.SqlClient.SqlConnection>является значением для `connection` параметр. |       Значение для любого из этих параметров можно изменить, задав соответствующее свойство.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlCommand.Connection%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandText%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-cs[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/csharp/c858d494-4959-470c-91ba-_1.cs)]\n [!code-vb[Classic WebData SqlCommand.SqlCommand2 Example#1](~/add/codesnippet/visualbasic/c858d494-4959-470c-91ba-_1.vb)]"
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: cmdText
      type: System.String
      description: "Текст запроса."
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Объект <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> , представляющий подключение к экземпляру SQL Server."
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection,SqlTransaction)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> класса с текстом запроса, <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>и <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>."
  remarks: "В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Data.SqlClient.SqlCommand>.</xref:System.Data.SqlClient.SqlCommand>      | Свойства | Начальное значение |   |----------------|-------------------|   | <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>| `cmdText`|   | <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>|&30; |   | <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>| `CommandType.Text`|   | <xref:System.Data.SqlClient.SqlCommand.Connection%2A>| Новый <xref:System.Data.SqlClient.SqlConnection>является значением для `connection` параметр. |       Значение для любого из этих параметров можно изменить, задав соответствующее свойство.</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlCommand.Connection%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.CommandText%2A>"
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction);
    parameters:
    - id: cmdText
      type: System.String
      description: "Текст запроса."
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Объект <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> , представляющий подключение к экземпляру SQL Server."
    - id: transaction
      type: System.Data.SqlClient.SqlTransaction
      description: "<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> В котором <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> выполняет."
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)'
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> класса текст указанной команды, подключения, транзакции и параметры шифрования."
  syntax:
    content: public SqlCommand (string cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction, System.Data.SqlClient.SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    parameters:
    - id: cmdText
      type: System.String
      description: "Текст запроса."
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Объект <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> , представляющий подключение к экземпляру SQL Server."
    - id: transaction
      type: System.Data.SqlClient.SqlTransaction
      description: "<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> В котором <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> выполняет."
    - id: columnEncryptionSetting
      type: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
      description: "Параметр шифрования. Дополнительные сведения см. в разделе [постоянного шифрования](https://msdn.microsoft.com/library/mt163865.aspx)."
  overload: System.Data.SqlClient.SqlCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  id: BeginExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteNonQuery()
  nameWithType: SqlCommand.BeginExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>."
  remarks: "Метод BeginExecuteNonQuery запускает процесс асинхронного выполнения [!INCLUDE[tsql](~/add/includes/tsql-md.md)] инструкции или хранимой процедуры, которая не возвращает строк, позволяющие выполнять другие задачи, параллельно с выполнением инструкции. При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>метод для завершения операции.</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> Метод BeginExecuteNonQuery немедленно возвращает (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> не влияет на BeginExecuteNonQuery), но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно.       Так как эта перегрузка не поддерживает процедуру обратного вызова, разработчики должны либо опроса, чтобы определить, завершена ли команда с помощью <xref:System.IAsyncResult.IsCompleted%2A>свойство <xref:System.IAsyncResult>возвращаемое методом BeginExecuteNonQuery; или дождитесь ее завершения одной или нескольких команд, с помощью <xref:System.IAsyncResult.AsyncWaitHandle%2A>Свойства возвращаемой <xref:System.IAsyncResult>.</xref:System.IAsyncResult> </xref:System.IAsyncResult.AsyncWaitHandle%2A> </xref:System.IAsyncResult> </xref:System.IAsyncResult.IsCompleted%2A>"
  example:
  - "The following console application creates updates data within the **AdventureWorks** sample database, doing its work asynchronously. In order to emulate a long-running process, this example inserts a WAITFOR statement in the command text. Normally, you would not take efforts to make your commands run slower, but doing this in this case makes it easier to demonstrate the asynchronous behavior.  \n  \n [!code-vb[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._34_1.vb)]\n [!code-cs[DataWorks SqlCommand.BeginExecuteNonQuery#1](~/add/codesnippet/csharp/m-system.data.sqlclient._34_1.cs)]"
  syntax:
    content: public IAsyncResult BeginExecuteNonQuery ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или того и другого; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*>, который возвращает количество задействованных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  id: BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteNonQuery(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>, учитывая обратного вызова процедуры и сведения о состоянии."
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>Метод начинает процесс асинхронного выполнения инструкции Transact-SQL или хранимую процедуру, которая не возвращает строк, позволяющие выполнять другие задачи, параллельно с выполнением инструкции.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>метод для завершения операции.</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>Метод возвращается немедленно (<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> не влияет на BeginExecuteNonQuery), но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> </xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>       `callback` Позволяет указать <xref:System.AsyncCallback>делегат, вызываемый при завершении инструкции.</xref:System.AsyncCallback> Можно вызвать <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A>метод из этой процедуры делегата или из любого места в приложении.</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery%2A> Кроме того, можно передать любой объект в `asyncStateObject` параметр и в процедуре обратного вызова можно получить эти сведения с помощью <xref:System.IAsyncResult.AsyncState%2A>свойство.</xref:System.IAsyncResult.AsyncState%2A>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно.       Поскольку процедура обратного вызова выполняется из фонового потока, предоставленного средой CLR Microsoft .NET, очень важно применять строгий подход к обработке взаимодействия между потоками в приложениях. Например вы не должны взаимодействовать с содержимым формы из процедуры обратного вызова; требуется обновить форму, переключитесь обратно в поток формы для работы. В примере в этом разделе показано такое поведение.       Все ошибки, происходящие во время выполнения операции, вызываются как исключения в процедуре обратного вызова. Необходимо обрабатывать исключение в процедуре обратного вызова, а не в основное приложение. См. пример в этом разделе для получения дополнительных сведений об обработке исключений в процедуре обратного вызова."
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteNonQuery method, executing a Transact-SQL statement that includes a delay of several seconds (emulating a long-running command).  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteNonQueryForm#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteNonQueryForm.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteNonQuery (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, вызываемый при завершении выполнения команды.</xref:System.AsyncCallback> Передайте <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic) для указания, что обратный вызов не требуется."
    - id: stateObject
      type: System.Object
      description: "-Пользователем объект состояния, передаваемый процедуре обратного вызова. Извлечение этого объекта в процедуре обратного вызова посредством <xref:System.IAsyncResult.AsyncState*>свойство.</xref:System.IAsyncResult.AsyncState*>"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или того и другого; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*>, который возвращает количество задействованных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader
  id: BeginExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader()
  nameWithType: SqlCommand.BeginExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>и получает от сервера один или несколько результирующих наборов."
  remarks: "Метод BeginExecuteReader запускает процесс асинхронно выполнения инструкции Transact-SQL или хранимой процедуры, возвращающей строки, позволяющие выполнять другие задачи, параллельно с выполнением инструкции. При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод для завершения операции и получения <xref:System.Data.SqlClient.SqlDataReader>команда вернула.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> Метод BeginExecuteReader возвращается немедленно, но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно. Несмотря на то, что команда выполняется асинхронно, получение значения осуществляется синхронно. Это означает, что вызовы <xref:System.Data.SqlClient.SqlDataReader.Read%2A>может блокироваться, если требуется больше данных и базовой сети чтения операция блокирует.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>       Так как эта перегрузка не поддерживает процедуру обратного вызова, разработчики должны либо опроса, чтобы определить, завершена ли команда с помощью <xref:System.IAsyncResult.IsCompleted%2A>свойство <xref:System.IAsyncResult>возвращаемое методом BeginExecuteReader; или дождитесь ее завершения одной или нескольких команд, с помощью <xref:System.IAsyncResult.AsyncWaitHandle%2A>Свойства возвращаемой <xref:System.IAsyncResult>.</xref:System.IAsyncResult> </xref:System.IAsyncResult.AsyncWaitHandle%2A> </xref:System.IAsyncResult> </xref:System.IAsyncResult.IsCompleted%2A>       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или BeginExecuteReader для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. As soon as the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._4_1.cs)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или того и другого; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>, который возвращает <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> экземпляр, который может использоваться для извлечения возвращенных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  id: BeginExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> с помощью одного из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод начинает процесс асинхронного выполнения инструкции Transact-SQL или хранимую процедуру, которая возвращает строки, позволяющие выполнять другие задачи, параллельно с выполнением инструкции.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод для завершения операции и получения <xref:System.Data.SqlClient.SqlDataReader>команда вернула.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод возвращается немедленно, но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>       `behavior` Позволяет указать параметры, управляющие поведением команды и ее подключения. Эти значения могут объединяться друг с другом (с помощью языка программирования `OR` оператор); как правило, разработчики используют `CommandBehavior.CloseConnection` значение, чтобы убедиться в том, что соединение закрывается средой выполнения при <xref:System.Data.SqlClient.SqlDataReader>закрыт.</xref:System.Data.SqlClient.SqlDataReader>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно. Несмотря на то, что команда выполняется асинхронно, получение значения осуществляется синхронно. Это означает, что вызовы <xref:System.Data.SqlClient.SqlDataReader.Read%2A>может блокироваться, если требуется больше данных и базовой сети чтения операция блокирует.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>       Так как эта перегрузка не поддерживает процедуру обратного вызова, разработчики должны либо выполнить опрос для определения, завершена ли команда с помощью <xref:System.IAsyncResult.IsCompleted%2A>Свойства, <xref:System.IAsyncResult>возвращаемый из <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>метода; или дождитесь завершения одной или нескольких команд, с помощью <xref:System.IAsyncResult.AsyncWaitHandle%2A>Свойства возвращаемой <xref:System.IAsyncResult>.</xref:System.IAsyncResult> </xref:System.IAsyncResult.AsyncWaitHandle%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> </xref:System.IAsyncResult> </xref:System.IAsyncResult.IsCompleted%2A>       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server возвращает никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following console application starts the process of retrieving a data reader asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the <xref:System.Data.SqlClient.SqlDataReader> and displays its contents.  \n  \n This example also passes the `CommandBehavior.CloseConnection` and `CommandBehavior.SingleRow` values in the behavior parameter, causing the connection to be closed with the returned <xref:System.Data.SqlClient.SqlDataReader> is closed, and to optimize for a single row result.  \n  \n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/visualbasic/d7d83823-a2e6-4b2d-a7a2-_1.vb)]\n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncSimple#1](~/add/codesnippet/csharp/d7d83823-a2e6-4b2d-a7a2-_1.cs)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значений, определяющее параметры извлечения данных и выполнения инструкции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или оба; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>, который возвращает <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> экземпляр, который может использоваться для извлечения возвращенных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  id: BeginExecuteReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> и получает от сервера, один или несколько результирующих наборов получает обратный вызов процедуры и сведения о состоянии."
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод начинает процесс асинхронного выполнения инструкции Transact-SQL или хранимую процедуру, которая возвращает строки, позволяющие выполнять другие задачи, параллельно с выполнением инструкции.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод для завершения операции и получения <xref:System.Data.SqlClient.SqlDataReader>команда вернула.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод возвращается немедленно, но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>до завершения выполнения команды Причина <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>       `callback` Позволяет указать <xref:System.AsyncCallback>делегат, вызываемый при завершении инструкции.</xref:System.AsyncCallback> Можно вызвать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод из этой процедуры делегата или из любого места в приложении.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> Кроме того, можно передать любой объект в `stateObject` параметр и в процедуре обратного вызова можно получить эти сведения с помощью <xref:System.IAsyncResult.AsyncState%2A>свойство.</xref:System.IAsyncResult.AsyncState%2A>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно. Несмотря на то, что команда выполняется асинхронно, получение значения осуществляется синхронно. Это означает, что вызовы <xref:System.Data.SqlClient.SqlDataReader.Read%2A>может блокироваться, если требуется больше данных и базовой сети чтения операция блокирует.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>       Поскольку процедура обратного вызова выполняется из фонового потока, предоставленного средой Microsoft .NET, очень важно применять строгий подход к обработке взаимодействия между потоками в приложениях. Например вы не должны взаимодействовать с содержимым формы из процедуры обратного вызова; требуется обновить форму, переключитесь обратно в поток формы для работы. В примере в этом разделе показано такое поведение.       Все ошибки, происходящие во время выполнения операции, вызываются как исключения в процедуре обратного вызова. Необходимо обрабатывать исключение в процедуре обратного вызова, а не в основное приложение. См. пример в этом разделе для получения дополнительных сведений об обработке исключений в процедуре обратного вызова.       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server возвращает никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to BeginExecuteReader.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsync.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, вызываемый при завершении выполнения команды.</xref:System.AsyncCallback> Передайте <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic) для указания, что обратный вызов не требуется."
    - id: stateObject
      type: System.Object
      description: "-Пользователем объект состояния, передаваемый процедуре обратного вызова. Извлечение этого объекта в процедуре обратного вызова посредством <xref:System.IAsyncResult.AsyncState*>свойство.</xref:System.IAsyncResult.AsyncState*>"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или оба; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>, который возвращает <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> экземпляр, который может использоваться для извлечения возвращенных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  id: BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>, с помощью одного из <xref uid=&quot;langword_csharp_CommandBehavior&quot; name=&quot;CommandBehavior&quot; href=&quot;&quot;> </xref> значения и получение один или несколько результирующих наборов, на сервере, заданный обратный вызов процедуры и сведения о состоянии."
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод начинает процесс асинхронного выполнения инструкции Transact-SQL или хранимую процедуру, которая возвращает строки, позволяющие выполнять другие задачи, параллельно с выполнением инструкции.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод для завершения операции и получения <xref:System.Data.SqlClient.SqlDataReader>команда вернула.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>Метод возвращается немедленно, но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>       `callback` Позволяет указать <xref:System.AsyncCallback>делегат, вызываемый при завершении инструкции.</xref:System.AsyncCallback> Можно вызвать <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A>метод из этой процедуры делегата или из любого места в приложении.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> Кроме того, можно передать любой объект в `stateObject` параметр и в процедуре обратного вызова можно получить эти сведения с помощью <xref:System.IAsyncResult.AsyncState%2A>свойство.</xref:System.IAsyncResult.AsyncState%2A>       `behavior` Позволяет указать параметры, управляющие поведением команды и ее подключения. Эти значения могут объединяться друг с другом (с помощью языка программирования `Or` оператор); как правило, разработчики используют `CloseConnection` значение, чтобы убедиться в том, что соединение закрывается средой выполнения при <xref:System.Data.SqlClient.SqlDataReader>закрыт.</xref:System.Data.SqlClient.SqlDataReader> Разработчики также могут оптимизировать поведение <xref:System.Data.SqlClient.SqlDataReader>, указав `SingleRow` значение, если оно известно, что инструкции Transact-SQL или хранимая процедура возвращает только одну строку.</xref:System.Data.SqlClient.SqlDataReader>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно. Несмотря на то, что команда выполняется асинхронно, получение значения осуществляется синхронно. Это означает, что вызовы <xref:System.Data.SqlClient.SqlDataReader.Read%2A>может блокироваться, если требуется больше данных и базовой сети чтения операция блокирует.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>       Поскольку процедура обратного вызова выполняется из фонового потока, предоставленного средой CLR Microsoft .NET, очень важно применять строгий подход к обработке взаимодействия между потоками в приложениях. Например, не должны взаимодействовать с содержимым формы из процедуры обратного вызова — требуется обновить форму, переключитесь обратно в поток формы для работы. В примере в этом разделе показано такое поведение.       Все ошибки, происходящие во время выполнения операции, вызываются как исключения в процедуре обратного вызова. Необходимо обрабатывать исключение в процедуре обратного вызова, а не в основное приложение. См. пример в этом разделе для получения дополнительных сведений об обработке исключений в процедуре обратного вызова.       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following Windows application demonstrates the use of the <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). Because the sample executes the command asynchronously, the form remains responsive while awaiting the results. This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter; doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader%2A> method corresponding to the initial call to <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.DataGridView> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n This example passes the `CommandBehavior.CloseConnection` value in the `behavior` parameter, causing the returned <xref:System.Data.SqlClient.SqlDataReader> to automatically close its connection when it is closed.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteReaderAsyncBehavior.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteReader (AsyncCallback callback, object stateObject, System.Data.CommandBehavior behavior);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, вызываемый при завершении выполнения команды.</xref:System.AsyncCallback> Передайте <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic) для указания, что обратный вызов не требуется."
    - id: stateObject
      type: System.Object
      description: "-Пользователем объект состояния, передаваемый процедуре обратного вызова. Извлечение этого объекта в процедуре обратного вызова посредством <xref:System.IAsyncResult.AsyncState*>свойство.</xref:System.IAsyncResult.AsyncState*>"
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значений, определяющее параметры извлечения данных и выполнения инструкции."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или того и другого; это значение требуется также при вызове метода <xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*>, который возвращает <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> экземпляр, который может использоваться для извлечения возвращенных строк.</xref:System.Data.SqlClient.SqlCommand.EndExecuteReader*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  id: BeginExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteXmlReader()
  nameWithType: SqlCommand.BeginExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> и возвращает результаты в виде <xref:System.Xml.XmlReader>объекта.</xref:System.Xml.XmlReader>"
  remarks: "Метод BeginExecuteXmlReader запускает процесс асинхронного выполнения инструкции Transact-SQL, возвращающей строки в формате XML, позволяющие выполнять другие задачи, параллельно с выполнением инструкции. При завершении инструкции, разработчики должны вызывать `EndExecuteXmlReader` метод для завершения операции и извлечения XML-код, возвращенный командой. Метод BeginExecuteXmlReader возвращается немедленно, но пока не выполняется соответствующий код `EndExecuteXmlReader` вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> Вызов `EndExecuteXmlReader` до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand>       <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>Обычно определяет инструкцию Transact-SQL с допустимым предложение FOR XML.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Тем не менее `CommandText` можно также указать инструкцию, возвращающую `ntext` данных, который содержит допустимый XML-код.       Типичный <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>запрос может быть отформатирован как в следующем примере на C#: ```   SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM dbo.Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);   ``` этот метод может также использоваться для извлечения результирующего набора с одной строкой и одним столбцом.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> В этом случае, если несколько возвращается одна строка, `EndExecuteXmlReader` метод присоединяет <xref:System.Xml.XmlReader>значение на пересечении первой строки и удаляет набор rest результата.</xref:System.Xml.XmlReader>       Компонент несколько активных результирующих набора (режим MARS) позволяет использовать то же подключение нескольких действий.       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно. Несмотря на то, что команда выполняется асинхронно, получение значения осуществляется синхронно.       Так как эта перегрузка не поддерживает процедуру обратного вызова, разработчики должны либо опроса чтобы определить, завершена ли команда с помощью <xref:System.IAsyncResult.IsCompleted%2A>свойство <xref:System.IAsyncResult>возвращаемое методом BeginExecuteXmlReader; или дождитесь ее завершения одной или нескольких команд, с помощью <xref:System.IAsyncResult.AsyncWaitHandle%2A>Свойства возвращаемой <xref:System.IAsyncResult>.</xref:System.IAsyncResult> </xref:System.IAsyncResult.AsyncWaitHandle%2A> </xref:System.IAsyncResult> </xref:System.IAsyncResult.IsCompleted%2A>       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server возвращает никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following console application starts the process of retrieving XML data asynchronously. While waiting for the results, this simple application sits in a loop, investigating the <xref:System.IAsyncResult.IsCompleted%2A> property value. Once the process has completed, the code retrieves the XML and displays its contents.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._41_1.cs)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._41_1.vb)]"
  syntax:
    content: public IAsyncResult BeginExecuteXmlReader ();
    parameters: []
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или того и другого; это значение требуется также при вызове метода <xref uid=&quot;langword_csharp_EndExecuteXmlReader&quot; name=&quot;EndExecuteXmlReader&quot; href=&quot;&quot;> </xref>, которая возвращает одно значение XML.</xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  id: BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: BeginExecuteXmlReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициирует асинхронное выполнение инструкции Transact-SQL или хранимой процедуры, описанной в данном <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> и возвращает результаты в виде <xref:System.Xml.XmlReader>объекта, используя процедуру обратного вызова.</xref:System.Xml.XmlReader>"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>Метод начинает процесс асинхронного выполнения инструкции Transact-SQL или хранимую процедуру, которая возвращает строки в формате XML, позволяющие выполнять другие задачи, параллельно с выполнением инструкции.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> При завершении инструкции, разработчики должны вызывать <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>метод для завершения операции и получения запрошенных данных XML.</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>Метод возвращается немедленно, но пока не выполняется соответствующий код <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>вызова метода, он не может выполняться все вызовы, которые запустить синхронное или асинхронное выполнение к тому же контексту <xref:System.Data.SqlClient.SqlCommand>объекта.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Вызов <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>до завершения выполнения команды <xref:System.Data.SqlClient.SqlCommand>объекта для блокирования до завершения выполнения.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>       <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>Обычно определяет инструкцию Transact-SQL с допустимым предложение FOR XML.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Тем не менее `CommandText` можно также указать инструкцию, которая возвращает данные, которые содержат допустимый XML. Этот метод может также использоваться для извлечения результирующего набора с одной строкой и одним столбцом. В этом случае, если несколько возвращается одна строка, <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>метод присоединяет <xref:System.Xml.XmlReader>значение на пересечении первой строки и удаляет набор rest результата.</xref:System.Xml.XmlReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>       Типичный запрос BeginExecuteXmlReader может быть отформатирован как в следующем примере на C#: ```   SqlCommand command = new SqlCommand(&quot;SELECT ContactID, FirstName, LastName FROM Contact FOR XML AUTO, XMLDATA&quot;, SqlConn);   ``` этот метод может также использоваться для извлечения результирующего набора с одной строкой и одним столбцом. В этом случае, если несколько возвращается одна строка, <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>метод присоединяет <xref:System.Xml.XmlReader>значение на пересечении первой строки и удаляет набор rest результата.</xref:System.Xml.XmlReader> </xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>       Компонент несколько активных результирующих набора (режим MARS) позволяет использовать то же подключение нескольких действий.       `callback` Позволяет указать <xref:System.AsyncCallback>делегат, вызываемый при завершении инструкции.</xref:System.AsyncCallback> Можно вызвать <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A>метод из этой процедуры делегата или из любого места в приложении.</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> Кроме того, можно передать любой объект в `stateObject` параметр и в процедуре обратного вызова можно получить эти сведения с помощью <xref:System.IAsyncResult.AsyncState%2A>свойство.</xref:System.IAsyncResult.AsyncState%2A>       Обратите внимание, что текст команды и параметры отправляются на сервер синхронно. При отправке большой команды или множества параметров этот метод может блокироваться на время записи. После отправки команды метод немедленно возвращается, не дожидаясь ответа от сервера — то есть, чтение выполняется асинхронно.       Все ошибки, происходящие во время выполнения операции, вызываются как исключения в процедуре обратного вызова. Необходимо обрабатывать исключение в процедуре обратного вызова, а не в основное приложение. См. пример в этом разделе для получения дополнительных сведений об обработке исключений в процедуре обратного вызова.       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following Windows application demonstrates the use of the BeginExecuteXmlReader method, executing a Transact-SQL statement that includes a delay of a few seconds (emulating a long-running command). This example passes the executing <xref:System.Data.SqlClient.SqlCommand> object as the `stateObject` parameter--doing so makes it simple to retrieve the <xref:System.Data.SqlClient.SqlCommand> object from within the callback procedure, so that the code can call the <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader%2A> method corresponding to the initial call to BeginExecuteXmlReader.  \n  \n This example demonstrates many important techniques. This includes calling a method that interacts with the form from a separate thread. In addition, this example demonstrates how you must block users from executing a command multiple times concurrently, and how you must make sure that the form does not close before the callback procedure is called.  \n  \n To set up this example, create a new Windows application. Put a <xref:System.Windows.Forms.Button> control, a <xref:System.Windows.Forms.ListBox> control, and a <xref:System.Windows.Forms.Label> control on the form (accepting the default name for each control). Add the following code to the form's class, modifying the connection string as needed for your environment.  \n  \n [!code-cs[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/csharp/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormCS/Form1.cs#1)]\n [!code-vb[DataWorks SqlCommand.BeginExecuteXmlReaderAsync#1](~/add/codesnippet/visualbasic/DataWorks SqlCommand.BeginExecuteXmlReaderAsync.TesterFormVB/Form1.vb#1)]"
  syntax:
    content: public IAsyncResult BeginExecuteXmlReader (AsyncCallback callback, object stateObject);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>Делегат, вызываемый при завершении выполнения команды.</xref:System.AsyncCallback> Передайте <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic) для указания, что обратный вызов не требуется."
    - id: stateObject
      type: System.Object
      description: "-Пользователем объект состояния, передаваемый процедуре обратного вызова. Извлечение этого объекта в процедуре обратного вызова посредством <xref:System.IAsyncResult.AsyncState*>свойство.</xref:System.IAsyncResult.AsyncState*>"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Может использоваться для запроса или ожидания результатов или оба; это значение также необходимой при <xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*>вызове, который возвращает результаты выполнения команды в виде XML.</xref:System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*> </xref:System.IAsyncResult>"
  overload: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Любая ошибка, возникающая во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Пара имя значение «асинхронная обработка = true» не был указан в строке подключения, определяющей подключение для этого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Cancel
  id: Cancel
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Cancel()
  nameWithType: SqlCommand.Cancel()
  fullName: System.Data.SqlClient.SqlCommand.Cancel()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Пытается отменить выполнение <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>."
  remarks: "Если нужно отменить, ничего не происходит. Если команда выполняется, и попытка ее отмены неудачей, исключение не формируется.       Редко, иногда, если вы вызываете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>затем вызвать <xref:System.Data.SqlClient.SqlDataReader.Close%2A>(implicitily или явно) перед вызовом &quot;Отмена&quot;, а затем вызовите &quot;Отмена&quot;, команда &quot;Отмена&quot; будут отправляться не на SQL Server и результирующий набор может продолжать потока после вызова метода <xref:System.Data.SqlClient.SqlConnection.Close%2A>.</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlDataReader.Close%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, убедитесь, что вызывается &quot;Отмена&quot;, перед тем как закрыть чтения или соединения."
  example:
  - "The following example demonstrates the use of the Cancel method.  \n  \n [!code-vb[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._13_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Cancel#1](~/add/codesnippet/csharp/m-system.data.sqlclient._13_1.cs)]"
  syntax:
    content: public override void Cancel ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Clone
  id: Clone
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Clone()
  nameWithType: SqlCommand.Clone()
  fullName: System.Data.SqlClient.SqlCommand.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает новый <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, являющийся копией текущего экземпляра."
  syntax:
    content: public System.Data.SqlClient.SqlCommand Clone ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "Новый <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, являющийся копией этого экземпляра."
  overload: System.Data.SqlClient.SqlCommand.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  id: ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает параметр шифрования столбца для этой команды."
  syntax:
    content: public System.Data.SqlClient.SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    return:
      type: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
      description: "Параметр шифрования столбца для этой команды."
  overload: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandText
  id: CommandText
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandText
  nameWithType: SqlCommand.CommandText
  fullName: System.Data.SqlClient.SqlCommand.CommandText
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает инструкцию Transact-SQL, имя таблицы или хранимую процедуру для выполнения в источнике данных."
  remarks: "Когда <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>свойству `StoredProcedure`, свойство CommandText должно быть присвоено имя хранимой процедуры.</xref:System.Data.SqlClient.SqlCommand.CommandType%2A> Пользователь может потребоваться использовать синтаксис escape-символов, если имя хранимой процедуры содержит специальные символы. Команда выполняет эту хранимую процедуру при вызове одного из `Execute` методы.       Поставщик данных Microsoft .NET Framework для SQL Server не поддерживает прототип вопросительного знака (?) для передачи параметров в инструкции Transact-SQL или хранимая процедура вызывается с помощью команды `CommandType.Text`. В этом случае необходимо использовать именованные параметры. Например: ```   SELECT * FROM dbo.Customers WHERE CustomerID = @CustomerID   ``` Дополнительные сведения см. в разделе [Настройка параметров и типов данных параметров](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._56_1.vb)]\n [!code-cs[Classic WebData SqlCommand.CommandText Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._56_1.cs)]"
  syntax:
    content: public override string CommandText { get; set; }
    return:
      type: System.String
      description: "Инструкции Transact-SQL или хранимую процедуру для выполнения. Значение по умолчанию — пустая строка."
  overload: System.Data.SqlClient.SqlCommand.CommandText*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout
  id: CommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
  fullName: System.Data.SqlClient.SqlCommand.CommandTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает время ожидания перед завершением попытки выполнить команду и созданием ошибки."
  remarks: "Значение 0 означает отсутствие ограничений, (попытка выполнить команду будет ждать бесконечно долго).      Настроек [!NOTE] настроек CommandTimeout свойство будет пропущено во время вызовов асинхронных методов, таких как <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>       Параметр CommandTimeout не имеет значения при контекстном соединении выполняется команда ( <xref:System.Data.SqlClient.SqlConnection>открывается с» контекстного соединения = true» в строке подключения).</xref:System.Data.SqlClient.SqlConnection>      Настроек [!NOTE] настроек это свойство является совокупное время ожидания (для всех сетевых пакетов, которые доступны для чтения во время вызова метода) для всех сетевых операций чтения во время выполнения команды или обработки результатов. Тайм-аут может произойти после первой строки возвращается и не включает время обработки пользователем, время чтения только в сети.   >> Например, с 30-секундная временем ожидания, если <xref:System.Data.SqlClient.SqlDataReader.Read%2A>требует два сетевых пакетов, то он имеет 30 секунд для чтения и сетевые пакеты.</xref:System.Data.SqlClient.SqlDataReader.Read%2A> При вызове метода <xref:System.Data.SqlClient.SqlDataReader.Read%2A>еще раз, он будет иметь другой 30 секунд для чтения, любые данные, которые требуется.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>      ```   using System;   using System.Data.SqlClient;   ///    public class A {      ///       public static void Main() {         string connectionString = &quot;&quot;;         // Wait for 5 second delay in the command         string queryString = &quot;waitfor delay &quot;00:00:05&quot;&quot;;         using (SqlConnection connection = new SqlConnection(connectionString)) {            connection.Open();            SqlCommand command = new SqlCommand(queryString, connection);            // Setting command timeout to 1 second            command.CommandTimeout = 1;            try {               command.ExecuteNonQuery();            }            catch (SqlException e) {               Console.WriteLine(&quot;Got expected SqlException due to command timeout &quot;);               Console.WriteLine(e);            }         }      }   }   ```"
  syntax:
    content: public override int CommandTimeout { get; set; }
    return:
      type: System.Int32
      description: "Время ожидания для выполнения команды в секундах. Значение по умолчанию — 30 секунд."
  overload: System.Data.SqlClient.SqlCommand.CommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CommandType
  id: CommandType
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CommandType
  nameWithType: SqlCommand.CommandType
  fullName: System.Data.SqlClient.SqlCommand.CommandType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает значение, указывающее, как <xref:System.Data.SqlClient.SqlCommand.CommandText*>свойство будет интерпретироваться.</xref:System.Data.SqlClient.SqlCommand.CommandText*>"
  remarks: "Если задано свойство CommandType `StoredProcedure`, следует задать <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>на имя хранимой процедуры.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Команда выполняет эту хранимую процедуру при вызове одного из методов Execute.       Поставщик данных Microsoft .NET Framework для SQL Server не поддерживает прототип вопросительного знака (?) для передачи параметров в инструкции SQL или хранимая процедура вызывается со свойством CommandType <xref:System.Data.CommandType>.</xref:System.Data.CommandType> В этом случае необходимо использовать именованные параметры. Например: ВЫБЕРИТЕ * из клиентов WHERE CustomerID = @CustomerID Дополнительные сведения см. в разделе [Настройка параметров и типов данных параметров](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._8_1.vb)]\n [!code-cs[Classic WebData IDbCommand.CommandTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._8_1.cs)]"
  syntax:
    content: public override System.Data.CommandType CommandType { get; set; }
    return:
      type: System.Data.CommandType
      description: "Один из <xref href=&quot;System.Data.CommandType&quot;> </xref> значения. Значение по умолчанию — <xref uid=&quot;langword_csharp_Text&quot; name=&quot;Text&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlCommand.CommandType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Значение не является допустимым <xref href=&quot;System.Data.CommandType&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Connection
  nameWithType: SqlCommand.Connection
  fullName: System.Data.SqlClient.SqlCommand.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> используется этим экземпляром <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>."
  remarks: "Если подключение изменяется прикрепления команды в существующей транзакции, при попытке выполнить команду вызовет <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       Если <xref:System.Data.SqlClient.SqlCommand.Transaction%2A>свойство не имеет значение null, и транзакция уже зафиксирована или выполнен откат, <xref:System.Data.SqlClient.SqlCommand.Transaction%2A>задано значение null.</xref:System.Data.SqlClient.SqlCommand.Transaction%2A> </xref:System.Data.SqlClient.SqlCommand.Transaction%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._22_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Connection Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._22_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; set; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "Соединение с источником данных. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlCommand.Connection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Свойство соединения было изменено во время прикрепления команды в транзакцию..."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter
  id: CreateDbParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CreateDbParameter()
  nameWithType: SqlCommand.CreateDbParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateDbParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbParameter CreateDbParameter ();
    parameters: []
    return:
      type: System.Data.Common.DbParameter
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.CreateDbParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.CreateParameter
  id: CreateParameter
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: CreateParameter()
  nameWithType: SqlCommand.CreateParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateParameter()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlParameter&quot;> </xref> объекта."
  remarks: "Метод CreateParameter является строго типизированной версией <xref:System.Data.IDbCommand.CreateParameter%2A>.</xref:System.Data.IDbCommand.CreateParameter%2A>"
  syntax:
    content: public System.Data.SqlClient.SqlParameter CreateParameter ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlParameter
      description: "A <xref href=&quot;System.Data.SqlClient.SqlParameter&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.CreateParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
  fullName: System.Data.SqlClient.SqlCommand.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; set; }
    return:
      type: System.Data.Common.DbConnection
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection
  id: DbParameterCollection
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
  fullName: System.Data.SqlClient.SqlCommand.DbParameterCollection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbParameterCollection DbParameterCollection { get; }
    return:
      type: System.Data.Common.DbParameterCollection
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.DbParameterCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DbTransaction
  id: DbTransaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
  fullName: System.Data.SqlClient.SqlCommand.DbTransaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction DbTransaction { get; set; }
    return:
      type: System.Data.Common.DbTransaction
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.DbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  id: DesignTimeVisible
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
  fullName: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает значение, указывающее, должен ли объект команды быть видимым в элементе управления конструктора Windows Form."
  syntax:
    content: public override bool DesignTimeVisible { get; set; }
    return:
      type: System.Boolean
      description: "Значение, указывающее, должен ли объект команды быть видимым в элементе управления. Значение по умолчанию — **true**."
  overload: System.Data.SqlClient.SqlCommand.DesignTimeVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlCommand.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlCommand.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  id: EndExecuteNonQuery(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteNonQuery(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteNonQuery(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Завершает асинхронное выполнение инструкции Transact-SQL."
  remarks: "При вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>для выполнения [!INCLUDE[tsql](~/add/includes/tsql-md.md)] инструкции для завершения операции необходимо вызвать метод EndExecuteNonQuery.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> Если процесс выполнения команды не завершено, этот метод блокируется до завершения операции. Пользователи могут проверить, что команда завершения операции с помощью <xref:System.IAsyncResult>экземпляр, возвращаемый <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>метод.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A> </xref:System.IAsyncResult> Если процедура обратного вызова был указан при вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>, этот метод должен вызываться.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>"
  example:
  - For examples demonstrating the use of the EndExecuteNonQuery method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery%2A>.
  syntax:
    content: public int EndExecuteNonQuery (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: ", <xref:System.IAsyncResult>Возвращенный вызовом <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Число обработанных строк (поведение аналогично <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>).</xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>"
  overload: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>параметр имеет значение null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Метод EndExecuteNonQuery был вызван несколько раз для выполнения одной команды или неправильно подобран его метода выполнения (например, в код, вызываемый метод EndExecuteNonQuery для завершения выполнения вызова <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*> метод"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Количество времени, указанного в <> </> *настроек истекло, а асинхронная операция, указанная с <> </> *настроек не завершена.       В некоторых ситуациях <xref:System.IAsyncResult>может быть присвоено <xref uid=&quot;langword_csharp_IsCompleted&quot; name=&quot;IsCompleted&quot; href=&quot;&quot;> </xref> неправильно.</xref:System.IAsyncResult> Если это происходит, и вызывается метод EndExecuteNonQuery, метод EndExecuteNonQuery может вызвать ошибку SqlException, если количество времени, указанного в <> </> *настроек истекло, а асинхронная операция, указанная с <> </> *настроек не завершена. Чтобы исправить эту ситуацию, следует увеличить значение CommandTimeout или сокращения объема работы, выполняемой асинхронной операцией."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  id: EndExecuteReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteReader(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Завершает асинхронное выполнение инструкции Transact-SQL, возвращающей запрошенный <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>."
  remarks: "При вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для выполнения инструкции Transact-SQL, необходимо вызвать EndExecuteReader, чтобы завершить операцию.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Если процесс выполнения команды не завершено, этот метод блокируется до завершения операции. Пользователи могут проверить, что команда завершения операции с помощью <xref:System.IAsyncResult>экземпляр, возвращаемый <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>метод.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.IAsyncResult> Если процедура обратного вызова был указан при вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>, этот метод должен вызываться.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>"
  example:
  - For examples demonstrating the use of the EndExecuteReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>.
  syntax:
    content: public System.Data.SqlClient.SqlDataReader EndExecuteReader (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: ", <xref:System.IAsyncResult>Возвращенный вызовом <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader*> </xref:System.IAsyncResult>"
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "Объект <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> объекта, который может использоваться, чтобы получить запрашиваемые строки."
  overload: System.Data.SqlClient.SqlCommand.EndExecuteReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>параметр имеет значение null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndExecuteReader был вызван несколько раз для выполнения одной команды или неправильно подобран его метода выполнения (например, код EndExecuteReader для завершения выполнения вызова <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*> вызывается метод"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  id: EndExecuteXmlReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: EndExecuteXmlReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteXmlReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(IAsyncResult)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Завершает асинхронное выполнение инструкции Transact-SQL, возвращающей запрошенные данные в виде XML."
  remarks: "При вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для выполнения инструкции Transact-SQL, необходимо вызвать EndExecuteXmlReader, чтобы завершить операцию.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Если процесс выполнения команды не завершено, этот метод блокируется до завершения операции. Пользователи могут проверить, что команда завершения операции с помощью <xref:System.IAsyncResult>экземпляр, возвращаемый <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>метод.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.IAsyncResult> Если процедура обратного вызова был указан при вызове <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>, этот метод должен вызываться.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>"
  example:
  - For examples demonstrating the use of the EndExecuteXmlReader method, see <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>.
  syntax:
    content: public System.Xml.XmlReader EndExecuteXmlReader (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: ", <xref:System.IAsyncResult>Возвращенный вызовом <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*> </xref:System.IAsyncResult>"
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Объект, который может использоваться для получения результирующего XML-данных.</xref:System.Xml.XmlReader>"
  overload: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>параметр имеет значение null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Microsoft Visual Basic)"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndExecuteXmlReader был вызван несколько раз для выполнения одной команды или неправильно подобран его метода выполнения (например, код EndExecuteXmlReader для завершения выполнения вызова <xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*>.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*> вызывается метод"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  id: ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbDataReader ExecuteDbDataReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Для добавления."
    return:
      type: System.Data.Common.DbDataReader
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Data.Common.DbDataReader> ExecuteDbDataReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Для добавления."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Для добавления."
    return:
      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
      description: "Для добавления."
  overload: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  id: ExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteNonQuery()
  nameWithType: SqlCommand.ExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Выполняет инструкцию Transact-SQL для соединения и возвращает количество затронутых строк."
  remarks: "ExecuteNonQuery можно использовать для выполнения операций с каталогом (например, запрос структуры базы данных или создание объектов базы данных, таких как таблицы) или для изменения данных в базе данных без использования <xref:System.Data.DataSet>путем выполнения инструкций UPDATE, INSERT или DELETE.</xref:System.Data.DataSet>       Несмотря на то, что ExecuteNonQuery не возвращает строк, любые выходные параметры или возвращаемые значения, которые сопоставлены с параметрами, заполняются данными.       Для инструкций UPDATE, INSERT и DELETE возвращаемое значение — количество строк, затронутых этой командой. Если триггер расположена в таблице, вставленных или обновленных, возвращаемое значение включает количество строк, затронутых при операции вставки или обновления и количество строк, затронутых триггерами. Для всех других типов инструкций возвращаемое значение-1. В случае отката возвращаемое значение также равно -1."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteNonQuery. The example is passed a string that is a Transact-SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._23_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._23_1.vb)]"
  syntax:
    content: public override int ExecuteNonQuery ();
    parameters: []
    return:
      type: System.Int32
      description: "Число обработанных строк."
  overload: System.Data.SqlClient.SqlCommand.ExecuteNonQuery*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Произошло исключение при выполнении команды в заблокированной строке. Это исключение не создается, когда вы используете Microsoft .NET Framework версии 1.0.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteNonQueryAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*>, которая выполняет [!INCLUDE[tsql](~/add/includes/tsql-md.md)] инструкции для подключения и возвращает количество затронутых строк.</xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery*> Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Threading.Tasks.Task<int> ExecuteNonQueryAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов ExecuteNonQueryAsync более одного раза для того же экземпляра до завершения задачи.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader
  id: ExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReader()
  nameWithType: SqlCommand.ExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Отправляет <> </> *настроек для <> </> *настроек и создает <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>."
  remarks: "Когда <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>свойству `StoredProcedure`, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>свойство должно быть присвоено имя хранимой процедуры.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> Команда выполняет эту хранимую процедуру при вызове ExecuteReader.      Настроек [!NOTE] настроек Если взаимоблокировка транзакции, может не быть исключение до <xref:System.Data.SqlClient.SqlDataReader.Read%2A>называется.</xref:System.Data.SqlClient.SqlDataReader.Read%2A>       Несколько активных результирующих набора (режим MARS) позволяет несколько действий, в том же соединении.       Если вы используете ExecuteReader или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._22_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteReader Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._22_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlDataReader ExecuteReader ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Произошло исключение при выполнении команды в заблокированной строке. Это исключение не создается, когда вы используете Microsoft .NET Framework версии 1.0.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Текущее состояние соединения закрывается. ExecuteReader требуется открытое <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  id: ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Отправляет <> </> *настроек для <> </> *настроек и строит <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> с помощью одного из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
  remarks: "Когда <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>свойству `StoredProcedure`, <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>свойство должно быть присвоено имя хранимой процедуры.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> </xref:System.Data.SqlClient.SqlCommand.CommandType%2A> Команда выполняет эту хранимую процедуру при вызове <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>.</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>      Настроек [!NOTE] настроек используйте <xref:System.Data.CommandBehavior>для получения больших значений и двоичные данные.</xref:System.Data.CommandBehavior> В противном случае <xref:System.OutOfMemoryException>может возникнуть, и соединение будет закрыто.</xref:System.OutOfMemoryException>       Несколько активных результирующих набора (режим MARS) позволяет несколько действий, в том же соединении.       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте <xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand>, and then executes it by passing a string that is a Transact-SQL SELECT statement, and a string to use to connect to the data source. <xref:System.Data.CommandBehavior> is set to <xref:System.Data.CommandBehavior>.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/csharp/m-system.data.sqlclient._14_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteReader2#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._14_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlDataReader ExecuteReader (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Один из <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значения."
    return:
      type: System.Data.SqlClient.SqlDataReader
      description: "A <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref> object."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  id: ExecuteReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync()
  nameWithType: SqlCommand.ExecuteReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*> Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимый <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значение."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов ExecuteReaderAsync более одного раза для того же экземпляра до завершения задачи.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  id: ExecuteReaderAsync(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*> Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Data.CommandBehavior behavior);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Параметры для извлечения данных и выполнения инструкции.  Если задано значение <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;> </xref>, <xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>считывает всю строку перед возвращением выполненной задачи.</xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>"
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимый <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значение."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов ExecuteReaderAsync более одного раза для того же экземпляра до завершения задачи.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>.</xref:System.Data.SqlClient.SqlCommand.Connection*>       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимый <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значение."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*>более одного раза для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*>       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  id: ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref> токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.</xref:System.Data.SqlClient.SqlCommand.Connection*>  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader> ExecuteReaderAsync (System.Data.CommandBehavior behavior, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Параметры для извлечения данных и выполнения инструкции.  Если задано значение <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;> </xref>, <xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>считывает всю строку перед возвращением выполненной задачи.</xref:System.Data.SqlClient.SqlDataReader.ReadAsync*>"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимый <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> значение."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов ExecuteReaderAsync более одного раза для того же экземпляра до завершения задачи.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar
  id: ExecuteScalar
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteScalar()
  nameWithType: SqlCommand.ExecuteScalar()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalar()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Выполняет запрос и возвращает первый столбец первой строки в наборе результатов, возвращаемых запросом. Дополнительные столбцы или строки пропускаются."
  remarks: "Метод ExecuteScalar для получения одного значения (например, статистическое значение) из базы данных. Это требует меньше кода, чем с помощью <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>метода, а затем возможность выполнения операций, которые необходимо создать одно значение, используя данные, возвращенные <xref:System.Data.SqlClient.SqlDataReader>.</xref:System.Data.SqlClient.SqlDataReader> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>       Типичный запрос ExecuteScalar может быть отформатирован как в следующем примере на C#:```   cmd.CommandText = &quot;SELECT COUNT(*) FROM dbo.region&quot;;   Int32 count = (Int32) cmd.ExecuteScalar();   ```"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteScalar. The example is passed a string representing a new value to be inserted into a table, and a string to use to connect to the data source. The function returns the new **Identity** column value if a new row was inserted, 0 on failure.  \n  \n [!code-vb[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._31_1.vb)]\n [!code-cs[DataWorks SqlCommand.ExecuteScalar#1](~/add/codesnippet/csharp/m-system.data.sqlclient._31_1.cs)]"
  syntax:
    content: public override object ExecuteScalar ();
    parameters: []
    return:
      type: System.Object
      description: "Первый столбец первой строки в результирующем наборе, или пустая ссылка (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> в Visual Basic), если результирующий набор пуст. Возвращает не более 2033 символов."
  overload: System.Data.SqlClient.SqlCommand.ExecuteScalar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Произошло исключение при выполнении команды в заблокированной строке. Это исключение не создается, когда вы используете Microsoft .NET Framework версии 1.0.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  id: ExecuteScalarAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteScalarAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteScalarAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <xref:System.Data.SqlClient.SqlCommand.ExecuteScalar*>, который асинхронно выполняет запрос и возвращает первый столбец первой строки в наборе результатов, возвращаемых запросом.</xref:System.Data.SqlClient.SqlCommand.ExecuteScalar*> Дополнительные столбцы или строки пропускаются.       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды. Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Threading.Tasks.Task<object> ExecuteScalarAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов ExecuteScalarAsync более одного раза для того же экземпляра до завершения задачи.       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  id: ExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReader()
  nameWithType: SqlCommand.ExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReader()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Отправляет <> </> *настроек для <> </> *настроек и создает <xref:System.Xml.XmlReader>объекта.</xref:System.Xml.XmlReader>"
  remarks: "<xref:System.Data.SqlClient.SqlCommand.CommandText%2A>Свойство обычно указывает [!INCLUDE[tsql](~/add/includes/tsql-md.md)] инструкции с предложением FOR XML допустимым.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A> Тем не менее <xref:System.Data.SqlClient.SqlCommand.CommandText%2A>можно также указать инструкцию, возвращающую `ntext` или `nvarchar` данных, которая содержит допустимый XML-код или содержимое столбца, определенного с `xml` тип данных.</xref:System.Data.SqlClient.SqlCommand.CommandText%2A>       Типичный запрос ExecuteXmlReader может быть отформатирован как в следующем примере Microsoft Visual C#: ```   SqlCommand command = new SqlCommand(&quot;SELECT * FROM dbo.Customers FOR XML AUTO, XMLDATA&quot;, SqlConn);   ``` этот метод может также использоваться для получения одной строки и одного столбца результирующего набора, содержащего данные XML. В этом случае, если возвращается более одной строки, метод ExecuteXmlReader прикрепляет <xref:System.Xml.XmlReader>значение на пересечении первой строки и удаляет набор rest результата.</xref:System.Xml.XmlReader>       Несколько активных результирующих набора (режим MARS) позволяет несколько действий, в том же соединении.       Если вы используете <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A>для доступа к данным XML, SQL Server вернет никаких результатов XML больше 2,033 символов в длину в нескольких строках 2,033 символов.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteReader%2A> </xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> Чтобы избежать этого, используйте ExecuteXmlReader или <xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A>для чтения запросы FOR XML.</xref:System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader%2A> Дополнительные сведения см. в статье Q310378, «PRB: XML данных является усеченное при вы используйте SqlDataReader,» в базе знаний Майкрософт на http://support.microsoft.com."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and then executes it using ExecuteXmlReader. The example is passed a string that is a Transact-SQL FOR XML SELECT statement, and a string to use to connect to the data source.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/csharp/m-system.data.sqlclient._42_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteXmlReader#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._42_1.vb)]"
  syntax:
    content: public System.Xml.XmlReader ExecuteXmlReader ();
    parameters: []
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>Объект.</xref:System.Xml.XmlReader>"
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReader*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Произошло исключение при выполнении команды в заблокированной строке. Это исключение не создается, когда вы используете Microsoft .NET Framework версии 1.0.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  id: ExecuteXmlReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReaderAsync()
  nameWithType: SqlCommand.ExecuteXmlReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref:System.Xml.XmlReader>объекта.</xref:System.Xml.XmlReader> </xref:System.Data.SqlClient.SqlCommand.Connection*>       Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>более одного раза для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  id: ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ExecuteXmlReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия <> </> *настроек, которая отправляет <> </> *настроек для <xref:System.Data.SqlClient.SqlCommand.Connection*>и строит <xref:System.Xml.XmlReader>объекта.</xref:System.Xml.XmlReader> </xref:System.Data.SqlClient.SqlCommand.Connection*>       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Xml.XmlReader> ExecuteXmlReaderAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены."
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlReader}
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "A <>*> other than **Binary** or **VarBinary** was used when <>*> was set to <xref:System.IO.Stream>.</xref:System.IO.Stream> Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](~/add/includes/ajax-current-ext-md.md).       A <>*> other than **Char**, **NChar**, **NVarChar**, **VarChar**, or  **Xml** was used when <>*> was set to <xref:System.IO.TextReader>.</xref:System.IO.TextReader>       A <>*> other than **Xml** was used when <>*> was set to <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>более одного раза для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*>       <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Закрытое или удаленное во время операции потоковой передачи. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md).       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]вернул ошибку во время выполнения текста команды.       Во время операции потоковой передачи истекло время ожидания. Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Произошла ошибка в <xref:System.IO.Stream>, <xref:System.Xml.XmlReader>или <xref:System.IO.TextReader>объекта во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.IO.Stream>, <xref:System.Xml.XmlReader>Или <xref:System.IO.TextReader>объект был закрыт во время операции потоковой передачи.</xref:System.IO.TextReader> </xref:System.Xml.XmlReader> </xref:System.IO.Stream>  Дополнительные сведения о потоковой передаче см. в разделе [поддержка потоковой передачи SqlClient](../Topic/SqlClient%20Streaming%20Support.md)."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Notification
  id: Notification
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Notification
  nameWithType: SqlCommand.Notification
  fullName: System.Data.SqlClient.SqlCommand.Notification
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает значение, указывающее <xref href=&quot;System.Data.Sql.SqlNotificationRequest&quot;> </xref> объект, связанный с данной командой."
  remarks: "Перед выполнением команды для него вступили в силу, необходимо задать значение для этого свойства."
  syntax:
    content: public System.Data.Sql.SqlNotificationRequest Notification { get; set; }
    return:
      type: System.Data.Sql.SqlNotificationRequest
      description: "При задании значения null (по умолчанию), следует запросить уведомлений нет."
  overload: System.Data.SqlClient.SqlCommand.Notification*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  id: NotificationAutoEnlist
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
  fullName: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает значение, указывающее, должно ли приложение автоматически получать уведомления о запросах от общего <xref href=&quot;System.Data.SqlClient.SqlDependency&quot;> </xref> объекта."
  remarks: "Эта функция используется в приложениях ASP.NET для получения уведомления для всех команд, выполняющихся на ASP-странице в SQL Server. Это позволяет ASP.NET кэшировать страницы, пока запросы, используемые для визуализации страницы приведет к получению разный результат. Автоматическое прикрепление.       Это свойство применяется только к версиям SQL Server, поддерживают уведомления о запросах. Для более ранних версий, присвоив этому свойству значение **true** не влияет на приложения."
  syntax:
    content: public bool NotificationAutoEnlist { get; set; }
    return:
      type: System.Boolean
      description: '**значение true,** Если приложение должно автоматически получать уведомления о запросах; в противном случае **false**. Значение по умолчанию — **true**.'
  overload: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Parameters
  id: Parameters
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Parameters
  nameWithType: SqlCommand.Parameters
  fullName: System.Data.SqlClient.SqlCommand.Parameters
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Gets the <xref href=&quot;System.Data.SqlClient.SqlParameterCollection&quot;></xref>."
  remarks: "Поставщик данных Microsoft .NET Framework для SQL Server не поддерживает прототип вопросительного знака (?) для передачи параметров в инструкцию SQL или хранимая процедура вызывается с помощью команды `CommandType.Text`. В этом случае необходимо использовать именованные параметры. Например: ВЫБЕРИТЕ * из клиентов WHERE CustomerID = @CustomerID настроек [!NOTE] настроек Если параметры в коллекции не соответствуют требованиям для выполнения запроса, то может возникнуть ошибка.       Дополнительные сведения см. в разделе [Настройка параметров и типов данных параметров](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to create a <xref:System.Data.SqlClient.SqlCommand> and add parameters to the <xref:System.Data.SqlClient.SqlParameterCollection>.  \n  \n [!code-vb[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._32_1.vb)]\n [!code-cs[DataWorks SqlParameterCollection.AddWithValue#1](~/add/codesnippet/csharp/p-system.data.sqlclient._32_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlParameterCollection Parameters { get; }
    return:
      type: System.Data.SqlClient.SqlParameterCollection
      description: "Параметры инструкции Transact-SQL или хранимой процедуры. Значение по умолчанию является пустой коллекцией."
  overload: System.Data.SqlClient.SqlCommand.Parameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Prepare
  id: Prepare
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Prepare()
  nameWithType: SqlCommand.Prepare()
  fullName: System.Data.SqlClient.SqlCommand.Prepare()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает подготовленную версию команды в экземпляре SQL Server."
  remarks: "Если <xref:System.Data.SqlClient.SqlCommand.CommandType%2A>имеет значение `StoredProcedure`, вызов Подготовка должны выполняться успешно, несмотря на то, что может привести к нет-op.</xref:System.Data.SqlClient.SqlCommand.CommandType%2A>       Перед вызовом метода подготовки, укажите тип данных каждого параметра в подготавливаемой инструкции. Для каждого параметра, имеющего тип данных переменной длины, необходимо задать <xref:System.Data.SqlClient.SqlParameter.Size%2A>Свойства для максимального размера, необходимого.</xref:System.Data.SqlClient.SqlParameter.Size%2A> Подготовка возвращает сообщение об ошибке, если эти условия не выполняются.      Настроек [!NOTE] настроек Если контекст базы данных изменяется с помощью Transact-SQL `USE <database>` инструкции, или путем вызова <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>метода, а затем подготовить должен вызываться во второй раз.</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>       При вызове метода `Execute` метод после вызова Prepare, все значения параметров, больше, чем значение, указанное в <xref:System.Data.SqlClient.SqlParameter.Size%2A>свойство автоматически усекается до исходного размера указанного параметра, а ошибки усечения не возвращаются.</xref:System.Data.SqlClient.SqlParameter.Size%2A>       Выходные параметры (как подготовленные или нет) должен иметь тип данных, определяемый пользователем. Если указать тип данных переменной длины, необходимо также указать максимальное <xref:System.Data.SqlClient.SqlParameter.Size%2A>.</xref:System.Data.SqlClient.SqlParameter.Size%2A>       До Visual Studio 2010 подготовка вызвал исключение.  Начиная с Visual Studio 2010, этот метод не вызывает исключение."
  example:
  - "The following example demonstrates the use of the Prepare method.  \n  \n [!code-vb[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._45_1.vb)]\n [!code-cs[Classic WebData SqlCommand.Prepare#1](~/add/codesnippet/csharp/m-system.data.sqlclient._45_1.cs)]"
  syntax:
    content: public override void Prepare ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.Prepare*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  id: ResetCommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: ResetCommandTimeout()
  nameWithType: SqlCommand.ResetCommandTimeout()
  fullName: System.Data.SqlClient.SqlCommand.ResetCommandTimeout()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Сбрасывает <xref:System.Data.SqlClient.SqlCommand.CommandTimeout*>свойство в значение по умолчанию.</xref:System.Data.SqlClient.SqlCommand.CommandTimeout*>"
  remarks: "Значение по умолчанию <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>составляет 30 секунд.</xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>"
  syntax:
    content: public void ResetCommandTimeout ();
    parameters: []
  overload: System.Data.SqlClient.SqlCommand.ResetCommandTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.StatementCompleted
  id: StatementCompleted
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: StatementCompleted
  nameWithType: SqlCommand.StatementCompleted
  fullName: System.Data.SqlClient.SqlCommand.StatementCompleted
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возникает при завершении выполнения инструкции Transact-SQL."
  syntax:
    content: public event System.Data.StatementCompletedEventHandler StatementCompleted;
    return:
      type: System.Data.StatementCompletedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlCommand.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlCommand.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Создает новый <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, являющийся копией текущего экземпляра."
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Новый <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> объект, являющийся копией этого экземпляра."
  overload: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.Transaction
  id: Transaction
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: Transaction
  nameWithType: SqlCommand.Transaction
  fullName: System.Data.SqlClient.SqlCommand.Transaction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> в течение которого <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref> выполняет."
  remarks: "Невозможно задать свойство транзакции, если оно уже задано конкретное значение и команда находится в процессе выполнения. Если значение свойства transaction <xref:System.Data.SqlClient.SqlTransaction>объект, который не подключен к тому же <xref:System.Data.SqlClient.SqlConnection>как <xref:System.Data.SqlClient.SqlCommand>объекта, возникает исключение при попытке выполнить инструкцию очередном.</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlTransaction>"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction Transaction { get; set; }
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "The <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;></xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlCommand.Transaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  id: UpdatedRowSource
  parent: System.Data.SqlClient.SqlCommand
  langs:
  - csharp
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
  fullName: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает или задает способ применения результатов команды к <xref href=&quot;System.Data.DataRow&quot;> </xref> при использовании **обновление** метод <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "Значение по умолчанию <xref:System.Data.UpdateRowSource>значение **оба** Если команда не создается автоматически (как в случае <xref:System.Data.SqlClient.SqlCommandBuilder>), в этом случае значение по умолчанию — **нет**.</xref:System.Data.SqlClient.SqlCommandBuilder> </xref:System.Data.UpdateRowSource>       Дополнительные сведения об использовании **UpdatedRowSource** свойство, в разделе [параметры DataAdapter](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public override System.Data.UpdateRowSource UpdatedRowSource { get; set; }
    return:
      type: System.Data.UpdateRowSource
      description: "Один из <xref href=&quot;System.Data.UpdateRowSource&quot;> </xref> значения."
  overload: System.Data.SqlClient.SqlCommand.UpdatedRowSource*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbCommand
  isExternal: false
  name: System.Data.Common.DbCommand
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlCommand.#ctor
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand()
  nameWithType: SqlCommand.SqlCommand()
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand()
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String)
  nameWithType: SqlCommand.SqlCommand(String)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection,SqlTransaction)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlCommand.#ctor(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.SqlClient.SqlCommandColumnEncryptionSetting)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  nameWithType: SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
  fullName: System.Data.SqlClient.SqlCommand.SqlCommand(String,SqlConnection,SqlTransaction,SqlCommandColumnEncryptionSetting)
- uid: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommandColumnEncryptionSetting
  nameWithType: SqlCommandColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommandColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery()
  nameWithType: SqlCommand.BeginExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery()
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery(AsyncCallback,Object)
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader()
  nameWithType: SqlCommand.BeginExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader()
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object)
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  nameWithType: SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteReader(AsyncCallback,Object,CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader()
  nameWithType: SqlCommand.BeginExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader()
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader(AsyncCallback,Object)
  nameWithType: SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
  fullName: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader(AsyncCallback,Object)
- uid: System.Data.SqlClient.SqlCommand.Cancel
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Cancel()
  nameWithType: SqlCommand.Cancel()
  fullName: System.Data.SqlClient.SqlCommand.Cancel()
- uid: System.Data.SqlClient.SqlCommand.Clone
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Clone()
  nameWithType: SqlCommand.Clone()
  fullName: System.Data.SqlClient.SqlCommand.Clone()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.CommandText
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandText
  nameWithType: SqlCommand.CommandText
  fullName: System.Data.SqlClient.SqlCommand.CommandText
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
  fullName: System.Data.SqlClient.SqlCommand.CommandTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlCommand.CommandType
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandType
  nameWithType: SqlCommand.CommandType
  fullName: System.Data.SqlClient.SqlCommand.CommandType
- uid: System.Data.CommandType
  parent: System.Data
  isExternal: false
  name: CommandType
  nameWithType: CommandType
  fullName: System.Data.CommandType
- uid: System.Data.SqlClient.SqlCommand.Connection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Connection
  nameWithType: SqlCommand.Connection
  fullName: System.Data.SqlClient.SqlCommand.Connection
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateDbParameter()
  nameWithType: SqlCommand.CreateDbParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateDbParameter()
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.SqlClient.SqlCommand.CreateParameter
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateParameter()
  nameWithType: SqlCommand.CreateParameter()
  fullName: System.Data.SqlClient.SqlCommand.CreateParameter()
- uid: System.Data.SqlClient.SqlParameter
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameter
  nameWithType: SqlParameter
  fullName: System.Data.SqlClient.SqlParameter
- uid: System.Data.SqlClient.SqlCommand.DbConnection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
  fullName: System.Data.SqlClient.SqlCommand.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
  fullName: System.Data.SqlClient.SqlCommand.DbParameterCollection
- uid: System.Data.Common.DbParameterCollection
  parent: System.Data.Common
  isExternal: false
  name: DbParameterCollection
  nameWithType: DbParameterCollection
  fullName: System.Data.Common.DbParameterCollection
- uid: System.Data.SqlClient.SqlCommand.DbTransaction
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
  fullName: System.Data.SqlClient.SqlCommand.DbTransaction
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
  fullName: System.Data.SqlClient.SqlCommand.DesignTimeVisible
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlCommand.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlCommand.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlCommand.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteNonQuery(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteNonQuery(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult)
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteReader(IAsyncResult)
- uid: System.Data.SqlClient.SqlDataReader
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteXmlReader(IAsyncResult)
  nameWithType: SqlCommand.EndExecuteXmlReader(IAsyncResult)
  fullName: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(IAsyncResult)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteDbDataReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync(CommandBehavior,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<DbDataReader>
  nameWithType: Task<DbDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.Common.DbDataReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Data.Common.DbDataReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: DbDataReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQuery()
  nameWithType: SqlCommand.ExecuteNonQuery()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQueryAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteNonQueryAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync(CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader()
  nameWithType: SqlCommand.ExecuteReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader()
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReader(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync()
  nameWithType: SqlCommand.ExecuteReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync()
- uid: System.Threading.Tasks.Task{System.Data.SqlClient.SqlDataReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<SqlDataReader>
  nameWithType: Task<SqlDataReader>
  fullName: System.Threading.Tasks.Task<System.Data.SqlClient.SqlDataReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Data.SqlClient.SqlDataReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.SqlClient.SqlDataReader
    name: SqlDataReader
    nameWithType: SqlDataReader
    fullName: SqlDataReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CommandBehavior)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync(CommandBehavior,CancellationToken)
  nameWithType: SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync(CommandBehavior,CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalar()
  nameWithType: SqlCommand.ExecuteScalar()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalar()
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalarAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteScalarAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync(CancellationToken)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReader()
  nameWithType: SqlCommand.ExecuteXmlReader()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReader()
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync()
  nameWithType: SqlCommand.ExecuteXmlReaderAsync()
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync()
- uid: System.Threading.Tasks.Task{System.Xml.XmlReader}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<XmlReader>
  nameWithType: Task<XmlReader>
  fullName: System.Threading.Tasks.Task<System.Xml.XmlReader>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Xml.XmlReader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: XmlReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync(CancellationToken)
  nameWithType: SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlCommand.Notification
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Notification
  nameWithType: SqlCommand.Notification
  fullName: System.Data.SqlClient.SqlCommand.Notification
- uid: System.Data.Sql.SqlNotificationRequest
  parent: System.Data.Sql
  isExternal: false
  name: SqlNotificationRequest
  nameWithType: SqlNotificationRequest
  fullName: System.Data.Sql.SqlNotificationRequest
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
  fullName: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist
- uid: System.Data.SqlClient.SqlCommand.Parameters
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Parameters
  nameWithType: SqlCommand.Parameters
  fullName: System.Data.SqlClient.SqlCommand.Parameters
- uid: System.Data.SqlClient.SqlParameterCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlParameterCollection
  nameWithType: SqlParameterCollection
  fullName: System.Data.SqlClient.SqlParameterCollection
- uid: System.Data.SqlClient.SqlCommand.Prepare
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Prepare()
  nameWithType: SqlCommand.Prepare()
  fullName: System.Data.SqlClient.SqlCommand.Prepare()
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ResetCommandTimeout()
  nameWithType: SqlCommand.ResetCommandTimeout()
  fullName: System.Data.SqlClient.SqlCommand.ResetCommandTimeout()
- uid: System.Data.SqlClient.SqlCommand.StatementCompleted
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: StatementCompleted
  nameWithType: SqlCommand.StatementCompleted
  fullName: System.Data.SqlClient.SqlCommand.StatementCompleted
- uid: System.Data.StatementCompletedEventHandler
  parent: System.Data
  isExternal: false
  name: StatementCompletedEventHandler
  nameWithType: StatementCompletedEventHandler
  fullName: System.Data.StatementCompletedEventHandler
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlCommand.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlCommand.System.ICloneable.Clone()
- uid: System.Data.SqlClient.SqlCommand.Transaction
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Transaction
  nameWithType: SqlCommand.Transaction
  fullName: System.Data.SqlClient.SqlCommand.Transaction
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
  fullName: System.Data.SqlClient.SqlCommand.UpdatedRowSource
- uid: System.Data.UpdateRowSource
  parent: System.Data
  isExternal: false
  name: UpdateRowSource
  nameWithType: UpdateRowSource
  fullName: System.Data.UpdateRowSource
- uid: System.Data.SqlClient.SqlCommand.#ctor*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand.SqlCommand
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteNonQuery
  nameWithType: SqlCommand.BeginExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteReader
  nameWithType: SqlCommand.BeginExecuteReader
- uid: System.Data.SqlClient.SqlCommand.BeginExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: BeginExecuteXmlReader
  nameWithType: SqlCommand.BeginExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.Cancel*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Cancel
  nameWithType: SqlCommand.Cancel
- uid: System.Data.SqlClient.SqlCommand.Clone*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Clone
  nameWithType: SqlCommand.Clone
- uid: System.Data.SqlClient.SqlCommand.ColumnEncryptionSetting*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlCommand.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlCommand.CommandText*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandText
  nameWithType: SqlCommand.CommandText
- uid: System.Data.SqlClient.SqlCommand.CommandTimeout*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandTimeout
  nameWithType: SqlCommand.CommandTimeout
- uid: System.Data.SqlClient.SqlCommand.CommandType*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CommandType
  nameWithType: SqlCommand.CommandType
- uid: System.Data.SqlClient.SqlCommand.Connection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Connection
  nameWithType: SqlCommand.Connection
- uid: System.Data.SqlClient.SqlCommand.CreateDbParameter*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateDbParameter
  nameWithType: SqlCommand.CreateDbParameter
- uid: System.Data.SqlClient.SqlCommand.CreateParameter*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: CreateParameter
  nameWithType: SqlCommand.CreateParameter
- uid: System.Data.SqlClient.SqlCommand.DbConnection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbConnection
  nameWithType: SqlCommand.DbConnection
- uid: System.Data.SqlClient.SqlCommand.DbParameterCollection*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbParameterCollection
  nameWithType: SqlCommand.DbParameterCollection
- uid: System.Data.SqlClient.SqlCommand.DbTransaction*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DbTransaction
  nameWithType: SqlCommand.DbTransaction
- uid: System.Data.SqlClient.SqlCommand.DesignTimeVisible*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: DesignTimeVisible
  nameWithType: SqlCommand.DesignTimeVisible
- uid: System.Data.SqlClient.SqlCommand.Dispose*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Dispose
  nameWithType: SqlCommand.Dispose
- uid: System.Data.SqlClient.SqlCommand.EndExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteNonQuery
  nameWithType: SqlCommand.EndExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.EndExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteReader
  nameWithType: SqlCommand.EndExecuteReader
- uid: System.Data.SqlClient.SqlCommand.EndExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: EndExecuteXmlReader
  nameWithType: SqlCommand.EndExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReader
  nameWithType: SqlCommand.ExecuteDbDataReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteDbDataReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteDbDataReaderAsync
  nameWithType: SqlCommand.ExecuteDbDataReaderAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQuery*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQuery
  nameWithType: SqlCommand.ExecuteNonQuery
- uid: System.Data.SqlClient.SqlCommand.ExecuteNonQueryAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteNonQueryAsync
  nameWithType: SqlCommand.ExecuteNonQueryAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReader
  nameWithType: SqlCommand.ExecuteReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteReaderAsync
  nameWithType: SqlCommand.ExecuteReaderAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalar*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalar
  nameWithType: SqlCommand.ExecuteScalar
- uid: System.Data.SqlClient.SqlCommand.ExecuteScalarAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteScalarAsync
  nameWithType: SqlCommand.ExecuteScalarAsync
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReader*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReader
  nameWithType: SqlCommand.ExecuteXmlReader
- uid: System.Data.SqlClient.SqlCommand.ExecuteXmlReaderAsync*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ExecuteXmlReaderAsync
  nameWithType: SqlCommand.ExecuteXmlReaderAsync
- uid: System.Data.SqlClient.SqlCommand.Notification*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Notification
  nameWithType: SqlCommand.Notification
- uid: System.Data.SqlClient.SqlCommand.NotificationAutoEnlist*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: NotificationAutoEnlist
  nameWithType: SqlCommand.NotificationAutoEnlist
- uid: System.Data.SqlClient.SqlCommand.Parameters*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Parameters
  nameWithType: SqlCommand.Parameters
- uid: System.Data.SqlClient.SqlCommand.Prepare*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Prepare
  nameWithType: SqlCommand.Prepare
- uid: System.Data.SqlClient.SqlCommand.ResetCommandTimeout*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: ResetCommandTimeout
  nameWithType: SqlCommand.ResetCommandTimeout
- uid: System.Data.SqlClient.SqlCommand.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlCommand.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlCommand.Transaction*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: Transaction
  nameWithType: SqlCommand.Transaction
- uid: System.Data.SqlClient.SqlCommand.UpdatedRowSource*
  parent: System.Data.SqlClient.SqlCommand
  isExternal: false
  name: UpdatedRowSource
  nameWithType: SqlCommand.UpdatedRowSource
