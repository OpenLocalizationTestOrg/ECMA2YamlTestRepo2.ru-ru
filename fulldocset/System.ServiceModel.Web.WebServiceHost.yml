### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Web.WebServiceHost
  id: WebServiceHost
  children:
  - System.ServiceModel.Web.WebServiceHost.#ctor
  - System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  - System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  - System.ServiceModel.Web.WebServiceHost.OnOpening
  langs:
  - csharp
  name: WebServiceHost
  nameWithType: WebServiceHost
  fullName: System.ServiceModel.Web.WebServiceHost
  type: Class
  summary: "Объект <xref href=&quot;System.ServiceModel.ServiceHost&quot;> </xref> производный класс, дополняющий [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] модели программирования REST."
  remarks: "Если WebServiceHost не обнаруживает конечные точки в описании службы, автоматически создает конечную точку по умолчанию по базовому адресу службы для базовых адресов HTTP и HTTPS. Он создает конечную точку автоматически, если пользователь явным образом настроил конечную точку по базовому адресу. WebServiceHost автоматически настраивает привязку конечной точки для работы со связанными параметрами безопасности Internet Information Services (IIS) при использовании в защищенном виртуальном каталоге.       При создании конечной точки HTTP по умолчанию, WebServiceHost также отключает страницу справки HTTP и функцию GET языка описания веб-служб (WSDL), конечная точка метаданных не мешала конечной точке HTTP по умолчанию.       Кроме того класс WebServiceHost добавляет <xref:System.ServiceModel.Description.WebHttpBehavior>ко всем конечным точкам, не сделали этого поведения и имеют <xref:System.ServiceModel.Configuration.WebMessageEncodingElement>.</xref:System.ServiceModel.Configuration.WebMessageEncodingElement> </xref:System.ServiceModel.Description.WebHttpBehavior> Если все операции службы либо пустой текст HTTP-запросов предусматривать текста HTTP-запроса, как поток, WebServiceHost автоматически настраивает соответствующее сопоставление типа содержимого для привязки."
  example:
  - "The following example shows how to use the WebServiceHost class to host a service that makes use of the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] REST programming model.  \n  \n [!code-cs[WebServiceHost#0](~/add/codesnippet/csharp/t-system.servicemodel.we_0_1.cs)]\n [!code-vb[WebServiceHost#0](~/add/codesnippet/visualbasic/t-system.servicemodel.we_0_1.vb)]"
  syntax:
    content: 'public class WebServiceHost : System.ServiceModel.ServiceHost'
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  - System.ServiceModel.ServiceHostBase
  - System.ServiceModel.ServiceHost
  implements: []
  inheritedMembers:
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHost.ApplyConfiguration
  - System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.OnClosed
  - System.ServiceModel.ServiceHost.SingletonInstance
  - System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)
  - System.ServiceModel.ServiceHostBase.AddDefaultEndpoints
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHostBase.Authentication
  - System.ServiceModel.ServiceHostBase.Authorization
  - System.ServiceModel.ServiceHostBase.BaseAddresses
  - System.ServiceModel.ServiceHostBase.ChannelDispatchers
  - System.ServiceModel.ServiceHostBase.CloseTimeout
  - System.ServiceModel.ServiceHostBase.Credentials
  - System.ServiceModel.ServiceHostBase.DefaultCloseTimeout
  - System.ServiceModel.ServiceHostBase.DefaultOpenTimeout
  - System.ServiceModel.ServiceHostBase.Description
  - System.ServiceModel.ServiceHostBase.Extensions
  - System.ServiceModel.ServiceHostBase.ImplementedContracts
  - System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)
  - System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHostBase.InitializeRuntime
  - System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)
  - System.ServiceModel.ServiceHostBase.ManualFlowControlLimit
  - System.ServiceModel.ServiceHostBase.OnAbort
  - System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnOpened
  - System.ServiceModel.ServiceHostBase.OpenTimeout
  - System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters
  - System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)
  - System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose
  - System.ServiceModel.ServiceHostBase.UnknownMessageReceived
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost()
  nameWithType: WebServiceHost.WebServiceHost()
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost()
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;> </xref> класса."
  syntax:
    content: public WebServiceHost ();
    parameters: []
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  id: '#ctor(System.Object,System.Uri[])'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost(Object,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Object,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Object,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;> </xref> класса указанного одиночного сервера экземпляром и базовым адресом."
  remarks: "`baseAddresses` Может состоять из одного или нескольких базовых адресов."
  example:
  - "The following example shows how to call this constructor.  \n  \n [!code-cs[WebServiceHost#1](~/add/codesnippet/csharp/m-system.servicemodel.we_1_1.cs)]\n [!code-vb[WebServiceHost#1](~/add/codesnippet/visualbasic/m-system.servicemodel.we_1_1.vb)]"
  syntax:
    content: public WebServiceHost (object singletonInstance, Uri[] baseAddresses);
    parameters:
    - id: singletonInstance
      type: System.Object
      description: "Экземпляр службы для использования в качестве одноэлементного экземпляра."
    - id: baseAddresses
      type: System.Uri[]
      description: "Базовый адрес службы."
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  id: '#ctor(System.Type,System.Uri[])'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost(Type,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Type,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;> </xref> класса с типом и базовым адресом указанной службы."
  remarks: "`baseAddresses` Может состоять из одного или нескольких базовых адресов."
  example:
  - "The following example shows how to call this constructor.  \n  \n [!code-cs[WebServiceHost#2](~/add/codesnippet/csharp/m-system.servicemodel.we_0_1.cs)]\n [!code-vb[WebServiceHost#2](~/add/codesnippet/visualbasic/m-system.servicemodel.we_0_1.vb)]"
  syntax:
    content: public WebServiceHost (Type serviceType, Uri[] baseAddresses);
    parameters:
    - id: serviceType
      type: System.Type
      description: "Тип службы."
    - id: baseAddresses
      type: System.Uri[]
      description: "Базовый адрес службы."
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening
  id: OnOpening
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: OnOpening()
  nameWithType: WebServiceHost.OnOpening()
  fullName: System.ServiceModel.Web.WebServiceHost.OnOpening()
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "Вызывается, когда <xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;> </xref> открытии экземпляра."
  remarks: "При вызове этого метода происходит следующее: 1.  Если <xref:System.ServiceModel.Web.WebServiceHost>не обнаруживает конечные точки в описании службы, он создает конечную точку по умолчанию по базовому адресу службы.</xref:System.ServiceModel.Web.WebServiceHost> <xref:System.ServiceModel.Web.WebServiceHost>автоматически отключает страницу справки HTTP и функциональность WSDL GET, чтобы конечная точка метаданных не мешала конечной точке HTTP по умолчанию.</xref:System.ServiceModel.Web.WebServiceHost>      2.  <xref:System.ServiceModel.Web.WebServiceHost>проверяет все конечные точки, используют <xref:System.ServiceModel.WebHttpBinding>ли они имеют необходимые <xref:System.ServiceModel.Description.WebHttpBehavior>.</xref:System.ServiceModel.Description.WebHttpBehavior> </xref:System.ServiceModel.WebHttpBinding></xref:System.ServiceModel.Web.WebServiceHost> Если он отсутствует, <xref:System.ServiceModel.Web.WebServiceHost>добавляет <xref:System.ServiceModel.Description.WebHttpBehavior>для конечной точки.</xref:System.ServiceModel.Description.WebHttpBehavior> </xref:System.ServiceModel.Web.WebServiceHost>      3.  <xref:System.ServiceModel.Web.WebServiceHost>Настраивает привязку конечной точки для работы со связанными параметрами безопасности IIS при использовании в защищенном виртуальном каталоге.</xref:System.ServiceModel.Web.WebServiceHost>"
  syntax:
    content: protected override void OnOpening ();
    parameters: []
  overload: System.ServiceModel.Web.WebServiceHost.OnOpening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.ServiceHost
  isExternal: false
  name: System.ServiceModel.ServiceHost
- uid: System.ServiceModel.Web.WebServiceHost.#ctor
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost()
  nameWithType: WebServiceHost.WebServiceHost()
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost()
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost(Object,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Object,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Object,Uri[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri[]
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri[]
  spec.csharp:
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost(Type,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Type,Uri[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: OnOpening()
  nameWithType: WebServiceHost.OnOpening()
  fullName: System.ServiceModel.Web.WebServiceHost.OnOpening()
- uid: System.ServiceModel.Web.WebServiceHost.#ctor*
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost
  nameWithType: WebServiceHost.WebServiceHost
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening*
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: OnOpening
  nameWithType: WebServiceHost.OnOpening
