### YamlMime:ManagedReference
items:
- uid: System.IO.DirectoryInfo
  id: DirectoryInfo
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetAccessControl
  - System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  - System.IO.DirectoryInfo.ToString
  langs:
  - csharp
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  summary: "Предоставляет методы экземпляра для создания, перемещения и перечисления в каталогах и подкаталогах. Этот класс не наследуется.       Для просмотра исходного кода .NET Framework для этого типа, в разделе [ссылки на источник](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directoryinfo.cs#30fa608717e5ce8e). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the DirectoryInfo class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n If you are going to reuse an object several times, consider using the instance method of DirectoryInfo instead of the corresponding static methods of the <xref:System.IO.Directory> class, because a security check will not always be necessary.  \n  \n> [!NOTE]\n>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  \n  \n In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\\\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates some of the main members of the `DirectoryInfo` class.  \n  \n [!code-cpp[DirInfo Class Example#1](~/add/codesnippet/cpp/t-system.io.directoryinfo_1.cpp)]\n [!code-cs[DirInfo Class Example#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_1.cs)]\n [!code-vb[DirInfo Class Example#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_1.vb)]  \n  \n The following example demonstrates how to copy a directory and its contents.  \n  \n [!code-cs[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/csharp/t-system.io.directoryinfo_2.cs)]\n [!code-vb[IO.DirectoryInfo-CopyDir#1](~/add/codesnippet/visualbasic/t-system.io.directoryinfo_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class DirectoryInfo : System.IO.FileSystemInfo
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.FileSystemInfo
  implements: []
  inheritedMembers:
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Refresh
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> класс по указанному пути."
  remarks: "Этот конструктор не проверяет, существует ли указанная папка. Этот конструктор — это строки, которая используется для доступа к диску в последующих операциях.       `path` Параметр может быть именем файла, включая файл в общей папке соглашения об универсальных именах (UNC).      Настроек [!CAUTION] настроек при компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символов будет невозможно и может вызвать исключение, создаваемое исключение.       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses this constructor to create the specified directory and subdirectory, and demonstrates that a directory that contains subdirectories cannot be deleted.  \n  \n [!code-cs[DirInfo Ctor#1](~/add/codesnippet/csharp/m-system.io.directoryinf_18_1.cs)]\n [!code-cpp[DirInfo Ctor#1](~/add/codesnippet/cpp/m-system.io.directoryinf_18_1.cpp)]\n [!code-vb[DirInfo Ctor#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_18_1.vb)]"
  syntax:
    content: public DirectoryInfo (string path);
    parameters:
    - id: path
      type: System.String
      description: "Строка, содержащая путь создать <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.DirectoryInfo.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>содержит недопустимые символы, такие как «, &lt;, &gt;, или |."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Указанный путь и имя файла превышает максимальную длину, определенная системой. Например для платформ на основе Windows пути должна составлять менее 248 знаков и имена файлов должны быть короче 260 символов. Указанный путь, имя файла или оба имеют слишком большую длину."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Создает каталог."
  remarks: "Если каталог уже существует, этот метод не выполняет никаких действий.       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example checks whether a specified directory exists, creates the directory if it does not exist, and deletes the directory.  \n  \n [!code-cpp[DirInfo Create#1](~/add/codesnippet/cpp/m-system.io.directoryinf_11_1.cpp)]\n [!code-cs[DirInfo Create#1](~/add/codesnippet/csharp/m-system.io.directoryinf_11_1.cs)]\n [!code-vb[DirInfo Create#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_11_1.vb)]"
  syntax:
    content: public void Create ();
    parameters: []
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Не удается создать каталог."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  id: Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Создает каталог с помощью <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> объекта."
  remarks: "Данная перегрузка метода, чтобы создать каталог с использованием управления доступом, нет возможности, каталог может осуществляться до применения безопасности.       Если каталог уже существует, этот метод не выполняет никаких действий.       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "Управление доступом для применения к каталогу."
  overload: System.IO.DirectoryInfo.Create*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Каталог, заданный параметром <code> path </code> доступно только для чтения или не является пустым."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Вызывающий объект не имеет необходимых разрешений."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>представляет собой строку нулевой длины, содержащую только пробелы или содержит один или несколько недопустимых символов в соответствии с определением <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Указанный путь и имя файла превышает максимальную длину, определенная системой. Например для платформ на основе Windows пути должна составлять менее 248 знаков и имена файлов должны быть короче 260 символов."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Указанный путь является недопустимым, например, ведущий на несопоставленный диск."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Предпринята попытка создать каталог с единственным знаком двоеточия (:)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Создает один или несколько подкаталогов по заданному пути. Путь может быть задан относительно текущего экземпляра <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> класса."
  remarks: "Все каталоги, заданные в `path` создаются, если некоторая часть `path` является недопустимым. `path` Параметр указывает путь к каталогу, не путь к файлу. Если подкаталог уже существует, этот метод не выполняет никаких действий.      Настроек [!NOTE] настроек пути ограничена 248 знаков.       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates creating a subdirectory. In this example, the created directories are removed once created. Therefore, to test this sample, comment out the delete lines in the code.  \n  \n [!code-cpp[directoryinfocreatesub#1](~/add/codesnippet/cpp/m-system.io.directoryinf_9_1.cpp)]\n [!code-cs[directoryinfocreatesub#1](~/add/codesnippet/csharp/m-system.io.directoryinf_9_1.cs)]\n [!code-vb[directoryinfocreatesub#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_9_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "Указанный путь. Это не может быть другой том диска или имя соглашения об универсальных именах (UNC)."
    return:
      type: System.IO.DirectoryInfo
      description: "Последний каталог, указанный в <code> path </code>."
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>Указывает допустимый путь к файлу или содержит недопустимые <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> символов."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Указанный путь является недопустимым, например, ведущий на несопоставленный диск."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Не удается создать подкаталог.       - или - файл или каталог уже имеет имя, заданное <code> path </code>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Указанный путь и имя файла превышает максимальную длину, определенная системой. Например для платформ на основе Windows пути должна составлять менее 248 знаков и имена файлов должны быть короче 260 символов. Указанный путь, имя файла или оба имеют слишком большую длину."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет разрешения доступа к коду для создания каталога.       вызывающий объект не имеет разрешения доступа к коду для чтения каталога, описанного возвращаемым - или - <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта.  Это может произойти, когда <code> path </code> параметра указывает на существующий каталог."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>содержит двоеточие (:), которое не входит в состав метки диска (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Создает один или несколько подкаталогов по заданному пути с заданными параметрами безопасности. Путь может быть задан относительно текущего экземпляра <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> класса."
  remarks: "Все каталоги, заданные в `path` создаются, если некоторая часть `path` является недопустимым. `path` Параметр указывает путь к каталогу, не путь к файлу. Если подкаталог уже существует, этот метод не выполняет никаких действий.      Настроек [!NOTE] настроек пути ограничена 248 знаков.       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "Указанный путь. Это не может быть другой том диска или имя соглашения об универсальных именах (UNC)."
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "Чтобы применить параметры безопасности."
    return:
      type: System.IO.DirectoryInfo
      description: "Последний каталог, указанный в <code> path </code>."
  overload: System.IO.DirectoryInfo.CreateSubdirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>Указывает допустимый путь к файлу или содержит недопустимые <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> символов."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Указанный путь является недопустимым, например, ведущий на несопоставленный диск."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Не удается создать подкаталог.       - или - файл или каталог уже имеет имя, заданное <code> path </code>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Указанный путь и имя файла превышает максимальную длину, определенная системой. Например для платформ на основе Windows пути должна составлять менее 248 знаков и имена файлов должны быть короче 260 символов. Указанный путь, имя файла или оба имеют слишком большую длину."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет разрешения доступа к коду для создания каталога.       вызывающий объект не имеет разрешения доступа к коду для чтения каталога, описанного возвращаемым - или - <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта.  Это может произойти, когда <code> path </code> параметра указывает на существующий каталог."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>содержит двоеточие (:), которое не входит в состав метки диска (&quot;C:\\&quot;)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Удаляет этот <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> является пустым."
  remarks: "Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example throws an exception if you attempt to delete a directory that is not empty.  \n  \n [!code-cpp[DirInfo Delete1#1](~/add/codesnippet/cpp/m-system.io.directoryinf_4_1.cpp)]\n [!code-cs[DirInfo Delete1#1](~/add/codesnippet/csharp/m-system.io.directoryinf_4_1.cs)]\n [!code-vb[DirInfo Delete1#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_4_1.vb)]"
  syntax:
    content: public override void Delete ();
    parameters: []
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Каталог содержит файл, доступный только для чтения."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "К каталогу, описанному в этом <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта не существует или не найден."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Каталог не пуст.       - или - каталог находится текущий рабочий каталог приложения.       - или - имеется открытый дескриптор в каталоге, а операционной системой является Windows XP или более ранней версии. Этот открытый дескриптор может быть результатом перечисления каталогов. Дополнительные сведения см. в разделе [как: перечисление каталогов и файлов](~/add/includes/ajax-current-ext-md.md)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Удаляет данный экземпляр <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref>, указывая, следует ли удалить подкаталоги и файлы."
  remarks: "Если `DirectoryInfo` не содержит файлы и подкаталоги, этот метод удаляет `DirectoryInfo` даже в том случае, если `recursive` — `false`. Попытка удалить `DirectoryInfo` , не является пустым при `recursive` — `false` вызывает <xref:System.IO.IOException>.</xref:System.IO.IOException>       Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates deleting a directory. Because the directory is removed, first comment out the `Delete` line to test that the directory exists. Then uncomment the same line of code to test that the directory was removed successfully.  \n  \n [!code-vb[directoryinfodelete#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_16_1.vb)]\n [!code-cs[directoryinfodelete#1](~/add/codesnippet/csharp/m-system.io.directoryinf_16_1.cs)]\n [!code-cpp[directoryinfodelete#1](~/add/codesnippet/cpp/m-system.io.directoryinf_16_1.cpp)]"
  syntax:
    content: public void Delete (bool recursive);
    parameters:
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы удалить каталог, его подкаталоги и все файлы; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.DirectoryInfo.Delete*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Каталог содержит файл, доступный только для чтения."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "К каталогу, описанному в этом <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта не существует или не найден."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Каталог доступен только для чтения.       - или - каталог содержит файлы или подкаталоги и <code> recursive </code> — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.       - или - каталог находится текущий рабочий каталог приложения.       - или - имеется открытый дескриптор в каталоге или одного из его файлов и операционной системой является Windows XP или более ранней версии. Этот открытый дескриптор может быть результатом перечисления каталогов и файлов. Дополнительные сведения см. в разделе [как: перечисление каталогов и файлов](~/add/includes/ajax-current-ext-md.md)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о каталогах в текущем каталоге."
  remarks: "EnumerateDirectories и <xref:System.IO.DirectoryInfo.GetDirectories%2A>методы различаются следующим образом: — при использовании EnumerateDirectories, можно запустить перечислением набора <xref:System.IO.DirectoryInfo>объекты перед возвращением вся коллекция.</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>      -При использовании <xref:System.IO.DirectoryInfo.GetDirectories%2A>, необходимо дождаться весь массив <xref:System.IO.DirectoryInfo>объекты должны быть возвращены для доступа к массива.</xref:System.IO.DirectoryInfo> </xref:System.IO.DirectoryInfo.GetDirectories%2A>       Таким образом при работе с много файлов и папок, EnumerateDirectories может быть более эффективным.       Этот метод предварительно заполняет значения из следующих <xref:System.IO.DirectoryInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>возвращенной коллекции не кэшируются; при каждом вызове функции <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>метод коллекции начнет новое перечисление.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example enumerates the subdirectories under the C:\\Program Files directory and uses a LINQ query to return the names of all directories that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the subdirectories, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%29> method.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_8_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumDirs#1](~/add/codesnippet/csharp/m-system.io.directoryinf_8_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "Перечисляемая коллекция каталогов в текущем каталоге."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о каталогах, соответствующую указанному шаблону поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "Перечисляемая коллекция каталогов, соответствующая <code> searchPattern </code>."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о каталогах, соответствующую поиска шаблону и параметру поиска в подкаталог."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> and <xref:System.IO.DirectoryInfo.GetDirectories%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A>, you can start enumerating the collection of <xref:System.IO.DirectoryInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetDirectories%2A>, you must wait for the whole array of <xref:System.IO.DirectoryInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateDirectories%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on  the collection will start a new enumeration."
  example:
  - "The following example, starting from a specified directory, uses this method and the <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> method to enumerate the files and directories within the start directory and display details of any files over 10 MB in size.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/csharp/688c5354-9ee8-487c-ac88-_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumerateDirectories#1](~/add/codesnippet/visualbasic/688c5354-9ee8-487c-ac88-_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo> EnumerateDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах. Значение по умолчанию — <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: "Перечисляемая коллекция каталогов, соответствующая <code> searchPattern </code> и <code> searchOption </code>."
  overload: System.IO.DirectoryInfo.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файлах в текущем каталоге."
  remarks: "EnumerateFiles и <xref:System.IO.DirectoryInfo.GetFiles%2A>методы различаются следующим образом: — при использовании EnumerateFiles, можно запустить перечислением набора <xref:System.IO.FileInfo>объекты перед возвращением вся коллекция.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>      -При использовании <xref:System.IO.DirectoryInfo.GetFiles%2A>, необходимо дождаться весь массив <xref:System.IO.FileInfo>объекты должны быть возвращены для доступа к массива.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFiles%2A>       Таким образом при работе с много файлов и папок, EnumerateFiles может быть более эффективным.       Этот метод предварительно заполняет значения из следующих <xref:System.IO.FileInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A>возвращенной коллекции не кэшируются; при каждом вызове функции <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>метод коллекции начнет новое перечисление.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example enumerates the files under a specified directory and uses a LINQ query to return the names of all files that were created before 2009 by checking the value of the <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> property.  \n  \n If you only need the names of the files, use the static <xref:System.IO.Directory> class for better performance. For an example, see the <xref:System.IO.Directory.EnumerateFiles%28System.String%29?displayProperty=fullName> method.  \n  \n [!code-cs[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directoryinf_2_1.cs)]\n [!code-vb[System.IO.DirectoryInfo.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_1.vb)]  \n  \n The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_2_2.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_2_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "Перечисляемая коллекция файлов в текущем каталоге."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файлах, соответствующую шаблону поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_1_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_1_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "Перечисляемая коллекция файлов, соответствующая <code> searchPattern </code>."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым, (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файлах, соответствующую поиска шаблону и параметру поиска в подкаталог."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  example:
  - "The following example shows how to enumerate files in a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-vb[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_7_1.vb)]\n [!code-cs[System.IO.DirectoryInfo.EnumFiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_7_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileInfo> EnumerateFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах. Значение по умолчанию — <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: "Перечисляемая коллекция файлов, соответствующая <code> searchPattern </code> и <code> searchOption </code>."
  overload: System.IO.DirectoryInfo.EnumerateFiles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файловой системе текущего каталога."
  remarks: "EnumerateFileSystemInfos и <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>методы различаются следующим образом: — при использовании EnumerateFileSystemInfos, можно запустить перечислением набора <xref:System.IO.FileInfo>объекты перед возвращением вся коллекция.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>      -При использовании <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, необходимо дождаться весь массив <xref:System.IO.FileSystemInfo>объекты должны быть возвращены для доступа к массива.</xref:System.IO.FileSystemInfo> </xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>       Таким образом при работе с много файлов и папок, EnumerateFileSystemInfos может быть более эффективным.       Этот метод предварительно заполняет значения из следующих <xref:System.IO.FileSystemInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>возвращенной коллекции не кэшируются; при каждом вызове функции <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>метод коллекции начнет новое перечисление.</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "Перечисляемая коллекция сведений о файловой системе текущего каталога."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файловой системе, соответствующую указанному шаблону поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "Перечисляемая коллекция сведений об объектах файловой системы, соответствующая <code> searchPattern </code>."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает перечисляемую коллекцию сведений о файловой системе, соответствующий указанным поиска шаблону и параметру поиска в подкаталог."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> and <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFileSystemInfos%2A>, you must wait for the whole array of <xref:System.IO.FileSystemInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFileSystemInfos%2A> can be more efficient.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method on the collection will start a new enumeration."
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo> EnumerateFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах. Значение по умолчанию — <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: "Перечисляемая коллекция сведений об объектах файловой системы, соответствующая <code> searchPattern </code> и <code> searchOption </code>."
  overload: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает значение, определяющее наличие каталога."
  remarks: "Это свойство возвращает Exists `false` при возникновении любой ошибки при попытке определить, существует ли указанный файл. Это может произойти в ситуации, которые вызывают исключения, например, передать имя файла с недопустимые символы или слишком много символов, диск со сбоем или отсутствует, или если вызывающий объект не имеет разрешения на чтение этого файла."
  example:
  - "The following example demonstrates a use of the `Exists` property in the context of copying a source directory to a target directory.  \n  \n [!code-cpp[DirectoryInfo Usage Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_0_1.cpp)]\n [!code-cs[DirectoryInfo Usage Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_0_1.cs)]\n [!code-vb[DirectoryInfo Usage Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public override bool Exists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если каталог существует; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.DirectoryInfo.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl
  id: GetAccessControl
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> объекта, который инкапсулирует записи списка управления Доступом для каталога, описываемого текущим <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта."
  remarks: "Вызов перегрузки этого метода эквивалентен вызова перегрузки метода <xref:System.IO.Directory.GetAccessControl%2A>и задания разделов управления доступа <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>| <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> | <xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> (<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName>`Or`<xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName> in Visual Basic).</xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.Security.AccessControl.AccessControlSections?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A>       Используйте метод GetAccessControl для получения списка управления Доступом записи управления доступом для текущего файла.       В ACL определяются пользователи и группы, имеющие или не имеющие права на выполнение определенных действий для заданного файла или каталога. Дополнительные сведения см. в разделе [как: Добавление или удаление записей списка управления доступом](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetAccessControl and <xref:System.IO.DirectoryInfo.SetAccessControl%2A> methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directoryinf_14_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directoryinf_14_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_14_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "Объект <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> объекта, который инкапсулирует правила управления доступом для каталога."
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Каталог не удалось найти или изменить."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Каталог доступен только для чтения.       - или - эта операция не поддерживается на текущей платформе.       - или - вызывающего объекта отсутствует необходимое разрешение."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "При открытии каталога возникла ошибка ввода-вывода."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Текущая операционная система не является Microsoft Windows 2000 или более поздней версии."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> объекта, который инкапсулирует заданный тип записи списка управления Доступом для каталога, описываемого текущим <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта."
  remarks: "Используйте метод GetAccessControl для получения списка управления Доступом записи управления доступом для текущего файла.       В ACL определяются пользователи и группы, имеющие или не имеющие права на выполнение определенных действий для заданного файла или каталога. Дополнительные сведения см. в разделе [как: Добавление или удаление записей списка управления доступом](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Один из <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> сведения о списке (ACL) для получения управления значений, определяющее тип доступа."
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "Объект <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> правил объекта, который инкапсулирует правила управления доступом для файла, описываемого <code> path </code> параметра.       Исключения       <table><thead><tr><th> Тип исключения       </th><th> Условие       </th></tr></thead><tbody><tr><td><xref href=&quot;System.SystemException&quot;></xref></td><td> Каталог не удалось найти или изменить.       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> Текущий процесс не имеет доступа к откройте каталог.       </td></tr><tr><td> <xref:System.IO.IOException></xref:System.IO.IOException>       </td><td> При открытии каталога возникла ошибка ввода-вывода.       </td></tr><tr><td> <xref:System.PlatformNotSupportedException></xref:System.PlatformNotSupportedException>       </td><td> Текущая операционная система не является Microsoft Windows 2000 или более поздней версии.       </td></tr><tr><td> <xref:System.UnauthorizedAccessException></xref:System.UnauthorizedAccessException>       </td><td> Каталог доступен только для чтения.       - или - эта операция не поддерживается на текущей платформе.       - или - вызывающего объекта отсутствует необходимое разрешение.       </td></tr></tbody></table>"
  overload: System.IO.DirectoryInfo.GetAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает подкаталоги текущего каталога."
  remarks: "Если отсутствуют вложенные каталоги, этот метод возвращает пустой массив. Этот метод не является рекурсивным.       Этот метод предварительно заполняет значения из следующих <xref:System.IO.DirectoryInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.DirectoryInfo>"
  example:
  - "The following example retrieves all the directories in the root directory and displays the directory names.  \n  \n [!code-cs[directoryinfogetdirectories#1](~/add/codesnippet/csharp/m-system.io.directoryinf_6_1.cs)]\n [!code-cpp[directoryinfogetdirectories#1](~/add/codesnippet/cpp/m-system.io.directoryinf_6_1.cpp)]\n [!code-vb[directoryinfogetdirectories#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_6_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories ();
    parameters: []
    return:
      type: System.IO.DirectoryInfo[]
      description: "Массив <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объектов."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта является недопустимым, например, ведущий на несопоставленный диск."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает массив каталогов в текущем <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> соответствующие заданным критериям поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the directories in a path that contain the specified letter.  \n  \n [!code-cpp[DirInfo GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directoryinf_10_1.cpp)]\n [!code-cs[DirInfo GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_10_1.cs)]\n [!code-vb[DirInfo GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_10_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.IO.DirectoryInfo[]
      description: "Массив объектов типа <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> сопоставления <code> searchPattern </code>."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает массив каталогов в текущем <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> соответствующие заданным критериям поиска с использованием значения, чтобы определить, следует ли выполнять поиск в подкаталогах."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n If there are no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.DirectoryInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example lists all of the directories and files that begin with the letter \"c\" in \"c:\\\\\".  \n  \n [!code-cpp[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/cpp/m-system.io.directoryinf_0_1.cpp)]\n [!code-cs[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/csharp/m-system.io.directoryinf_0_1.cs)]\n [!code-vb[System.IO.DirectoryInfo_SearchOptions#00](~/add/codesnippet/visualbasic/m-system.io.directoryinf_0_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах."
    return:
      type: System.IO.DirectoryInfo[]
      description: "Массив объектов типа <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> сопоставления <code> searchPattern </code>."
  overload: System.IO.DirectoryInfo.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь, содержащийся в <xref uid=&quot;langword_csharp_DirectoryInfo&quot; name=&quot;DirectoryInfo&quot; href=&quot;&quot;> </xref> объект является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает список файлов текущего каталога."
  remarks: "<xref:System.IO.DirectoryInfo.EnumerateFiles%2A>И методы GetFiles различаются следующим образом: — при использовании <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, можно запустить перечислением набора <xref:System.IO.FileInfo>объекты перед возвращением вся коллекция.</xref:System.IO.FileInfo> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A> </xref:System.IO.DirectoryInfo.EnumerateFiles%2A>      -При использовании GetFiles, необходимо дождаться весь массив <xref:System.IO.FileInfo>объекты должны быть возвращены для доступа к массива.</xref:System.IO.FileInfo>       Таким образом, при работе с много файлов и папок, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>может быть более эффективным.</xref:System.IO.DirectoryInfo.EnumerateFiles%2A>       Если нет файлов в <xref:System.IO.DirectoryInfo>, этот метод возвращает пустой массив.</xref:System.IO.DirectoryInfo>       Порядок возвращаемые имена файлов не гарантируется; Используйте <xref:System.Array.Sort%2A>метод, если определенный порядок сортировки не требуется.</xref:System.Array.Sort%2A>       Этот метод предварительно заполняет значения из следующих <xref:System.IO.FileInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>- <xref:System.IO.FileInfo.Length%2A></xref:System.IO.FileInfo.Length%2A> </xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileInfo>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_5_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_5_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles ();
    parameters: []
    return:
      type: System.IO.FileInfo[]
      description: "Массив объектов типа <xref href=&quot;System.IO.FileInfo&quot;> </xref>."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Путь является недопустимым, например, ведущий на несопоставленный диск."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает список файлов текущего каталога, соответствующих заданному шаблону поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in the `searchPattern` parameter.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|*|Zero or more characters.|  \n|?|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n-   <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_12_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_12_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.IO.FileInfo[]
      description: "Массив объектов типа <xref href=&quot;System.IO.FileInfo&quot;> </xref>."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Недопустимый путь (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает список файлов текущего каталога, соответствующих заданному шаблону поиска с использованием значения, чтобы определить, следует ли выполнять поиск в подкаталогах."
  remarks: "The <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> and <xref:System.IO.DirectoryInfo.GetFiles%2A> methods differ as follows:  \n  \n-   When you use <xref:System.IO.DirectoryInfo.EnumerateFiles%2A>, you can start enumerating the collection of <xref:System.IO.FileInfo> objects before the whole collection is returned.  \n  \n-   When you use <xref:System.IO.DirectoryInfo.GetFiles%2A>, you must wait for the whole array of <xref:System.IO.FileInfo> objects to be returned before you can access the array.  \n  \n Therefore, when you are working with many files and directories, <xref:System.IO.DirectoryInfo.EnumerateFiles%2A> can be more efficient.  \n  \n If there are no files in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard character|Description|  \n|------------------------|-----------------|  \n|* (asterisk)|Zero or more characters.|  \n|? (question mark)|Exactly zero or one character.|  \n  \n The order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n Wildcards are permitted. For example, the `searchPattern` string \"*.txt\" searches for all file names having an extension of \"txt\". The `searchPattern` string \"s\\*\" searches for all file names beginning with the letter \"s\". If there are no files, or no files that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n> [!NOTE]\n>  When using the asterisk wildcard character in a `searchPattern` (for example, \"*.txt\"), the matching behavior varies depending on the length of the specified file extension. A `searchPattern` with a file extension of exactly three characters returns files with an extension of three or more characters, where the first three characters match the file extension specified in the `searchPattern`. A `searchPattern` with a file extension of one, two, or more than three characters returns only files with extensions of exactly that length that match the file extension specified in the `searchPattern`. When using the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files in a directory, \"file1.txt\" and \"file1.txtother\", a search pattern of \"file?.txt\" returns only the first file, while a search pattern of \"file\\*.txt\" returns both files.  \n  \n The following list shows the behavior of different lengths for the `searchPattern` parameter:  \n  \n-   \"*.abc\" returns files having an extension of.abc,.abcd,.abcde,.abcdef, and so on.  \n  \n-   \"*.abcd\" returns only files having an extension of.abcd.  \n  \n-   \"*.abcde\" returns only files having an extension of.abcde.  \n  \n-   \"*.abcdef\" returns only files having an extension of.abcdef.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" will return \"longfilename.txt\" because the equivalent 8.3 file name format would be \"longf~1.txt\".  \n  \n This method pre-populates the values of the following <xref:System.IO.FileInfo> properties:  \n  \n1.  <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n2.  <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n3.  <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n4.  <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n5.  <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n6.  <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n7.  <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>  \n  \n8.  <xref:System.IO.FileInfo.Length%2A>"
  example:
  - "The following example shows how to get a list of files from a directory by using different search options. The example assumes a directory that has files named log1.txt, log2.txt, test1.txt, test2.txt, test3.txt, and a subdirectory that has a file named SubFile.txt.  \n  \n [!code-cs[directoryinfogetfiles#2](~/add/codesnippet/csharp/m-system.io.directoryinf_13_1.cs)]\n [!code-vb[directoryinfogetfiles#2](~/add/codesnippet/visualbasic/m-system.io.directoryinf_13_1.vb)]"
  syntax:
    content: public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах."
    return:
      type: System.IO.FileInfo[]
      description: "Массив объектов типа <xref href=&quot;System.IO.FileInfo&quot;> </xref>."
  overload: System.IO.DirectoryInfo.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Недопустимый путь (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает массив строго типизированных объектов <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> записей, представляющих все файлы и подкаталоги в каталоге."
  remarks: "Если отсутствуют файлы или каталоги в <xref:System.IO.DirectoryInfo>, этот метод возвращает пустой массив.</xref:System.IO.DirectoryInfo> Этот метод не является рекурсивным.       Для подкаталогов, <xref:System.IO.FileSystemInfo>объекты, возвращаемые этим методом может быть приведен к производному классу <xref:System.IO.DirectoryInfo>.</xref:System.IO.DirectoryInfo> </xref:System.IO.FileSystemInfo> Используйте <xref:System.IO.FileAttributes>значение, возвращаемое <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName>свойство, чтобы определить, является ли <xref:System.IO.FileSystemInfo>представляет файл или каталог.</xref:System.IO.FileSystemInfo> </xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> </xref:System.IO.FileAttributes>       Этот метод предварительно заполняет значения из следующих <xref:System.IO.FileSystemInfo>Свойства:- <xref:System.IO.FileSystemInfo.Attributes%2A>- <xref:System.IO.FileSystemInfo.CreationTime%2A>- <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastAccessTime%2A>- <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>- <xref:System.IO.FileSystemInfo.LastWriteTime%2A>- <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A></xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastWriteTime%2A> </xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A> </xref:System.IO.FileSystemInfo.LastAccessTime%2A> </xref:System.IO.FileSystemInfo.CreationTimeUtc%2A> </xref:System.IO.FileSystemInfo.CreationTime%2A> </xref:System.IO.FileSystemInfo.Attributes%2A> </xref:System.IO.FileSystemInfo>"
  example:
  - "The following example counts the files and directories under the specified directory.  \n  \n [!code-vb[FSizeSort#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_3_1.vb)]\n [!code-cs[FSizeSort#1](~/add/codesnippet/csharp/m-system.io.directoryinf_3_1.cs)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos ();
    parameters: []
    return:
      type: System.IO.FileSystemInfo[]
      description: "Массив строго типизированных <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> записей."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Недопустимый путь (например, он ведет на несопоставленный диск)."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Извлекает массив строго типизированных <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> объектов, представляющих файлы и подкаталоги, соответствующие заданным критериям поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n This method is not recursive.  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n Wild cards are permitted. For example, the `searchPattern` string \"*t\" searches for all directory names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all directory names in `path` beginning with the letter \"s\".  \n  \n The string \"..\" can only be used in `searchPattern` if it is specified as a part of a valid directory name, such as in the directory name \"a..b\". It cannot be used to move up the directory hierarchy. If there are no files or directories, or no files or directories that match the `searchPattern` string in the <xref:System.IO.DirectoryInfo>, this method returns an empty array.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  example:
  - "The following example counts the files and directories that match the specified search pattern.  \n  \n [!code-cs[DirInfo GetFileSysInfos2#1](~/add/codesnippet/csharp/m-system.io.directoryinf_15_1.cs)]\n [!code-vb[DirInfo GetFileSysInfos2#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_15_1.vb)]"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов и файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    return:
      type: System.IO.FileSystemInfo[]
      description: "Массив строго типизированных <xref uid=&quot;langword_csharp_FileSystemInfo&quot; name=&quot;FileSystemInfo&quot; href=&quot;&quot;> </xref> объектов, удовлетворяющих условиям поиска."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Указанный путь является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Извлекает массив <xref href=&quot;System.IO.FileSystemInfo&quot;> </xref> объектов, представляющих файлы и подкаталоги, соответствующие заданным критериям поиска."
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the  string \"*t\" searches for all names in  ending with the letter \"t\". \". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n For subdirectories, the <xref:System.IO.FileSystemInfo> objects returned by this method can be cast to the derived class <xref:System.IO.DirectoryInfo>. Use the <xref:System.IO.FileAttributes> value returned by the <xref:System.IO.FileSystemInfo.Attributes%2A?displayProperty=fullName> property to determine whether the <xref:System.IO.FileSystemInfo> represents a file or a directory.  \n  \n This method pre-populates the values of the following <xref:System.IO.FileSystemInfo> properties:  \n  \n-   <xref:System.IO.FileSystemInfo.Attributes%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.CreationTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastAccessTimeUtc%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTime%2A>  \n  \n-   <xref:System.IO.FileSystemInfo.LastWriteTimeUtc%2A>"
  syntax:
    content: public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: searchPattern
      type: System.String
      description: "Строка поиска, который будет сравниваться с именами каталогов и файлов.  Этот параметр может содержать сочетание допустимого литерального пути и подстановочных символов (* и?) (см. примечания) символов, но не поддерживает регулярные выражения. Шаблон по умолчанию является «\\*», возвращающий все файлы."
    - id: searchOption
      type: System.IO.SearchOption
      description: "Одно из значений перечисления, определяющее, следует ли выполнять поиск только в текущем каталоге и всех его подкаталогах. Значение по умолчанию — <xref href=&quot;System.IO.SearchOption&quot;> </xref>."
    return:
      type: System.IO.FileSystemInfo[]
      description: "Массив элементов файловой системы, которые соответствуют критериям поиска."
  overload: System.IO.DirectoryInfo.GetFileSystemInfos*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>searchPattern </code>содержит один или несколько недопустимых символов, определенных с <xref:System.IO.Path.GetInvalidPathChars*> метод."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>searchPattern</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>не является допустимым <xref href=&quot;System.IO.SearchOption&quot;> </xref> значение."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Указанный путь является недопустимым (например, он ведет на несопоставленный диск)."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Перемещает <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> экземпляр и его содержимое в новый путь."
  remarks: "This method throws an <xref:System.IO.IOException> if, for example, you try to move c:\\mydir to c:\\public, and c:\\public already exists. You must specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n This method permits moving a directory to a read-only directory. The read/write attribute of neither directory is affected.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates moving a directory.  \n  \n [!code-cs[directoryinfomoveto#1](~/add/codesnippet/csharp/m-system.io.directoryinf_17_1.cs)]\n [!code-cpp[directoryinfomoveto#1](~/add/codesnippet/cpp/m-system.io.directoryinf_17_1.cpp)]\n [!code-vb[directoryinfomoveto#1](~/add/codesnippet/visualbasic/m-system.io.directoryinf_17_1.vb)]"
  syntax:
    content: public void MoveTo (string destDirName);
    parameters:
    - id: destDirName
      type: System.String
      description: "Имя и путь к которому необходимо переместить указанный каталог. Назначение не может быть другой том диска или в каталоге с идентичным именем. Он может быть существующий каталог, к которому требуется добавить этот каталог в качестве подкаталога."
  overload: System.IO.DirectoryInfo.MoveTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>destDirName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>destDirName</code>является пустой строкой (&quot;»)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Была предпринята попытка переместить каталог в другой том.       - или - <code> destDirName </code> уже существует.       - или - нет прав доступа к этому пути.       - или - каталог перемещается и каталог назначения имеет то же имя."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Не удается найти каталог назначения."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает имя этого аспекта <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> экземпляра."
  remarks: "This Name property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the <xref:System.IO.FileSystemInfo.FullName%2A> property.  \n  \n The Name property of a <xref:System.IO.DirectoryInfo> requires no permission (beyond the read permission to the directory necessary to construct the <xref:System.IO.DirectoryInfo.Exists%2A>) but can give out the directory name. If it is necessary to hand out a <xref:System.IO.DirectoryInfo> to a protected directory with a cryptographically secure name, create a dummy directory for the untrusted code’s use.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the name of the current `DirectoryInfo` instance only.  \n  \n [!code-cs[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/csharp/p-system.io.directoryinf_3_1.cs)]\n [!code-vb[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_3_1.vb)]\n [!code-cpp[Classic DirectoryInfo.Name Example#1](~/add/codesnippet/cpp/p-system.io.directoryinf_3_1.cpp)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "Имя каталога."
  overload: System.IO.DirectoryInfo.Name*
  exceptions: []
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Получает родительский каталог заданного подкаталога."
  remarks: "Список задач ввода-вывода см. в разделе [распространенные задачи ввода-вывода](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates referring to the parent directory of a specified directory.  \n  \n [!code-cs[directoryinfoparent#1](~/add/codesnippet/csharp/p-system.io.directoryinf_1_1.cs)]\n [!code-vb[directoryinfoparent#1](~/add/codesnippet/visualbasic/p-system.io.directoryinf_1_1.vb)]\n [!code-cpp[directoryinfoparent#1](~/add/codesnippet/cpp/p-system.io.directoryinf_1_1.cpp)]"
  syntax:
    content: public System.IO.DirectoryInfo Parent { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "Родительский каталог или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если путь имеет значение null или если путь к файлу указывает на корневой каталог (такие как «\\&quot;, «C:», или * &quot;\\\\\\server\\share»)."
  overload: System.IO.DirectoryInfo.Parent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Получает корневую часть каталога."
  remarks: ''
  example:
  - "The following example displays root locations for specified directories.  \n  \n [!code-cs[directoryinforoot#2](~/add/codesnippet/csharp/p-system.io.directoryinf_2_1.cs)]\n [!code-vb[directoryinforoot#2](~/add/codesnippet/visualbasic/p-system.io.directoryinf_2_1.vb)]"
  syntax:
    content: public System.IO.DirectoryInfo Root { get; }
    return:
      type: System.IO.DirectoryInfo
      description: "Объект, представляющий корень каталога."
  overload: System.IO.DirectoryInfo.Root*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Применяет записи списка управления Доступом для управления доступом, описываемого <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref> объект каталога, описываемого текущим <xref href=&quot;System.IO.DirectoryInfo&quot;> </xref> объекта."
  remarks: "Список управления доступом (ACL) определяются пользователи и группы, имеющие или не имеющие права на выполнение определенных действий для заданного файла или каталога. Дополнительные сведения см. в разделе [как: Добавление или удаление записей списка управления доступом](~/add/includes/ajax-current-ext-md.md).       Элементы списка ACL применяется метод SetAccessControl файл, который представляет noninherited список ACL.      Настроек [!CAUTION] настроек указанный ACL для `directorySecurity` заменяет существующий список ACL для каталога. Чтобы добавить разрешения для нового пользователя, используйте <xref:System.IO.DirectoryInfo.GetAccessControl%2A>метод, чтобы получить существующий список ACL и изменить его.</xref:System.IO.DirectoryInfo.GetAccessControl%2A>       Метод SetAccessControl сохраняется только <xref:System.Security.AccessControl.DirectorySecurity>объекты, которые были изменены после создания объекта.</xref:System.Security.AccessControl.DirectorySecurity>  Если <xref:System.Security.AccessControl.DirectorySecurity>объект не был изменен, не будут сохранены в файл.</xref:System.Security.AccessControl.DirectorySecurity>  Таким образом, не удается получить <xref:System.Security.AccessControl.DirectorySecurity>объекта из одного файла и повторно применить тот же объект в другой файл.</xref:System.Security.AccessControl.DirectorySecurity>       Чтобы скопировать информацию ACL из одного файла: 1.  Используйте <xref:System.IO.DirectoryInfo.GetAccessControl%2A>метод для извлечения <xref:System.Security.AccessControl.DirectorySecurity>объекта из исходного файла.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.IO.DirectoryInfo.GetAccessControl%2A>      2.  Создайте новый <xref:System.Security.AccessControl.DirectorySecurity>объекта для целевого файла.</xref:System.Security.AccessControl.DirectorySecurity>      3.  Используйте <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>или <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>метод источника <xref:System.Security.AccessControl.DirectorySecurity>объекта, чтобы получить сведения об ACL.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>      4.  Используйте <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>или <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>метод для копирования данных, полученных на шаге 3 в место назначения <xref:System.Security.AccessControl.DirectorySecurity>объекта.</xref:System.Security.AccessControl.DirectorySecurity> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>      5.  Задайте на конечном <xref:System.Security.AccessControl.DirectorySecurity>объекта к нужному файлу с помощью метода SetAccessControl.</xref:System.Security.AccessControl.DirectorySecurity>"
  example:
  - "The following example uses the <xref:System.IO.DirectoryInfo.GetAccessControl%2A> and SetAccessControl methods to add and then remove an access control list (ACL) entry from a directory.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/d8d660a0-50f5-42be-9101-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/d8d660a0-50f5-42be-9101-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/d8d660a0-50f5-42be-9101-_1.vb)]"
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "Объект, который описывает запись ACL, чтобы применить к каталогу, описанному параметром `path` параметр."
  overload: System.IO.DirectoryInfo.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Файл не удалось найти или изменить."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Текущий процесс не имеет доступа для открытия файла."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Текущая операционная система не является Microsoft Windows 2000 или более поздней версии."
  platform:
  - net462
- uid: System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  langs:
  - csharp
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "Возвращает исходный путь, переданный пользователем."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Возвращает исходный путь, переданный пользователем."
  overload: System.IO.DirectoryInfo.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.FileSystemInfo
  isExternal: false
  name: System.IO.FileSystemInfo
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo(String)
  nameWithType: DirectoryInfo.DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo.Create
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create()
  nameWithType: DirectoryInfo.Create()
  fullName: System.IO.DirectoryInfo.Create()
- uid: System.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create(DirectorySecurity)
  nameWithType: DirectoryInfo.Create(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.Create(DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String)
  nameWithType: DirectoryInfo.CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory(String,DirectorySecurity)
  nameWithType: DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(String,DirectorySecurity)
- uid: System.IO.DirectoryInfo.Delete
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete()
  nameWithType: DirectoryInfo.Delete()
  fullName: System.IO.DirectoryInfo.Delete()
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete(Boolean)
  nameWithType: DirectoryInfo.Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories()
  nameWithType: DirectoryInfo.EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<DirectoryInfo>
  nameWithType: IEnumerable<DirectoryInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.DirectoryInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: DirectoryInfo.EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String)
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.DirectoryInfo.EnumerateFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles()
  nameWithType: DirectoryInfo.EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileInfo>
  nameWithType: IEnumerable<FileInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: DirectoryInfo.EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String)
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos()
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<FileSystemInfo>
  nameWithType: IEnumerable<FileSystemInfo>
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IO.FileSystemInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.Exists
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
  fullName: System.IO.DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl()
  nameWithType: DirectoryInfo.GetAccessControl()
  fullName: System.IO.DirectoryInfo.GetAccessControl()
- uid: System.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl(AccessControlSections)
  nameWithType: DirectoryInfo.GetAccessControl(AccessControlSections)
  fullName: System.IO.DirectoryInfo.GetAccessControl(AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.DirectoryInfo.GetDirectories
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories()
  nameWithType: DirectoryInfo.GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
- uid: System.IO.DirectoryInfo[]
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo[]
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    nameWithType: DirectoryInfo
    fullName: DirectoryInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String)
  nameWithType: DirectoryInfo.GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(String)
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories(String,SearchOption)
  nameWithType: DirectoryInfo.GetDirectories(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFiles
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles()
  nameWithType: DirectoryInfo.GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
- uid: System.IO.FileInfo[]
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo[]
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    nameWithType: FileInfo
    fullName: FileInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String)
  nameWithType: DirectoryInfo.GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(String)
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles(String,SearchOption)
  nameWithType: DirectoryInfo.GetFiles(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(String,SearchOption)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos()
  nameWithType: DirectoryInfo.GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
- uid: System.IO.FileSystemInfo[]
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo[]
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    nameWithType: FileSystemInfo
    fullName: FileSystemInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String)
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos(String,SearchOption)
  nameWithType: DirectoryInfo.GetFileSystemInfos(String,SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(String,SearchOption)
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo(String)
  nameWithType: DirectoryInfo.MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(String)
- uid: System.IO.DirectoryInfo.Name
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
  fullName: System.IO.DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
  fullName: System.IO.DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
  fullName: System.IO.DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl(DirectorySecurity)
  nameWithType: DirectoryInfo.SetAccessControl(DirectorySecurity)
  fullName: System.IO.DirectoryInfo.SetAccessControl(DirectorySecurity)
- uid: System.IO.DirectoryInfo.ToString
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString()
  nameWithType: DirectoryInfo.ToString()
  fullName: System.IO.DirectoryInfo.ToString()
- uid: System.IO.DirectoryInfo.#ctor*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo.DirectoryInfo
- uid: System.IO.DirectoryInfo.Create*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Create
  nameWithType: DirectoryInfo.Create
- uid: System.IO.DirectoryInfo.CreateSubdirectory*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: CreateSubdirectory
  nameWithType: DirectoryInfo.CreateSubdirectory
- uid: System.IO.DirectoryInfo.Delete*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Delete
  nameWithType: DirectoryInfo.Delete
- uid: System.IO.DirectoryInfo.EnumerateDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateDirectories
  nameWithType: DirectoryInfo.EnumerateDirectories
- uid: System.IO.DirectoryInfo.EnumerateFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFiles
  nameWithType: DirectoryInfo.EnumerateFiles
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: EnumerateFileSystemInfos
  nameWithType: DirectoryInfo.EnumerateFileSystemInfos
- uid: System.IO.DirectoryInfo.Exists*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Exists
  nameWithType: DirectoryInfo.Exists
- uid: System.IO.DirectoryInfo.GetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetAccessControl
  nameWithType: DirectoryInfo.GetAccessControl
- uid: System.IO.DirectoryInfo.GetDirectories*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetDirectories
  nameWithType: DirectoryInfo.GetDirectories
- uid: System.IO.DirectoryInfo.GetFiles*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFiles
  nameWithType: DirectoryInfo.GetFiles
- uid: System.IO.DirectoryInfo.GetFileSystemInfos*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: GetFileSystemInfos
  nameWithType: DirectoryInfo.GetFileSystemInfos
- uid: System.IO.DirectoryInfo.MoveTo*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryInfo.MoveTo
- uid: System.IO.DirectoryInfo.Name*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Name
  nameWithType: DirectoryInfo.Name
- uid: System.IO.DirectoryInfo.Parent*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Parent
  nameWithType: DirectoryInfo.Parent
- uid: System.IO.DirectoryInfo.Root*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: Root
  nameWithType: DirectoryInfo.Root
- uid: System.IO.DirectoryInfo.SetAccessControl*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: SetAccessControl
  nameWithType: DirectoryInfo.SetAccessControl
- uid: System.IO.DirectoryInfo.ToString*
  parent: System.IO.DirectoryInfo
  isExternal: false
  name: ToString
  nameWithType: DirectoryInfo.ToString
