### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "Позволяет разработчику управлять сообщения об ошибке возвращается вызывающей стороне и дополнительно выполнять пользовательскую обработку, например ведение журнала ошибок."
  remarks: "Чтобы явно контролировать поведение приложения при возникновении исключения, реализуйте интерфейс IErrorHandler и добавьте его в <xref:System.ServiceModel.Dispatcher.ChannelDispatcher> <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>свойство.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler можно явно управлять сообщением SOAP об ошибке, решить, следует ли отправить обратно клиенту и выполнять соответствующие задачи, такие как ведение журнала. Обработчики ошибок вызываются в порядке, в котором они были добавлены <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>свойство.</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       Реализуйте <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>метод, чтобы управлять сообщения об ошибке, которое возвращается клиенту.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       Реализуйте <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>метод, чтобы обеспечить поведения, связанные с ошибки, включая ведение журнала ошибок, быстрое прекращение работы, завершение работы приложения и т. д.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      Настроек [!NOTE] настроек из-за <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>метод может вызываться из разных мест нет гарантии относительно потока, в который будет вызван метод на.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> Не полагайтесь на <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>метод, вызываемый на потоке операции.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Все <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>реализации вызываются первыми, перед отправлением ответного сообщения.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> При всех <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>реализации были вызваны и возвращены и если `fault` не является`null`, он отправляется обратно клиенту согласно контракту операции.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> Если `fault` — `null` после вызова всех реализаций, ответное сообщение управляется <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>значение свойства.</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      Настроек [!NOTE] настроек исключения могут возникать в конце концов <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>называются реализаций, ответное сообщение передается в канал.</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> При возникновении исключения канала (например, сложности сериализации сообщения) IErrorHandler объекты получают уведомления. В этом случае следует производить среды разработки перехватывает и отображает такие исключения пользователю, иначе используют трассировки для обнаружения проблемы. Дополнительные сведения о трассировке см. в разделе [с помощью трассировки для устранения неполадок приложения](~/add/includes/ajax-current-ext-md.md).       После ответное сообщение было отправлено, все <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>реализации вызываются в том же порядке.</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       Как правило, добавляется реализацию IErrorHandler <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>Свойства службы (и клиента в дуплексных системах связи).</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       IErrorHandler можно добавить в среду выполнения, реализовав расширение функциональности (либо <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>, или <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>объекта) и использовать поведение программным образом, из файла конфигурации или с пользовательским атрибутом для присоединения к IErrorHandler.</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       Дополнительные сведения об использовании поведений для изменения среды выполнения см. в разделе [настройку и расширение среды выполнения с помощью поведений](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Включает связанные с ошибками обработки и возвращает значение, указывающее, является ли диспетчер прерывает сеанс и контекст экземпляра, в некоторых случаях."
  remarks: "Метод HandleError использовать для реализации поведения, связанные с ошибки, такие как ведение журнала ошибок, системных уведомлений, завершение работы приложения и т. д. и возвращает значение, указывающее, было ли исключение обработано соответствующим образом.      Настроек [!NOTE] настроек HandleError метод нельзя вызвать из множества разных мест нет гарантии относительно потока, в который будет вызван метод на. Не полагайтесь на HandleError метод, вызываемый на потоке операции.       Все <xref:System.ServiceModel.Dispatcher.IErrorHandler>реализации вызываются.</xref:System.ServiceModel.Dispatcher.IErrorHandler> По умолчанию (Если возвращаемое значение равно `false`), если существует одно исключение, диспетчер прерывает любой сеанс и прерывает <xref:System.ServiceModel.InstanceContext>Если <xref:System.ServiceModel.InstanceContextMode>отличной <xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContextMode> </xref:System.ServiceModel.InstanceContext>  Затем исключение считается необработанным, и любое состояние считается поврежденной.       Возвращать `true` из HandleError, чтобы предотвратить такое поведение по умолчанию. Если любой из обработчиков ошибок возвращает `true` она предписывает [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] безопасного продолжать использовать состояние, связанное с неудачным запросом.       Если ни один обработчик ошибок возвращает `true` из HandleError метод исключение считается необработанным и ответное сообщение по умолчанию, может привести к прерванных <xref:System.ServiceModel.InstanceContext?displayProperty=fullName>и канала, если используется взаимодействие через канал сеанса или <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>свойство не задано для <xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> </xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       `error` Никогда не имеет `null` и содержит объект исключения, которое было создано."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "Исключение во время обработки."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] не должна прерывать сеанс (если есть) и контекст экземпляра, если контекст экземпляра не <xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "Позволяет создавать пользовательский &lt;xref:System.ServiceModel.FaultException%601&gt; , возвращаемый методом исключения в ходе работы метода службы."
  remarks: "Реализуйте метод ProvideFault для создания пользовательского сообщения об ошибке, возвращаемое клиенту.  Метод ProvideFault всегда будет вызываться для исключений, которые оставляют операций, за исключением того, когда среда выполнения WCF распознает исключение в виде особенно Неустранимая и повторно создает исключение. При вызове всех реализаций ProvideFault сообщение об ошибке отправляется обратно клиенту (если `fault` не является`null`). Если `fault` параметр `null` клиенту по умолчанию отправляется клиенту.      Настроек [!NOTE] настроек входящее сообщение, инициировавшее ошибку обработки доступен во время выполнения этого метода из <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>свойство.</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      Настроек [!NOTE] настроек ProvideFault метод нельзя вызвать из множества разных мест нет гарантии относительно потока, в который будет вызван метод на. Не полагайтесь на метод ProvideFault, вызываемый на потоке операции."
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>Вызывается во время работы службы.</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "Версия SOAP сообщения."
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "&lt;Xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt; объект, возвращаемый клиенту или службе, в дуплексном случае."
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
