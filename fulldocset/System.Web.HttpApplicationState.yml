### YamlMime:ManagedReference
items:
- uid: System.Web.HttpApplicationState
  id: HttpApplicationState
  children:
  - System.Web.HttpApplicationState.Add(System.String,System.Object)
  - System.Web.HttpApplicationState.AllKeys
  - System.Web.HttpApplicationState.Clear
  - System.Web.HttpApplicationState.Contents
  - System.Web.HttpApplicationState.Count
  - System.Web.HttpApplicationState.Get(System.Int32)
  - System.Web.HttpApplicationState.Get(System.String)
  - System.Web.HttpApplicationState.GetKey(System.Int32)
  - System.Web.HttpApplicationState.Item(System.Int32)
  - System.Web.HttpApplicationState.Item(System.String)
  - System.Web.HttpApplicationState.Lock
  - System.Web.HttpApplicationState.Remove(System.String)
  - System.Web.HttpApplicationState.RemoveAll
  - System.Web.HttpApplicationState.RemoveAt(System.Int32)
  - System.Web.HttpApplicationState.Set(System.String,System.Object)
  - System.Web.HttpApplicationState.StaticObjects
  - System.Web.HttpApplicationState.UnLock
  langs:
  - csharp
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
  type: Class
  summary: "Обеспечивает совместное использование общих сведений для нескольких сеансов и запросов в приложении ASP.NET."
  remarks: "Приложения ASP.NET — это сумма всех файлов, страниц, обработчиками, модули и кода в пределах виртуального каталога и его подкаталогов на одном веб-сервере.       Один экземпляр класса HttpApplicationState создается впервые, клиент запрашивает ресурс по URL-адреса из в определенной папке виртуального приложения ASP.NET. Для каждого приложения ASP.NET на веб-сервере создается отдельный экземпляр. Ссылка на каждый экземпляр затем предоставляется с помощью встроенного <xref:System.Web.HttpContext.Application%2A>объекта.</xref:System.Web.HttpContext.Application%2A>       Состояние приложения не используется совместно несколькими веб-фермы (в котором приложение размещается на нескольких серверах) или веб-сад (в котором приложение размещается в нескольких процессах на том же компьютере)."
  syntax:
    content: 'public sealed class HttpApplicationState : System.Collections.Specialized.NameObjectCollectionBase'
  inheritance:
  - System.Object
  - System.Collections.Specialized.NameObjectCollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  - System.Collections.Specialized.NameObjectCollectionBase.Keys
  - System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Add(String,Object)
  nameWithType: HttpApplicationState.Add(String,Object)
  fullName: System.Web.HttpApplicationState.Add(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Добавляет новый объект для <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.  \n  \n [!code-cs[Classic HttpApplicationState.Add Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_8_1.cs)]\n [!code-vb[Classic HttpApplicationState.Add Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_8_1.vb)]"
  syntax:
    content: public void Add (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "Имя объекта, добавляемого в коллекцию."
    - id: value
      type: System.Object
      description: "Значение объекта."
  overload: System.Web.HttpApplicationState.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.AllKeys
  id: AllKeys
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
  fullName: System.Web.HttpApplicationState.AllKeys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает клавиши доступа <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example fills a string array with all the object names in the application state collection.  \n  \n [!code-cs[Classic HttpApplicationState.AllKeys Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_1_1.cs)]\n [!code-vb[Classic HttpApplicationState.AllKeys Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_1_1.vb)]"
  syntax:
    content: public string[] AllKeys { get; }
    return:
      type: System.String[]
      description: "Массив строк с <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> имена объектов."
  overload: System.Web.HttpApplicationState.AllKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Clear
  id: Clear
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpApplicationState.Clear()
  fullName: System.Web.HttpApplicationState.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Удаляет все объекты из <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.  \n  \n [!code-vb[Classic HttpApplicationState.Clear Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_0_1.vb)]\n [!code-cs[Classic HttpApplicationState.Clear Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_0_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.HttpApplicationState.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Contents
  id: Contents
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Contents
  nameWithType: HttpApplicationState.Contents
  fullName: System.Web.HttpApplicationState.Contents
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает ссылку на <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта."
  remarks: "Это свойство обеспечивает совместимость с предыдущими версиями ASP."
  example:
  - "The following example creates a new <xref:System.Web.HttpApplicationState> object that is used to access the object names in the application state collection.  \n  \n [!code-cs[Classic HttpApplicationState.Contents Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_5_1.cs)]\n [!code-vb[Classic HttpApplicationState.Contents Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_5_1.vb)]"
  syntax:
    content: public System.Web.HttpApplicationState Contents { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "Ссылку на <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта."
  overload: System.Web.HttpApplicationState.Contents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Count
  id: Count
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Count
  nameWithType: HttpApplicationState.Count
  fullName: System.Web.HttpApplicationState.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает количество объектов в <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example executes only if the number of objects in the collection exceeds five.  \n  \n [!code-cs[Classic HttpApplicationState.Count Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_3_1.cs)]\n [!code-vb[Classic HttpApplicationState.Count Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_3_1.vb)]"
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: "Число объектов элементов в коллекции. Значение по умолчанию — 0."
  overload: System.Web.HttpApplicationState.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Get(Int32)
  nameWithType: HttpApplicationState.Get(Int32)
  fullName: System.Web.HttpApplicationState.Get(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> по числовому индексу."
  remarks: ''
  example:
  - "The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-cs[Classic HttpApplicationState.Get1 Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_9_1.cs)]\n [!code-vb[Classic HttpApplicationState.Get1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_9_1.vb)]"
  syntax:
    content: public object Get (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Индекс получаемого объекта состояния приложения."
    return:
      type: System.Object
      description: "Объект, упоминаемый в <code> index </code>."
  overload: System.Web.HttpApplicationState.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Get(System.String)
  id: Get(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Get(String)
  nameWithType: HttpApplicationState.Get(String)
  fullName: System.Web.HttpApplicationState.Get(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта по имени."
  remarks: "В следующем примере возвращается объект с именем MyAppVar1 из <xref:System.Web.HttpApplicationState>коллекции встроенного <xref:System.Web.HttpContext.Application%2A>объекта и копирует его в новую переменную объекта.</xref:System.Web.HttpContext.Application%2A> </xref:System.Web.HttpApplicationState>      ```vb#   Dim MyObject As Object   MyObject = Application.Get(&quot;MyAppVar1&quot;)   ```      ```c#   Object MyObject;   MyObject = Application.Get(&quot;MyAppVar1&quot;);   ```"
  syntax:
    content: public object Get (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя объекта."
    return:
      type: System.Object
      description: "Объект, упоминаемый в <code> name </code>."
  overload: System.Web.HttpApplicationState.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: HttpApplicationState.GetKey(Int32)
  fullName: System.Web.HttpApplicationState.GetKey(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> по индексу."
  remarks: ''
  example:
  - "The following example returns the names of all the objects in the application state collection and stores the names in a string array.  \n  \n [!code-cs[Classic HttpApplicationState.GetKey Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_3_1.cs)]\n [!code-vb[Classic HttpApplicationState.GetKey Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_3_1.vb)]"
  syntax:
    content: public string GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Индекс получаемого объекта состояния приложения."
    return:
      type: System.String
      description: "Имя, под которым был сохранен объект состояния приложения."
  overload: System.Web.HttpApplicationState.GetKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: HttpApplicationState.Item(Int32)
  fullName: System.Web.HttpApplicationState.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает один <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта по индексу."
  remarks: ''
  example:
  - "The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-vb[Classic HttpApplicationState.this1 Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_4_1.vb)]\n [!code-cs[Classic HttpApplicationState.this1 Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_4_1.cs)]"
  syntax:
    content: public object this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "Числовой индекс объекта в коллекции."
    return:
      type: System.Object
      description: "Объект, упоминаемый в <code> index </code>."
  overload: System.Web.HttpApplicationState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Item(System.String)
  id: Item(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Item(String)
  nameWithType: HttpApplicationState.Item(String)
  fullName: System.Web.HttpApplicationState.Item(String)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Возвращает значение из одного <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта по имени."
  remarks: ''
  example:
  - "The following example returns an object named `MyAppVar1` from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-cs[Classic HttpApplicationState.this Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_0_1.cs)]\n [!code-vb[Classic HttpApplicationState.this Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_0_1.vb)]"
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: "Имя объекта в коллекции."
    return:
      type: System.Object
      description: "Объект, упоминаемый в <code> name </code>."
  overload: System.Web.HttpApplicationState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Lock
  id: Lock
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Lock()
  nameWithType: HttpApplicationState.Lock()
  fullName: System.Web.HttpApplicationState.Lock()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Блокирует доступ к <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> переменной для упрощения синхронизации доступа."
  remarks: "<xref:System.Web.HttpApplicationState>Класс выполняет автоматическая блокировка и разблокировка с <xref:System.Web.HttpApplicationState.AllKeys%2A>и <xref:System.Web.HttpApplicationState.Count%2A>Свойства и <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A>и <xref:System.Web.HttpApplicationState.Set%2A>методы.</xref:System.Web.HttpApplicationState.Set%2A> </xref:System.Web.HttpApplicationState.RemoveAt%2A> </xref:System.Web.HttpApplicationState.Remove%2A> </xref:System.Web.HttpApplicationState.GetKey%2A> </xref:System.Web.HttpApplicationState.Get%2A> </xref:System.Web.HttpApplicationState.Clear%2A> </xref:System.Web.HttpApplicationState.Add%2A> </xref:System.Web.HttpApplicationState.Count%2A> </xref:System.Web.HttpApplicationState.AllKeys%2A> </xref:System.Web.HttpApplicationState> Тем не менее, явно с помощью блокировки и <xref:System.Web.HttpApplicationState.UnLock%2A>методов, если у вас есть ряд операций может быть более эффективным.</xref:System.Web.HttpApplicationState.UnLock%2A>"
  example:
  - "The following example uses the Lock method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.  \n  \n [!code-cs[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_7_1.cs)]\n [!code-vb[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_7_1.vb)]"
  syntax:
    content: public void Lock ();
    parameters: []
  overload: System.Web.HttpApplicationState.Lock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Remove(System.String)
  id: Remove(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Remove(String)
  nameWithType: HttpApplicationState.Remove(String)
  fullName: System.Web.HttpApplicationState.Remove(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Удаляет указанный объект из <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example removes one application state variable from the collection.  \n  \n [!code-vb[Classic HttpApplicationState.Remove Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_1_1.vb)]\n [!code-cs[Classic HttpApplicationState.Remove Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_1_1.cs)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя объекта, удаляемого из коллекции."
  overload: System.Web.HttpApplicationState.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.RemoveAll
  id: RemoveAll
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: HttpApplicationState.RemoveAll()
  fullName: System.Web.HttpApplicationState.RemoveAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Удаляет все объекты из <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: "RemoveAll является внутренним вызовом <xref:System.Web.HttpApplicationState.Clear%2A>.</xref:System.Web.HttpApplicationState.Clear%2A>"
  example:
  - "The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.  \n  \n [!code-cs[Classic HttpApplicationState.RemoveAll Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_2_1.cs)]\n [!code-vb[Classic HttpApplicationState.RemoveAll Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_2_1.vb)]"
  syntax:
    content: public void RemoveAll ();
    parameters: []
  overload: System.Web.HttpApplicationState.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: HttpApplicationState.RemoveAt(Int32)
  fullName: System.Web.HttpApplicationState.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Удаляет <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> объекта из коллекции по индексу."
  remarks: ''
  example:
  - "The following code example demonstrates how to insert two application variables into the collection, and then use the RemoveAt method to remove the first variable in a custom <xref:System.Web.HttpApplicationState> object.  \n  \n [!code-vb[HttpApplicationStateRemoveAt#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_4_1.aspx)]\n [!code-cs[HttpApplicationStateRemoveAt#1](~/add/codesnippet/csharp/m-system.web.httpapplica_4_1.aspx)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "Положение в коллекции элемента для удаления."
  overload: System.Web.HttpApplicationState.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Set(System.String,System.Object)
  id: Set(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Set(String,Object)
  nameWithType: HttpApplicationState.Set(String,Object)
  fullName: System.Web.HttpApplicationState.Set(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Обновляет значение объекта в <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> коллекции."
  remarks: ''
  example:
  - "The following example updates the value of an existing application state variable.  \n  \n [!code-cs[Classic HttpApplicationState.Set Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_5_1.cs)]\n [!code-vb[Classic HttpApplicationState.Set Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_5_1.vb)]"
  syntax:
    content: public void Set (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "Имя обновляемого объекта."
    - id: value
      type: System.Object
      description: "Обновленное значение объекта."
  overload: System.Web.HttpApplicationState.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.StaticObjects
  id: StaticObjects
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
  fullName: System.Web.HttpApplicationState.StaticObjects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Получает все объекты, объявленные <xref uid=&quot;langword_csharp_&lt;object&gt;&quot; name=&quot;&lt;object&gt;&quot; href=&quot;&quot;> </xref> тег, где области установлено значение «Приложение» в приложении ASP.NET."
  remarks: "Объекты приложения определяются в файле Global.asax внутри `<object runat=&quot;server&quot; scope=&quot;Application&quot;> </object>` тегов."
  example:
  - "The following example gets all application objects into a <xref:System.Web.HttpStaticObjectsCollection> variable and executes a routine only if the number of objects is greater than 0.  \n  \n [!code-cs[Classic HttpApplicationState.StaticObjects Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_2_1.cs)]\n [!code-vb[Classic HttpApplicationState.StaticObjects Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_2_1.vb)]"
  syntax:
    content: public System.Web.HttpStaticObjectsCollection StaticObjects { get; }
    return:
      type: System.Web.HttpStaticObjectsCollection
      description: "Коллекция объектов на странице."
  overload: System.Web.HttpApplicationState.StaticObjects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.UnLock
  id: UnLock
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: UnLock()
  nameWithType: HttpApplicationState.UnLock()
  fullName: System.Web.HttpApplicationState.UnLock()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Разблокирует доступ к <xref href=&quot;System.Web.HttpApplicationState&quot;> </xref> переменной для упрощения синхронизации доступа."
  remarks: "<xref:System.Web.HttpApplicationState>Класс выполняет автоматическая блокировка и разблокировка с <xref:System.Web.HttpApplicationState.AllKeys%2A>и <xref:System.Web.HttpApplicationState.Count%2A>Свойства и <xref:System.Web.HttpApplicationState.Add%2A>, <xref:System.Web.HttpApplicationState.Clear%2A>, <xref:System.Web.HttpApplicationState.Get%2A>, <xref:System.Web.HttpApplicationState.GetKey%2A>, <xref:System.Web.HttpApplicationState.Remove%2A>, <xref:System.Web.HttpApplicationState.RemoveAt%2A>и <xref:System.Web.HttpApplicationState.Set%2A>методы.</xref:System.Web.HttpApplicationState.Set%2A> </xref:System.Web.HttpApplicationState.RemoveAt%2A> </xref:System.Web.HttpApplicationState.Remove%2A> </xref:System.Web.HttpApplicationState.GetKey%2A> </xref:System.Web.HttpApplicationState.Get%2A> </xref:System.Web.HttpApplicationState.Clear%2A> </xref:System.Web.HttpApplicationState.Add%2A> </xref:System.Web.HttpApplicationState.Count%2A> </xref:System.Web.HttpApplicationState.AllKeys%2A> </xref:System.Web.HttpApplicationState> Тем не менее, явным образом с помощью <xref:System.Web.HttpApplicationState.Lock%2A>и методы снятия блокировки при наличии ряд операций может быть более эффективным.</xref:System.Web.HttpApplicationState.Lock%2A>"
  example:
  - "The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and UnLock method to prevent other sessions from changing the value of two application variables until after the local session has changed them.  \n  \n [!code-cs[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_6_1.cs)]\n [!code-vb[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_6_1.vb)]"
  syntax:
    content: public void UnLock ();
    parameters: []
  overload: System.Web.HttpApplicationState.UnLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.Specialized.NameObjectCollectionBase
- uid: System.Web.HttpApplicationState.Add(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Add(String,Object)
  nameWithType: HttpApplicationState.Add(String,Object)
  fullName: System.Web.HttpApplicationState.Add(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.HttpApplicationState.AllKeys
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
  fullName: System.Web.HttpApplicationState.AllKeys
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpApplicationState.Clear
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Clear()
  nameWithType: HttpApplicationState.Clear()
  fullName: System.Web.HttpApplicationState.Clear()
- uid: System.Web.HttpApplicationState.Contents
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Contents
  nameWithType: HttpApplicationState.Contents
  fullName: System.Web.HttpApplicationState.Contents
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpApplicationState.Count
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Count
  nameWithType: HttpApplicationState.Count
  fullName: System.Web.HttpApplicationState.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpApplicationState.Get(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get(Int32)
  nameWithType: HttpApplicationState.Get(Int32)
  fullName: System.Web.HttpApplicationState.Get(Int32)
- uid: System.Web.HttpApplicationState.Get(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get(String)
  nameWithType: HttpApplicationState.Get(String)
  fullName: System.Web.HttpApplicationState.Get(String)
- uid: System.Web.HttpApplicationState.GetKey(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: GetKey(Int32)
  nameWithType: HttpApplicationState.GetKey(Int32)
  fullName: System.Web.HttpApplicationState.GetKey(Int32)
- uid: System.Web.HttpApplicationState.Item(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item(Int32)
  nameWithType: HttpApplicationState.Item(Int32)
  fullName: System.Web.HttpApplicationState.Item(Int32)
- uid: System.Web.HttpApplicationState.Item(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item(String)
  nameWithType: HttpApplicationState.Item(String)
  fullName: System.Web.HttpApplicationState.Item(String)
- uid: System.Web.HttpApplicationState.Lock
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Lock()
  nameWithType: HttpApplicationState.Lock()
  fullName: System.Web.HttpApplicationState.Lock()
- uid: System.Web.HttpApplicationState.Remove(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Remove(String)
  nameWithType: HttpApplicationState.Remove(String)
  fullName: System.Web.HttpApplicationState.Remove(String)
- uid: System.Web.HttpApplicationState.RemoveAll
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAll()
  nameWithType: HttpApplicationState.RemoveAll()
  fullName: System.Web.HttpApplicationState.RemoveAll()
- uid: System.Web.HttpApplicationState.RemoveAt(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: HttpApplicationState.RemoveAt(Int32)
  fullName: System.Web.HttpApplicationState.RemoveAt(Int32)
- uid: System.Web.HttpApplicationState.Set(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Set(String,Object)
  nameWithType: HttpApplicationState.Set(String,Object)
  fullName: System.Web.HttpApplicationState.Set(String,Object)
- uid: System.Web.HttpApplicationState.StaticObjects
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
  fullName: System.Web.HttpApplicationState.StaticObjects
- uid: System.Web.HttpStaticObjectsCollection
  parent: System.Web
  isExternal: false
  name: HttpStaticObjectsCollection
  nameWithType: HttpStaticObjectsCollection
  fullName: System.Web.HttpStaticObjectsCollection
- uid: System.Web.HttpApplicationState.UnLock
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: UnLock()
  nameWithType: HttpApplicationState.UnLock()
  fullName: System.Web.HttpApplicationState.UnLock()
- uid: System.Web.HttpApplicationState.Add*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Add
  nameWithType: HttpApplicationState.Add
- uid: System.Web.HttpApplicationState.AllKeys*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
- uid: System.Web.HttpApplicationState.Clear*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Clear
  nameWithType: HttpApplicationState.Clear
- uid: System.Web.HttpApplicationState.Contents*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Contents
  nameWithType: HttpApplicationState.Contents
- uid: System.Web.HttpApplicationState.Count*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Count
  nameWithType: HttpApplicationState.Count
- uid: System.Web.HttpApplicationState.Get*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get
  nameWithType: HttpApplicationState.Get
- uid: System.Web.HttpApplicationState.GetKey*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: GetKey
  nameWithType: HttpApplicationState.GetKey
- uid: System.Web.HttpApplicationState.Item*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item
  nameWithType: HttpApplicationState.Item
- uid: System.Web.HttpApplicationState.Lock*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Lock
  nameWithType: HttpApplicationState.Lock
- uid: System.Web.HttpApplicationState.Remove*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Remove
  nameWithType: HttpApplicationState.Remove
- uid: System.Web.HttpApplicationState.RemoveAll*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAll
  nameWithType: HttpApplicationState.RemoveAll
- uid: System.Web.HttpApplicationState.RemoveAt*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAt
  nameWithType: HttpApplicationState.RemoveAt
- uid: System.Web.HttpApplicationState.Set*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Set
  nameWithType: HttpApplicationState.Set
- uid: System.Web.HttpApplicationState.StaticObjects*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
- uid: System.Web.HttpApplicationState.UnLock*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: UnLock
  nameWithType: HttpApplicationState.UnLock
