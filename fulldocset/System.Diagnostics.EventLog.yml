### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLog
  id: EventLog
  children:
  - System.Diagnostics.EventLog.#ctor
  - System.Diagnostics.EventLog.#ctor(System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String)
  - System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.BeginInit
  - System.Diagnostics.EventLog.Clear
  - System.Diagnostics.EventLog.Close
  - System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  - System.Diagnostics.EventLog.Delete(System.String)
  - System.Diagnostics.EventLog.Delete(System.String,System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String)
  - System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  - System.Diagnostics.EventLog.Dispose(System.Boolean)
  - System.Diagnostics.EventLog.EnableRaisingEvents
  - System.Diagnostics.EventLog.EndInit
  - System.Diagnostics.EventLog.Entries
  - System.Diagnostics.EventLog.EntryWritten
  - System.Diagnostics.EventLog.Exists(System.String)
  - System.Diagnostics.EventLog.Exists(System.String,System.String)
  - System.Diagnostics.EventLog.GetEventLogs
  - System.Diagnostics.EventLog.GetEventLogs(System.String)
  - System.Diagnostics.EventLog.Log
  - System.Diagnostics.EventLog.LogDisplayName
  - System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  - System.Diagnostics.EventLog.MachineName
  - System.Diagnostics.EventLog.MaximumKilobytes
  - System.Diagnostics.EventLog.MinimumRetentionDays
  - System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  - System.Diagnostics.EventLog.OverflowAction
  - System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  - System.Diagnostics.EventLog.Source
  - System.Diagnostics.EventLog.SourceExists(System.String)
  - System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  - System.Diagnostics.EventLog.SynchronizingObject
  - System.Diagnostics.EventLog.WriteEntry(System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  - System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  - System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  langs:
  - csharp
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog
  type: Class
  summary: "Обеспечивает взаимодействие с журналами событий Windows."
  remarks: "Журнал событий позволяет получить доступ к и настройку журналы событий Windows, которые записываются сведения о важных событиях оборудования или программного обеспечения. С помощью журнала событий, вы можно читать существующие, добавлять записи в журнал, создание или удаление источников событий, удалять журналы и отвечать на записи журнала. Можно также создавать новые журналы при создании источника события.      Настроек [!IMPORTANT] настроек этот тип реализует <xref:System.IDisposable>интерфейса.</xref:System.IDisposable> После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A>метод в `try` / `catch` блока.</xref:System.IDisposable.Dispose%2A> Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable>разделе интерфейса.</xref:System.IDisposable>       Помимо доступа к отдельным журналам событий и их записи, класса EventLog обеспечивает доступ к коллекции всех журналов событий. Можно использовать `static` EventLog удалять журналы, получить список журналов, создание или удаление источника или определить компьютер конкретного источника.       Три журнала событий по умолчанию: приложения, системы и безопасности. Журнал безопасности доступен только для чтения. Другие приложения и службы, устанавливаемые, например Active Directory, могут иметь дополнительные журналы событий.       Существуют вопросы безопасности при использовании класса EventLog. Требуется EventLog <xref:System.Diagnostics.EventLogPermission>разрешения для определенных действий в .NET Framework 2.0 и более поздних версиях или полным доверием в .NET Framework 1.0 и 1.1.</xref:System.Diagnostics.EventLogPermission> Рекомендуется, чтобы <xref:System.Diagnostics.EventLogPermission>не предоставляется коду с частичным доверием.</xref:System.Diagnostics.EventLogPermission>  Никогда не следует передавать любой объект журнала событий, включая <xref:System.Diagnostics.EventLogEntryCollection>и <xref:System.Diagnostics.EventLogEntry>объекты менее доверенному коду.</xref:System.Diagnostics.EventLogEntry> </xref:System.Diagnostics.EventLogEntryCollection> Например для создания объекта EventLog, вносить записи и затем передачу EventLog частично доверенный код, который может создавать угрозу безопасности, поскольку возможность чтения и записи в журнал событий позволяет коду выполнять действия, такие как помещение сообщений журнала событий имя другого приложения.       Начиная с Windows Vista управления учетных записей (UAC) определяет учетные данные пользователя. Если вы являетесь членом группы администраторов, вы присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Чтобы запустить код, который обращается к журнал безопасности, необходимо сначала повысить свои учетные данные от обычного пользователя до администратора. Это можно сделать при запуске приложения, открыв контекстное меню для приложения (Если вы используете мышь, щелкните правой кнопкой мыши значок приложения) и означает, что вы хотите запустить от имени администратора.       Журнал событий можно использовать для создания пользовательского журнала событий, которые можно просматривать с помощью средства просмотра событий сервера. Используйте <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A>метод для отображения локализованное имя для журналов событий в средстве просмотра событий.</xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>метод, чтобы настроить поведение журнала событий при достижении максимального размера.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       Для чтения из журнала событий, укажите имя журнала (<xref:System.Diagnostics.EventLog.Log%2A> Свойства) и имя сервера (<xref:System.Diagnostics.EventLog.MachineName%2A> свойство в журнале событий.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Если не указать имя компьютера сервера, локального компьютера, «.», подразумевается. Это не обязательно указывать источник события (<xref:System.Diagnostics.EventLog.Source%2A> Свойства), так как источник является обязательным только для записи в журналы.</xref:System.Diagnostics.EventLog.Source%2A> <xref:System.Diagnostics.EventLog.Entries%2A>Автоматически заполняется списком записей журнала событий.</xref:System.Diagnostics.EventLog.Entries%2A>       Для записи в журнал событий, указать или создать источник событий (<xref:System.Diagnostics.EventLog.Source%2A> свойство).</xref:System.Diagnostics.EventLog.Source%2A> Необходимо иметь учетные данные администратора на компьютере, чтобы создать новый источник событий. Источник события приложение регистрируется в журнале событий как источник записей. Источник события можно использовать для записи только один журнал одновременно. <xref:System.Diagnostics.EventLog.Source%2A>Свойство может быть любой строкой, но имя должно отличаться от других источников на компьютере.</xref:System.Diagnostics.EventLog.Source%2A> Источник события обычно является имя приложения или другой идентификатор. При попытке создания дубликата <xref:System.Diagnostics.EventLog.Source%2A>значение приводит к возникновению исключения.</xref:System.Diagnostics.EventLog.Source%2A> Однако один журнал событий может быть связан с несколькими источниками.       Если источник события в журнале событий, связанных с экземпляром EventLog не существует, создается новый источник событий. Для создания источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь учетные данные администратора.       Это требование не так, как необходимо произвести поиск всех журналов событий, включая журналы безопасности, чтобы определить, является ли источник событий уникальный. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException>возникает исключение.</xref:System.Security.SecurityException>      Настроек [!IMPORTANT] настроек Создание или удаление источника событий требует синхронизации основного кода с помощью именованного мьютекса. Если приложение с обширными правами доступа блокирует именованный мьютекс, при попытке создать или удалить источник событий возникает приложение перестает отвечать на запросы до снятия блокировки. Чтобы предотвратить возникновение этой проблемы, никогда не предоставлять <xref:System.Security.Permissions.SecurityPermissionFlag>разрешение в ненадежный код.</xref:System.Security.Permissions.SecurityPermissionFlag> Кроме того <xref:System.Security.Permissions.SecurityPermissionFlag>разрешение потенциально позволяет пропускать другие разрешения и должно предоставляться только высоконадежным коду.</xref:System.Security.Permissions.SecurityPermissionFlag>       Приложений и служб следует записывать в журнал приложений или пользовательского журнала. Драйверы устройств необходимо создавать в системном журнале. Если явно не задано <xref:System.Diagnostics.EventLog.Log%2A>свойство по умолчанию журнал событий в журнал приложения.</xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек не требуется защитить приложения от записи, как любой зарегистрированный источник.  Если приложению предоставляется <xref:System.Diagnostics.EventLogPermissionAccess>разрешение, он может записывать события для любой допустимый источник зарегистрирован на компьютере.</xref:System.Diagnostics.EventLogPermissionAccess>       Использование <xref:System.Diagnostics.EventLog.WriteEvent%2A>и <xref:System.Diagnostics.EventLog.WriteEntry%2A>методы для записи событий в журнале событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновляется список источников событий и попытке записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>объекта или <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь учетные данные администратора на компьютере, чтобы создать новый источник событий.       Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов. Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник обновленной конфигурации вместо удаления существующего источника.       Можно зарегистрировать источник событий с локализованными ресурсами для событий категории и сообщение строк. Для внесения записей в журнале событий в приложении с помощью идентификаторов ресурсов вместо указания фактических значений строк. Ссылаться на <xref:System.Diagnostics.EventLogInstaller>и <xref:System.Diagnostics.EventSourceCreationData>Дополнительные сведения о настройке источника с файлами ресурсов.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Если приложение записывает значения строк напрямую в журнал событий, у вас Установка свойств для источника ресурса. Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       При записи событий, необходимо указать по крайней мере строку сообщения или идентификатор ресурса для строки сообщения. Остальные свойства события являются необязательными. Примеры необязательные параметры события включают следующие:-можно задать <xref:System.Diagnostics.EventLogEntryType>для определения значка, который отображает окно просмотра событий для записи.</xref:System.Diagnostics.EventLogEntryType>      -Можно указать идентификатор категории события, если приложение использует категории для фильтрации событий.      -Можно присоединить двоичных данных в запись событий, чтобы связать Дополнительные сведения с данным событием.      Настроек [!IMPORTANT] настроек ведение журнала событий требует места на диске, процессора и других системных ресурсов. Очень важно в журнал только необходимые данные. Рекомендуется помещать вызовы журнала событий в путь ошибок вместо пути основной код, поэтому они не повредит производительности.       Список начальных значений свойств для экземпляра класса EventLog см. в разделе <xref:System.Diagnostics.EventLog.%23ctor%2A>конструктор.</xref:System.Diagnostics.EventLog.%23ctor%2A>"
  example:
  - "The following example creates the event source `MySource` if it doesn't already exist, and writes an entry to the event log `MyNewLog`.  \n  \n> [!NOTE]\n>  Starting with Windows Vista, you must run this application as an administrator.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("EntryWritten")]

      [System.ComponentModel.InstallerType("System.Diagnostics.EventLogInstaller, System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Diagnostics.MonitoringDescription("EventLogDesc")]

      public class EventLog : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor
  id: '#ctor'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.EventLog&quot;></xref> class. Связывает экземпляр с какой-либо журнал."
  remarks: "Перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A>свойство <xref:System.Diagnostics.EventLog>экземпляра.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A>из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      Настроек [!NOTE] настроек Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.MachineName%2A>       В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Свойство | Начальное значение |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Пустая строка (»»). | | <xref:System.Diagnostics.EventLog.Log%2A>| Пустая строка (»»). | | <xref:System.Diagnostics.EventLog.MachineName%2A>| Локальный компьютер (».»). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_9_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_9_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_9_1.vb)]"
  syntax:
    content: public EventLog ();
    parameters: []
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.EventLog&quot;></xref> class. Связывает экземпляр с журналом на локальном компьютере."
  remarks: "Эта перегрузка задает <xref:System.Diagnostics.EventLog.Log%2A>Свойства `logName` параметра.</xref:System.Diagnostics.EventLog.Log%2A> Перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A>свойство <xref:System.Diagnostics.EventLog>экземпляра.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A>из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      Настроек [!NOTE] настроек Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.MachineName%2A> Эта перегрузка конструктора задает <xref:System.Diagnostics.EventLog.Log%2A>Свойства, но можно изменить перед чтением <xref:System.Diagnostics.EventLog.Entries%2A>свойство.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.Log%2A>       Если в источнике, укажите в <xref:System.Diagnostics.EventLog.Source%2A>свойство уникален из других источников на компьютере, в последующем вызове <xref:System.Diagnostics.EventLog.WriteEntry%2A>создает журнал с указанным именем, если он еще не существует.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>       В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Свойство | Начальное значение |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Пустая строка (»»). | | <xref:System.Diagnostics.EventLog.Log%2A>| `logName` Параметр. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| Локальный компьютер (».»). |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_13_1.cs)]\n [!code-vb[Classic EventLog.EventLog1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_13_1.vb)]"
  syntax:
    content: public EventLog (string logName);
    parameters:
    - id: logName
      type: System.String
      description: "Имя журнала на локальном компьютере."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Имя журнала — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимое имя журнала."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.EventLog&quot;></xref> class. Связывает экземпляр с журналом на указанном компьютере."
  remarks: "Эта перегрузка задает <xref:System.Diagnostics.EventLog.Log%2A>Свойства `logName` параметр и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства `machineName` параметра.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Перед вызовом <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A>свойство <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A>из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Entries%2A>      Настроек [!NOTE] настроек Эта перегрузка конструктора задает <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства, но его можно изменить перед чтением <xref:System.Diagnostics.EventLog.Entries%2A>свойство.</xref:System.Diagnostics.EventLog.Entries%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>       В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Свойство | Начальное значение |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| Пустая строка (»»). | | <xref:System.Diagnostics.EventLog.Log%2A>| `logName` Параметр. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| `machineName` Параметр. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example reads entries in the event log, \"myNewLog\", on the computer \"myServer\".  \n  \n [!code-cs[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_0_1.cs)]\n [!code-cpp[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_0_1.cpp)]\n [!code-vb[Classic EventLog.EventLog2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_0_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: "Имя журнала на указанном компьютере."
    - id: machineName
      type: System.String
      description: "Компьютер, на котором существует журнал."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Имя журнала — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимое имя журнала.       - или - недопустимое имя компьютера."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initializes a new instance of the <xref href=&quot;System.Diagnostics.EventLog&quot;></xref> class. Связывает экземпляр с журналом на указанном компьютере и создает или присваивает заданный источник для <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>."
  remarks: "Этот конструктор задает <xref:System.Diagnostics.EventLog.Log%2A>Свойства `logName` параметр <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства `machineName` параметра и <xref:System.Diagnostics.EventLog.Source%2A>Свойства `source` параметра.</xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> <xref:System.Diagnostics.EventLog.Source%2A>Свойство является обязательным при записи в журнал событий.</xref:System.Diagnostics.EventLog.Source%2A> Тем не менее если выполняется только чтение из журнала событий, только <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>(поскольку журнал событий на сервере имеет источник, уже связанной с ним) требуются свойства.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> При чтении журнала событий, достаточно другую перегрузку конструктора.       В следующей таблице показаны исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog>      | Свойство | Начальное значение |   |--------------|-------------------|   | <xref:System.Diagnostics.EventLog.Source%2A>| `source` Параметр. |   | <xref:System.Diagnostics.EventLog.Log%2A>| `logName` Параметр. |   | <xref:System.Diagnostics.EventLog.MachineName%2A>| `machineName` Параметр. |</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.Source%2A>"
  example:
  - "The following example writes an entry to an event log, \"MyNewLog\", on the local computer, using the source \"MySource\".  \n  \n [!code-cs[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/csharp/fd99d44e-2d79-45f8-97e3-_1.cs)]\n [!code-cpp[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/cpp/fd99d44e-2d79-45f8-97e3-_1.cpp)]\n [!code-vb[Classic EventLog.EventLog3 Example#1](~/add/codesnippet/visualbasic/fd99d44e-2d79-45f8-97e3-_1.vb)]"
  syntax:
    content: public EventLog (string logName, string machineName, string source);
    parameters:
    - id: logName
      type: System.String
      description: "Имя журнала на указанном компьютере"
    - id: machineName
      type: System.String
      description: "Компьютер, на котором существует журнал."
    - id: source
      type: System.String
      description: "Источник записей журнала событий."
  overload: System.Diagnostics.EventLog.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Имя журнала — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимое имя журнала.       - или - недопустимое имя компьютера."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.BeginInit
  id: BeginInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Начинает инициализацию <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> используемого в форме или другим компонентом. Инициализация происходит во время выполнения."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] Разработки, этот метод применяется в среде для запуска инициализации компонента, используемого в форме или другим компонентом. <xref:System.Diagnostics.EventLog.EndInit%2A>Метод завершает инициализацию.</xref:System.Diagnostics.EventLog.EndInit%2A> С помощью BeginInit и <xref:System.Diagnostics.EventLog.EndInit%2A>методы предотвращения использования до полной инициализации элемента управления.</xref:System.Diagnostics.EventLog.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.BeginInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Diagnostics.EventLog&quot;></xref>уже инициализирован."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Clear
  id: Clear
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Удаляет все записи из журнала событий."
  remarks: "Журналы событий устанавливается максимальный размер, который определяет, сколько записей, они могут содержать. При переполнении журнала событий, он прекращает запись новых событий или начинается перезапись предыдущих операций. Если останавливает запись событий, можно использовать этот метод, чтобы удалить существующие записи из журнала и снова запустить запись событий. Необходимо иметь разрешения администратора на компьютере, на котором находится журнал, чтобы очистить данные журнала событий.       Снимите закрывает журнал событий, удаляет дескрипторы событий, получает новые дескрипторы чтения и записи и затем заново открывает журнал событий. Вместе с существующие события удаляются события, получаемые после вызова метода."
  example:
  - "The following example clears an event log.  \n  \n> [!CAUTION]\n>  Because Application, System, Security, and other non-custom logs can contain crucial information; be sure to specify a custom log before executing this example code. This example deletes the custom log `myNewLog`.  \n  \n [!code-cs[Classic EventLog.Clear Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_11_1.cs)]\n [!code-vb[Classic EventLog.Clear Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_11_1.vb)]\n [!code-cpp[Classic EventLog.Clear Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_11_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Diagnostics.EventLog.Clear*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Журнал событий не было завершено успешно.       - или - журнал не может быть открыт. Код ошибки Windows недоступен."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Значение не указано для <xref:System.Diagnostics.EventLog.Log*>свойство.</xref:System.Diagnostics.EventLog.Log*> Убедитесь, что имя журнала не является пустой строкой."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Журнал не существует."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Close
  id: Close
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Закрывает журнал событий и удаляет дескрипторы чтения и записи."
  remarks: "Вызван метод Close защищенным <xref:System.ComponentModel.Component.Dispose%2A>метод.</xref:System.ComponentModel.Component.Dispose%2A> Необходимо вызывать перед вызовом <xref:System.ComponentModel.Component.Dispose%2A>.</xref:System.ComponentModel.Component.Dispose%2A> закрыть"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Diagnostics.EventLog.Close*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Дескриптор чтения журнала событий или дескриптор записи не был успешно удален."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  id: CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Устанавливает допустимого источника событий для записи локализованных событий сообщений, используя указанные свойства конфигурации для источника событий и соответствующий журнал событий."
  remarks: "Use this overload to configure a new source for writing entries to an event log on the local computer or a remote computer. It is not necessary to use this method to read from an event log.  \n  \n The CreateEventSource method uses the input `sourceData`<xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> and <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> properties to create registry values on the target computer for the new source and its associated event log. A new source name cannot match an existing source name or an existing event log name on the target computer. If the <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> property is not set, the source is registered for the Application event log. If the <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> is not set, the source is registered on the local computer.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  Starting with Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n Each source can only write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n You can register the event source with localized resource file(s) for your event category and message strings. Your application can write event log entries using resource identifiers, rather than specifying the actual string. The Event Viewer uses the resource identifier to find and display the corresponding string from the localized resource file based on current language settings. You can register a separate file for event categories, messages and parameter insertion strings, or you can register the same resource file for all three types of strings. Use the <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, and <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> properties to configure the source to write localized entries to the event log. If your application writes strings values directly to the event log, you do not need to set these properties.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source is configured for an event log, and you reconfigure it for another event log, you must restart the computer for the changes to take effect."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/4fd418fb-73e7-42a9-9ba2-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/4fd418fb-73e7-42a9-9ba2-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/4fd418fb-73e7-42a9-9ba2-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void CreateEventSource (System.Diagnostics.EventSourceCreationData sourceData);
    parameters:
    - id: sourceData
      type: System.Diagnostics.EventSourceCreationData
      description: "Свойства конфигурации для источника события и его целевого журнала событий."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The computer name specified in <code>sourceData</code> is not valid.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid. Event log names must consist of printable characters and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n The log name specified in <code>sourceData</code> is not valid for user log creation. The Event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of the log name specified in <code>sourceData</code> are not unique.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> is already registered.  \n  \n \\- or -  \n  \n The source name specified in <code>sourceData</code> matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  id: CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Устанавливает указанное имя источника в качестве допустимого источника событий для внесения записей в журнал на локальном компьютере. Этот метод также можно создать новый пользовательский журнал на локальном компьютере."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the local computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the local computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. Starting with Windows Vista, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log on the local computer. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A> when reading from a log, the local computer (\".\") is assumed.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_15_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_15_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_15_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника, по которому приложение регистрируется на локальном компьютере."
    - id: logName
      type: System.String
      description: "Имя журнала записываются источника записей. Возможные значения включают приложения, System или имя пользовательского журнала событий."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the local computer.  \n  \n \\- or -  \n  \n The source name matches an existing event log name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удается открыть раздел реестра для журнала событий на локальном компьютере."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  id: CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Устанавливает указанное имя источника в качестве допустимого источника событий для внесения записей в журнал на указанном компьютере. Этот метод может также использоваться для создания нового пользовательского журнала на заданном компьютере."
  remarks: "Use this overload to create a custom log or to create and register a <xref:System.Diagnostics.EventLog.Source%2A> to an existing log on the specified computer.  \n  \n If `logName` is `null` or an empty string (\"\") when you call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, the log defaults to the Application log. If the log does not exist on the specified computer, the system creates a custom log and registers your application as a <xref:System.Diagnostics.EventLog.Source%2A> for that log.  \n  \n You only need to create an event source if you are writing to the event log. Before writing an entry to an event log, you must register the event source with the event log as a valid source of events. When you write a log entry, the system uses the <xref:System.Diagnostics.EventLog.Source%2A> to find the appropriate log in which to place your entry. If you are reading the event log, you can either specify the <xref:System.Diagnostics.EventLog.Source%2A>, or a <xref:System.Diagnostics.EventLog.Log%2A> and <xref:System.Diagnostics.EventLog.MachineName%2A>.  \n  \n> [!NOTE]\n>  To create an event source in Windows Vista and later or Windows Server 2003, you must have administrative privileges.  \n>   \n>  The reason for this requirement is that all event logs, including security, must be searched to determine whether the event source is unique. In Windows Vista and later, users do not have permission to access the security log; therefore, a <xref:System.Security.SecurityException> is thrown.  \n>   \n>  In Windows Vista and later, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that accesses the security log, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n Use <xref:System.Diagnostics.EventLog.WriteEvent%2A> and <xref:System.Diagnostics.EventLog.WriteEntry%2A> to write events to an event log. You must specify an event source to write events; you must create and configure the event source before writing the first entry with the source.  \n  \n Create the new event source during the installation of your application. This allows time for the operating system to refresh its list of registered event sources and their configuration. If the operating system has not refreshed its list of event sources, and you attempt to write an event with the new source, the write operation will fail. You can configure a new source using an <xref:System.Diagnostics.EventLogInstaller>, or using the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method. You must have administrative rights on the computer to create a new event source.  \n  \n You can create an event source for an existing event log or a new event log. When you create a new source for a new event log, the system registers the source for that log, but the log is not created until the first entry is written to it.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the <xref:System.Diagnostics.EventLog.Log%2A> property with the \".evt\" file name extension.  \n  \n The source must be unique on the local computer; a new source name cannot match an existing source name or an existing event log name. Each source can write to only one event log at a time; however, your application can use multiple sources to write to multiple event logs. For example, your application might require multiple sources configured for different event logs or different resource files.  \n  \n The source must be configured either for writing localized entries or for writing direct strings. If your application writes entries using both resource identifiers and string values, you must register two separate sources. For example, configure one source with resource files, and then use that source in the <xref:System.Diagnostics.EventLog.WriteEvent%2A> method to write entries using resource identifiers to the event log. Then create a different source without resource files, and use that source in the <xref:System.Diagnostics.EventLog.WriteEntry%2A> method to write strings directly to the event log using that source.  \n  \n To change the configuration details of an existing source, you must delete the source and then create it with the new configuration. If other applications or components use the existing source, create a new source with the updated configuration rather than deleting the existing source.  \n  \n> [!NOTE]\n>  If a source has already been mapped to a log and you remap it to a new log, you must restart the computer for the changes to take effect."
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/86732307-05e6-4c1a-b98e-_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/86732307-05e6-4c1a-b98e-_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/86732307-05e6-4c1a-b98e-_1.vb)]"
  syntax:
    content: public static void CreateEventSource (string source, string logName, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: logName
      type: System.String
      description: "Имя журнала записываются источника записей. Возможные значения включают приложения, System или имя пользовательского журнала событий. Если вы не укажете значение, `logName` значения по умолчанию для приложения."
    - id: machineName
      type: System.String
      description: "Имя компьютера, на котором регистрируется источник событий или «.» для локального компьютера."
  overload: System.Diagnostics.EventLog.CreateEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> is not a valid computer name.  \n  \n \\- or -  \n  \n <code>source</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>logName</code> is not a valid event log name. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'.  \n  \n \\- or -  \n  \n <code>logName</code> is not valid for user log creation. The event log names AppEvent, SysEvent, and SecEvent are reserved for system use.  \n  \n \\- or -  \n  \n The log name matches an existing event source name.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters.  \n  \n \\- or -  \n  \n The first 8 characters of <code>logName</code> match the first 8 characters of an existing event log name on the specified computer.  \n  \n \\- or -  \n  \n The source cannot be registered because it already exists on the specified computer.  \n  \n \\- or -  \n  \n The source name matches an existing event source name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удается открыть раздел реестра для журнала событий на указанном компьютере."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String)
  id: Delete(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Удаляет журнал событий на локальном компьютере."
  remarks: "Этот метод следует используйте, когда журнал, который вы хотите удалить на локальном компьютере. Можно удалить любой журнал на компьютере, при наличии необходимых разрешений для реестра.       Инструкция DELETE удаляет журнал, указанный в `logName` с локального компьютера. Если вы хотите удалить только источник зарегистрирован в журнале, вызовите <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> Удаление и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>являются `static` методы, поэтому их можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Нет необходимости создавать новый экземпляр <xref:System.Diagnostics.EventLog>для вызова любого метода.</xref:System.Diagnostics.EventLog>       Метод Delete удаляет файл, содержащий содержимое журнала. Затем открывает реестр и удаляет все источники событий, зарегистрированные для этого журнала. При повторном создании журнала на более позднем этапе, следует зарегистрировать источников событий снова, если они хотят использовать повторно. Если не следует регистрировать источники событий и записи других пользователей на источник события не указано имя журнала, источник события будут созданы в журнал событий приложений. Таким образом приложения, которые ранее были возможность добавлять записи в журнал удален и создан заново запишет в журнал приложений вместо этого, так как он теперь содержит источник события.      Настроек [!NOTE] настроек повторное создание журнала событий может быть трудоемким процессом. Избегайте, удалять созданные системой журналы событий, например журнал приложений.       Вход через вызов для удаления автоматически при удалении источников, зарегистрированных в этом журнале. Это можно сделать другие приложения, использующие этот журнал не применяются."
  example:
  - "The following example deletes a log from the local computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_12_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_12_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public static void Delete (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Имя журнала, который нужно удалить. Возможные значения: приложения, безопасности, системы и пользовательского журнала событий на компьютере.'
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code>является пустой строкой (&quot;») или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the local computer.  \n  \n \\- or -  \n  \n The log does not exist on the local computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Журнал событий не было завершено успешно.       - или - журнал не может быть открыт. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  id: Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Удаляет журнал событий с указанного компьютера."
  remarks: "Этот метод следует используйте, когда журнал, который вы хотите удалить на удаленном компьютере. Можно удалить любой журнал на компьютере, при наличии необходимых разрешений для реестра.       <xref:System.Diagnostics.EventLog.Delete%2A>Удаляет журнал, указанный в `logName` из компьютера, указанного параметром `machineName`.</xref:System.Diagnostics.EventLog.Delete%2A> Если вы хотите удалить только источник зарегистрирован в журнале, вызовите <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>являются `static` методы, поэтому их можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>для вызова любого метода.</xref:System.Diagnostics.EventLog>       Этот метод сначала удаляет файл, содержащий содержимое журнала. Затем открывает реестр и удаляет все источники событий, зарегистрированные для этого журнала. При повторном создании журнала на более позднем этапе, следует зарегистрировать источников событий снова, если они хотят использовать повторно. Если не следует регистрировать источники событий и записи других пользователей на источник события не указано имя журнала, источник события будут созданы в журнал событий приложений. Таким образом приложения, которые ранее были возможность добавлять записи в журнал удален и создан заново запишет в журнал приложений вместо этого, так как он теперь содержит источник события.      Настроек [!NOTE] настроек повторное создание журнала событий может быть трудоемким процессом. Избегайте, удалять созданные системой журналы событий, например журнал приложений.       Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A>автоматически удаляет источников, зарегистрированных в этом журнале.</xref:System.Diagnostics.EventLog.Delete%2A> Это можно сделать другие приложения, использующие этот журнал не применяются."
  example:
  - "The following example deletes a log from the specified computer. The example determines the log from its source.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_17_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_17_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public static void Delete (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Имя журнала, который нужно удалить. Возможные значения: приложения, безопасности, системы и пользовательского журнала событий на указанном компьютере.'
    - id: machineName
      type: System.String
      description: "Имя компьютера, с которого удаляется журнал, или «.» для локального компьютера."
  overload: System.Diagnostics.EventLog.Delete*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>logName</code> is an empty string (\"\") or <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>machineName</code> is not a valid computer name."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The registry key for the event log could not be opened on the specified computer.  \n  \n \\- or -  \n  \n The log does not exist on the specified computer."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Журнал событий не было завершено успешно.       - или - журнал не может быть открыт. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  id: DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Удаляет регистрацию источника событий из журнала событий на локальном компьютере."
  remarks: "Этот метод служит для удаления регистрации <xref:System.Diagnostics.EventLog.Source%2A>с локального компьютера.</xref:System.Diagnostics.EventLog.Source%2A> DeleteEventSource обращается к реестра на локальном компьютере, а также удаляется регистрация приложения в качестве допустимого источника событий.       Для записи журнала, больше не нужны, можно удалить компонент как источник событий. Например это можно сделать, при необходимо перенести компонент из одного журнала на другой. Так как источник может быть зарегистрирован только один журнал одновременно, изменение журнала необходимо сначала удалить текущую регистрацию.       DeleteEventSource удаляет только источник зарегистрировано в журнале. Если вы хотите удалить журнал, вызовите <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>и DeleteEventSource `static` методы, поэтому их можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.Delete%2A> Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>для вызова любого метода.</xref:System.Diagnostics.EventLog>       Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A>автоматически удаляет источников, зарегистрированных в этом журнале.</xref:System.Diagnostics.EventLog.Delete%2A> Это можно сделать другие приложения, использующие этот журнал не применяются.      Настроек [!NOTE] настроек необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_8_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_8_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_8_1.cs)]"
  syntax:
    content: public static void DeleteEventSource (string source);
    parameters:
    - id: source
      type: System.String
      description: "Имя, по которому приложение регистрируется в журнале событий системы."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> parameter does not exist in the registry of the local computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  id: DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Удаляет регистрацию источника событий приложения с указанного компьютера."
  remarks: "Используйте этот перегруженный метод для удаления регистрации <xref:System.Diagnostics.EventLog.Source%2A>с удаленного компьютера.</xref:System.Diagnostics.EventLog.Source%2A> <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>обращается к реестра на компьютере, указанном `machineName` и удаляет регистрацию приложения как допустимого источника событий.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A>       Для записи журнала, больше не нужны, можно удалить компонент как источник событий. Например это можно сделать, при необходимо перенести компонент из одного журнала на другой. Так как источник может быть зарегистрирован только один журнал одновременно, изменение журнала необходимо сначала удалить текущую регистрацию.       <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>Удаляет только источник зарегистрировано в журнале.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Если вы хотите удалить журнал, вызовите <xref:System.Diagnostics.EventLog.Delete%2A>.</xref:System.Diagnostics.EventLog.Delete%2A> Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>.</xref:System.Diagnostics.EventLog.Clear%2A> <xref:System.Diagnostics.EventLog.Delete%2A>и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>являются `static` методы, поэтому их можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A></xref:System.Diagnostics.EventLog.Delete%2A> Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>для вызова любого метода.</xref:System.Diagnostics.EventLog>       Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A>автоматически удаляет источников, зарегистрированных в этом журнале.</xref:System.Diagnostics.EventLog.Delete%2A> Это можно сделать другие приложения, использующие этот журнал не применяются.      Настроек [!NOTE] настроек необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу."
  example:
  - "The following example deletes a source from the specified computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cs[Classic EventLog.Delete1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_6_1.cs)]\n [!code-cpp[Classic EventLog.Delete1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_6_1.cpp)]\n [!code-vb[Classic EventLog.Delete1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_6_1.vb)]"
  syntax:
    content: public static void DeleteEventSource (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Имя, по которому приложение регистрируется в журнале событий системы."
    - id: machineName
      type: System.String
      description: "Имя компьютера, с которого удаляется регистрация, или «.» для локального компьютера."
  overload: System.Diagnostics.EventLog.DeleteEventSource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>machineName</code> parameter is invalid.  \n  \n \\- or -  \n  \n The <code>source</code> parameter does not exist in the registry of the specified computer.  \n  \n \\- or -  \n  \n You do not have write access on the registry key for the event log."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>source</code>Невозможно удалить, поскольку в реестре, родительский раздел реестра <code>source</code> не содержит подраздел с тем же именем."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref>, а при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые `Dispose()`метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> `Dispose()`вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A>вызывает `Dispose` с `disposing` значение `false`.</xref:System.Object.Finalize%2A>       При `disposing` параметр имеет значение true, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Diagnostics.EventLog>ссылки.</xref:System.Diagnostics.EventLog> Этот метод вызывает `Dispose()` метод для каждого объекта, на который указывает ссылка."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Diagnostics.EventLog.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> получает <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> уведомления о событиях."
  remarks: "Определяет свойство EnableRaisingEvents ли <xref:System.Diagnostics.EventLog>инициирует события при записи в журнал.</xref:System.Diagnostics.EventLog> Если свойство не `true`, компонентов, получающих <xref:System.Diagnostics.EventLog.EntryWritten>событие уведомления любое время записи в журнал, который указан в <xref:System.Diagnostics.EventLog.Log%2A>свойство.</xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.EntryWritten> Если EnableRaisingEvents `false`, события не вызываются.      Настроек [!NOTE] настроек уведомлений о событиях можно получать только в том случае, если запись вносится в журнал на локальном компьютере. Вы не сможете получать уведомления для записи в журнал на удаленных компьютерах."
  example:
  - "The following example handles an <xref:System.Diagnostics.EventLog.EntryWritten> event.  \n  \n [!code-cs[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_32_1.cs)]\n [!code-vb[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_32_1.vb)]\n [!code-cpp[Classic EventLog.EnableRaisingEvents Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_32_1.cpp)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> получает уведомления при внесении записи в журнал, в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.EnableRaisingEvents*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Журнал событий находится на удаленном компьютере."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EndInit
  id: EndInit
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Завершает инициализацию <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> используется в форме или другим компонентом. Инициализация происходит во время выполнения."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] Разработки, среда использует этот метод для завершения инициализации компонента, используемого в форме или другим компонентом. <xref:System.Diagnostics.EventLog.BeginInit%2A>Метод начинает инициализацию.</xref:System.Diagnostics.EventLog.BeginInit%2A> С помощью <xref:System.Diagnostics.EventLog.BeginInit%2A>и методы EndInit предотвращает использование до полной инициализации элемента управления.</xref:System.Diagnostics.EventLog.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Diagnostics.EventLog.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Entries
  id: Entries
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает содержимое журнала событий."
  remarks: "Используйте элемент записи при чтении из журнала событий.       Так как свойство доступно только для чтения, нельзя изменить запись или запись в журнал с помощью операции. Вместо этого укажите <xref:System.Diagnostics.EventLog.Source%2A>и вызов <xref:System.Diagnostics.EventLog.WriteEntry%2A>для записи в новый журнал событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A> Можно использовать для подсчета числа записей в журнале событий записи и просмотреть каждое <xref:System.Diagnostics.EventLogEntry>в коллекции.</xref:System.Diagnostics.EventLogEntry> Использовать индексированное <xref:System.Diagnostics.EventLogEntryCollection.Item%2A>член для извлечения сведений о конкретной записи, такие как <xref:System.Diagnostics.EventLogEntry.Message%2A>, <xref:System.Diagnostics.EventLogEntry.Category%2A>, <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>, или <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.</xref:System.Diagnostics.EventLogEntry.EntryType%2A> </xref:System.Diagnostics.EventLogEntry.TimeWritten%2A> </xref:System.Diagnostics.EventLogEntry.Category%2A> </xref:System.Diagnostics.EventLogEntry.Message%2A> </xref:System.Diagnostics.EventLogEntryCollection.Item%2A>       Нет необходимости указывать <xref:System.Diagnostics.EventLog.Source%2A>при чтении журнала.</xref:System.Diagnostics.EventLog.Source%2A> Можно указать только <xref:System.Diagnostics.EventLog.Log%2A>имя и <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства (имя сервера) для <xref:System.Diagnostics.EventLog>экземпляра.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> В любом случае член записи автоматически заполняется списком записей журнала событий. Можно выбрать соответствующий индекс для элемента в этом списке для чтения отдельных записей.       Важное различие между чтением и записью в журнал является то, что не требуется явно вызывать метод чтения. После <xref:System.Diagnostics.EventLog.Log%2A>и <xref:System.Diagnostics.EventLog.MachineName%2A>указаны, записи свойство заполняется автоматически.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A> Если изменить значение <xref:System.Diagnostics.EventLog.Log%2A>или <xref:System.Diagnostics.EventLog.MachineName%2A>Свойства записей, свойство будет заполнен повторно при очередном прочитать его.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A>при подключении к журналу.</xref:System.Diagnostics.EventLog.MachineName%2A> Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер, «.», предполагается.</xref:System.Diagnostics.EventLog.MachineName%2A>"
  example:
  - "The following example reads entries in the event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.Entries Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_23_1.cs)]\n [!code-cpp[Classic EventLog.Entries Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_23_1.cpp)]\n [!code-vb[Classic EventLog.Entries Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_23_1.vb)]"
  syntax:
    content: public System.Diagnostics.EventLogEntryCollection Entries { get; }
    return:
      type: System.Diagnostics.EventLogEntryCollection
      description: "<xref href=&quot;System.Diagnostics.EventLogEntryCollection&quot;> </xref> Котором хранятся записи в журнале событий. Каждая запись связана с экземпляром <xref href=&quot;System.Diagnostics.EventLogEntry&quot;> </xref> класса."
  overload: System.Diagnostics.EventLog.Entries*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.EntryWritten
  id: EntryWritten
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
  type: Event
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Происходит при внесении записи в журнал событий на локальном компьютере."
  remarks: "Для получения уведомлений о событиях, необходимо задать <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A>для `true`.</xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> Получают уведомления о событиях можно только в том случае, если запись вносится в журнал на локальном компьютере. Вы не сможете получать уведомления для записи в журнал на удаленных компьютерах.       При создании делегата EntryWritten, необходимо указать метод, обрабатывающий событие. Чтобы связать событие с обработчиком событий, добавьте в событие экземпляр делегата. Обработчик событий вызывается всякий раз, когда происходит событие, пока вы не удалите делегат. Дополнительные сведения об обработке событий с делегатами см. в разделе [события](~/add/includes/ajax-current-ext-md.md).       Система реагирует на <xref:System.Diagnostics.EventLog.WriteEntry%2A>только в том случае, если последняя запись события произошла ранее не меньше шести секунд.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Это означает, что вы будете получать одно уведомление о событии EntryWritten в&6; секундный интервал, происходит, даже если изменить более одного журнала событий. При вставке увеличить интервал (около 10 секунд) между вызовами <xref:System.Diagnostics.EventLog.WriteEntry%2A>, вероятность недопустима.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Тем не менее если запись событий происходит чаще, можно не получить уведомление о событии до следующего интервала. Как правило пропущенные уведомления о событиях не теряются, но задержка."
  example:
  - "The following example handles an entry written event.  \n  \n [!code-cs[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/csharp/e-system.diagnostics.eve_1.cs)]\n [!code-cpp[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/cpp/e-system.diagnostics.eve_1.cpp)]\n [!code-vb[Classic EventLog.EntryWritten Example#1](~/add/codesnippet/visualbasic/e-system.diagnostics.eve_1.vb)]"
  syntax:
    content: public event System.Diagnostics.EntryWrittenEventHandler EntryWritten;
    return:
      type: System.Diagnostics.EntryWrittenEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String)
  id: Exists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Определяет наличие журнала на локальном компьютере."
  remarks: "Используйте этот метод, чтобы определить, существует ли журнал на локальном компьютере. Если вы хотите определить, существует ли источник на локальном компьютере, используйте <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на локальном компьютере. в противном случае — запрос возвращает `false`.       Новый журнал не могут иметь имя существующего журнала на том же компьютере, используйте этот метод, прежде чем создавать новый журнал для определения, если указанный `logName` уже существует на локальном компьютере. `logName` Параметров регистр не учитывается.       Существует — `static` метод, его можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>для вызова Exists.</xref:System.Diagnostics.EventLog>"
  example:
  - >-
    [!code-cpp[EventLog_Exists_1#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_4_1.cpp)]
     [!code-vb[EventLog_Exists_1#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_4_1.vb)]
     [!code-cs[EventLog_Exists_1#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_4_1.cs)]
  syntax:
    content: public static bool Exists (string logName);
    parameters:
    - id: logName
      type: System.String
      description: 'Имя журнала для поиска. Возможные значения: приложение, безопасность, системы, другие имена журналов определенных приложений (например, связанные с Active Directory) или любого пользовательского журнала на компьютере.'
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если журнал существует на локальном компьютере. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Параметр logName принимает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустое значение."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  id: Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Определяет наличие журнала на указанном компьютере."
  remarks: "Используйте этот метод, чтобы определить, существует ли журнал на удаленном компьютере. Если вы хотите определить, существует ли источник на удаленном компьютере, используйте <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A>       Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на заданном компьютере; в противном случае — запрос возвращает `false`.       Новый журнал не могут иметь имя существующего журнала на том же компьютере, используйте этот метод, прежде чем создавать новый журнал для определения, если один с указанным `logName` уже существует на сервере, заданный параметром `machineName` параметр. `logName` И `machineName` параметров регистр не учитывается.       <xref:System.Diagnostics.EventLog.Exists%2A>— `static` метод, его можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.Exists%2A> Нет необходимости создавать новый экземпляр <xref:System.Diagnostics.EventLog>для вызова <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public static bool Exists (string logName, string machineName);
    parameters:
    - id: logName
      type: System.String
      description: 'Журнал, который требуется найти. Возможные значения: приложение, безопасность, системы, другие имена журналов определенных приложений (например, связанные с Active Directory) или любого пользовательского журнала на компьютере.'
    - id: machineName
      type: System.String
      description: "Имя компьютера, на котором выполняется поиск журнала, или «.» для локального компьютера."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если журнал существует на заданном компьютере; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.Exists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code> Параметра имеет недопустимый формат. Убедитесь, что используется правильный синтаксис для компьютера, на котором выполняется поиск.       - или - <code> logName </code> — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или пустое значение."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs
  id: GetEventLogs
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Выполняет поиск всех журналов событий на локальном компьютере и создает массив из <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> объектов, содержащих список."
  remarks: "Массив <xref:System.Diagnostics.EventLog>объектов представляет собой моментальный снимок всех журналов событий на локальном компьютере, при вызове для GetEventLogs.</xref:System.Diagnostics.EventLog> Это не динамическую коллекцию, поэтому он не отражает создания журналы в режиме реального времени и удаления. Следует убедиться, что журнала в массиве существует до считывания или записи в него. Обычно массив содержит по крайней мере три журнала: приложения, системы и безопасности. Если вы создали пользовательские журналы событий на локальном компьютере, они будут отображаться в массиве, а также.       Чтобы получить список журналов событий, необходимо иметь необходимых разрешений для реестра. Эти разрешения являются идентичными с разрешениями, необходимыми для вызова <xref:System.Diagnostics.EventLog.Exists%2A>и <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_10_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/m-system.diagnostics.eve_10_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/m-system.diagnostics.eve_10_1.cs)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs ();
    parameters: []
    return:
      type: System.Diagnostics.EventLog[]
      description: "Массив объектов типа <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> , представляющий журналы на локальном компьютере."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "У вас доступ на чтение в реестре.       - или - нет на компьютере отсутствует служба журнала событий."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  id: GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Выполняет поиск всех журналов событий на заданном компьютере и создает массив из <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> объектов, содержащих список."
  remarks: "Массив <xref:System.Diagnostics.EventLog>объектов представляет собой моментальный снимок всех журналов событий на компьютере, указанном `machineName` параметра при вызове <xref:System.Diagnostics.EventLog.GetEventLogs%2A>становится.</xref:System.Diagnostics.EventLog.GetEventLogs%2A> </xref:System.Diagnostics.EventLog> Это не динамическую коллекцию, поэтому он не отражает создания журналы в режиме реального времени и удаления. Следует убедиться, что журнала в массиве существует до считывания или записи в него. Обычно массив содержит по крайней мере три журнала: приложения, системы и безопасности. Если вы создали пользовательские журналы событий на указанном компьютере, они будут отображаться в массиве, а также.       <xref:System.Diagnostics.EventLog.GetEventLogs%2A>— `static` метод, поэтому он может быть вызван на <xref:System.Diagnostics.EventLog>сам класс.</xref:System.Diagnostics.EventLog></xref:System.Diagnostics.EventLog.GetEventLogs%2A> Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>объекта, чтобы сделать вызов метода.</xref:System.Diagnostics.EventLog>       Чтобы получить список журналов событий, необходимо иметь необходимых разрешений для реестра. Эти разрешения являются идентичными с разрешениями, необходимыми для вызова <xref:System.Diagnostics.EventLog.Exists%2A>и <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog.Exists%2A>"
  example:
  - "The following example gets a list of logs on the computer \"myServer\". It then outputs the name of each log.  \n  \n [!code-cpp[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_18_1.cpp)]\n [!code-cs[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.GetEventLogs1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_18_1.vb)]"
  syntax:
    content: public static System.Diagnostics.EventLog[] GetEventLogs (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "Компьютер, на котором выполняется поиск журналов событий."
    return:
      type: System.Diagnostics.EventLog[]
      description: "Массив объектов типа <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> , представляющий журналы на заданном компьютере."
  overload: System.Diagnostics.EventLog.GetEventLogs*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code> Параметр является содержит недопустимое имя компьютера."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "У вас доступ на чтение в реестре.       - или - нет на компьютере отсутствует служба журнала событий."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Log
  id: Log
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя журнала для чтения или записи."
  remarks: "Three log files exist by default on the server: Application, System, and Security. Applications and services use the Application log file. Device drivers use the System log file. The system generates success and failure audit events in the Security log when auditing is turned on. If you have other applications installed, like Active Directory on Windows servers, there might be other default log files. In addition, you can create custom log files on a local or remote computer. Custom logs help organize your entries in a more detailed way than is allowed when your components write events to the default Application log.  \n  \n> [!NOTE]\n>  Log names are limited to eight characters. According to the system, MyLogSample1 and MyLogSample2 are the same log.  \n  \n If you write to an event log, it is not enough to specify the Log property. You must associate a <xref:System.Diagnostics.EventLog.Source%2A> property with your event log resource to connect it to a particular log. It is not necessary to specify a <xref:System.Diagnostics.EventLog.Source%2A> when only reading from a log, but an event source must be associated with the event log resource in the server's registry. You can specify only the Log name and <xref:System.Diagnostics.EventLog.MachineName%2A> (server computer name) to read from it.  \n  \n> [!NOTE]\n>  You are not required to specify the <xref:System.Diagnostics.EventLog.MachineName%2A> if you are connecting to a log. If you do not specify the <xref:System.Diagnostics.EventLog.MachineName%2A>, the local computer (\".\") is assumed.  \n  \n If the <xref:System.Diagnostics.EventLog.Source%2A> property has not been specified, a call to Log returns an empty string if Log has not been explicitly set (by setting the Log property, or through the constructor). If the <xref:System.Diagnostics.EventLog.Source%2A> has been specified, Log returns the name of the log to which that source was registered.  \n  \n A source can only be registered to one log at a time. If the <xref:System.Diagnostics.EventLog.Source%2A> property was set for an instance of <xref:System.Diagnostics.EventLog>, you cannot change the Log property for that <xref:System.Diagnostics.EventLog> without changing the value of <xref:System.Diagnostics.EventLog.Source%2A> or calling <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> first. If you change the Log property after the <xref:System.Diagnostics.EventLog.Source%2A> property has been set, writing a log entry throws an exception.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or <xref:System.Diagnostics.EventLog.CreateEventSource%2A> to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the Log property with the \".evt\" file name extension.  \n  \n You cannot create a new log using the Log property alone (without specifying a source for the log). You can call <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, passing in a new log name as a parameter, and then call <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. However, the intent is usually either to create (and write entries to) new application-specific logs, or to read from existing logs.  \n  \n If the Log value changes, the event log is closed and all event handles are released.  \n  \n> [!CAUTION]\n>  If you set the Log property to the name of a log that does not exist, the system attaches the <xref:System.Diagnostics.EventLog> to the Application log, but does not warn you that it is using a log other than the one you specified."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.Log Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_17_1.cpp)]\n [!code-cs[Classic EventLog.Log Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_17_1.cs)]\n [!code-vb[Classic EventLog.Log Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_17_1.vb)]"
  syntax:
    content: public string Log { get; set; }
    return:
      type: System.String
      description: "Имя журнала. Это может быть приложения, системы, безопасности или имя пользовательского журнала. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLog.Log*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogDisplayName
  id: LogDisplayName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает понятное имя журнала событий."
  remarks: "> [!NOTE]Настроек в Windows Vista и более поздних версиях пользователи не имеют разрешения на доступ к журналу безопасности. Если используется Windows Vista или более поздней версии, как пользователь, произойдет <xref:System.Security.SecurityException>при попытке доступа к отображаемое имя для события в журнал безопасности</xref:System.Security.SecurityException>   >> В Windows Vista и более поздних версиях права доступа пользователя определяются управления учетных записей (UAC). Если вы являетесь членом группы администраторов, вы присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к журнал безопасности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора."
  example:
  - "The following example enumerates the event logs defined on the local computer and displays the LogDisplayName for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_29_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_29_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_29_1.cs)]"
  syntax:
    content: public string LogDisplayName { get; }
    return:
      type: System.String
      description: "Имя, представляющее журнал событий в средстве просмотра событий в системе."
  overload: System.Diagnostics.EventLog.LogDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Указанный <xref:System.Diagnostics.EventLog.Log*>не существует в реестре для этого компьютера.</xref:System.Diagnostics.EventLog.Log*>"
  platform:
  - net462
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  id: LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает имя журнала, в котором зарегистрирован указанный источник."
  remarks: "Источник событий определяет, какие события в журнал. Часто бывает имя приложения или имя подкомпонента приложения, если приложение имеет большой. Приложения и службы должны запись в журнал приложения или пользовательский журнал. Драйверы устройств необходимо создавать в системном журнале.       При создании нового источника для записи в одном журнале одновременно, приложение регистрируется в журнале событий как источник записей. <xref:System.Diagnostics.EventLog.Source%2A>Свойство может быть любой строкой, но имя не может использоваться для других источников на компьютере.</xref:System.Diagnostics.EventLog.Source%2A> Сбой при создании дубликата <xref:System.Diagnostics.EventLog.Source%2A>значение приводит к возникновению исключения.</xref:System.Diagnostics.EventLog.Source%2A> Однако один журнал событий может иметь множества различных источников, запись в него."
  example:
  - "The following example deletes a source from the local computer. The example determines the log from its source, and then deletes the log.  \n  \n> [!NOTE]\n>  More than one source might write to an event log. Before deleting a custom log, make sure there are no other sources writing to that log.  \n  \n [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_2_1.vb)]\n [!code-cs[Classic EventLog.DeleteEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_2_1.cs)]"
  syntax:
    content: public static string LogNameFromSourceName (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника события."
    - id: machineName
      type: System.String
      description: "Имя компьютера, на котором выполняется поиск, или «.» для локального компьютера."
    return:
      type: System.String
      description: "Имя журнала, связанное с указанным источником в реестре."
  overload: System.Diagnostics.EventLog.LogNameFromSourceName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MachineName
  id: MachineName
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя компьютера, на котором производится чтение или запись событий."
  remarks: "При записи в журнал событий, необходимо связать <xref:System.Diagnostics.EventLog.Source%2A>с объектом журнала событий для подключения для конкретного журнала.</xref:System.Diagnostics.EventLog.Source%2A> Это не обязательно указывать <xref:System.Diagnostics.EventLog.Source%2A>свойство при чтении журнала.</xref:System.Diagnostics.EventLog.Source%2A> Можно указать только <xref:System.Diagnostics.EventLog.Log%2A>имя и MachineName (имя сервера).</xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек не требуется указывать свойства MachineName, при подключении к журналу. Если не указать MachineName, локальный компьютер (&quot;.») предполагается.       Источник может быть зарегистрирован только один журнал одновременно. Если <xref:System.Diagnostics.EventLog.Source%2A>было задано для экземпляра класса <xref:System.Diagnostics.EventLog>, невозможно изменить свойство MachineName, <xref:System.Diagnostics.EventLog>не изменяя значение <xref:System.Diagnostics.EventLog.Source%2A>или вызов <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>первого.</xref:System.Diagnostics.EventLog.DeleteEventSource%2A> </xref:System.Diagnostics.EventLog.Source%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Если изменить свойство MachineName <xref:System.Diagnostics.EventLog>закрывает все дескрипторы и повторно подключается к журналу и источнику на новом компьютере.</xref:System.Diagnostics.EventLog>       Значение MachineName, не может быть пустой строкой. Если оно не задано явно, по умолчанию на локальном компьютере (».»)."
  example:
  - "The following example reads entries in the event log, \"NewEventLog\", on a specified computer.  \n  \n [!code-cs[Classic EventLog.MachineName Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_6_1.cs)]\n [!code-vb[Classic EventLog.MachineName Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_6_1.vb)]\n [!code-cpp[Classic EventLog.MachineName Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_6_1.cpp)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "Имя сервера, на котором находится журнал событий. Значение по умолчанию — локальный компьютер (».»)."
  overload: System.Diagnostics.EventLog.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Недопустимое имя компьютера."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  id: MaximumKilobytes
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает максимальный размер журнала событий в килобайтах."
  remarks: "Свойства MaximumKilobytes представляет ограничение на размер файла журнала событий. При достижении предельного размера, настроенного в журнал событий <xref:System.Diagnostics.EventLog.OverflowAction%2A>значение определяет новые записи игнорируются или ли новые записи перезаписать более старые записи.</xref:System.Diagnostics.EventLog.OverflowAction%2A>      Настроек [!NOTE] настроек это свойство представляет параметр конфигурации для журнала событий, представленный этим экземпляром. Если журнала событий достигает максимального размера, это свойство указывает, каким образом операционная система обрабатывает новых записей, записанных всеми источниками событий, зарегистрированные в журнале событий."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_15_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_15_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_15_1.cs)]"
  syntax:
    content: public long MaximumKilobytes { get; set; }
    return:
      type: System.Int64
      description: "Максимальный размер журнала событий в килобайтах. Значение по умолчанию — 512, что означает максимальный размер файла 512 килобайт."
  overload: System.Diagnostics.EventLog.MaximumKilobytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Указанное значение меньше 64, или больше 4194240 или не кратен 64."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  id: MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает число дней для хранения записей в журнале событий."
  remarks: "Свойство MinimumRetentionDays проверьте текущие параметры для журнала событий. Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>Изменение минимальное количество дней, которые должны храниться каждая запись в журнале событий.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>       Значение MinimumRetentionDays зависит от поведения настроенных переполнения журнала событий. Если <xref:System.Diagnostics.OverflowAction>для журнала событий является свойство <xref:System.Diagnostics.OverflowAction>, то значение свойства MinimumRetentionDays равно 0.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Если <xref:System.Diagnostics.OverflowAction>для журнала событий является свойство <xref:System.Diagnostics.OverflowAction>, а затем MinimumRetentionDays значение-1.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction> Если <xref:System.Diagnostics.OverflowAction>для журнала событий является свойство <xref:System.Diagnostics.OverflowAction>, то MinimumRetentionDays значение больше нуля и представляет количество дней для хранения записей в журнале событий, когда журнал событий заполнен.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.OverflowAction>       Поведение при переполнении только в случае журнала событий достигает предельного размера. Когда <xref:System.Diagnostics.EventLog>имеет его <xref:System.Diagnostics.EventLog.OverflowAction%2A>значение <xref:System.Diagnostics.OverflowAction>и журнал событий достигает максимального размера, а затем новые записи записываются только если они могут заменять операции, возраст которых превышает период MinimumRetentionDays.</xref:System.Diagnostics.OverflowAction> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog> Сохранение записи событий для минимальный срок подходит в том случае, если журнал событий регулярно архивируется. В противном случае вы рискуете потерять новые записи при журнала событий достигает предела. Чтобы избежать потери новые сведения о событии, задайте минимальное количество дней хранения событий по периодичность архивирования определенного журнала событий."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_12_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_12_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_12_1.cs)]"
  syntax:
    content: public int MinimumRetentionDays { get; }
    return:
      type: System.Int32
      description: "Число дней, в которых хранятся записи в журнале событий. Значение по умолчанию — 7."
  overload: System.Diagnostics.EventLog.MinimumRetentionDays*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  id: ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Изменяет поведение при внесении новых записей, при достижении файлом своего максимального размера журнала событий."
  remarks: "Поведение при переполнении журнала событий указывает, что произойдет, если новые записи будут записываться в журнал, который достигнут максимально допустимый размер.      Настроек [!NOTE] настроек поведение при переполнении вступает в силу только в том случае, когда журнала событий достигает своего максимального размера файла. Поведение при переполнении не влияет на внесение новых записей в журнал, который может вместить дополнительные записи.       Метод ModifyOverflowPolicy задает поведение при переполнении журнала событий. <xref:System.Diagnostics.EventLog>экземпляр.</xref:System.Diagnostics.EventLog> После вызова этого метода для журнала событий, определяемое <xref:System.Diagnostics.EventLog.Log%2A>Свойства <xref:System.Diagnostics.EventLog.OverflowAction%2A>и <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A>значения свойств отражают поведение при переполнении настроенного.</xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> </xref:System.Diagnostics.EventLog.OverflowAction%2A> </xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек это свойство представляет параметр конфигурации для журнала событий, представленный этим экземпляром. Если журнала событий достигает максимального размера, это свойство указывает, каким образом операционная система обрабатывает новых записей, записанных всеми источниками событий, зарегистрированные в журнале событий.       Задать `action` параметр <xref:System.Diagnostics.OverflowAction>для указания, что новая запись перезаписывает самую старую запись при <xref:System.Diagnostics.EventLog>достигает максимального размера.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Если `action` параметр имеет значение <xref:System.Diagnostics.OverflowAction>, `retentionDays` значение параметра игнорируется.</xref:System.Diagnostics.OverflowAction>       Задать `action` параметр <xref:System.Diagnostics.OverflowAction>для указания, что каждая новая запись перезаписывает более старые записи при <xref:System.Diagnostics.EventLog>достигает максимального размера.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.OverflowAction> Укажите число дней, которые должны храниться в журнала с помощью `retentionDays` параметра. События, записанные в пределах диапазона хранения, новые записи не перезаписываются.       Задать `action` параметр <xref:System.Diagnostics.OverflowAction>Отменить новые события при достижении максимального размера журнала.</xref:System.Diagnostics.OverflowAction> Если `action` параметр имеет значение <xref:System.Diagnostics.OverflowAction>, `retentionDays` значение параметра игнорируется.</xref:System.Diagnostics.OverflowAction>      Настроек [!CAUTION] настроек параметр переполнения <xref:System.Diagnostics.OverflowAction>Указывает, что новые записи не учитываются при заполнении журнала событий.</xref:System.Diagnostics.OverflowAction> При использовании этого параметра убедитесь в журнале событий регулярно архивировать и очищена, чтобы предупредить достижение максимального размера."
  example:
  - "The following example displays the configured overflow policy for a specified event log, and allows the user to select a new overflow policy setting for the event log.  \n  \n [!code-vb[EventLogProperties#3](~/add/codesnippet/visualbasic/0b0fc273-a638-4af9-ae99-_1.vb)]\n [!code-cpp[EventLogProperties#3](~/add/codesnippet/cpp/0b0fc273-a638-4af9-ae99-_1.cpp)]\n [!code-cs[EventLogProperties#3](~/add/codesnippet/csharp/0b0fc273-a638-4af9-ae99-_1.cs)]"
  syntax:
    content: public void ModifyOverflowPolicy (System.Diagnostics.OverflowAction action, int retentionDays);
    parameters:
    - id: action
      type: System.Diagnostics.OverflowAction
      description: "Поведение при переполнении при внесении новых записей в журнал событий."
    - id: retentionDays
      type: System.Int32
      description: "Минимальное число дней задержки каждой записи журнала. Этот параметр используется только в том случае, если `action` равно <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>action</code>не является допустимым <xref:System.Diagnostics.EventLog.OverflowAction*> значение."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>retentionDays</code>меньше единицы, или больше, чем 365."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.OverflowAction
  id: OverflowAction
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает поведение при переполнении для хранения новых записей, при достижении максимального размера файла журнала событий."
  remarks: "Журналы событий увеличивается как новые события записываются в них. Каждый журнал событий ограничен установленный предел; <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>свойство определяет максимальное число для размера файла журнала событий в килобайтах.</xref:System.Diagnostics.EventLog.MaximumKilobytes%2A>       Использует значение свойства OverflowAction проанализировать поведение настроенных переполнения максимальный размер журнала событий. Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>метод, чтобы изменить поведение при переполнении в журнале событий.</xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A>      Настроек [!NOTE] настроек поведение при переполнении вступает в силу только в том случае, когда журнала событий достигает своего максимального размера файла. Поведение при переполнении не влияет на внесение новых записей в журнал, который может вместить дополнительные записи."
  example:
  - "The following example enumerates the event logs defined on the local computer, and displays configuration details for each event log.  \n  \n [!code-vb[EventLogProperties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_28_1.vb)]\n [!code-cpp[EventLogProperties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_28_1.cpp)]\n [!code-cs[EventLogProperties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_28_1.cs)]"
  syntax:
    content: public System.Diagnostics.OverflowAction OverflowAction { get; }
    return:
      type: System.Diagnostics.OverflowAction
      description: "<xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref> Значение, которое определяет поведение при переполнении для хранения новых записей, когда журнала событий достигает максимального размера. Значение по умолчанию — <xref href=&quot;System.Diagnostics.OverflowAction&quot;> </xref>."
  overload: System.Diagnostics.EventLog.OverflowAction*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  id: RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Указывает локализованное имя журнала событий, который отображается в средстве просмотра событий сервера."
  remarks: "Используйте RegisterDisplayName для регистрации и отображение локализованного имени в средстве просмотра событий для пользовательского журнала событий.       Указанный идентификатор ресурсов должен соответствовать локализованной строке, определенной в файле ресурсов. Средство просмотра событий отображается имя пользовательского журнала событий, используя локализованную строку и текущие параметры языка и региональных параметров. Например можно определить несколько имен журналов событий локализован для различных языков и региональных параметров в файле ресурсов. Средство просмотра событий отображается локализованная строка, соответствующая региональные параметры текущего пользователя.       Если средство просмотра событий не удается загрузить локализованную строку из файла ресурсов или если отображаемое имя не было зарегистрировано в журнале событий, средство просмотра событий отображается имя журнала событий, определенных в <xref:System.Diagnostics.EventLog.Log%2A>.</xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек необходимо зарегистрировать отображаемое имя для предопределенных журналов событий. Операционная система регистрирует локализованное отображаемое имя для журналов событий приложений, системы и безопасности."
  example:
  - "The following example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/m-system.diagnostics.eve_1_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_1_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/m-system.diagnostics.eve_1_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, resource identifier 5001 is defined for the localized name of the event log.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void RegisterDisplayName (string resourceFile, long resourceId);
    parameters:
    - id: resourceFile
      type: System.String
      description: "Полный путь к локализованному файлу ресурсов."
    - id: resourceId
      type: System.Int64
      description: "Идентификатор ресурса, который индексирует локализованную строку в файле ресурсов."
  overload: System.Diagnostics.EventLog.RegisterDisplayName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref:System.Diagnostics.EventLog.Log*> value is not a valid log name.  \n  \n \\- or -  \n  \n The registry key for the event log could not be opened on the target computer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceFile </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.Source
  id: Source
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает имя источника, чтобы зарегистрировать и использовать при записи в журнал событий."
  remarks: "Источник событий определяет, какие события в журнал. Часто бывает имя приложения или имя подкомпонента приложения, если приложение имеет большой. Приложения и службы должны запись в журнал приложения или пользовательский журнал. Драйверы устройств необходимо создавать в системном журнале.       Необходимо указать источник событий при записи в журнал событий. Прежде чем вносить записи в журнал событий, необходимо зарегистрировать источник событий в журнале событий как источник событий. При записи в журнал событий система использует свойство источника для поиска журнала, в котором нужно сделать запись. При чтении журнала событий можно указать источник или <xref:System.Diagnostics.EventLog.Log%2A>до <xref:System.Diagnostics.EventLog.MachineName%2A>.</xref:System.Diagnostics.EventLog.MachineName%2A> </xref:System.Diagnostics.EventLog.Log%2A>      Настроек [!NOTE] настроек не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A>при подключении в журнал на локальном компьютере.</xref:System.Diagnostics.EventLog.MachineName%2A> Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.MachineName%2A>       Использовать <xref:System.Diagnostics.EventLog.WriteEvent%2A>и <xref:System.Diagnostics.EventLog.WriteEntry%2A>для записи событий в журнале событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Можно создать источник событий журнала событий существующего или нового журнала событий. При создании нового источника для нового журнала событий система регистрирует источник для этого журнала, но журнал не создается, пока первая операция записи на него.       Источник должен быть уникальным на локальном компьютере. имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий. Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.       Если вы измените значение источника <xref:System.Diagnostics.EventLog>для которого зарегистрирован он закрывается и освобождаются все дескрипторы событий.</xref:System.Diagnostics.EventLog>       Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник с обновленной конфигурации, а не удалить существующий источник.      Настроек [!NOTE] настроек необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_18_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_18_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_18_1.cpp)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "Имя, регистрируются в журнале событий как имя источника записей. Значение по умолчанию — пустая строка (»»)."
  overload: System.Diagnostics.EventLog.Source*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Имя источника приводит путь к разделу реестра более 254 символов."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  id: SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Определяет, зарегистрирован ли источник событий на локальном компьютере."
  remarks: "Используйте этот метод, чтобы определить, существует ли источник событий на локальном компьютере. Если вы хотите определить, существует ли журнал на локальном компьютере, используйте <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на локальном компьютере. в противном случае <xref:System.Security.SecurityException>будет создано.</xref:System.Security.SecurityException>      Настроек [!NOTE] настроек для поиска источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь права администратора.   >> Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException>возникает исключение.</xref:System.Security.SecurityException>   >> Начиная с Windows Vista привилегии пользователя определяются управления учетных записей (UAC). Если вы являетесь членом группы администраторов, вы присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к счетчикам производительности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.      Настроек [!NOTE] настроек службы, выполняемые в <xref:System.ServiceProcess.ServiceAccount>учетной записи нет необходимых прав для выполнения этого метода.</xref:System.ServiceProcess.ServiceAccount> Рекомендуется проверить, существует ли источник события в <xref:System.ServiceProcess.ServiceInstaller>, и если он не существует, для создания источника установщика.</xref:System.ServiceProcess.ServiceInstaller>       Новый источник не могут иметь имя существующего источника на том же компьютере, используйте этот метод прежде чем вызывать <xref:System.Diagnostics.EventLog.CreateEventSource%2A>Чтобы убедиться, что источник с именем, заданным `source` еще не существует на локальном компьютере.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> `source` Параметр не учитывается регистр знаков."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.Source Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_14_1.cs)]\n [!code-vb[Classic EventLog.Source Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_14_1.vb)]\n [!code-cpp[Classic EventLog.Source Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_14_1.cpp)]"
  syntax:
    content: public static bool SourceExists (string source);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника события."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если источник событий зарегистрирован на локальном компьютере. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>не найден, но некоторые или все журналы событий не удалось выполнить поиск."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  id: SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Определяет, зарегистрирован ли источник событий на указанном компьютере."
  remarks: "Используйте этот метод, чтобы определить, существует ли источник событий на компьютере, указанном `machineName` параметра. Чтобы определить, существует ли журнал на указанном компьютере, воспользуйтесь <xref:System.Diagnostics.EventLog.Exists%2A>.</xref:System.Diagnostics.EventLog.Exists%2A>       Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на данном сервере; в противном случае <xref:System.Security.SecurityException>будет создано.</xref:System.Security.SecurityException>      Настроек [!NOTE] настроек для поиска источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь права администратора.   >> Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException>возникает исключение.</xref:System.Security.SecurityException>   >> Начиная с Windows Vista привилегии пользователя определяются управления учетных записей (UAC). Если вы являетесь членом группы администраторов, вы присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к счетчикам производительности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.      Настроек [!NOTE] настроек службы, выполняемые в <xref:System.ServiceProcess.ServiceAccount>учетной записи нет необходимых прав для выполнения этого метода.</xref:System.ServiceProcess.ServiceAccount> Рекомендуется проверить, существует ли источник события в <xref:System.ServiceProcess.ServiceInstaller>, и если он не существует, для создания источника установщика.</xref:System.ServiceProcess.ServiceInstaller>       Новый источник не могут иметь имя существующего источника на том же компьютере, используйте этот метод прежде чем вызывать <xref:System.Diagnostics.EventLog.CreateEventSource%2A>Чтобы убедиться, что источник с именем, заданным `source` еще не существует на компьютере.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> `source` И `machineName` параметров регистр не учитывается.       <xref:System.Diagnostics.EventLog.SourceExists%2A>— `static` метод, его можно вызывать непосредственно для класса.</xref:System.Diagnostics.EventLog.SourceExists%2A> Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog>для вызова <xref:System.Diagnostics.EventLog.SourceExists%2A>.</xref:System.Diagnostics.EventLog.SourceExists%2A> </xref:System.Diagnostics.EventLog>"
  example:
  - "The following example creates the source `MySource` on the computer `MyServer`, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_16_1.cpp)]\n [!code-cs[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_16_1.cs)]\n [!code-vb[Classic EventLog.SourceExists1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_16_1.vb)]"
  syntax:
    content: public static bool SourceExists (string source, string machineName);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника события."
    - id: machineName
      type: System.String
      description: "Имя компьютера, на котором выполняется поиск, или «.» для локального компьютера."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если источник событий зарегистрирован на заданном компьютере; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.EventLog.SourceExists*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>machineName</code>является содержит недопустимое имя компьютера."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<code>source</code>не найден, но некоторые или все журналы событий не удалось выполнить поиск."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.SynchronizingObject
  id: SynchronizingObject
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Возвращает или задает объект, используемый для маршалинга вызовов обработчика событий, возникающих в результате использования <xref href=&quot;System.Diagnostics.EventLog&quot;> </xref> записи события."
  remarks: "При SynchronizingObject `null`, методы, обрабатывающие <xref:System.Diagnostics.EventLog.EntryWritten>события вызываются в поток из пула потоков системы.</xref:System.Diagnostics.EventLog.EntryWritten> Дополнительные сведения о системной группе потоков см. в разделе <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Если <xref:System.Diagnostics.EventLog.EntryWritten>событие обрабатывается методом visual Windows Forms, компонент, например кнопку, обращение к компоненту через пул потоков системы могут не работать или может привести к возникновению исключения.</xref:System.Diagnostics.EventLog.EntryWritten> Избежать этого, задав SynchronizingObject компоненту Windows Forms, который вызывает методы, обрабатывающие <xref:System.Diagnostics.EventLog.EntryWritten>событий для вызова в том же потоке, в котором был создан компонент.</xref:System.Diagnostics.EventLog.EntryWritten>       Если <xref:System.Diagnostics.EventLog>используется внутри [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] SynchronizingObject автоматически устанавливается в конструкторе Windows Forms, чтобы элемент управления, содержащий <xref:System.Diagnostics.EventLog>.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog> Например, если поместить <xref:System.Diagnostics.EventLog>в конструкторе Form1 (наследуется от класса <xref:System.Windows.Forms.Form>) свойство SynchronizingObject <xref:System.Diagnostics.EventLog>устанавливается на экземпляр Form1.</xref:System.Diagnostics.EventLog> </xref:System.Windows.Forms.Form> </xref:System.Diagnostics.EventLog>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "<xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> Используемый для маршалинга вызовов обработчика событий, инициированных в результате использования <xref href=&quot;System.Diagnostics.EventLog.EntryWritten&quot;> </xref> события в журнале событий."
  overload: System.Diagnostics.EventLog.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Запись сведений, с заданным текстом сообщения, записывает в журнал событий."
  remarks: "Этот метод используется для внесения записи в журнал событий, связанных с этим <xref:System.Diagnostics.EventLog>экземпляра.</xref:System.Diagnostics.EventLog> Если вы хотите указать какие-либо другие <xref:System.Diagnostics.EventLogEntryType>Используйте другую перегрузку метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонент, прежде чем можно создать записи в журнал.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A>этого <xref:System.Diagnostics.EventLog>экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A>вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A>и регистрирует источник.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A>или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A>посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A>и <xref:System.Diagnostics.EventLog.Log%2A>свойство не задано для вашего <xref:System.Diagnostics.EventLog>экземпляра, по умолчанию будет использоваться в журнал приложения.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек большинство исключений, перечисленных выше формируются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если запись удаленного компьютера значение сообщения (строка текста) может оказаться непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework.      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cs[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_7_1.cs)]\n [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_7_1.cpp)]\n [!code-vb[Classic EventLog.CreateEventSource Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_7_1.vb)]"
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает ошибку, предупреждение, сведения, аудит успехов или сбой записи с заданным текстом сообщения в журнал событий."
  remarks: "Этот метод используется для записи из указанной <xref:System.Diagnostics.EventLogEntryType>в журнале событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонент, прежде чем можно создать записи в журнал.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A>этого <xref:System.Diagnostics.EventLog>экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A>вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A>и регистрирует источник.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A>или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A>посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A>и <xref:System.Diagnostics.EventLog.Log%2A>свойство не задано для вашего <xref:System.Diagnostics.EventLog>экземпляра, по умолчанию будет использоваться в журнал приложения.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если запись удаленного компьютера значение сообщения (строка текста) может оказаться непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework.      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cpp[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/cpp/19aeba79-224e-4604-90d9-_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/csharp/19aeba79-224e-4604-90d9-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry2 Example#1](~/add/codesnippet/visualbasic/19aeba79-224e-4604-90d9-_1.vb)]"
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  id: WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает в журнал событий, используя указанный зарегистрированный источник событий запись сведений с заданным текстом сообщения."
  remarks: "Используйте этот метод для записи сведений в журнал событий с использованием источника зарегистрированный источник событий соответствующего журнала. Если вы хотите указать какие-либо другие <xref:System.Diagnostics.EventLogEntryType>Используйте другую перегрузку метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLogEntryType>       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.   >> `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6."
  example:
  - "The following example creates the source `MySource` if it does not already exist, and writes an entry to the event log `MyNewLog`.  \n  \n [!code-cpp[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.eve_3_1.cpp)]\n [!code-cs[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.eve_3_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_3_1.vb)]"
  syntax:
    content: public static void WriteEntry (string source, string message);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий запись с заданным текстом сообщения и идентификатором события."
  remarks: "Этот метод используется для записи с определяемые приложением `eventID` в журнал событий. `eventID` Вместе с источником для однозначного определения события. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Помимо идентификатор события можно указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонент, прежде чем можно создать записи в журнал.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A>этого <xref:System.Diagnostics.EventLog>экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A>вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A>и регистрирует источник.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A>или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A>посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A>и <xref:System.Diagnostics.EventLog.Log%2A>свойство не задано для вашего <xref:System.Diagnostics.EventLog>экземпляра, по умолчанию будет использоваться в журнал приложения.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если запись удаленного компьютера значение сообщения (строка текста) может оказаться непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework.      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/597042ed-6d84-4ccf-a867-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/597042ed-6d84-4ccf-a867-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/597042ed-6d84-4ccf-a867-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает ошибку, предупреждение, сведения, аудит успехов или сбой записи с заданным текстом сообщения журнала событий, используя указанный зарегистрированный источник событий."
  remarks: "Этот метод используется для записи <xref:System.Diagnostics.EventLogEntryType>в журнал событий с помощью источника, зарегистрированный источник событий для журнала. соответствующие</xref:System.Diagnostics.EventLogEntryType> указанным `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - "The following example writes a warning entry to an event log, \"MyNewLog\", on the local computer.  \n  \n [!code-cs[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/csharp/c03f903c-8fbd-441f-afe0-_1.cs)]\n [!code-vb[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/visualbasic/c03f903c-8fbd-441f-afe0-_1.vb)]\n [!code-cpp[Classic EventLog.WriteEntry3 Example#1](~/add/codesnippet/cpp/c03f903c-8fbd-441f-afe0-_1.cpp)]"
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий запись с заданным текстом сообщения, идентификатором события и категории, определяемые приложением."
  remarks: "Этот метод используется для записи с определяемые приложением `category` в журнал событий. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.      Настроек [!NOTE] настроек `category` параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller>или <xref:System.Diagnostics.EventSourceCreationData>класса.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       В дополнение к категории можно указать идентификатор события событие записывается в журнал событий. Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.       Наконец можно указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонент, прежде чем можно создать записи в журнал.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A>этого <xref:System.Diagnostics.EventLog>экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A>вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A>и регистрирует источник.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A>или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A>посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A>и <xref:System.Diagnostics.EventLog.Log%2A>свойство не задано для вашего <xref:System.Diagnostics.EventLog>экземпляра, по умолчанию будет использоваться в журнал приложения.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если запись удаленного компьютера значение сообщения (строка текста) может оказаться непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework.      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#3](~/add/codesnippet/cpp/b3db94bc-a96c-4168-a8f0-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#3](~/add/codesnippet/csharp/b3db94bc-a96c-4168-a8f0-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#3](~/add/codesnippet/visualbasic/b3db94bc-a96c-4168-a8f0-_1.vb)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
    - id: category
      type: System.Int16
      description: "Подкатегория конкретного приложения, связанные с данным сообщением."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий, используя указанный зарегистрированный источник событий запись с заданным текстом сообщения и идентификатором события."
  remarks: "Этот метод используется для записи с определяемые приложением `eventID` в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. `eventID`, И источники для однозначного определения события. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий эти строки отображаются для пользователей, чтобы помочь пользователю понять, что пошло не так и какие действия предпринять.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.       Помимо идентификатор события, эта перегрузка <xref:System.Diagnostics.EventLog.WriteEntry%2A>позволяет указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventLog.WriteEntry%2A> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_4#1](~/add/codesnippet/csharp/2d8498b8-a54d-48c9-9ee7-_1.cs)]
     [!code-cpp[EventLog_WriteEntry_4#1](~/add/codesnippet/cpp/2d8498b8-a54d-48c9-9ee7-_1.cpp)]
     [!code-vb[EventLog_WriteEntry_4#1](~/add/codesnippet/visualbasic/2d8498b8-a54d-48c9-9ee7-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий запись с заданным текстом сообщения, идентификатором события и категории, определяемые приложением, а затем добавляет в сообщение двоичные данные."
  remarks: "Используйте этот перегруженный метод для записи определяемые приложением данные событий в журнал событий. Средство просмотра событий не интерпретировать эти данные; необработанные данные отображаются только в комбинированном шестнадцатеричном и текстовом формате. Используйте данные событий в меру, включая ее только в том случае, если вы уверены, что она окажется полезной для решения проблемы. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая журнала с последующим созданием записей, содержащих данные, связанные с конкретным событием.       Помимо двоичных данных можно указать категорию и идентификатор события. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.      Настроек [!NOTE] настроек `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.      Настроек [!NOTE] настроек `category` параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.       Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller>или <xref:System.Diagnostics.EventSourceCreationData>класса.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.       Наконец можно указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонент, прежде чем можно создать записи в журнал.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Необходимо создать и настроить источник события перед внесением первой записи с источником.       Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A>этого <xref:System.Diagnostics.EventLog>экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A>вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A>и регистрирует источник.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A>или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A>посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A>и <xref:System.Diagnostics.EventLog.Log%2A>свойство не задано для вашего <xref:System.Diagnostics.EventLog>экземпляра, по умолчанию будет использоваться в журнал приложения.</xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Log%2A> </xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.Source%2A>      Настроек [!NOTE] настроек Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A>       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если запись удаленного компьютера значение сообщения (строка текста) может оказаться непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework.      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий."
  example:
  - >-
    [!code-cs[EventLog_WriteEntry_5#1](~/add/codesnippet/csharp/1c6518b6-dc55-4c74-9028-_1.cs)]
     [!code-vb[EventLog_WriteEntry_5#1](~/add/codesnippet/visualbasic/1c6518b6-dc55-4c74-9028-_1.vb)]
     [!code-cpp[EventLog_WriteEntry_5#1](~/add/codesnippet/cpp/1c6518b6-dc55-4c74-9028-_1.cpp)]
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
    - id: category
      type: System.Int16
      description: "Подкатегория конкретного приложения, связанные с данным сообщением."
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий двоичные данные, связанные с записью."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий, используя указанный зарегистрированный источник событий запись с заданным текстом сообщения, идентификатором события и категории, определяемые приложением. <code> category </code> Используется средство просмотра событий для фильтрации событий в журнале."
  remarks: "Этот метод используется для записи с определяемые приложением `category` в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.      Настроек [!NOTE] настроек `category` параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.       Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller>или <xref:System.Diagnostics.EventSourceCreationData>класса.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       В дополнение к категории можно указать идентификатор события событие записывается в журнал событий. Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.       Наконец можно указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.   >> `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#1](~/add/codesnippet/cpp/189fd615-c100-4e72-9c0b-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#1](~/add/codesnippet/csharp/189fd615-c100-4e72-9c0b-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#1](~/add/codesnippet/visualbasic/189fd615-c100-4e72-9c0b-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
    - id: category
      type: System.Int16
      description: "Подкатегория конкретного приложения, связанные с данным сообщением."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  id: WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит в журнал событий (используя указанный зарегистрированный источник событий) запись с заданным текстом сообщения, идентификатором события и категории, определяемые приложением, а затем добавляет в сообщение двоичные данные."
  remarks: "Используйте этот метод для записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала определяемые приложением данные событий. Средство просмотра событий не интерпретировать эти данные; необработанные данные отображаются только в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая журнала с последующим созданием записей, содержащих данные, связанные с конкретным событием.       Помимо двоичных данных можно указать категорию и идентификатор события. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.      Настроек [!NOTE] настроек `category` параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 будет отображаться как 65,526, -1 как 65 535.       Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller>или <xref:System.Diagnostics.EventSourceCreationData>класса.</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       Идентификаторы событий, вместе с источником события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.       Наконец можно указать <xref:System.Diagnostics.EventLogEntryType>для событие записывается в журнал событий.</xref:System.Diagnostics.EventLogEntryType> `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A>Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи событий с помощью локализованного файла ресурсов сообщений.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.   >> `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6."
  example:
  - >-
    [!code-cpp[EventLog_WriteEntry_1_3#2](~/add/codesnippet/cpp/0b90a83a-dcc8-46e6-a8db-_1.cpp)]
     [!code-cs[EventLog_WriteEntry_1_3#2](~/add/codesnippet/csharp/0b90a83a-dcc8-46e6-a8db-_1.cs)]
     [!code-vb[EventLog_WriteEntry_1_3#2](~/add/codesnippet/visualbasic/0b90a83a-dcc8-46e6-a8db-_1.vb)]
  syntax:
    content: public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);
    parameters:
    - id: source
      type: System.String
      description: "Источник, по которому приложение регистрируется на указанном компьютере."
    - id: message
      type: System.String
      description: "Строка для записи в журнал событий."
    - id: type
      type: System.Diagnostics.EventLogEntryType
      description: "Один из <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref> значения."
    - id: eventID
      type: System.Int32
      description: "Идентификатор события конкретного приложения."
    - id: category
      type: System.Int16
      description: "Подкатегория конкретного приложения, связанные с данным сообщением."
    - id: rawData
      type: System.Byte[]
      description: "Массив байтов, содержащий двоичные данные, связанные с записью."
  overload: System.Diagnostics.EventLog.WriteEntry*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>eventID</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n The message string is longer than 31,839 bytes (32,766 bytes on Windows operating systems before Windows Vista).  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>type</code>не является допустимым <xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Вносит локализованные записи в журнал событий."
  remarks: "Используйте этот метод для записи локализованные записи в журнал событий. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий для отображения соответствующих строк из файла локализованного ресурса для <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> используются идентификаторы ресурсов Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.       Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A>из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения.</xref:System.Diagnostics.EventInstance.InstanceId%2A> При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A>и <xref:System.Diagnostics.EventInstance.EntryType%2A>из `instance` входных данных для определения категории и события типа записи событий.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонента перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A>метод, если приложение записывает строковые значения непосредственно в журнал событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек при добавлении записи к удаленному компьютеру, значение `message` строка не может быть непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework. Кроме того `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/6a714dbf-bcbc-4f5a-a8b4-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/6a714dbf-bcbc-4f5a-a8b4-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/6a714dbf-bcbc-4f5a-a8b4-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "<xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> Экземпляр, который представляет локализованную запись журнала событий."
    - id: values
      type: System.Object[]
      description: "Массив строк для объединения в текстовое сообщение записи журнала событий."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает в журнал событий запись с заданными данными сообщения, строками замещения сообщения и связанными двоичными данными."
  remarks: "Используйте этот метод для записи в журнал событий локализованные записи с дополнительными данными конкретного события. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий для отображения соответствующих строк из файла локализованного ресурса для <xref:System.Diagnostics.EventLog.Source%2A>.</xref:System.Diagnostics.EventLog.Source%2A> используются идентификаторы ресурсов Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.       Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A>из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения.</xref:System.Diagnostics.EventInstance.InstanceId%2A> При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A>и <xref:System.Diagnostics.EventInstance.EntryType%2A>из `instance` входных данных для определения категории и события типа записи событий.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.       Определите двоичные данные с событием, если необходимо предоставить дополнительные данные для события. Например, использовать `data` параметр, чтобы включить сведения о конкретной ошибке. Средство просмотра событий не интерпретирует данные соответствующего события; данные отображаются в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая проверяет журнал событий и создает отчеты, содержащие данные, связанные с конкретным событием.       Необходимо установить <xref:System.Diagnostics.EventLog.Source%2A>свойство в <xref:System.Diagnostics.EventLog>компонента перед компонента перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Source%2A> Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.      Настроек [!NOTE] настроек Если не указать <xref:System.Diagnostics.EventLog.MachineName%2A>для вашей <xref:System.Diagnostics.EventLog>экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEvent%2A>, локальный компьютер (&quot;.») предполагается.</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.MachineName%2A>       Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A>метод, если приложение записывает строковые значения непосредственно в журнал событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>      Настроек [!NOTE] настроек при добавлении записи к удаленному компьютеру, значение `message` строка не может быть непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework. Кроме того `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6."
  example:
  - "The following example writes two audit entries to the event log `myNewLog`. The example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/9c997f17-0108-4c5c-b894-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/9c997f17-0108-4c5c-b894-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/9c997f17-0108-4c5c-b894-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public void WriteEvent (System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "<xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> Экземпляр, который представляет локализованную запись журнала событий."
    - id: data
      type: System.Byte[]
      description: "Массив байтов, содержащий двоичные данные, связанные с записью."
    - id: values
      type: System.Object[]
      description: "Массив строк для объединения в текстовое сообщение записи журнала событий."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.Diagnostics.EventLog.Source*> property of the <xref href=\"System.Diagnostics.EventLog\"></xref> has not been set.  \n  \n -or-  \n  \n The method attempted to register a new event source, but the computer name in <xref:System.Diagnostics.EventLog.MachineName*> is not valid.  \n  \n \\- or -  \n  \n The source is already registered for a different event log.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает журнал событий запись с заданными данными и строками замещения сообщения, используя указанный зарегистрированный источник событий."
  remarks: "Используйте этот метод для записи локализованные записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из файла локализованного ресурса для источника. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.       Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A>из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения.</xref:System.Diagnostics.EventInstance.InstanceId%2A> При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A>и <xref:System.Diagnostics.EventInstance.EntryType%2A>из `instance` входных данных для определения категории и события типа записи событий.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.       Указанный источник должен быть зарегистрирован для журнала событий перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A>метод, если приложение записывает строковые значения непосредственно в журнал событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/a57d89b3-94d2-4b9a-803c-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/a57d89b3-94d2-4b9a-803c-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/a57d89b3-94d2-4b9a-803c-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника события, зарегистрированные для приложения на указанном компьютере."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "<xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> Экземпляр, который представляет локализованную запись журнала событий."
    - id: values
      type: System.Object[]
      description: "Массив строк для объединения в текстовое сообщение записи журнала событий."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  id: WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  langs:
  - csharp
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Записывает событие, запись журнала с заданными данными сообщения, строками замещения сообщения и связанными двоичными данными и используя указанный зарегистрированный источник событий."
  remarks: "Используйте этот метод для записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала локализованные записи с дополнительными данными конкретного события. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из файла локализованного ресурса для источника. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.       Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A>из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения.</xref:System.Diagnostics.EventInstance.InstanceId%2A> При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A>и <xref:System.Diagnostics.EventInstance.EntryType%2A>из `instance` входных данных для определения категории и события типа записи событий.</xref:System.Diagnostics.EventInstance.EntryType%2A> </xref:System.Diagnostics.EventInstance.CategoryId%2A> Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.       Определите двоичные данные с событием, если необходимо предоставить дополнительные данные для события. Например, использовать `data` параметр, чтобы включить сведения о конкретной ошибке. Средство просмотра событий не интерпретирует данные соответствующего события; данные отображаются в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая проверяет журнал событий и создает отчеты, содержащие данные, связанные с конкретным событием.       Указанный источник должен быть зарегистрирован для журнала событий перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.       Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A>метод.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.       Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A>метод, если приложение записывает строковые значения непосредственно в журнал событий.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов, а затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A>метод для записи с использованием идентификаторов ресурсов в журнале событий.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A>метода для записи строки журнала событий, с помощью этого источника.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following example writes an informational event entry and a warning event entry to an existing event log. The event message text is specified using a resource identifier in a resource file. The example assumes the corresponding resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#8](~/add/codesnippet/cpp/d4971002-e0d1-493b-96f8-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#8](~/add/codesnippet/visualbasic/d4971002-e0d1-493b-96f8-_1.vb)]\n [!code-cs[EventLog_WriteEvent#8](~/add/codesnippet/csharp/d4971002-e0d1-493b-96f8-_1.cs)]  \n  \n The example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, byte[] data, object[] values);
    parameters:
    - id: source
      type: System.String
      description: "Имя источника события, зарегистрированные для приложения на указанном компьютере."
    - id: instance
      type: System.Diagnostics.EventInstance
      description: "<xref href=&quot;System.Diagnostics.EventInstance&quot;> </xref> Экземпляр, который представляет локализованную запись журнала событий."
    - id: data
      type: System.Byte[]
      description: "Массив байтов, содержащий двоичные данные, связанные с записью."
    - id: values
      type: System.Object[]
      description: "Массив строк для объединения в текстовое сообщение записи журнала событий."
  overload: System.Diagnostics.EventLog.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>source</code> value is an empty string (\"\").  \n  \n \\- or -  \n  \n The <code>source</code> value is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>instance.InstanceId</code> is less than zero or greater than &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;.  \n  \n \\- or -  \n  \n <code>values</code> has more than 256 elements.  \n  \n \\- or -  \n  \n One of the <code>values</code> elements is longer than 32766 bytes.  \n  \n \\- or -  \n  \n The source name results in a registry key path longer than 254 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Не удалось открыть раздел реестра для журнала событий."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "Операционная система сообщила об ошибке при записи в журнал событий запись событий. Код ошибки Windows недоступен."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Diagnostics.EventLog.#ctor
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog()
  nameWithType: EventLog.EventLog()
  fullName: System.Diagnostics.EventLog.EventLog()
- uid: System.Diagnostics.EventLog.#ctor(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String)
  nameWithType: EventLog.EventLog(String)
  fullName: System.Diagnostics.EventLog.EventLog(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String)
  nameWithType: EventLog.EventLog(String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String)
- uid: System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog(String,String,String)
  nameWithType: EventLog.EventLog(String,String,String)
  fullName: System.Diagnostics.EventLog.EventLog(String,String,String)
- uid: System.Diagnostics.EventLog.BeginInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit()
  nameWithType: EventLog.BeginInit()
  fullName: System.Diagnostics.EventLog.BeginInit()
- uid: System.Diagnostics.EventLog.Clear
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear()
  nameWithType: EventLog.Clear()
  fullName: System.Diagnostics.EventLog.Clear()
- uid: System.Diagnostics.EventLog.Close
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close()
  nameWithType: EventLog.Close()
  fullName: System.Diagnostics.EventLog.Close()
- uid: System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(EventSourceCreationData)
  nameWithType: EventLog.CreateEventSource(EventSourceCreationData)
  fullName: System.Diagnostics.EventLog.CreateEventSource(EventSourceCreationData)
- uid: System.Diagnostics.EventSourceCreationData
  parent: System.Diagnostics
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String)
  nameWithType: EventLog.CreateEventSource(String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String)
- uid: System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource(String,String,String)
  nameWithType: EventLog.CreateEventSource(String,String,String)
  fullName: System.Diagnostics.EventLog.CreateEventSource(String,String,String)
- uid: System.Diagnostics.EventLog.Delete(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String)
  nameWithType: EventLog.Delete(String)
  fullName: System.Diagnostics.EventLog.Delete(String)
- uid: System.Diagnostics.EventLog.Delete(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete(String,String)
  nameWithType: EventLog.Delete(String,String)
  fullName: System.Diagnostics.EventLog.Delete(String,String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String)
  nameWithType: EventLog.DeleteEventSource(String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String)
- uid: System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource(String,String)
  nameWithType: EventLog.DeleteEventSource(String,String)
  fullName: System.Diagnostics.EventLog.DeleteEventSource(String,String)
- uid: System.Diagnostics.EventLog.Dispose(System.Boolean)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLog.Dispose(Boolean)
  fullName: System.Diagnostics.EventLog.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLog.EnableRaisingEvents
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
  fullName: System.Diagnostics.EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit()
  nameWithType: EventLog.EndInit()
  fullName: System.Diagnostics.EventLog.EndInit()
- uid: System.Diagnostics.EventLog.Entries
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
  fullName: System.Diagnostics.EventLog.Entries
- uid: System.Diagnostics.EventLogEntryCollection
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryCollection
  nameWithType: EventLogEntryCollection
  fullName: System.Diagnostics.EventLogEntryCollection
- uid: System.Diagnostics.EventLog.EntryWritten
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EntryWritten
  nameWithType: EventLog.EntryWritten
  fullName: System.Diagnostics.EventLog.EntryWritten
- uid: System.Diagnostics.EntryWrittenEventHandler
  parent: System.Diagnostics
  isExternal: false
  name: EntryWrittenEventHandler
  nameWithType: EntryWrittenEventHandler
  fullName: System.Diagnostics.EntryWrittenEventHandler
- uid: System.Diagnostics.EventLog.Exists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String)
  nameWithType: EventLog.Exists(String)
  fullName: System.Diagnostics.EventLog.Exists(String)
- uid: System.Diagnostics.EventLog.Exists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists(String,String)
  nameWithType: EventLog.Exists(String,String)
  fullName: System.Diagnostics.EventLog.Exists(String,String)
- uid: System.Diagnostics.EventLog.GetEventLogs
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs()
  nameWithType: EventLog.GetEventLogs()
  fullName: System.Diagnostics.EventLog.GetEventLogs()
- uid: System.Diagnostics.EventLog[]
  parent: System.Diagnostics
  isExternal: false
  name: EventLog
  nameWithType: EventLog
  fullName: System.Diagnostics.EventLog[]
  spec.csharp:
  - uid: System.Diagnostics.EventLog
    name: EventLog
    nameWithType: EventLog
    fullName: EventLog[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.GetEventLogs(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs(String)
  nameWithType: EventLog.GetEventLogs(String)
  fullName: System.Diagnostics.EventLog.GetEventLogs(String)
- uid: System.Diagnostics.EventLog.Log
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
  fullName: System.Diagnostics.EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
  fullName: System.Diagnostics.EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName(String,String)
  nameWithType: EventLog.LogNameFromSourceName(String,String)
  fullName: System.Diagnostics.EventLog.LogNameFromSourceName(String,String)
- uid: System.Diagnostics.EventLog.MachineName
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
  fullName: System.Diagnostics.EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
  fullName: System.Diagnostics.EventLog.MaximumKilobytes
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.EventLog.MinimumRetentionDays
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
  fullName: System.Diagnostics.EventLog.MinimumRetentionDays
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy(OverflowAction,Int32)
  nameWithType: EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
  fullName: System.Diagnostics.EventLog.ModifyOverflowPolicy(OverflowAction,Int32)
- uid: System.Diagnostics.OverflowAction
  parent: System.Diagnostics
  isExternal: false
  name: OverflowAction
  nameWithType: OverflowAction
  fullName: System.Diagnostics.OverflowAction
- uid: System.Diagnostics.EventLog.OverflowAction
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
  fullName: System.Diagnostics.EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName(String,Int64)
  nameWithType: EventLog.RegisterDisplayName(String,Int64)
  fullName: System.Diagnostics.EventLog.RegisterDisplayName(String,Int64)
- uid: System.Diagnostics.EventLog.Source
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
  fullName: System.Diagnostics.EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String)
  nameWithType: EventLog.SourceExists(String)
  fullName: System.Diagnostics.EventLog.SourceExists(String)
- uid: System.Diagnostics.EventLog.SourceExists(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists(String,String)
  nameWithType: EventLog.SourceExists(String,String)
  fullName: System.Diagnostics.EventLog.SourceExists(String,String)
- uid: System.Diagnostics.EventLog.SynchronizingObject
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
  fullName: System.Diagnostics.EventLog.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.Diagnostics.EventLog.WriteEntry(System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String)
  nameWithType: EventLog.WriteEntry(String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String)
  nameWithType: EventLog.WriteEntry(String,String)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16)
- uid: System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  nameWithType: EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
  fullName: System.Diagnostics.EventLog.WriteEntry(String,String,EventLogEntryType,Int32,Int16,Byte[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Object[])
- uid: System.Diagnostics.EventInstance
  parent: System.Diagnostics
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Object[])
- uid: System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent(String,EventInstance,Byte[],Object[])
  nameWithType: EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
  fullName: System.Diagnostics.EventLog.WriteEvent(String,EventInstance,Byte[],Object[])
- uid: System.Diagnostics.EventLog.#ctor*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EventLog
  nameWithType: EventLog.EventLog
- uid: System.Diagnostics.EventLog.BeginInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: BeginInit
  nameWithType: EventLog.BeginInit
- uid: System.Diagnostics.EventLog.Clear*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Clear
  nameWithType: EventLog.Clear
- uid: System.Diagnostics.EventLog.Close*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Close
  nameWithType: EventLog.Close
- uid: System.Diagnostics.EventLog.CreateEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: CreateEventSource
  nameWithType: EventLog.CreateEventSource
- uid: System.Diagnostics.EventLog.Delete*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Delete
  nameWithType: EventLog.Delete
- uid: System.Diagnostics.EventLog.DeleteEventSource*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: DeleteEventSource
  nameWithType: EventLog.DeleteEventSource
- uid: System.Diagnostics.EventLog.Dispose*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Dispose
  nameWithType: EventLog.Dispose
- uid: System.Diagnostics.EventLog.EnableRaisingEvents*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: EventLog.EnableRaisingEvents
- uid: System.Diagnostics.EventLog.EndInit*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: EndInit
  nameWithType: EventLog.EndInit
- uid: System.Diagnostics.EventLog.Entries*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Entries
  nameWithType: EventLog.Entries
- uid: System.Diagnostics.EventLog.Exists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Exists
  nameWithType: EventLog.Exists
- uid: System.Diagnostics.EventLog.GetEventLogs*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: GetEventLogs
  nameWithType: EventLog.GetEventLogs
- uid: System.Diagnostics.EventLog.Log*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Log
  nameWithType: EventLog.Log
- uid: System.Diagnostics.EventLog.LogDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogDisplayName
  nameWithType: EventLog.LogDisplayName
- uid: System.Diagnostics.EventLog.LogNameFromSourceName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: LogNameFromSourceName
  nameWithType: EventLog.LogNameFromSourceName
- uid: System.Diagnostics.EventLog.MachineName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MachineName
  nameWithType: EventLog.MachineName
- uid: System.Diagnostics.EventLog.MaximumKilobytes*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MaximumKilobytes
  nameWithType: EventLog.MaximumKilobytes
- uid: System.Diagnostics.EventLog.MinimumRetentionDays*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: MinimumRetentionDays
  nameWithType: EventLog.MinimumRetentionDays
- uid: System.Diagnostics.EventLog.ModifyOverflowPolicy*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: ModifyOverflowPolicy
  nameWithType: EventLog.ModifyOverflowPolicy
- uid: System.Diagnostics.EventLog.OverflowAction*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: OverflowAction
  nameWithType: EventLog.OverflowAction
- uid: System.Diagnostics.EventLog.RegisterDisplayName*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: RegisterDisplayName
  nameWithType: EventLog.RegisterDisplayName
- uid: System.Diagnostics.EventLog.Source*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: Source
  nameWithType: EventLog.Source
- uid: System.Diagnostics.EventLog.SourceExists*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SourceExists
  nameWithType: EventLog.SourceExists
- uid: System.Diagnostics.EventLog.SynchronizingObject*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: SynchronizingObject
  nameWithType: EventLog.SynchronizingObject
- uid: System.Diagnostics.EventLog.WriteEntry*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEntry
  nameWithType: EventLog.WriteEntry
- uid: System.Diagnostics.EventLog.WriteEvent*
  parent: System.Diagnostics.EventLog
  isExternal: false
  name: WriteEvent
  nameWithType: EventLog.WriteEvent
