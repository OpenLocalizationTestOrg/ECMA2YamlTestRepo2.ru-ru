### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationElement
  id: ConfigurationElement
  children:
  - System.Configuration.ConfigurationElement.#ctor
  - System.Configuration.ConfigurationElement.CurrentConfiguration
  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  - System.Configuration.ConfigurationElement.ElementInformation
  - System.Configuration.ConfigurationElement.ElementProperty
  - System.Configuration.ConfigurationElement.Equals(System.Object)
  - System.Configuration.ConfigurationElement.EvaluationContext
  - System.Configuration.ConfigurationElement.GetHashCode
  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  - System.Configuration.ConfigurationElement.HasContext
  - System.Configuration.ConfigurationElement.Init
  - System.Configuration.ConfigurationElement.InitializeDefault
  - System.Configuration.ConfigurationElement.IsModified
  - System.Configuration.ConfigurationElement.IsReadOnly
  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  - System.Configuration.ConfigurationElement.Item(System.String)
  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  - System.Configuration.ConfigurationElement.LockAllAttributesExcept
  - System.Configuration.ConfigurationElement.LockAllElementsExcept
  - System.Configuration.ConfigurationElement.LockAttributes
  - System.Configuration.ConfigurationElement.LockElements
  - System.Configuration.ConfigurationElement.LockItem
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  - System.Configuration.ConfigurationElement.PostDeserialize
  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  - System.Configuration.ConfigurationElement.Properties
  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  - System.Configuration.ConfigurationElement.ResetModified
  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  - System.Configuration.ConfigurationElement.SetReadOnly
  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  langs:
  - csharp
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
  type: Class
  summary: "Представляет элемент конфигурации в файле конфигурации."
  remarks: "ConfigurationElement является абстрактным классом, который используется для представления элемента XML в файле конфигурации (Web.config). Элемент в файл конфигурации может содержать ноль, один или несколько дочерних элементов.       Так как ConfigurationElement класс был определен как абстрактный, нельзя создать его экземпляр. Из него можно только создавать производные классы. Платформа .NET Framework содержит классы, производные от класса ConfigurationElement, чтобы представить стандартные XML-элементы конфигурации, такие как <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> Кроме того, можно расширить класс ConfigurationElement для доступа к пользовательские элементы конфигурации и разделов. Примере, далее в этом разделе показано, как получить доступ к пользовательской конфигурации элементов и разделов с помощью пользовательских классов, производных от ConfigurationElement.       Кроме того, можно расширить типы стандартной конфигурации, такие как ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>и <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> Дополнительные сведения см. в документации для этих классов.       Дополнительные сведения о том, как получить доступ к информации в файлах конфигурации см. в <xref:System.Configuration.ConfigurationManager>класс и <xref:System.Web.Configuration.WebConfigurationManager>класс.</xref:System.Web.Configuration.WebConfigurationManager> </xref:System.Configuration.ConfigurationManager>"
  example:
  - "The following code example shows how to implement a custom ConfigurationElement both as an individual element in a custom section and as a collection of elements in a custom section. The example consists of the following files:  \n  \n-   An app.config file that contains a custom section that is named `MyUrls`. This section contains a simple element (it does not contain any other elements) and a collection of elements. The simple element is named `simple` and the collection is named `urls`.  \n  \n-   A console application. The application reads the contents of the app.config file and writes the information to the console. It uses classes that derive from ConfigurationElement, <xref:System.Configuration.ConfigurationElementCollection>, and <xref:System.Configuration.ConfigurationSection>.  \n  \n-   A class named `UrlsSection` that derives from the <xref:System.Configuration.ConfigurationSection> class. This class is used to access the `MyUrls` section in the configuration file.  \n  \n-   A class named `UrlsCollection` that derives from the <xref:System.Configuration.ConfigurationElementCollection> class. This class is used to access the `urls` collection in the configuration file.  \n  \n-   A class named `UrlConfigElement` that derives from the ConfigurationElement class. This class is used to access the `simple` element and the members of the `urls` collection in the configuration file.  \n  \n To run the example, perform the following steps:  \n  \n1.  Create a solution that has a console application project and a class library project that is named `ConfigurationElement`.  \n  \n2.  Put the three class files in the class library project and put the other files in the console library project.  \n  \n3.  In both projects set a reference to `System.Configuration`.  \n  \n4.  In the console application project set a project reference to the class library project.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#151](~/add/codesnippet/csharp/t-system.configuration.c_8_2.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#151](~/add/codesnippet/visualbasic/t-system.configuration.c_8_2.vb)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#71](~/add/codesnippet/csharp/t-system.configuration.c_8_3.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#71](~/add/codesnippet/visualbasic/t-system.configuration.c_8_3.vb)]  \n  \n [!code-vb[System.Configuration.ConfigurationElement#51](~/add/codesnippet/visualbasic/t-system.configuration.c_8_4.vb)]\n [!code-cs[System.Configuration.ConfigurationElement#51](~/add/codesnippet/csharp/t-system.configuration.c_8_4.cs)]  \n  \n [!code-cs[System.Configuration.ConfigurationElement#31](~/add/codesnippet/csharp/t-system.configuration.c_8_5.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#31](~/add/codesnippet/visualbasic/t-system.configuration.c_8_5.vb)]"
  syntax:
    content: public abstract class ConfigurationElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.#ctor
  id: '#ctor'
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> класса."
  remarks: "Создать новый экземпляр <xref:System.Configuration.ConfigurationElement>классов, например, каждый раз, в приложении необходимо добавить новый элемент в связанный <xref:System.Configuration.ConfigurationElementCollection>коллекции.</xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following example shows how to use a customized constructor.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#32](~/add/codesnippet/csharp/m-system.configuration.c_36_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#32](~/add/codesnippet/visualbasic/m-system.configuration.c_36_1.vb)]"
  syntax:
    content: protected ConfigurationElement ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  id: CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает ссылку на верхнем уровне <xref href=&quot;System.Configuration.Configuration&quot;> </xref> экземпляр, представляющий иерархии конфигурации, текущий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> принадлежит экземпляр."
  remarks: "Свойство CurrentConfiguration позволяет легко определить, какая версия [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] предназначено. <xref:System.Configuration.Configuration.TargetFramework%2A>Свойство верхнего уровня <xref:System.Configuration.Configuration>экземпляр определяет целевой версии платформы.</xref:System.Configuration.Configuration> </xref:System.Configuration.Configuration.TargetFramework%2A>"
  syntax:
    content: public System.Configuration.Configuration CurrentConfiguration { get; }
    return:
      type: System.Configuration.Configuration
      description: "Верхнего уровня <xref href=&quot;System.Configuration.Configuration&quot;> </xref> экземпляр текущего <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> принадлежит экземпляр."
  overload: System.Configuration.ConfigurationElement.CurrentConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  id: DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Считывает XML из файла конфигурации."
  remarks: ''
  example:
  - "The following example demonstrates how to extend the DeserializeElement method.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#33](~/add/codesnippet/csharp/6dc9ac84-77cf-449c-b380-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#33](~/add/codesnippet/visualbasic/6dc9ac84-77cf-449c-b380-_1.vb)]"
  syntax:
    content: protected virtual void DeserializeElement (System.Xml.XmlReader reader, bool serializeCollectionKey);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>, Считывающий данные из файла конфигурации.</xref:System.Xml.XmlReader>"
    - id: serializeCollectionKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для сериализации только свойств ключа коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.DeserializeElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The element to read is locked.  \n  \n \\- or -  \n  \n An attribute of the current node is not recognized.  \n  \n \\- or -  \n  \n The lock status of the current node cannot be determined."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ElementInformation
  id: ElementInformation
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref href=&quot;System.Configuration.ElementInformation&quot;> </xref> объект, который содержит ненастраиваемые сведения и функциональные возможности <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объекта."
  remarks: ''
  example:
  - "The following example shows how to use the ElementInformation property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#80](~/add/codesnippet/csharp/p-system.configuration.c_48_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#80](~/add/codesnippet/visualbasic/p-system.configuration.c_48_1.vb)]"
  syntax:
    content: public System.Configuration.ElementInformation ElementInformation { get; }
    return:
      type: System.Configuration.ElementInformation
      description: "<xref href=&quot;System.Configuration.ElementInformation&quot;> </xref> , Содержащий ненастраиваемые сведения и функциональные возможности <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.ElementInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ElementProperty
  id: ElementProperty
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref href=&quot;System.Configuration.ConfigurationElementProperty&quot;> </xref> , представляющий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> сам объект."
  syntax:
    content: protected virtual System.Configuration.ConfigurationElementProperty ElementProperty { get; }
    return:
      type: System.Configuration.ConfigurationElementProperty
      description: "<xref href=&quot;System.Configuration.ConfigurationElementProperty&quot;> </xref> , Представляющий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> сам."
  overload: System.Configuration.ConfigurationElement.ElementProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Сравнивает текущий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> экземпляр указанному объекту."
  syntax:
    content: public override bool Equals (object compareTo);
    parameters:
    - id: compareTo
      type: System.Object
      description: "Объект для сравнения с."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если объект, сравниваемый с совпадает с текущим <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> экземпляра; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  id: EvaluationContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref href=&quot;System.Configuration.ContextInformation&quot;> </xref> для объекта <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объекта."
  remarks: "Объект <xref:System.Configuration.ContextInformation>предоставляет контекст для <xref:System.Configuration.ConfigurationElement>объекта для принятия решений, основываясь на которой оно было определено.</xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ContextInformation>       <xref:System.Configuration.ContextInformation>Объект предоставляет подробные сведения о среде, относящиеся к элементу конфигурации.</xref:System.Configuration.ContextInformation> Например, можно использовать <xref:System.Configuration.ContextInformation.IsMachineLevel%2A>Свойства, чтобы определить ли <xref:System.Configuration.ConfigurationElement>был задан в файле Machine.config, или можно определить, какие иерархии <xref:System.Configuration.ConfigurationElement>принадлежит элемент с помощью <xref:System.Configuration.ContextInformation.HostingContext%2A>свойство.</xref:System.Configuration.ContextInformation.HostingContext%2A> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ContextInformation.IsMachineLevel%2A>"
  syntax:
    content: protected System.Configuration.ContextInformation EvaluationContext { get; }
    return:
      type: System.Configuration.ContextInformation
      description: "The <xref href=&quot;System.Configuration.ContextInformation&quot;></xref> for the <xref href=&quot;System.Configuration.ConfigurationElement&quot;></xref>."
  overload: System.Configuration.ConfigurationElement.EvaluationContext*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Текущий элемент не связан с контекстом."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetHashCode
  id: GetHashCode
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Получает уникальное значение, представляющее текущий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> экземпляра."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Уникальное значение, представляющее текущий <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> экземпляра."
  overload: System.Configuration.ConfigurationElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  id: GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает преобразованную версию указанного имени сборки."
  remarks: "<xref:System.Configuration.ConfigurationElement.SerializeElement%2A>Метод и <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A>метод вызвать этот метод для преобразования имени сборки, при более ранней версии [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] нацелен.</xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> </xref:System.Configuration.ConfigurationElement.SerializeElement%2A>"
  syntax:
    content: protected virtual string GetTransformedAssemblyString (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "Имя сборки."
    return:
      type: System.String
      description: "Преобразованная версия имени сборки. Если доступен преобразователь отсутствует <code> assemblyName </code> значение параметра возвращается без изменений. <xref:System.Configuration.Configuration.TypeStringTransformer*>Свойство <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> при наличии преобразователь отсутствует.</xref:System.Configuration.Configuration.TypeStringTransformer*>"
  overload: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  id: GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает преобразованную версию указанного имени типа."
  remarks: "<xref:System.Configuration.ConfigurationElement.SerializeElement%2A>Метод и <xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A>метод вызвать этот метод для преобразования имени типа при более ранней версии [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] нацелен.</xref:System.Configuration.ConfigurationElement.SerializeToXmlElement%2A> </xref:System.Configuration.ConfigurationElement.SerializeElement%2A>"
  syntax:
    content: protected virtual string GetTransformedTypeString (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "Имя типа."
    return:
      type: System.String
      description: "Преобразованная версия указанного имени типа. Если доступен преобразователь отсутствует <code> typeName </code> значение параметра возвращается без изменений. <xref:System.Configuration.Configuration.TypeStringTransformer*>Свойство <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> при наличии преобразователь отсутствует.</xref:System.Configuration.Configuration.TypeStringTransformer*>"
  overload: System.Configuration.ConfigurationElement.GetTransformedTypeString*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.HasContext
  id: HasContext
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, является ли <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>свойство <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>"
  syntax:
    content: protected bool HasContext { get; }
    return:
      type: System.Boolean
      description: "значение false, если <xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>свойство <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.</xref:System.Configuration.ConfigurationElement.CurrentConfiguration*>"
  overload: System.Configuration.ConfigurationElement.HasContext*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Init
  id: Init
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Наборы <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект в исходное состояние."
  syntax:
    content: protected virtual void Init ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  id: InitializeDefault
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Используется для инициализации по умолчанию набор значений для <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объекта."
  remarks: "Вызывается, чтобы задать соответствующие значения по умолчанию внутреннее состояние объекта."
  syntax:
    content: protected virtual void InitializeDefault ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.InitializeDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.IsModified
  id: IsModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Указывает, является ли данный элемент конфигурации был изменен с момента последнего сохранения или загрузки после реализации в производном классе."
  remarks: "Определяет метод IsModified ли это <xref:System.Configuration.ConfigurationElement>объекта будут записаны в конфигурацию файла при <xref:System.Configuration.Configuration.Save%2A>вызывается метод.</xref:System.Configuration.Configuration.Save%2A> </xref:System.Configuration.ConfigurationElement> Если возвращается значение `false`, предполагается, что файл конфигурации представляет текущее состояние элемента.       По умолчанию возвращает IsModified `true` свойство было присвоено через индексатор это <xref:System.Configuration.ConfigurationElement>объекта.</xref:System.Configuration.ConfigurationElement>       Переопределите метод IsModified, чтобы реализовать собственную индикацию состояния данного <xref:System.Configuration.ConfigurationElement>элемент.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The following example shows how to extend IsModified.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#35](~/add/codesnippet/csharp/m-system.configuration.c_9_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#35](~/add/codesnippet/visualbasic/m-system.configuration.c_9_1.vb)]  \n  \n The method shown in the previous example is called when a configuration element is modified, as in the following example.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#6](~/add/codesnippet/csharp/m-system.configuration.c_9_2.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#6](~/add/codesnippet/visualbasic/m-system.configuration.c_9_2.vb)]"
  syntax:
    content: protected virtual bool IsModified ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент был изменен; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.IsModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  id: IsReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, является ли <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект доступен только для чтения."
  remarks: "Система определяет элементы конфигурации, которые не могут быть изменены.       Чтобы определить, какие элементы можно изменить, используйте метод IsReadOnly."
  example:
  - "The following example shows how to use the IsReadOnly method. It is used on a custom section and returns `false`.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#7](~/add/codesnippet/csharp/m-system.configuration.c_12_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#7](~/add/codesnippet/visualbasic/m-system.configuration.c_12_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект только для чтения; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  id: Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает свойства или атрибута данного элемента конфигурации."
  remarks: "Используйте свойство Item для получения или задания значения <xref:System.Configuration.ConfigurationProperty>объекта.</xref:System.Configuration.ConfigurationProperty>       В C# это свойство является индексатором <xref:System.Configuration.ConfigurationSectionCollection>класса.</xref:System.Configuration.ConfigurationSectionCollection>"
  syntax:
    content: protected object this[System.Configuration.ConfigurationProperty prop] { get; set; }
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: "Свойство для доступа."
    return:
      type: System.Object
      description: "Заданный свойство, атрибут или дочерний элемент."
  overload: System.Configuration.ConfigurationElement.Item*
  exceptions:
  - type: System.Configuration.ConfigurationException
    commentId: T:System.Configuration.ConfigurationException
    description: "<code>prop</code>— <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> или не существует в элементе."
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>prop</code>только для чтения или заблокированным."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  id: Item(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает свойство, атрибут или дочерний элемент данного элемента конфигурации."
  remarks: "Используйте свойство Item для получения или задания значения <xref:System.Configuration.ConfigurationProperty>объекта.</xref:System.Configuration.ConfigurationProperty>       В C# это свойство является индексатором <xref:System.Configuration.ConfigurationSectionCollection>класса.</xref:System.Configuration.ConfigurationSectionCollection>"
  syntax:
    content: protected object this[string propertyName] { get; set; }
    parameters:
    - id: propertyName
      type: System.String
      description: "Имя <xref href=&quot;System.Configuration.ConfigurationProperty&quot;> </xref> доступ."
    return:
      type: System.Object
      description: "Указанный свойство, атрибут или дочерний элемент"
  overload: System.Configuration.ConfigurationElement.Item*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "<code>prop</code>— только для чтения или заблокирован."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  id: ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Добавляет свойство недопустимо ошибки в этом <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объекта и все вложенные элементы, переданный список."
  syntax:
    content: protected virtual void ListErrors (System.Collections.IList errorList);
    parameters:
    - id: errorList
      type: System.Collections.IList
      description: "Объект, реализующий интерфейс <xref:System.Collections.IList>интерфейс.</xref:System.Collections.IList>"
  overload: System.Configuration.ConfigurationElement.ListErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  id: LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает коллекцию заблокированных атрибутов."
  remarks: "Свойство LockAllAttributesExcept позволяет блокировать все атрибуты сразу, за исключением тот, который можно указать. Чтобы сделать это, используйте <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>метод, как описано в разделе &quot;Пример&quot;.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      Настроек [!NOTE] настроек свойство LockAllAttributesExcept позволяет запретить дочерние элементы конфигурации элемента, к которому применяется правило от изменения. Используйте <xref:System.Configuration.ConfigurationElement.LockItem%2A>свойство, если требуется хранить общие блокировки на родительском элементе себя и своих дочерних элементов.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAllAttributesExcept.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#9](~/add/codesnippet/csharp/p-system.configuration.c_59_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#9](~/add/codesnippet/visualbasic/p-system.configuration.c_59_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllAttributesExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "<xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> Заблокированных атрибутов (свойства) для элемента."
  overload: System.Configuration.ConfigurationElement.LockAllAttributesExcept*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  id: LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает коллекцию заблокированных элементов."
  remarks: "Свойство LockAllElementsExcept позволяет блокировать все элементы за один раз, за исключением тот, который можно указать.      Настроек [!NOTE] настроек свойства LockAllElementsExcept позволяет запретить дочерние элементы конфигурации элемента, к которому применяется правило от изменения. Используйте <xref:System.Configuration.ConfigurationElement.LockItem%2A>свойство, если требуется хранить общие блокировки в элементе себя и своих дочерних элементов.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAllElementsExcept property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#5](~/add/codesnippet/csharp/p-system.configuration.c_3_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#5](~/add/codesnippet/visualbasic/p-system.configuration.c_3_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAllElementsExcept { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "<xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> Заблокированных элементов."
  overload: System.Configuration.ConfigurationElement.LockAllElementsExcept*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockAttributes
  id: LockAttributes
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает коллекцию заблокированных атрибутов"
  remarks: "Свойство LockAttributes позволяет блокировать все атрибуты, которые указаны.       Сделать использовать <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>метода, как описано в разделе &quot;Пример&quot;.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      Настроек [!NOTE] настроек свойство LockAttributes позволяет запретить дочерние элементы конфигурации элемента, к которому применяется правило от изменения. Используйте <xref:System.Configuration.ConfigurationElement.LockItem%2A>Если вы хотите поместить общие блокировки на сам элемент и его дочерние элементы.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockAttributes property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#8](~/add/codesnippet/csharp/p-system.configuration.c_45_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#8](~/add/codesnippet/visualbasic/p-system.configuration.c_45_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockAttributes { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "<xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> Заблокированных атрибутов (свойства) для элемента."
  overload: System.Configuration.ConfigurationElement.LockAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockElements
  id: LockElements
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает коллекцию заблокированных элементов."
  remarks: "Свойство LockElements позволяет блокировать заданных элементов.       Чтобы сделать это, используйте <xref:System.Configuration.ConfigurationLockCollection.Contains%2A>метод, как описано в следующем примере.</xref:System.Configuration.ConfigurationLockCollection.Contains%2A>      Настроек [!NOTE] настроек свойство LockElements позволяет запретить дочерние элементы конфигурации элемента, к которому применяется правило от изменения. Используйте <xref:System.Configuration.ConfigurationElement.LockItem%2A>Если вы хотите поместить общие блокировки на сам элемент и его дочерние элементы.</xref:System.Configuration.ConfigurationElement.LockItem%2A>"
  example:
  - "The following example shows how to use the LockElements property.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#4](~/add/codesnippet/csharp/p-system.configuration.c_11_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#4](~/add/codesnippet/visualbasic/p-system.configuration.c_11_1.vb)]"
  syntax:
    content: public System.Configuration.ConfigurationLockCollection LockElements { get; }
    return:
      type: System.Configuration.ConfigurationLockCollection
      description: "<xref href=&quot;System.Configuration.ConfigurationLockCollection&quot;> </xref> Заблокированных элементов."
  overload: System.Configuration.ConfigurationElement.LockElements*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.LockItem
  id: LockItem
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает или задает значение, указывающее, является ли элемент заблокирован."
  remarks: "Используйте свойство LockItem, если вы хотите поместить общие блокировки на сам элемент и его дочерние элементы."
  example:
  - "The following example shows how to use the LockItem.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#3](~/add/codesnippet/csharp/p-system.configuration.c_20_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#3](~/add/codesnippet/visualbasic/p-system.configuration.c_20_1.vb)]"
  syntax:
    content: public bool LockItem { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элемент заблокирован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.LockItem*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Элемент уже был заблокирован на более высоком уровне конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  id: OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, является ли неизвестный атрибут встречается при десериализации."
  remarks: "OnDeserializeUnrecognizedAttribute вызывается, когда неизвестный атрибут встречается при десериализации <xref:System.Configuration.ConfigurationElement>объекта.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "Имя неопознанного атрибута."
    - id: value
      type: System.String
      description: "Значение неопознанного атрибута."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Когда неизвестный атрибут встречается при десериализации; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  id: OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает значение, указывающее, будет ли при десериализации обнаружен неизвестный элемент."
  remarks: "OnDeserializeUnrecognizedElement вызывается, когда неизвестный атрибут встречается при десериализации <xref:System.Configuration.ConfigurationElement>объекта.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual bool OnDeserializeUnrecognizedElement (string elementName, System.Xml.XmlReader reader);
    parameters:
    - id: elementName
      type: System.String
      description: "Имя неизвестного дочернего элемента."
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>, Используемый для десериализации.</xref:System.Xml.XmlReader>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если неизвестный элемент встречается при десериализации; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "The element identified by <code>elementName</code> is locked.  \n  \n \\- or -  \n  \n One or more of the element's attributes is locked.  \n  \n \\- or -  \n  \n <code>elementName</code> is unrecognized, or the element has an unrecognized attribute.  \n  \n \\- or -  \n  \n The element has a Boolean attribute with an invalid value.  \n  \n \\- or -  \n  \n An attempt was made to deserialize a property more than once.  \n  \n \\- or -  \n  \n An attempt was made to deserialize a property that is not a valid member of the element.  \n  \n \\- or -  \n  \n The element cannot contain a CDATA or text element."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  id: OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Создает исключение, если требуемое свойство не найден."
  remarks: "<xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A>Вызывается, когда неизвестный атрибут встречается при десериализации <xref:System.Configuration.ConfigurationElement>объекта.</xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement%2A>"
  syntax:
    content: protected virtual object OnRequiredPropertyNotFound (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя требуемого атрибута, который не найден."
    return:
      type: System.Object
      description: "Отсутствует."
  overload: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Во всех случаях."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  id: PostDeserialize
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Вызывается после десериализации."
  syntax:
    content: protected virtual void PostDeserialize ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.PostDeserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  id: PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Вызывается до сериализации."
  syntax:
    content: protected virtual void PreSerialize (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>Будет использоваться для сериализации <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>.</xref:System.Xml.XmlWriter>"
  overload: System.Configuration.ConfigurationElement.PreSerialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Properties
  id: Properties
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает коллекцию свойств."
  remarks: "Свойство свойства, которое также называется контейнер свойств содержит все свойства (атрибуты), которые применяются к элементу."
  example:
  - For an example that shows how to use the Properties property, refer to the <xref:System.Configuration.ConfigurationProperty> class.
  syntax:
    content: protected virtual System.Configuration.ConfigurationPropertyCollection Properties { get; }
    return:
      type: System.Configuration.ConfigurationPropertyCollection
      description: "<xref href=&quot;System.Configuration.ConfigurationPropertyCollection&quot;> </xref> Свойств для элемента."
  overload: System.Configuration.ConfigurationElement.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  id: Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Восстанавливает внутреннее состояние объекта <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объекта, включая блокировки и коллекции свойств."
  syntax:
    content: protected virtual void Reset (System.Configuration.ConfigurationElement parentElement);
    parameters:
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "Родительский узел элемента конфигурации."
  overload: System.Configuration.ConfigurationElement.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.ResetModified
  id: ResetModified
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Сбрасывает значение <xref:System.Configuration.ConfigurationElement.IsModified*>метод <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> при реализации в производном классе.</xref:System.Configuration.ConfigurationElement.IsModified*>"
  remarks: "Метод ResetModified автоматически вызывается после изменения в нем <xref:System.Configuration.ConfigurationElement>объекта были записаны в файле конфигурации.</xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual void ResetModified ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.ResetModified*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  id: SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Записывает содержимое данного элемента конфигурации в файл конфигурации при реализации в производном классе."
  remarks: ''
  example:
  - "The following example shows how to extend the SerializeElement method.  \n  \n [!code-cs[System.Configuration.ConfigurationElement#34](~/add/codesnippet/csharp/640dc581-4dbf-4d04-aba6-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationElement#34](~/add/codesnippet/visualbasic/640dc581-4dbf-4d04-aba6-_1.vb)]"
  syntax:
    content: protected virtual bool SerializeElement (System.Xml.XmlWriter writer, bool serializeCollectionKey);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>, Который осуществляет запись в файл конфигурации.</xref:System.Xml.XmlWriter>"
    - id: serializeCollectionKey
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для сериализации только свойств ключа коллекции; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данные действительно был сериализован; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SerializeElement*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Текущий атрибут заблокирован на более высоком уровне конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  id: SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Записывает внешние теги данного элемента конфигурации в файл конфигурации при реализации в производном классе."
  remarks: "Метод SerializeToXmlElement вызывается после вызова <xref:System.Configuration.ConfigurationElement.Unmerge%2A>метод во время сериализации.</xref:System.Configuration.ConfigurationElement.Unmerge%2A> Метод SerializeToXmlElement записывает содержимое элемента конфигурации между начальный и конечный теги элемента. Переопределите SerializeToXmlElement для предоставления метода пользовательской сериализации."
  syntax:
    content: protected virtual bool SerializeToXmlElement (System.Xml.XmlWriter writer, string elementName);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>, Который осуществляет запись в файл конфигурации.</xref:System.Xml.XmlWriter>"
    - id: elementName
      type: System.String
      description: "Имя <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> для записи."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если запись выполнена успешно; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SerializeToXmlElement*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Элемент имеет несколько дочерних элементов."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  id: SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Задает свойство с указанным значением."
  syntax:
    content: protected void SetPropertyValue (System.Configuration.ConfigurationProperty prop, object value, bool ignoreLocks);
    parameters:
    - id: prop
      type: System.Configuration.ConfigurationProperty
      description: "Свойство элемента."
    - id: value
      type: System.Object
      description: "Значение, присваиваемое свойству."
    - id: ignoreLocks
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если блокировки на свойство должны игнорироваться; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Configuration.ConfigurationElement.SetPropertyValue*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Возникает, если элемент доступен только для чтения или <code> ignoreLocks </code> — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> пропущены блокировки."
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  id: SetReadOnly
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Наборы <xref:System.Configuration.ConfigurationElement.IsReadOnly*>свойство <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект и все вложенные элементы.</xref:System.Configuration.ConfigurationElement.IsReadOnly*>"
  remarks: "Этот метод используется внутренне для неизменяемые элементы системы конфигурации, не может быть изменено.       Чтобы определить, какие элементы можно изменить, используйте <xref:System.Configuration.ConfigurationElement.IsReadOnly%2A>метод.</xref:System.Configuration.ConfigurationElement.IsReadOnly%2A>"
  syntax:
    content: protected virtual void SetReadOnly ();
    parameters: []
  overload: System.Configuration.ConfigurationElement.SetReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  id: Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  langs:
  - csharp
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Изменяет <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> объект для удаления всех значений, которые не должны сохраняться."
  remarks: "Этот метод вызывается перед <xref:System.Configuration.ConfigurationElement>объект сохраняется по <xref:System.Configuration.Configuration>объекта, чтобы удалить все ненужные свойства.</xref:System.Configuration.Configuration> </xref:System.Configuration.ConfigurationElement>"
  syntax:
    content: protected virtual void Unmerge (System.Configuration.ConfigurationElement sourceElement, System.Configuration.ConfigurationElement parentElement, System.Configuration.ConfigurationSaveMode saveMode);
    parameters:
    - id: sourceElement
      type: System.Configuration.ConfigurationElement
      description: "Объект <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref> текущего уровня, содержащий объединенное представление свойств."
    - id: parentElement
      type: System.Configuration.ConfigurationElement
      description: "Родительский <xref href=&quot;System.Configuration.ConfigurationElement&quot;> </xref>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если это верхний уровень."
    - id: saveMode
      type: System.Configuration.ConfigurationSaveMode
      description: "Объект <xref href=&quot;System.Configuration.ConfigurationSaveMode&quot;> </xref> , определяющий, какие значения свойств для включения."
  overload: System.Configuration.ConfigurationElement.Unmerge*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationException
  nameWithType: ConfigurationException
  fullName: System.Configuration.ConfigurationException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Configuration.ConfigurationElement.#ctor
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ConfigurationElement()
  nameWithType: ConfigurationElement.ConfigurationElement()
  fullName: System.Configuration.ConfigurationElement.ConfigurationElement()
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
  fullName: System.Configuration.ConfigurationElement.CurrentConfiguration
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: DeserializeElement(XmlReader,Boolean)
  nameWithType: ConfigurationElement.DeserializeElement(XmlReader,Boolean)
  fullName: System.Configuration.ConfigurationElement.DeserializeElement(XmlReader,Boolean)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationElement.ElementInformation
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
  fullName: System.Configuration.ConfigurationElement.ElementInformation
- uid: System.Configuration.ElementInformation
  parent: System.Configuration
  isExternal: false
  name: ElementInformation
  nameWithType: ElementInformation
  fullName: System.Configuration.ElementInformation
- uid: System.Configuration.ConfigurationElement.ElementProperty
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
  fullName: System.Configuration.ConfigurationElement.ElementProperty
- uid: System.Configuration.ConfigurationElementProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElementProperty
  nameWithType: ConfigurationElementProperty
  fullName: System.Configuration.ConfigurationElementProperty
- uid: System.Configuration.ConfigurationElement.Equals(System.Object)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Equals(Object)
  nameWithType: ConfigurationElement.Equals(Object)
  fullName: System.Configuration.ConfigurationElement.Equals(Object)
- uid: System.Configuration.ConfigurationElement.EvaluationContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
  fullName: System.Configuration.ConfigurationElement.EvaluationContext
- uid: System.Configuration.ContextInformation
  parent: System.Configuration
  isExternal: false
  name: ContextInformation
  nameWithType: ContextInformation
  fullName: System.Configuration.ContextInformation
- uid: System.Configuration.ConfigurationElement.GetHashCode
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetHashCode()
  nameWithType: ConfigurationElement.GetHashCode()
  fullName: System.Configuration.ConfigurationElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedAssemblyString(String)
  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedTypeString(String)
  nameWithType: ConfigurationElement.GetTransformedTypeString(String)
  fullName: System.Configuration.ConfigurationElement.GetTransformedTypeString(String)
- uid: System.Configuration.ConfigurationElement.HasContext
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
  fullName: System.Configuration.ConfigurationElement.HasContext
- uid: System.Configuration.ConfigurationElement.Init
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Init()
  nameWithType: ConfigurationElement.Init()
  fullName: System.Configuration.ConfigurationElement.Init()
- uid: System.Configuration.ConfigurationElement.InitializeDefault
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: InitializeDefault()
  nameWithType: ConfigurationElement.InitializeDefault()
  fullName: System.Configuration.ConfigurationElement.InitializeDefault()
- uid: System.Configuration.ConfigurationElement.IsModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsModified()
  nameWithType: ConfigurationElement.IsModified()
  fullName: System.Configuration.ConfigurationElement.IsModified()
- uid: System.Configuration.ConfigurationElement.IsReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsReadOnly()
  nameWithType: ConfigurationElement.IsReadOnly()
  fullName: System.Configuration.ConfigurationElement.IsReadOnly()
- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(ConfigurationProperty)
  nameWithType: ConfigurationElement.Item(ConfigurationProperty)
  fullName: System.Configuration.ConfigurationElement.Item(ConfigurationProperty)
- uid: System.Configuration.ConfigurationProperty
  parent: System.Configuration
  isExternal: false
  name: ConfigurationProperty
  nameWithType: ConfigurationProperty
  fullName: System.Configuration.ConfigurationProperty
- uid: System.Configuration.ConfigurationElement.Item(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item(String)
  nameWithType: ConfigurationElement.Item(String)
  fullName: System.Configuration.ConfigurationElement.Item(String)
- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ListErrors(IList)
  nameWithType: ConfigurationElement.ListErrors(IList)
  fullName: System.Configuration.ConfigurationElement.ListErrors(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
  fullName: System.Configuration.ConfigurationElement.LockAllAttributesExcept
- uid: System.Configuration.ConfigurationLockCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationLockCollection
  nameWithType: ConfigurationLockCollection
  fullName: System.Configuration.ConfigurationLockCollection
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
  fullName: System.Configuration.ConfigurationElement.LockAllElementsExcept
- uid: System.Configuration.ConfigurationElement.LockAttributes
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
  fullName: System.Configuration.ConfigurationElement.LockAttributes
- uid: System.Configuration.ConfigurationElement.LockElements
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
  fullName: System.Configuration.ConfigurationElement.LockElements
- uid: System.Configuration.ConfigurationElement.LockItem
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
  fullName: System.Configuration.ConfigurationElement.LockItem
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedAttribute(String,String)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(String,String)
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedElement(String,XmlReader)
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
  fullName: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(String,XmlReader)
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnRequiredPropertyNotFound(String)
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)
  fullName: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(String)
- uid: System.Configuration.ConfigurationElement.PostDeserialize
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PostDeserialize()
  nameWithType: ConfigurationElement.PostDeserialize()
  fullName: System.Configuration.ConfigurationElement.PostDeserialize()
- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PreSerialize(XmlWriter)
  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)
  fullName: System.Configuration.ConfigurationElement.PreSerialize(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Configuration.ConfigurationElement.Properties
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Properties
  nameWithType: ConfigurationElement.Properties
  fullName: System.Configuration.ConfigurationElement.Properties
- uid: System.Configuration.ConfigurationPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: ConfigurationPropertyCollection
  nameWithType: ConfigurationPropertyCollection
  fullName: System.Configuration.ConfigurationPropertyCollection
- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Reset(ConfigurationElement)
  nameWithType: ConfigurationElement.Reset(ConfigurationElement)
  fullName: System.Configuration.ConfigurationElement.Reset(ConfigurationElement)
- uid: System.Configuration.ConfigurationElement
  parent: System.Configuration
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement
  fullName: System.Configuration.ConfigurationElement
- uid: System.Configuration.ConfigurationElement.ResetModified
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ResetModified()
  nameWithType: ConfigurationElement.ResetModified()
  fullName: System.Configuration.ConfigurationElement.ResetModified()
- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeElement(XmlWriter,Boolean)
  nameWithType: ConfigurationElement.SerializeElement(XmlWriter,Boolean)
  fullName: System.Configuration.ConfigurationElement.SerializeElement(XmlWriter,Boolean)
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeToXmlElement(XmlWriter,String)
  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
  fullName: System.Configuration.ConfigurationElement.SerializeToXmlElement(XmlWriter,String)
- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetPropertyValue(ConfigurationProperty,Object,Boolean)
  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
  fullName: System.Configuration.ConfigurationElement.SetPropertyValue(ConfigurationProperty,Object,Boolean)
- uid: System.Configuration.ConfigurationElement.SetReadOnly
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetReadOnly()
  nameWithType: ConfigurationElement.SetReadOnly()
  fullName: System.Configuration.ConfigurationElement.SetReadOnly()
- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
  fullName: System.Configuration.ConfigurationElement.Unmerge(ConfigurationElement,ConfigurationElement,ConfigurationSaveMode)
- uid: System.Configuration.ConfigurationSaveMode
  parent: System.Configuration
  isExternal: false
  name: ConfigurationSaveMode
  nameWithType: ConfigurationSaveMode
  fullName: System.Configuration.ConfigurationSaveMode
- uid: System.Configuration.ConfigurationElement.#ctor*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ConfigurationElement
  nameWithType: ConfigurationElement.ConfigurationElement
- uid: System.Configuration.ConfigurationElement.CurrentConfiguration*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: CurrentConfiguration
  nameWithType: ConfigurationElement.CurrentConfiguration
- uid: System.Configuration.ConfigurationElement.DeserializeElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: DeserializeElement
  nameWithType: ConfigurationElement.DeserializeElement
- uid: System.Configuration.ConfigurationElement.ElementInformation*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementInformation
  nameWithType: ConfigurationElement.ElementInformation
- uid: System.Configuration.ConfigurationElement.ElementProperty*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ElementProperty
  nameWithType: ConfigurationElement.ElementProperty
- uid: System.Configuration.ConfigurationElement.Equals*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Equals
  nameWithType: ConfigurationElement.Equals
- uid: System.Configuration.ConfigurationElement.EvaluationContext*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: EvaluationContext
  nameWithType: ConfigurationElement.EvaluationContext
- uid: System.Configuration.ConfigurationElement.GetHashCode*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetHashCode
  nameWithType: ConfigurationElement.GetHashCode
- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedAssemblyString
  nameWithType: ConfigurationElement.GetTransformedAssemblyString
- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: GetTransformedTypeString
  nameWithType: ConfigurationElement.GetTransformedTypeString
- uid: System.Configuration.ConfigurationElement.HasContext*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: HasContext
  nameWithType: ConfigurationElement.HasContext
- uid: System.Configuration.ConfigurationElement.Init*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Init
  nameWithType: ConfigurationElement.Init
- uid: System.Configuration.ConfigurationElement.InitializeDefault*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: InitializeDefault
  nameWithType: ConfigurationElement.InitializeDefault
- uid: System.Configuration.ConfigurationElement.IsModified*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsModified
  nameWithType: ConfigurationElement.IsModified
- uid: System.Configuration.ConfigurationElement.IsReadOnly*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: IsReadOnly
  nameWithType: ConfigurationElement.IsReadOnly
- uid: System.Configuration.ConfigurationElement.Item*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Item
  nameWithType: ConfigurationElement.Item
- uid: System.Configuration.ConfigurationElement.ListErrors*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ListErrors
  nameWithType: ConfigurationElement.ListErrors
- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllAttributesExcept
  nameWithType: ConfigurationElement.LockAllAttributesExcept
- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAllElementsExcept
  nameWithType: ConfigurationElement.LockAllElementsExcept
- uid: System.Configuration.ConfigurationElement.LockAttributes*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockAttributes
  nameWithType: ConfigurationElement.LockAttributes
- uid: System.Configuration.ConfigurationElement.LockElements*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockElements
  nameWithType: ConfigurationElement.LockElements
- uid: System.Configuration.ConfigurationElement.LockItem*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: LockItem
  nameWithType: ConfigurationElement.LockItem
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedAttribute
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute
- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnDeserializeUnrecognizedElement
  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement
- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: OnRequiredPropertyNotFound
  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound
- uid: System.Configuration.ConfigurationElement.PostDeserialize*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PostDeserialize
  nameWithType: ConfigurationElement.PostDeserialize
- uid: System.Configuration.ConfigurationElement.PreSerialize*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: PreSerialize
  nameWithType: ConfigurationElement.PreSerialize
- uid: System.Configuration.ConfigurationElement.Properties*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Properties
  nameWithType: ConfigurationElement.Properties
- uid: System.Configuration.ConfigurationElement.Reset*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Reset
  nameWithType: ConfigurationElement.Reset
- uid: System.Configuration.ConfigurationElement.ResetModified*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: ResetModified
  nameWithType: ConfigurationElement.ResetModified
- uid: System.Configuration.ConfigurationElement.SerializeElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeElement
  nameWithType: ConfigurationElement.SerializeElement
- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SerializeToXmlElement
  nameWithType: ConfigurationElement.SerializeToXmlElement
- uid: System.Configuration.ConfigurationElement.SetPropertyValue*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetPropertyValue
  nameWithType: ConfigurationElement.SetPropertyValue
- uid: System.Configuration.ConfigurationElement.SetReadOnly*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: SetReadOnly
  nameWithType: ConfigurationElement.SetReadOnly
- uid: System.Configuration.ConfigurationElement.Unmerge*
  parent: System.Configuration.ConfigurationElement
  isExternal: false
  name: Unmerge
  nameWithType: ConfigurationElement.Unmerge
