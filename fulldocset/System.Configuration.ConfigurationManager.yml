### YamlMime:ManagedReference
items:
- uid: System.Configuration.ConfigurationManager
  id: ConfigurationManager
  children:
  - System.Configuration.ConfigurationManager.AppSettings
  - System.Configuration.ConfigurationManager.ConnectionStrings
  - System.Configuration.ConfigurationManager.GetSection(System.String)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  - System.Configuration.ConfigurationManager.OpenMachineConfiguration
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  - System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  - System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  - System.Configuration.ConfigurationManager.RefreshSection(System.String)
  langs:
  - csharp
  name: ConfigurationManager
  nameWithType: ConfigurationManager
  fullName: System.Configuration.ConfigurationManager
  type: Class
  summary: "Предоставляет доступ к файлам конфигурации для клиентских приложений. Этот класс не наследуется."
  remarks: "Класс ConfigurationManager позволяет доступ компьютера, приложения и сведения о конфигурации. Этот класс заменяет <xref:System.Configuration.ConfigurationSettings>класс, который является устаревшим.</xref:System.Configuration.ConfigurationSettings> Для веб-приложений использование <xref:System.Web.Configuration.WebConfigurationManager>класса.</xref:System.Web.Configuration.WebConfigurationManager>       Чтобы использовать класс ConfigurationManager, проект должен содержать ссылки `System.Configuration` сборки. По умолчанию некоторые шаблоны проекта как консольное приложение, не ссылаться эту сборку, необходимо вручную сослаться на эту.      Настроек [!NOTE] настроек имя и расположение файла конфигурации приложения зависят от ведущего приложения. Дополнительные сведения см. в разделе [NIB: файлы конфигурации приложения](http://msdn.microsoft.com/en-us/0d05b1b8-b18b-43d8-bb3c-526ff0c44fe0).       Можно использовать встроенные <xref:System.Configuration>типы или являются производными от их для обработки сведений о конфигурации.</xref:System.Configuration> С помощью этих типов, можно работать непосредственно с информацией о конфигурации и файлы конфигурации, чтобы включить пользовательскую информацию можно расширить.       Класс ConfigurationManager включает элементы, которые позволяют выполнять следующие задачи:-чтение раздела из файла конфигурации. Для получения сведений о конфигурации, вызовите <xref:System.Configuration.ConfigurationManager.GetSection%2A>метод.</xref:System.Configuration.ConfigurationManager.GetSection%2A> Для некоторых разделов, таких как `appSettings` и `connectionStrings`, используйте <xref:System.Configuration.ConfigurationManager.AppSettings%2A>и <xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A>классы.</xref:System.Configuration.ConfigurationManager.ConnectionStrings%2A> </xref:System.Configuration.ConfigurationManager.AppSettings%2A> Эти члены выполнять операции только для чтения, используют отдельный кэшированный экземпляр конфигурации и многопоточную виду.      -Чтение и запись файлов конфигурации в целом. Приложения могут читать и записывать параметры конфигурации на любом уровне, для себя или для других приложений или компьютеров, локально или удаленно. Используйте один из методов, предоставляемых классом ConfigurationManager для открытия файла конфигурации, такие как SampleApp.exe.config. Эти методы возвращают <xref:System.Configuration.Configuration>объекта, который в свою очередь предоставляет методы и свойства, которые можно использовать для работы с файлами конфигурации.</xref:System.Configuration.Configuration> Методы выполнения чтения или операций записи и создают данные конфигурации, каждый раз при записи файла.      -Поддерживает задачи настройки. Следующие типы используются для поддержки различных задач конфигурации:- <xref:System.Configuration.SectionInformation>- <xref:System.Configuration.PropertyInformation>- <xref:System.Configuration.PropertyInformationCollection>- <xref:System.Configuration.ElementInformation>- <xref:System.Configuration.ContextInformation>- <xref:System.Configuration.ConfigurationSectionGroup>- <xref:System.Configuration.ConfigurationSectionGroupCollection>в дополнение к работе с существующие сведения о конфигурации, можно создать и работать с пользовательские элементы конфигурации, расширения конфигурации встроенные типы, например <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, и <xref:System.Configuration.ConfigurationSection>классы.</xref:System.Configuration.ConfigurationSection> </xref:System.Configuration.ConfigurationProperty> </xref:System.Configuration.ConfigurationElementCollection> </xref:System.Configuration.ConfigurationElement> </xref:System.Configuration.ConfigurationSectionGroupCollection> </xref:System.Configuration.ConfigurationSectionGroup> </xref:System.Configuration.ContextInformation> </xref:System.Configuration.ElementInformation> </xref:System.Configuration.PropertyInformationCollection> </xref:System.Configuration.PropertyInformation> </xref:System.Configuration.SectionInformation> Пример программного расширения встроенного типа конфигурации см. в разделе <xref:System.Configuration.ConfigurationSection>.</xref:System.Configuration.ConfigurationSection> Пример расширения типа встроенной конфигурации, использующей модель на основе атрибутов см. в разделе <xref:System.Configuration.ConfigurationElement>.</xref:System.Configuration.ConfigurationElement>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```  \n  \n The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static class ConfigurationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.AppSettings
  id: AppSettings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> данные для конфигурации текущего приложения по умолчанию."
  remarks: "Объект <xref:System.Configuration.AppSettingsSection>объект содержит содержимое файла конфигурации `appSettings` раздела.</xref:System.Configuration.AppSettingsSection>"
  example:
  - "The first example shows a simple console application that reads application settings, adds a new setting, and updates an existing setting.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadAllSettings();  \n            ReadSetting(\"Setting1\");  \n            ReadSetting(\"NotValid\");  \n            AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\");  \n            AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\");  \n            ReadAllSettings();  \n        }  \n  \n        static void ReadAllSettings()  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n  \n                if (appSettings.Count == 0)  \n                {  \n                    Console.WriteLine(\"AppSettings is empty.\");  \n                }  \n                else  \n                {  \n                    foreach (var key in appSettings.AllKeys)  \n                    {  \n                        Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings[key]);  \n                    }  \n                }  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void ReadSetting(string key)  \n        {  \n            try  \n            {  \n                var appSettings = ConfigurationManager.AppSettings;  \n                string result = appSettings[key] ?? \"Not Found\";  \n                Console.WriteLine(result);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error reading app settings\");  \n            }  \n        }  \n  \n        static void AddUpdateAppSettings(string key, string value)  \n        {  \n            try  \n            {  \n                var configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);  \n                var settings = configFile.AppSettings.Settings;  \n                if (settings[key] == null)  \n                {  \n                    settings.Add(key, value);  \n                }  \n                else  \n                {  \n                    settings[key].Value = value;  \n                }  \n                configFile.Save(ConfigurationSaveMode.Modified);  \n                ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name);  \n            }  \n            catch (ConfigurationErrorsException)  \n            {  \n                Console.WriteLine(\"Error writing app settings\");  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nModule Module1  \n  \n    Sub Main()  \n        ReadAllSettings()  \n        ReadSetting(\"Setting1\")  \n        ReadSetting(\"NotValid\")  \n        AddUpdateAppSettings(\"NewSetting\", \"May 7, 2014\")  \n        AddUpdateAppSettings(\"Setting1\", \"May 8, 2014\")  \n        ReadAllSettings()  \n    End Sub  \n  \n    Sub ReadAllSettings()  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n  \n            If appSettings.Count = 0 Then  \n                Console.WriteLine(\"AppSettings is empty.\")  \n            Else  \n                For Each key As String In appSettings.AllKeys  \n                    Console.WriteLine(\"Key: {0} Value: {1}\", key, appSettings(key))  \n                Next  \n            End If  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub ReadSetting(key As String)  \n        Try  \n            Dim appSettings = ConfigurationManager.AppSettings  \n            Dim result As String = appSettings(key)  \n            If IsNothing(result) Then  \n                result = \"Not found\"  \n            End If  \n            Console.WriteLine(result)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error reading app settings\")  \n        End Try  \n    End Sub  \n  \n    Sub AddUpdateAppSettings(key As String, value As String)  \n        Try  \n            Dim configFile = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)  \n            Dim settings = configFile.AppSettings.Settings  \n            If IsNothing(settings(key)) Then  \n                settings.Add(key, value)  \n            Else  \n                settings(key).Value = value  \n            End If  \n            configFile.Save(ConfigurationSaveMode.Modified)  \n            ConfigurationManager.RefreshSection(configFile.AppSettings.SectionInformation.Name)  \n        Catch e As ConfigurationErrorsException  \n            Console.WriteLine(\"Error writing app settings\")  \n        End Try  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config file as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n  <appSettings>  \n    <add key=\"Setting1\" value=\"May 5, 2014\"/>  \n    <add key=\"Setting2\" value=\"May 6, 2014\"/>  \n  </appSettings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Collections.Specialized.NameValueCollection AppSettings { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "Возвращает <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> , содержащий содержимое <xref href=&quot;System.Configuration.AppSettingsSection&quot;> </xref> для конфигурации текущего приложения по умолчанию."
  overload: System.Configuration.ConfigurationManager.AppSettings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось получить <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> объекта с помощью данных параметров приложения."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  id: ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Возвращает <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> данные для конфигурации текущего приложения по умолчанию."
  remarks: "Объект <xref:System.Configuration.ConnectionStringsSection>объект содержит содержимое файла конфигурации `connectionStrings` раздела.</xref:System.Configuration.ConnectionStringsSection>"
  example:
  - "The following example shows how to use a connection string to read data from a database.  \n  \n```c#  \nusing System;  \nusing System.Configuration;  \nusing System.Data.SqlClient;  \n  \nnamespace ConsoleApplication1  \n{  \n    class Program  \n    {  \n        static void Main(string[] args)  \n        {  \n            ReadProducts();  \n        }  \n  \n        static void ReadProducts()  \n        {  \n            var connectionString = ConfigurationManager.ConnectionStrings[\"WingtipToys\"].ConnectionString;  \n            string queryString = \"SELECT Id, ProductName FROM dbo.Products;\";  \n            using (var connection = new SqlConnection(connectionString))  \n            {  \n                var command = new SqlCommand(queryString, connection);  \n                connection.Open();  \n                using (var reader = command.ExecuteReader())  \n                {  \n                    while (reader.Read())  \n                    {  \n                        Console.WriteLine(String.Format(\"{0}, {1}\", reader[0], reader[1]));  \n                    }  \n                }  \n            }  \n        }  \n    }  \n}  \n```  \n  \n```vb  \nImports System.Configuration  \nImports System.Data.SqlClient  \nModule Module1  \n  \n    Sub Main()  \n        ReadProducts()  \n    End Sub  \n  \n    Sub ReadProducts()  \n        Dim connectionString = ConfigurationManager.ConnectionStrings(\"WingtipToys\").ConnectionString  \n        Dim queryString = \"SELECT Id, ProductName FROM dbo.Products;\"  \n        Using connection As New SqlConnection(connectionString)  \n            Dim command = New SqlCommand(queryString, connection)  \n            connection.Open()  \n  \n            Using reader As SqlDataReader = command.ExecuteReader()  \n                While reader.Read()  \n                    Console.WriteLine(String.Format(\"{0}, {1}\", reader(0), reader(1)))  \n                End While  \n            End Using  \n        End Using  \n    End Sub  \n  \nEnd Module  \n```  \n  \n The previous example assumes your project has an App.config as shown below.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<configuration>  \n    <startup>   \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />  \n    </startup>  \n    <connectionStrings>  \n      <add name=\"WingtipToys\" connectionString=\"Data Source=(LocalDB)\\v11.0;Initial Catalog=WingtipToys;Integrated Security=True;Pooling=False\" />  \n    </connectionStrings>  \n</configuration>  \n```"
  syntax:
    content: public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }
    return:
      type: System.Configuration.ConnectionStringSettingsCollection
      description: "Возвращает <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> , содержащий содержимое <xref href=&quot;System.Configuration.ConnectionStringsSection&quot;> </xref> для конфигурации текущего приложения по умолчанию."
  overload: System.Configuration.ConfigurationManager.ConnectionStrings*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось получить <xref href=&quot;System.Configuration.ConnectionStringSettingsCollection&quot;> </xref> объекта."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Извлекает указанный раздел конфигурации для конфигурации текущего приложения по умолчанию."
  remarks: "Для клиентских приложений этот метод извлекает файл конфигурации, полученный посредством слияния файла конфигурации приложения, файле конфигурации локального пользователя и перемещаемого файла конфигурации.       Метод GetSection получает сведения о конфигурации во время выполнения, его нельзя изменить. Чтобы изменить конфигурацию, используйте <xref:System.Configuration.Configuration.GetSection%2A>метод в файле конфигурации, можно получить с помощью одного из следующих методов Open:- <xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>- <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A></xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> </xref:System.Configuration.ConfigurationManager.OpenExeConfiguration%2A> </xref:System.Configuration.Configuration.GetSection%2A>"
  example:
  - "The following example shows how to use the GetSection method. The example is part of a larger example that is provided for the <xref:System.Configuration.ConfigurationManager> class.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_14_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_14_1.vb)]"
  syntax:
    content: public static object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "Путь к разделу конфигурации и имя."
    return:
      type: System.Object
      description: "Указанный <xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref> объекта, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если раздел не существует."
  overload: System.Configuration.ConfigurationManager.GetSection*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  id: OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает файл конфигурации для текущего приложения в качестве <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объекта."
  remarks: "Клиентские приложения используют глобальную конфигурацию, которая применяется для всех пользователей, отдельные конфигурации, которые применяются к отдельным пользователям и конфигураций, которые применяются к пользователям в роуминге. `userLevel` Определяет расположение файла конфигурации, открытого с указанием, имеет ли он уровень без пользователя (файл конфигурации находится в том же каталоге, что и приложение) или уровень пользователя (файл конфигурации находится в пути настроек приложения определяются на уровне пользователя).       Укажите, какую конфигурацию следует получить посредством передачи одного из следующих значений для `userLevel`: -, чтобы получить <xref:System.Configuration.Configuration>набор объектов, который применяется ко всем пользователям `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Для получения локальной <xref:System.Configuration.Configuration>набор объектов, который применяется к текущему пользователю, `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>      -Для получения перемещаемых <xref:System.Configuration.Configuration>набор объектов, который применяется к текущему пользователю, `userLevel` <xref:System.Configuration.ConfigurationUserLevel>.</xref:System.Configuration.ConfigurationUserLevel> </xref:System.Configuration.Configuration>          Настроек [!NOTE] настроек для получения <xref:System.Configuration.Configuration>объекта для ресурса, код должен иметь разрешения на чтение всех файлов конфигурации, от которых он наследует параметры.</xref:System.Configuration.Configuration> Чтобы обновить файл конфигурации, код Дополнительно требуются разрешения на запись для файла конфигурации и каталога, в котором он находится."
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#5](~/add/codesnippet/csharp/3eb7bc6f-f763-4df6-a789-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#5](~/add/codesnippet/visualbasic/3eb7bc6f-f763-4df6-a789-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> Для которого открывается конфигурация."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  id: OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает указанный файл конфигурации клиента как <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объекта."
  remarks: "Клиентские приложения используют глобальную конфигурацию, которая применяется для всех пользователей, отдельные конфигурации, которые применяются к отдельным пользователям и конфигураций, которые применяются к пользователям в роуминге. `userLevel` Значение определяет расположение открытого файла конфигурации. Указывает, имеет ли он уровень без пользователя (файл конфигурации находится в том же каталоге, что и приложение) или уровень пользователя (файл конфигурации находится в пути настроек приложения определяется типом уровня пользователя.).       Вызов перегрузки этого метода эквивалентен вызову <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>перегрузка с `preLoad` равным `false`.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%28System.Configuration.ExeConfigurationFileMap%2CSystem.Configuration.ConfigurationUserLevel%2CSystem.Boolean%29>"
  example:
  - "The following code example shows how to use the OpenExeConfiguration method.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#6](~/add/codesnippet/csharp/m-system.configuration.c_28_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#6](~/add/codesnippet/visualbasic/m-system.configuration.c_28_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenExeConfiguration (string exePath);
    parameters:
    - id: exePath
      type: System.String
      description: "Путь к исполняемому файлу (exe) файла."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  id: OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает файл конфигурации компьютера на текущем компьютере в качестве <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объекта."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMachineConfiguration method to obtain all sections that are contained in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/m-system.configuration.c_32_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/m-system.configuration.c_32_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMachineConfiguration ();
    parameters: []
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает указанный файл конфигурации клиента как <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объект, который использует указанный файл сопоставления и уровень пользователя."
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>Объект определяет расположение открытого файла конфигурации.</xref:System.Configuration.ConfigurationUserLevel> Указывает, имеет ли файл уровень без пользователя (файл конфигурации находится в том же каталоге, что и приложение) или уровень пользователя (файл конфигурации находится в пути настроек приложения, которые определяются `userLevel`).      Настроек [!NOTE] настроек для получения <xref:System.Configuration.Configuration>объекта для ресурса, код должен иметь разрешения на чтение всех файлов конфигурации, от которых он наследует параметры.</xref:System.Configuration.Configuration> Чтобы обновить файл конфигурации, код Дополнительно требуются разрешения на запись для файла конфигурации и каталога, в котором он находится."
  example:
  - "The following code example shows how to use the OpenMappedExeConfiguration method to obtain all sections that are contained by the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#9](~/add/codesnippet/csharp/3a231caa-8bb5-4e8b-a7ef-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#9](~/add/codesnippet/visualbasic/3a231caa-8bb5-4e8b-a7ef-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> Объект, который ссылается на файл конфигурации для использования вместо файла конфигурации приложения по умолчанию."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> Объекта, для которого открывается конфигурация."
    return:
      type: System.Configuration.Configuration
      description: "Объект конфигурации."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  id: OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает указанный файл конфигурации клиента как <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объект, который использует указанное сопоставление файлов, на уровне пользователя и параметр предварительной загрузки."
  remarks: "<xref:System.Configuration.ConfigurationUserLevel>Объект определяет расположение файла конфигурации, который открыт.</xref:System.Configuration.ConfigurationUserLevel> Указывает, имеет ли файл уровень без пользователя (файл конфигурации находится в том же каталоге, что и приложение) или уровень пользователя (файл конфигурации находится в пути настроек приложения, определяется `userLevel`).      Настроек [!NOTE] настроек для получения <xref:System.Configuration.Configuration>объекта для ресурса, код должен иметь разрешения на чтение всех файлов конфигурации, от которых он наследует параметры.</xref:System.Configuration.Configuration> Чтобы обновить файл конфигурации, код Дополнительно требуются разрешения на запись для файла конфигурации и каталога, в котором он находится.       Пример кода см. в разделе <xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>перегрузить.</xref:System.Configuration.ConfigurationManager.OpenMappedExeConfiguration%2A>"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedExeConfiguration (System.Configuration.ExeConfigurationFileMap fileMap, System.Configuration.ConfigurationUserLevel userLevel, bool preLoad);
    parameters:
    - id: fileMap
      type: System.Configuration.ExeConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> Объект, который ссылается на файл конфигурации для использования вместо файла конфигурации приложения по умолчанию."
    - id: userLevel
      type: System.Configuration.ConfigurationUserLevel
      description: "<xref href=&quot;System.Configuration.ConfigurationUserLevel&quot;> </xref> Объекта, для которого открывается конфигурация."
    - id: preLoad
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для предварительной загрузки всех групп разделов и разделов; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Configuration.Configuration
      description: "Объект конфигурации."
  overload: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  id: OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Открывает файл конфигурации компьютера в качестве <xref href=&quot;System.Configuration.Configuration&quot;> </xref> объект, который использует указанное сопоставление файлов."
  remarks: "Machine configuration settings apply to the whole computer and all applications that reside on it, unless overridden for the local application. Machine configuration settings are read from the Machine.config file of the currently running version of the .NET Framework. The Machine.config file is located in the following subdirectory:  \n  \n *%windir%*\\Microsoft.NET\\Framework\\\\*version*\\config  \n  \n> [!NOTE]\n>  To obtain the <xref:System.Configuration.Configuration> object for a resource, your code must have read permissions on all the configuration files from which it inherits settings. To update a configuration file, your code must additionally have write permissions for both the configuration file and the directory in which it exists. It is not possible to access the Machine.config file for other versions of the .NET Framework that might be installed on the computer."
  example:
  - "The following code example shows how to use the OpenMappedMachineConfiguration method to obtain all sections in the configuration file.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#4](~/add/codesnippet/csharp/b514431f-be81-4b1e-b58c-_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#4](~/add/codesnippet/visualbasic/b514431f-be81-4b1e-b58c-_1.vb)]"
  syntax:
    content: public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);
    parameters:
    - id: fileMap
      type: System.Configuration.ConfigurationFileMap
      description: "<xref href=&quot;System.Configuration.ExeConfigurationFileMap&quot;> </xref> Объект, который ссылается на файл конфигурации для использования вместо файла конфигурации приложения по умолчанию."
    return:
      type: System.Configuration.Configuration
      description: "A <xref href=&quot;System.Configuration.Configuration&quot;></xref> object."
  overload: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "Не удалось загрузить файл конфигурации."
  platform:
  - net462
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  id: RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  langs:
  - csharp
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "Обновляет именованный раздел, чтобы при очередном извлечении он повторно считывался с диска."
  remarks: "Этот метод делает недействительным кэш для указанного раздела конфигурации, не затрагивая другие разделы."
  example:
  - "The following code example shows how to use the RefreshSection method to refresh the application settings configuration section.  \n  \n [!code-cs[System.Configuration.ConfigurationManager#7](~/add/codesnippet/csharp/m-system.configuration.c_34_1.cs)]\n [!code-vb[System.Configuration.ConfigurationManager#7](~/add/codesnippet/visualbasic/m-system.configuration.c_34_1.vb)]"
  syntax:
    content: public static void RefreshSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "Имя раздела конфигурации или имя пути и раздела конфигурации раздела для обновления."
  overload: System.Configuration.ConfigurationManager.RefreshSection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.ConfigurationManager.AppSettings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
  fullName: System.Configuration.ConfigurationManager.AppSettings
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.ConfigurationManager.ConnectionStrings
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
  fullName: System.Configuration.ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConnectionStringSettingsCollection
  parent: System.Configuration
  isExternal: false
  name: ConnectionStringSettingsCollection
  nameWithType: ConnectionStringSettingsCollection
  fullName: System.Configuration.ConnectionStringSettingsCollection
- uid: System.Configuration.ConfigurationManager.GetSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection(String)
  nameWithType: ConfigurationManager.GetSection(String)
  fullName: System.Configuration.ConfigurationManager.GetSection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel)
- uid: System.Configuration.Configuration
  parent: System.Configuration
  isExternal: false
  name: Configuration
  nameWithType: Configuration
  fullName: System.Configuration.Configuration
- uid: System.Configuration.ConfigurationUserLevel
  parent: System.Configuration
  isExternal: false
  name: ConfigurationUserLevel
  nameWithType: ConfigurationUserLevel
  fullName: System.Configuration.ConfigurationUserLevel
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration(String)
  nameWithType: ConfigurationManager.OpenExeConfiguration(String)
  fullName: System.Configuration.ConfigurationManager.OpenExeConfiguration(String)
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration()
  nameWithType: ConfigurationManager.OpenMachineConfiguration()
  fullName: System.Configuration.ConfigurationManager.OpenMachineConfiguration()
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel)
- uid: System.Configuration.ExeConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ExeConfigurationFileMap
  nameWithType: ExeConfigurationFileMap
  fullName: System.Configuration.ExeConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel,System.Boolean)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
  fullName: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(ExeConfigurationFileMap,ConfigurationUserLevel,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration(ConfigurationFileMap)
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
  fullName: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration(ConfigurationFileMap)
- uid: System.Configuration.ConfigurationFileMap
  parent: System.Configuration
  isExternal: false
  name: ConfigurationFileMap
  nameWithType: ConfigurationFileMap
  fullName: System.Configuration.ConfigurationFileMap
- uid: System.Configuration.ConfigurationManager.RefreshSection(System.String)
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection(String)
  nameWithType: ConfigurationManager.RefreshSection(String)
  fullName: System.Configuration.ConfigurationManager.RefreshSection(String)
- uid: System.Configuration.ConfigurationManager.AppSettings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: AppSettings
  nameWithType: ConfigurationManager.AppSettings
- uid: System.Configuration.ConfigurationManager.ConnectionStrings*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: ConnectionStrings
  nameWithType: ConfigurationManager.ConnectionStrings
- uid: System.Configuration.ConfigurationManager.GetSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: GetSection
  nameWithType: ConfigurationManager.GetSection
- uid: System.Configuration.ConfigurationManager.OpenExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenExeConfiguration
  nameWithType: ConfigurationManager.OpenExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMachineConfiguration
  nameWithType: ConfigurationManager.OpenMachineConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedExeConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedExeConfiguration
  nameWithType: ConfigurationManager.OpenMappedExeConfiguration
- uid: System.Configuration.ConfigurationManager.OpenMappedMachineConfiguration*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: OpenMappedMachineConfiguration
  nameWithType: ConfigurationManager.OpenMappedMachineConfiguration
- uid: System.Configuration.ConfigurationManager.RefreshSection*
  parent: System.Configuration.ConfigurationManager
  isExternal: false
  name: RefreshSection
  nameWithType: ConfigurationManager.RefreshSection
