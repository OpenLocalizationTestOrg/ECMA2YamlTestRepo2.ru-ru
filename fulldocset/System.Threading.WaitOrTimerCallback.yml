### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "Представляет метод, вызываемый при <xref:System.Threading.WaitHandle>сигнала или истечении времени.</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback представляет метод обратного вызова, который должен выполняться при дескриптора ожидания зарегистрированного времени ожидания или получает сигнал. Этот делегат можно создайте путем передачи в метод обратного вызова конструктору WaitOrTimerCallback. Метод должен иметь сигнатуру, показано ниже.       Создать зарегистрированный ожидающий дескриптор, передав делегата WaitOrTimerCallback и <xref:System.Threading.WaitHandle> <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName> </xref:System.Threading.WaitHandle> Данный метод обратного вызова выполняется каждый раз <xref:System.Threading.WaitHandle>времени ожидания или получает сигнал.</xref:System.Threading.WaitHandle>       [Visual Basic] настроек [!NOTE] настроек пользователей Visual Basic можно опускать конструктор WaitOrTimerCallback и просто использовать `AddressOf` оператор при передаче в метод обратного вызова <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Visual Basic автоматически вызывает соответствующий конструктор делегата.       Если требуется передать информацию в метод обратного вызова, создайте объект, который содержит необходимые сведения и передать его в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>при создании дескриптора ожидания зарегистрированных.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Каждый раз, метод обратного вызова выполняется, `state` параметр содержит этот объект.       Дополнительные сведения об использовании методов обратного вызова для синхронизации потоков пула см. в разделе [пул управляемых потоков](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
