### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapExtension
  id: SoapExtension
  children:
  - System.Web.Services.Protocols.SoapExtension.#ctor
  - System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  - System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  - System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  - System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  langs:
  - csharp
  name: SoapExtension
  nameWithType: SoapExtension
  fullName: System.Web.Services.Protocols.SoapExtension
  type: Class
  summary: "Базовый класс для расширений SOAP для веб-служб XML с помощью ASP.NET."
  remarks: "ASP.NET позволяет SOAP-инфраструктуру для построения с помощью механизм расширяемости. Архитектура расширения ASP.NET SOAP строится на расширения, который может проверять или изменять сообщение на определенных стадиях обработки на стороне клиента или сервера сообщений.       Расширения ASP.NET SOAP являются производными от класса SoapExtension. <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>И <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>методы предоставляют альтернативные механизмы для инициализации расширения SOAP для повышения производительности.</xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> </xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> <xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A>является основой большинства расширений SOAP, как на каждом этапе, определенные в вызове метода <xref:System.Web.Services.Protocols.SoapMessageStage>, позволяя расширение SOAP для выполнения требуемого поведения, определенное расширение SOAP.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapExtension.ProcessMessage%2A> Для расширения SOAP, которые необходимо изменить запрос или ответ SOAP, <xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>предоставляет возможность получать предложенный данные для отправки по каналу связи.</xref:System.Web.Services.Protocols.SoapExtension.ChainStream%2A>"
  example:
  - "The following `TraceExtension` SOAP extension outputs the SOAP request and SOAP response to a specified file when applied to an XML Web service method. If the following SOAP extension is installed to run with an XML Web service, the ASPNET user account must have permission to write to the directory in which the log file is written.  \n  \n [!code-cs[Classic SoapExtension Example#1](~/add/codesnippet/csharp/t-system.web.services.pr_23_1.cs)]\n [!code-cpp[Classic SoapExtension Example#1](~/add/codesnippet/cpp/t-system.web.services.pr_23_1.cpp)]\n [!code-vb[Classic SoapExtension Example#1](~/add/codesnippet/visualbasic/t-system.web.services.pr_23_1.vb)]"
  syntax:
    content: public abstract class SoapExtension
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: SoapExtension()
  nameWithType: SoapExtension.SoapExtension()
  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Web.Services.Protocols.SoapExtension&quot;> </xref> класса."
  syntax:
    content: protected SoapExtension ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapExtension.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  id: ChainStream(System.IO.Stream)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: ChainStream(Stream)
  nameWithType: SoapExtension.ChainStream(Stream)
  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "При переопределении в производном классе, разрешает доступ расширение SOAP буфер памяти, содержащий запрос или ответ."
  remarks: "ChainStream гарантирует, что расширения SOAP с наивысшим приоритетом можно изменить текущие данные в сообщение SOAP отправлено или возвращается по сети.       Расширения SOAP должно сохранить ссылки <xref:System.IO.Stream>переданные ChainStream и <xref:System.IO.Stream>возвращаемые ChainStream.</xref:System.IO.Stream> </xref:System.IO.Stream> Если расширения SOAP настроен для работы с XML-веб-службы методом <xref:System.IO.Stream>переданные ChainStream содержит сериализованный запрос SOAP на <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapMessageStage> </xref:System.IO.Stream> Аналогично, <xref:System.IO.Stream>ссылки, возвращенные ChainStream записываются в случае сериализации и таким образом, содержит сериализованный ответ SOAP в <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>.</xref:System.Web.Services.Protocols.SoapMessageStage></xref:System.Web.Services.Protocols.SoapMessageStage> </xref:System.IO.Stream>"
  example:
  - "The following example saves both the <xref:System.IO.Stream> passed into ChainStream and the <xref:System.IO.Stream> returned from ChainStream in the member variables `oldStream` and `newStream`, respectively.  \n  \n [!code-cpp[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_14_1.cpp)]\n [!code-cs[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_14_1.cs)]\n [!code-vb[Classic SoapExtension.ChainStream Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_14_1.vb)]"
  syntax:
    content: public virtual System.IO.Stream ChainStream (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "Буфер памяти, содержащий запрос или ответ."
    return:
      type: System.IO.Stream
      description: "Объект <xref:System.IO.Stream>представляет новый буфер памяти, можно изменить расширение SOAP.</xref:System.IO.Stream>"
  overload: System.Web.Services.Protocols.SoapExtension.ChainStream*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  id: GetInitializer(System.Type)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: GetInitializer(Type)
  nameWithType: SoapExtension.GetInitializer(Type)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "При переопределении в производном классе позволяет расширению SOAP инициализировать данные, относящиеся к классу, реализующему веб-служб XML с минимальной потерей производительности."
  remarks: "The overload of <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that gets called by ASP.NET depends on how the SOAP extension was specified. There are two methods for specifying a SOAP extension:  \n  \n-   Apply a custom attribute, deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, to the individual XML Web service method.  \n  \n-   Add a reference in either the web.config or app.config configuration files.  \n  \n If you add a reference to one of the configuration files, the SOAP extension runs for all XML Web services within the scope of that configuration file. When specifying, a SOAP extension by referencing a configuration file, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> overload that passes in a <xref:System.Type>. When specifying an extension by applying a custom attribute, ASP.NET invokes the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> that passes in a <xref:System.Web.Services.Protocols.LogicalMethodInfo> and a <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.  \n  \n For details on adding SOAP extensions to a configuration file, see [&#91;\\<topic://cpconconfigurationoptionsforaspnetwebservices>&#93;](http://msdn.microsoft.com/en-us/1f0d71bc-8faa-4730-b500-2a6c7b5d4f6b)."
  example:
  - "The following code demonstrates how one can save SOAP extension specific data on a per XML Web service basis. If the SOAP extension is configured using a configuration file instead of an attribute, the SOAP extension can store data for each class to which the SOAP extension is applied. This example saves the name of a file in which to log the SOAP messages sent to and from the XML Web service method based on the name of the class implementing the XML Web service into the cache. This code example is part of a full code example for a TraceExtension SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview.  \n  \n [!code-vb[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_2_1.vb)]\n [!code-cs[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/csharp/m-system.web.services.pr_2_1.cs)]\n [!code-cpp[SoapExtension.GetInitializer-Type#1](~/add/codesnippet/cpp/m-system.web.services.pr_2_1.cpp)]"
  syntax:
    content: public abstract object GetInitializer (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "Тип класса, реализующего веб-службу XML, к которой применяется расширение SOAP."
    return:
      type: System.Object
      description: "<xref:System.Object>, Инициализирующий расширение SOAP для кэширования.</xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  id: GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "При переопределении в производном классе позволяет расширению SOAP инициализировать данные, относящиеся к методу XML-веб-службы, с помощью атрибута, примененного к метода XML-веб-службы с минимальной потерей производительности."
  remarks: "Если расширение SOAP настраивается с помощью файла конфигурации, см GetInitializer перегрузку, которая принимает <xref:System.Type>.</xref:System.Type>       Расширения SOAP имеются три варианта инициализации данных, и все они имеют разное: - конструктор класса - класса конструктор вызывается каждый раз создается расширения SOAP и обычно используется для инициализации переменных-членов.      -GetInitializer - GetInitializer, однако вызывается только один раз, при первом запуске сделан запрос SOAP на XML-веб-служб метод. Если настраиваемый атрибут применяется к метода XML-веб-службы, вызывается метод. Это позволяет расширению SOAP может запросить <xref:System.Web.Services.Protocols.LogicalMethodInfo>метода XML-веб-службы, прототип сведения или получить доступ к данным конкретного расширения, передаваемого класс, производный от <xref:System.Web.Services.Protocols.SoapExtensionAttribute>.</xref:System.Web.Services.Protocols.SoapExtensionAttribute> </xref:System.Web.Services.Protocols.LogicalMethodInfo> Возвращаемое значение в кэше ASP.NET и передается в последующих <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>методы.</xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> Таким образом инициализация, в GetInitializer производимая лишь однажды.      - <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>- <xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>вызывается каждый раз при запросе SOAP метода XML-веб-службы, но имеет преимущество над конструктора класса, в том, что <xref:System.Object>инициализировать в GetInitializer передается в него</xref:System.Object> </xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A> </xref:System.Web.Services.Protocols.SoapExtension.Initialize%2A>"
  example:
  - "The following code demonstrates how you can obtain SOAP extension-specific data passed in using a class that derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>, and then cache that data in GetInitializer. This code example is part of a full code example for a `TraceExtension` SOAP extension that can be found in the <xref:System.Web.Services.Protocols.SoapExtension> class overview. This code example relies on a `TraceExtensionAttribute` being passed into the `attribute` parameter. In the full code example, `TraceExtensionAttribute` derives from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> and adds a `Filename` property, which is what GetInitializer stores in the cache.  \n  \n [!code-cpp[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/cpp/3e28a43a-5fe0-43d3-bd26-_1.cpp)]\n [!code-cs[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/csharp/3e28a43a-5fe0-43d3-bd26-_1.cs)]\n [!code-vb[Classic SoapExtension.GetInitializer Example#1](~/add/codesnippet/visualbasic/3e28a43a-5fe0-43d3-bd26-_1.vb)]"
  syntax:
    content: public abstract object GetInitializer (System.Web.Services.Protocols.LogicalMethodInfo methodInfo, System.Web.Services.Protocols.SoapExtensionAttribute attribute);
    parameters:
    - id: methodInfo
      type: System.Web.Services.Protocols.LogicalMethodInfo
      description: "Объект <xref href=&quot;System.Web.Services.Protocols.LogicalMethodInfo&quot;> </xref> представляет особые прототипы функций для метода XML-веб-службы, к которой применяется расширение SOAP."
    - id: attribute
      type: System.Web.Services.Protocols.SoapExtensionAttribute
      description: "<xref href=&quot;System.Web.Services.Protocols.SoapExtensionAttribute&quot;> </xref> Метода XML-веб-службы."
    return:
      type: System.Object
      description: "<xref:System.Object>, Инициализирующий расширение SOAP для кэширования.</xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  id: Initialize(System.Object)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: Initialize(Object)
  nameWithType: SoapExtension.Initialize(Object)
  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "При переопределении в производном классе позволяет расширение SOAP для инициализации самой себя с помощью данных, сохраненных в <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>метод.</xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>"
  remarks: "A SOAP extension has three opportunities to initialize data and they all have different purposes:  \n  \n-   Class constructor - The class constructor is called every time a SOAP extension is instantiated and is typically used to initialize member variables.  \n  \n-   <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> - <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A>, however, is called just once, the first time a SOAP request is made to an XML Web services method. If a custom attribute is applied to the XML Web service method, the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method is invoked. This allows the SOAP extension to interrogate the <xref:System.Web.Services.Protocols.LogicalMethodInfo> of an XML Web service method for prototype information or to access extension-specific data passed by a class deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute>. The return value is cached by ASP.NET and passed into subsequent Initialize methods. Therefore, initialization done in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is encapsulated essentially into a one-time performance hit.  \n  \n-   Initialize - Initialize is called every time a SOAP request is made to an XML Web service method, but has an advantage over the class constructor, in that the <xref:System.Object> initialized in <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> is passed to it.  \n  \n-  \n  \n> [!NOTE]\n>  You can also add a SOAP extension without deriving from <xref:System.Web.Services.Protocols.SoapExtensionAttribute> by using the [\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) in a configuration file. For details, see [\\<soapExtensionTypes> Element](http://msdn.microsoft.com/en-us/7a373a98-6d82-4f8d-a6fc-2996da3fd54c) and [SOAP Message Modification Using SOAP Extensions](http://msdn.microsoft.com/en-us/97d81ace-95e7-4acc-ae39-9692a0021e95).  \n  \n-"
  example:
  - "The following example demonstrates how you can use the data cached during the <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer%2A> method.  \n  \n [!code-cpp[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/cpp/m-system.web.services.pr_10_1.cpp)]\n [!code-cs[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/csharp/m-system.web.services.pr_10_1.cs)]\n [!code-vb[Classic SoapExtension.Initialize Example#1](~/add/codesnippet/visualbasic/m-system.web.services.pr_10_1.vb)]"
  syntax:
    content: public abstract void Initialize (object initializer);
    parameters:
    - id: initializer
      type: System.Object
      description: "<xref:System.Object>Возвращенные <xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*>ASP.NET в кэше.</xref:System.Web.Services.Protocols.SoapExtension.GetInitializer*> </xref:System.Object>"
  overload: System.Web.Services.Protocols.SoapExtension.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  id: ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  parent: System.Web.Services.Protocols.SoapExtension
  langs:
  - csharp
  name: ProcessMessage(SoapMessage)
  nameWithType: SoapExtension.ProcessMessage(SoapMessage)
  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "При переопределении в производном классе позволяет расширение SOAP для получения <xref href=&quot;System.Web.Services.Protocols.SoapMessage&quot;> </xref> для обработки на каждой <xref href=&quot;System.Web.Services.Protocols.SoapMessageStage&quot;> </xref>."
  remarks: "ProcessMessage вызывается на всех <xref:System.Web.Services.Protocols.SoapMessageStage>стадиях для расширения SOAP, которые применены к оба XML-веб-службы, создаваемые с помощью ASP.NET и их клиентами.</xref:System.Web.Services.Protocols.SoapMessageStage> На каждом <xref:System.Web.Services.Protocols.SoapMessageStage>, экземпляр класса, производного от <xref:System.Web.Services.Protocols.SoapMessage>передается ProcessMessage.</xref:System.Web.Services.Protocols.SoapMessage> </xref:System.Web.Services.Protocols.SoapMessageStage> Если расширение SOAP выполняется на стороне клиента XML-веб-службы, а затем <xref:System.Web.Services.Protocols.SoapClientMessage>объект, переданный в ProcessMessage; в противном случае <xref:System.Web.Services.Protocols.SoapServerMessage>объект передается in.</xref:System.Web.Services.Protocols.SoapServerMessage> </xref:System.Web.Services.Protocols.SoapClientMessage>"
  example:
  - "The following example is the ProcessMessage portion of a SOAP extension that logs SOAP requests and SOAP responses. By logging the <xref:System.Web.Services.Protocols.SoapMessage> at the <xref:System.Web.Services.Protocols.SoapMessageStage><xref:System.Web.Services.Protocols.SoapMessageStage>, the SOAP extension accesses the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> to be sent over the wire. If the SOAP extension is applied to an XML Web service method created using ASP.NET, then the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP response from the XML Web service method. If the SOAP extension is applied to an XML Web service client, the <xref:System.Web.Services.Protocols.SoapMessage.Stream%2A> contains the SOAP request to an XML Web service method.  \n  \n Classic SoapExtension.ProcessMessage Example#1"
  syntax:
    content: public abstract void ProcessMessage (System.Web.Services.Protocols.SoapMessage message);
    parameters:
    - id: message
      type: System.Web.Services.Protocols.SoapMessage
      description: "<xref href=&quot;System.Web.Services.Protocols.SoapMessage&quot;> </xref> Процессу."
  overload: System.Web.Services.Protocols.SoapExtension.ProcessMessage*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.SoapExtension.#ctor
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: SoapExtension()
  nameWithType: SoapExtension.SoapExtension()
  fullName: System.Web.Services.Protocols.SoapExtension.SoapExtension()
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream(System.IO.Stream)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ChainStream(Stream)
  nameWithType: SoapExtension.ChainStream(Stream)
  fullName: System.Web.Services.Protocols.SoapExtension.ChainStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Type)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer(Type)
  nameWithType: SoapExtension.GetInitializer(Type)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  nameWithType: SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
  fullName: System.Web.Services.Protocols.SoapExtension.GetInitializer(LogicalMethodInfo,SoapExtensionAttribute)
- uid: System.Web.Services.Protocols.LogicalMethodInfo
  parent: System.Web.Services.Protocols
  isExternal: false
  name: LogicalMethodInfo
  nameWithType: LogicalMethodInfo
  fullName: System.Web.Services.Protocols.LogicalMethodInfo
- uid: System.Web.Services.Protocols.SoapExtensionAttribute
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapExtensionAttribute
  nameWithType: SoapExtensionAttribute
  fullName: System.Web.Services.Protocols.SoapExtensionAttribute
- uid: System.Web.Services.Protocols.SoapExtension.Initialize(System.Object)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: Initialize(Object)
  nameWithType: SoapExtension.Initialize(Object)
  fullName: System.Web.Services.Protocols.SoapExtension.Initialize(Object)
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage(System.Web.Services.Protocols.SoapMessage)
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ProcessMessage(SoapMessage)
  nameWithType: SoapExtension.ProcessMessage(SoapMessage)
  fullName: System.Web.Services.Protocols.SoapExtension.ProcessMessage(SoapMessage)
- uid: System.Web.Services.Protocols.SoapMessage
  parent: System.Web.Services.Protocols
  isExternal: false
  name: SoapMessage
  nameWithType: SoapMessage
  fullName: System.Web.Services.Protocols.SoapMessage
- uid: System.Web.Services.Protocols.SoapExtension.#ctor*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: SoapExtension
  nameWithType: SoapExtension.SoapExtension
- uid: System.Web.Services.Protocols.SoapExtension.ChainStream*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ChainStream
  nameWithType: SoapExtension.ChainStream
- uid: System.Web.Services.Protocols.SoapExtension.GetInitializer*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: GetInitializer
  nameWithType: SoapExtension.GetInitializer
- uid: System.Web.Services.Protocols.SoapExtension.Initialize*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: Initialize
  nameWithType: SoapExtension.Initialize
- uid: System.Web.Services.Protocols.SoapExtension.ProcessMessage*
  parent: System.Web.Services.Protocols.SoapExtension
  isExternal: false
  name: ProcessMessage
  nameWithType: SoapExtension.ProcessMessage
