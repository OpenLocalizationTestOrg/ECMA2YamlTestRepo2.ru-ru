### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.Log
  id: Log
  children:
  - Microsoft.VisualBasic.Logging.Log.#ctor
  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  - Microsoft.VisualBasic.Logging.Log.TraceSource
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  langs:
  - csharp
  name: Log
  nameWithType: Log
  fullName: Microsoft.VisualBasic.Logging.Log
  type: Class
  summary: "Предоставляет свойства и методы для записи информации о событиях и исключениях в журнал приложения."
  remarks: "`My.Application.Log` Объект предоставляет простую точку входа для доступа к содержимому из [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]ведение журнала служб. `WriteEntry` И `WriteException` методы записи сообщений в журнал приложения. Прослушиватели могут быть настроены в файле конфигурации приложения. Дополнительные сведения см. в разделе [Пошаговое руководство: изменение информация](~/add/includes/ajax-current-ext-md.md) и [работа с журналами приложения](~/add/includes/ajax-current-ext-md.md).       `My.Application.Log` Объект доступен только для клиентских приложений. Веб-приложения, используйте `My.Log`. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.Logging.AspLog>.</xref:Microsoft.VisualBasic.Logging.AspLog>       В следующей таблице перечислены примеры задач, связанных с `My.Application.Log` объекта.      | Чтобы | См. |   |--------|---------|   | Запись сведений о событиях в журнал приложения | [Как: запись сообщений в журнал](~/add/includes/ajax-current-ext-md.md)|   | Запись информации об исключении в журнал приложения | [Как: журнала исключений](~/add/includes/ajax-current-ext-md.md)|   | Определить, куда `My.Application.Log` записывает сведения о |[ Пошаговое руководство: Определение места записи информации для My.Application.Log](~/add/includes/ajax-current-ext-md.md)|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]"
  syntax:
    content: public class Log
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Инициализирует новый экземпляр <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref> класса."
  syntax:
    content: public Log ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Инициализирует новый экземпляр <xref href=&quot;Microsoft.VisualBasic.Logging.Log&quot;> </xref> класса."
  syntax:
    content: public Log (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>.</xref:System.String> Имя должно быть присвоено <xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>объект свойства.</xref:Microsoft.VisualBasic.Logging.Log.TraceSource*>"
  overload: Microsoft.VisualBasic.Logging.Log.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  id: DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Получает файл <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> объект, лежащий в основе <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "Это свойство можно использовать для определения текущей конфигурации <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>объекта.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта."
  syntax:
    content: public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }
    return:
      type: Microsoft.VisualBasic.Logging.FileLogTraceListener
      description: "Возвращает <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> объект, лежащий в основе <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> объекта."
  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  id: InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Создает новый <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref> объекта и добавляет его в <xref:System.Diagnostics.TraceSource.Listeners*>коллекции.</xref:System.Diagnostics.TraceSource.Listeners*>"
  remarks: "Этот метод создает новый <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, устанавливает его имени `FileLog`и настраивает его для записи сообщений с уровнем серьезности <xref:System.Diagnostics.SourceLevels>и более поздней версии.</xref:System.Diagnostics.SourceLevels> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> Новый <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>объект затем добавляется <xref:System.Diagnostics.TraceSource.Listeners%2A>коллекции.</xref:System.Diagnostics.TraceSource.Listeners%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A>Вызывает метод, если <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A>свойства не был настроен.</xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> </xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> Источник трассировки можно настроить в файле конфигурации приложения."
  syntax:
    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  id: TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Получает <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref> объект, лежащий в основе <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> объекта."
  remarks: "Это свойство можно использовать для определения текущей конфигурации `Log` объекта.       В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.       Это дополнительный элемент. отображается в IntelliSense, если не выбрана **все** вкладки.       В следующей таблице перечислены задачи с использованием пример `TraceSource` свойство.      | Чтобы | См. |   |--------|---------|   | Получение сведений о каждом из `Log` прослушивателей журнала объекта. | [Устранение неполадок: прослушивателей журнала](~/add/includes/ajax-current-ext-md.md)|      ## Доступность по типу проекта | Тип проекта | Доступные |   |------------------|---------------|   | Приложение Windows | **Yes**|   | Библиотека классов | **Yes**|   | Консольное приложение | **Yes**|   | Библиотека элементов управления Windows | **Yes**|   | Библиотека элементов управления веб | Не |   | Служба Windows | **Yes**|   | Веб-сайта | **Yes**|"
  syntax:
    content: public System.Diagnostics.TraceSource TraceSource { get; }
    return:
      type: System.Diagnostics.TraceSource
      description: "Возвращает <xref href=&quot;System.Diagnostics.TraceSource&quot;> </xref> объект, лежащий в основе <xref uid=&quot;langword_csharp_Log&quot; name=&quot;Log&quot; href=&quot;&quot;> </xref> объекта."
  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  id: WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сообщение в журнал приложения."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message);
    parameters:
    - id: message
      type: System.String
      description: "Обязательный параметр. Сообщение журнала. Если `message` — <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, используется пустая строка."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сообщение в журнал приложения."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);
    parameters:
    - id: message
      type: System.String
      description: "Обязательный параметр. Сообщение журнала. Если `message` — <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, используется пустая строка."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Тип сообщения. По умолчанию <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Тип сообщений не является одним из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значений перечисления."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сообщение в журнал приложения."
  remarks: "The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](../Topic/How%20to:%20Write%20Log%20Messages%20\\(Visual%20Basic\\).md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#11](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#11)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications."
  syntax:
    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);
    parameters:
    - id: message
      type: System.String
      description: "Обязательный параметр. Сообщение журнала. Если `message` — <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, используется пустая строка."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Тип сообщения. По умолчанию <xref uid=&quot;langword_csharp_TraceEventType.Information&quot; name=&quot;TraceEventType.Information&quot; href=&quot;&quot;> </xref>."
    - id: id
      type: System.Int32
      description: "Идентификатор сообщения, обычно используемый для корреляции. По умолчанию, связанные с `entryType` как описано в таблице."
  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Тип сообщений не является одним из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значений перечисления."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  id: WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сведения об исключении в журнал приложения."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex);
    parameters:
    - id: ex
      type: System.Exception
      description: "Обязательный параметр. Записываемое в журнал исключение."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сведения об исключении в журнал приложения."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);
    parameters:
    - id: ex
      type: System.Exception
      description: "Обязательный параметр. Записываемое в журнал исключение."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Тип сообщения. По умолчанию <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>."
    - id: additionalInfo
      type: System.String
      description: "Строка, добавляемая в сообщение. По умолчанию это пустая строка."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Тип сообщений не является одним из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значений перечисления."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  langs:
  - csharp
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "Записывает сведения об исключении в журнал приложения."
  remarks: "The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/add/includes/ajax-current-ext-md.md). You can change default log listeners. For more information, see [Working with Application Logs](~/add/includes/ajax-current-ext-md.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType>|0|  \n|<xref:System.Diagnostics.TraceEventType>|1|  \n|<xref:System.Diagnostics.TraceEventType>|2|  \n|<xref:System.Diagnostics.TraceEventType>|3|  \n|<xref:System.Diagnostics.TraceEventType>|4|  \n|<xref:System.Diagnostics.TraceEventType>|5|  \n|<xref:System.Diagnostics.TraceEventType>|6|  \n|<xref:System.Diagnostics.TraceEventType>|7|  \n|<xref:System.Diagnostics.TraceEventType>|8|  \n|<xref:System.Diagnostics.TraceEventType>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/add/includes/ajax-current-ext-md.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](../Topic/Walkthrough:%20Determining%20Where%20My.Application.Log%20Writes%20Information%20\\(Visual%20Basic\\).md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](../Topic/How%20to:%20Log%20Exceptions%20in%20Visual%20Basic.md).  \n  \n [!code-vb[VbVbalrMyApplicationLog#10](~/add/codesnippet/visualbasic/VbVbalrMyApplicationLog/Form1.vb#10)]  \n  \n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications."
  syntax:
    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);
    parameters:
    - id: ex
      type: System.Exception
      description: "Обязательный параметр. Записываемое в журнал исключение."
    - id: severity
      type: System.Diagnostics.TraceEventType
      description: "Тип сообщения. По умолчанию <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>."
    - id: additionalInfo
      type: System.String
      description: "Строка, добавляемая в сообщение. По умолчанию это пустая строка."
    - id: id
      type: System.Int32
      description: "Идентификатор сообщения, обычно используемый для корреляции. По умолчанию, связанные с `entryType` как описано в таблице в разделе &quot;Примечания&quot;."
  overload: Microsoft.VisualBasic.Logging.Log.WriteException*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ex</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Тип сообщений не является одним из <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref> значений перечисления."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Код с частичным доверием, вызывает метод, но запись в прослушиватель журнала событий, который требует полного доверия."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Logging.Log.#ctor
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log()
  nameWithType: Log.Log()
  fullName: Microsoft.VisualBasic.Logging.Log.Log()
- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log(String)
  nameWithType: Log.Log(String)
  fullName: Microsoft.VisualBasic.Logging.Log.Log(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
  fullName: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists()
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()
  fullName: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists()
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
  fullName: Microsoft.VisualBasic.Logging.Log.TraceSource
- uid: System.Diagnostics.TraceSource
  parent: System.Diagnostics
  isExternal: false
  name: TraceSource
  nameWithType: TraceSource
  fullName: System.Diagnostics.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String)
  nameWithType: Log.WriteEntry(String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType)
  nameWithType: Log.WriteEntry(String,TraceEventType)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType)
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry(String,TraceEventType,Int32)
  nameWithType: Log.WriteEntry(String,TraceEventType,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteEntry(String,TraceEventType,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception)
  nameWithType: Log.WriteException(Exception)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String)
  nameWithType: Log.WriteException(Exception,TraceEventType,String)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String)
- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException(Exception,TraceEventType,String,Int32)
  nameWithType: Log.WriteException(Exception,TraceEventType,String,Int32)
  fullName: Microsoft.VisualBasic.Logging.Log.WriteException(Exception,TraceEventType,String,Int32)
- uid: Microsoft.VisualBasic.Logging.Log.#ctor*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: Log
  nameWithType: Log.Log
- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: DefaultFileLogWriter
  nameWithType: Log.DefaultFileLogWriter
- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: InitializeWithDefaultsSinceNoConfigExists
  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists
- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: TraceSource
  nameWithType: Log.TraceSource
- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteEntry
  nameWithType: Log.WriteEntry
- uid: Microsoft.VisualBasic.Logging.Log.WriteException*
  parent: Microsoft.VisualBasic.Logging.Log
  isExternal: false
  name: WriteException
  nameWithType: Log.WriteException
