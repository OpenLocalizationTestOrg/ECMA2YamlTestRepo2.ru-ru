### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ISynchronizeInvoke
  id: ISynchronizeInvoke
  children:
  - System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  - System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  langs:
  - csharp
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
  type: Interface
  summary: "Предоставляет способ для синхронного или асинхронного выполнения делегата."
  remarks: "The ISynchronizeInvoke interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \n  \n The ISynchronizeInvoke class provides two ways to invoke a process:  \n  \n1.  Asynchronously, by using the [BeginInvoke(Delegate, Object\\[\\])](assetId:///M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])?qualifyHint=False&autoUpgrade=True) method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \n  \n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \n  \n> [!NOTE]\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource> &#124; <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public interface ISynchronizeInvoke
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Асинхронно выполняет делегат в потоке, который создал этот объект."
  remarks: "`method` Делегат, выполняется в потоке, который создал объект вместо потока, для которого был вызван BeginInvoke.       Делегат вызывается асинхронно, и этот метод возвращается немедленно. Этот метод можно вызывать из любого потока. Если возвращаемое значение от процесса, запущенного с помощью этого метода следует вызвать <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>для получения значения.</xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>       Если необходимо вызвать делегата синхронно, используйте <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>метод вместо.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Объект <xref:System.Delegate>метода, принимающего параметры одно и то же количество и тип, который содержится в `args`.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Массив объектов типа <xref:System.Object>для передачи в качестве аргументов указанному методу.</xref:System.Object> Это может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если аргументы не требуются."
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Интерфейс, который представляет асинхронную операцию, запущенную вызовом этого метода.</xref:System.IAsyncResult>"
  overload: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Ожидает, пока процесс запущен с помощью вызова <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>завершения, а затем возвращает значение, созданное процессом.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>"
  remarks: "Этот метод получает возвращаемое значение асинхронной операции, представленное <xref:System.IAsyncResult>переданным этим интерфейсом.</xref:System.IAsyncResult> Если асинхронная операция не завершена, этот метод будет ожидать, пока не станет доступен результат."
  syntax:
    content: public object EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>Интерфейс, который представляет асинхронную операцию, запущенную вызовом <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий возвращаемое значение, сформированное асинхронной операцией.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Синхронно выполняет делегат в потоке, который создал этот объект и выполняет маршалинг вызова в текущий поток."
  remarks: "В отличие от <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, этот метод работает синхронно, то есть ожидает завершения процесса перед возвратом.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> Исключения, вызванные во время вызова передаются обратно в вызывающий объект.       Используйте этот метод при вызове метода из другого потока, чтобы направить запрос в правильный поток."
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Объект <xref:System.Delegate>, содержащий метод, вызываемый в контексте потока элемента управления.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Массив объектов типа <xref:System.Object>, представляющий аргументы для передачи в заданный метод.</xref:System.Object> Это может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если аргументы не требуются."
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий возвращаемое значение от вызываемого делегата, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если делегат не имеет возвращаемого значения.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  id: InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, является ли вызывающему оператору обращаться <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>Когда вызов объекта, который реализует этот интерфейс.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  remarks: "Это свойство определяет, является ли вызывающему оператору обращаться <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>при вызове метода объекта, реализующего этот интерфейс.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Такие объекты привязаны к конкретному потоку и не являются потокобезопасными. При вызове метод из другого потока, необходимо использовать <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>метод выполнить маршалинг вызова в нужный поток.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public bool InvokeRequired { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если вызывающий объект должен вызвать <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  overload: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke
  nameWithType: ISynchronizeInvoke.BeginInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke
  nameWithType: ISynchronizeInvoke.EndInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke
  nameWithType: ISynchronizeInvoke.Invoke
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
