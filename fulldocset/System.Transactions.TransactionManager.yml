### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "Содержит методы, используемые для управления транзакциями. Этот класс не наследуется."
  remarks: "Этот класс содержит статические свойства и методы, используемые для получения сведений о по умолчанию параметры транзакции. Он также содержит несколько статических методов, служащих для восстановления долговременного ресурса после сбоя. Никаких специальных действий необходим долговременный ресурс при сбое координатора распределенных транзакций Майкрософт (MSDTC)."
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает интервал времени ожидания по умолчанию для новых транзакций."
  remarks: "Интервал времени ожидания транзакции — это время, в течение которого должна быть завершена транзакция. Если диспетчер транзакций не имеет слышали из участников транзакции в течение интервала времени ожидания, транзакция прерывается.       Это значение может быть задано `DefaultSettingsSection` файла конфигурации."
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "Объект <xref:System.TimeSpan>значение, указывающее интервал времени ожидания для новых транзакций.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Указывает, что запущена распределенная транзакция."
  remarks: "**Внимание** регистрацию для этого события уменьшает производительность всех распределенных транзакций. Локальные транзакции не отслеживаются как еще более снижается производительность.       **Примечание** этот метод использует <xref:System.Security.Permissions.SecurityAction>для предотвращения вызова от ненадежного кода, однако требуется только непосредственно вызывающего метода должны обладать; `FullTrust` набор разрешений.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Возвращает или задает пользовательскую фабрику транзакций."
  remarks: '**Примечание** этот метод использует <xref:System.Security.Permissions.SecurityAction>для предотвращения вызова от ненадежного кода, однако требуется только непосредственно вызывающего метода должны обладать; `FullTrust` набор разрешений.</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "Объект <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;> </xref> , содержащий пользовательскую фабрику транзакций."
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Получает максимальный тайм-аут по умолчанию для новых транзакций."
  remarks: "Объяснение интервала времени ожидания см. в документации для <xref:System.Transactions.TransactionManager.DefaultTimeout%2A>свойство.</xref:System.Transactions.TransactionManager.DefaultTimeout%2A>       Это значение может быть задано `MachineSettingsSection` файла конфигурации."
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "Объект <xref:System.TimeSpan>значение, указывающее максимальный интервал времени ожидания, является допустимым при создании новых транзакций.</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Уведомляет диспетчер транзакций, диспетчер ресурсов, восстановление после сбоя, завершил повторное зачисление всех неразрешенных транзакций."
  remarks: "Все диспетчеры ресурсов устойчивых следует выполнить восстановление, при первом запуске путем вызова <xref:System.Transactions.TransactionManager.Reenlist%2A>метод для каждого необработанная транзакция.</xref:System.Transactions.TransactionManager.Reenlist%2A>  Только в том случае, если выполняются все reenlistments диспетчера ресурсов следует вызывать RecoveryComplete.       Дополнительные сведения о восстановлении см. в разделе [выполнение восстановления](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Примечание** этот метод использует <xref:System.Security.Permissions.SecurityAction>для предотвращения вызова от ненадежного кода, однако требуется только непосредственно вызывающего метода должны обладать; `FullTrust` набор разрешений.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "Объект <xref:System.Guid>, однозначно идентифицирующий ресурс должен быть восстановлен из.</xref:System.Guid>"
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "Reenlists долговременного участника в транзакцию."
  remarks: "Диспетчер ресурсов обеспечивает разрешение зачислений устойчивых ресурсов в транзакции, повторно зачисляя участника транзакции после сбоя ресурса.       `resourceManagerIdentifier` Параметр используется для согласованного подписи участника транзакции в случае сбоя ресурса.  При вызове метода прикрепить повторно, диспетчер ресурсов должен предоставлять тот же `resourceManagerIdentifier` , используемое при его вызове изначально <xref:System.Transactions.Transaction.EnlistDurable%2A>метод во время присоединения, или <xref:System.Transactions.TransactionException>возникает исключение.</xref:System.Transactions.TransactionException> </xref:System.Transactions.Transaction.EnlistDurable%2A>       При зачислении участника с помощью этого метода фазы 2 интерфейса <xref:System.Transactions.IEnlistmentNotification>результата транзакции (то есть, <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>или <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>), называются соответствующим образом.</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification>       После участниками являются успешно зачислении, затем следует вызвать <xref:System.Transactions.TransactionManager.RecoveryComplete%2A>для завершения восстановления.</xref:System.Transactions.TransactionManager.RecoveryComplete%2A>       Этот метод следует вызывать только в том случае, если диспетчер ресурсов был перезагружен после сбоя. Кроме того следует прикрепить только повторно неразрешенных транзакций, зарегистрированных диспетчером ресурсов в ходе начальной фазы подготовки двухфазной фиксации. Любая попытка вызова этого метода в недопустимое время может привести к неправильным результатам.       Если происходит сбой диспетчера транзакций, и диспетчер ресурсов выполняет восстановление на короткое время после вызова <xref:System.Transactions.PreparingEnlistment.Prepared%2A>метод прикрепления на первом этапе протокола двухфазная фиксация, диспетчер ресурсов может получать <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>или <xref:System.Transactions.IEnlistmentNotification.Rollback%2A>обратного вызова.</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.PreparingEnlistment.Prepared%2A>       Дополнительные сведения о восстановлении см. в разделе [выполнение восстановления](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).       **Примечание** этот метод использует <xref:System.Security.Permissions.SecurityAction>для предотвращения вызова от ненадежного кода, однако требуется только непосредственно вызывающего метода должны обладать; `FullTrust` набор разрешений.</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "Объект <xref:System.Guid>, однозначно определяющий диспетчер ресурсов.</xref:System.Guid>"
    - id: recoveryInformation
      type: System.Byte[]
      description: "Содержит дополнительные сведения о восстановлении."
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "Объект ресурса, который реализует <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref> для получения уведомлений."
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref> , Описывающая зачисление."
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code>является недопустимым.       - или - сведения о диспетчере транзакций в <code>recoveryInformation</code> не соответствует настроенному диспетчеру транзакций.       - или - <code>RecoveryInformation</code> не распознается <xref href=&quot;System.Transactions&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*>уже был вызван для указанного <code> resourceManagerIdentifier </code>.</xref:System.Transactions.TransactionManager.RecoveryComplete*> Повторное зачисление отклонено."
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "<code> resourceManagerIdentifier </code> Соответствует содержимому данных восстановления, указанного в <code> recoveryInformation </code>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
