### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.SymbolStore.SymMethod
  id: SymMethod
  children:
  - System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  - System.Diagnostics.SymbolStore.SymMethod.Dispose
  - System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  - System.Diagnostics.SymbolStore.SymMethod.Finalize
  - System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  - System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetParameters
  - System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  - System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  - System.Diagnostics.SymbolStore.SymMethod.RootScope
  - System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  - System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  - System.Diagnostics.SymbolStore.SymMethod.Token
  langs:
  - csharp
  name: SymMethod
  nameWithType: SymMethod
  fullName: System.Diagnostics.SymbolStore.SymMethod
  type: Class
  summary: "Представляет метод в хранилище символов."
  remarks: "Класс SymMethod предоставляет доступ только к атрибутам метода, такие как точки следования, лексические и сведения о параметрах. Используйте <xref:System.Reflection>классы для чтения, связанных с типами атрибутов метода.</xref:System.Reflection>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod
  inheritance:
  - System.Object
  - System.Diagnostics.SymbolStore.SymMethodBase
  implements:
  - System.Diagnostics.SymbolStore.ISymbolMethod
  - System.IDisposable
  inheritedMembers:
  - System.Diagnostics.SymbolStore.SymMethodBase.{dtor}
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)'
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
  type: Constructor
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  syntax:
    content: public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);
    parameters:
    - id: pMethod
      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*
      description: "Для добавления."
  overload: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  id: Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Освобождает ресурсы, используемые текущим экземпляром <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> класса."
  syntax:
    content: public override sealed void Dispose ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Вызывается методом <> </> *настроек и <> </> *настроек методов, чтобы освободить управляемые и неуправляемые ресурсы, используемые текущим экземпляром <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> класса."
  remarks: "Этот метод вызывается только открытые <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>и <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A>методов; не вызывайте этот метод напрямую.</xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> </xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A>"
  syntax:
    content: protected virtual void Dispose (bool A_0);
    parameters:
    - id: A_0
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы освободить управляемые и неуправляемые ресурсы; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  id: Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Освобождает неуправляемые ресурсы и выполняет другие операции очистки, перед <xref href=&quot;System.Diagnostics.SymbolStore.SymMethod&quot;> </xref> сборщиком мусора."
  remarks: "Этот метод переопределяет <xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> Код приложения не должен вызывать этот метод; Объект `Finalize` метод автоматически вызывается во время сборки мусора, если завершение работы сборщика мусора была отключена с помощью вызова <xref:System.GC.SuppressFinalize%2A>метод.</xref:System.GC.SuppressFinalize%2A>"
  syntax:
    content: ~SymMethod ();
    parameters: []
  overload: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  id: GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Создает <xref:System.NotSupportedException>во всех случаях.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolNamespace
      description: "Создает <xref:System.NotSupportedException>во всех случаях.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Во всех случаях."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает промежуточный язык Майкрософт (MSIL) смещение в методе, соответствующее заданной позиции."
  syntax:
    content: public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "Документ, для которого запрашивается смещение."
    - id: line
      type: System.Int32
      description: "Строка документа, для которого запрашивается смещение."
    - id: column
      type: System.Int32
      description: "Столбец документа, для которого запрашивается смещение."
    return:
      type: System.Int32
      description: "Смещение на промежуточном Языке в текущем методе для указанной позиции в документе."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  id: GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает параметры для текущего метода."
  remarks: "Параметры возвращаются в том порядке, в котором они определены в сигнатуре метода. Возвращаемый массив пуст, если метод не имеет параметров."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolVariable[]
      description: "Массив параметров для текущего метода."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Получает массив пар начального и конечного смещения, соответствующих диапазонам смещений промежуточного языка MSIL, занимаемым данной позицией в этом методе."
  remarks: "Массив является массивом целых чисел в формате {{начало1, end1}, {начало2 end2}...}, где каждая пара представляет диапазон смещения IL в методе. Количество диапазонов равно длине массива, деленному на 2."
  syntax:
    content: public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocument
      description: "Документ, для которого запрашиваются диапазоны смещений промежуточного языка."
    - id: line
      type: System.Int32
      description: "Строка документа, для которого запрашиваются диапазоны смещений промежуточного языка."
    - id: column
      type: System.Int32
      description: "Столбец документа, для которого запрашиваются диапазоны смещений промежуточного языка."
    return:
      type: System.Int32[]
      description: "Массив IL начального и конечного смещения пары."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  id: GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает наиболее узкую внешнюю лексическую область, соответствующую смещению в методе."
  remarks: "Можно использовать <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>метода для запуска поиска локальной переменной.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A>"
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Смещение на промежуточном Языке в методе для поиска."
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "Наиболее узкая Внешняя лексическая область для заданного смещения IL в методе."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Получает точки следования для текущего метода и сохраняет информацию в указанных массивах."
  remarks: "Точки следования используются для сопоставления расположений файлов исходного кода и смещения на промежуточном Языке.  Каждая точка следования включает смещение на промежуточном Языке и область в исходном файле заданного начала и конца строки или столбца номера относительно <xref:System.Diagnostics.SymbolStore.ISymbolDocument>объекта.</xref:System.Diagnostics.SymbolStore.ISymbolDocument>  Каждый элемент каждого массива с указанным индексом соответствует определенной точке следования. Вызывающий должен предоставить предварительно выделенные массивы для хранения возвращаемых данных. Все значения в массивах перезаписываются. Используйте <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A>получить число точек следования и создать массивы соответствующего размера.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> Точки следования упорядочиваются по смещению и представлены для всех документов в методе. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A>проверяет размер каждого массива и помещает сведения о точках последовательности.</xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> Если массив — `null`, данные для этого массива не возвращаются."
  syntax:
    content: public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);
    parameters:
    - id: offsets
      type: System.Int32[]
      description: "Массив, в котором хранятся инструкции IL смещений от начала метода для точек следования."
    - id: documents
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "Массив для хранения документов, в которых находятся точки следования."
    - id: lines
      type: System.Int32[]
      description: "Массив для сохранения строк в документах, в которых находятся точки следования."
    - id: columns
      type: System.Int32[]
      description: "Массив для хранения этих столбцов в документах, в которых находятся точки следования."
    - id: endLines
      type: System.Int32[]
      description: "Массив строк в документах, в которых заканчиваются точки следования."
    - id: endColumns
      type: System.Int32[]
      description: "Массив столбцов в документах, в которых заканчиваются точки следования."
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Создает <xref:System.NotSupportedException>во всех случаях.</xref:System.NotSupportedException>"
  syntax:
    content: public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);
    parameters:
    - id: docs
      type: System.Diagnostics.SymbolStore.ISymbolDocument[]
      description: "Этот параметр не используется."
    - id: lines
      type: System.Int32[]
      description: "Этот параметр не используется."
    - id: columns
      type: System.Int32[]
      description: "Этот параметр не используется."
    return:
      type: System.Boolean
      description: "Создает <xref:System.NotSupportedException>во всех случаях.</xref:System.NotSupportedException>"
  overload: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Во всех случаях."
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  id: RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает корневую лексическую область для текущего метода. Эта область включает весь метод."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "Корневая лексическая область, которая включает весь метод."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  id: RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
  type: Method
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает корневую лексическую область для текущего метода. Эта область включает весь метод."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();
    parameters: []
    return:
      type: System.Diagnostics.SymbolStore.ISymbolScope
      description: "Корневая лексическая область, которая включает весь метод."
  overload: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  id: SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает число точек следования в методе."
  syntax:
    content: public virtual int SequencePointCount { get; }
    return:
      type: System.Int32
      description: "Число точек следования в методе."
  overload: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  id: Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  langs:
  - csharp
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
  type: Property
  assemblies:
  - ISymWrapper
  namespace: System.Diagnostics.SymbolStore
  summary: "Возвращает <xref href=&quot;System.Diagnostics.SymbolStore.SymbolToken&quot;> </xref> содержит метаданные для текущего метода."
  syntax:
    content: public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }
    return:
      type: System.Diagnostics.SymbolStore.SymbolToken
      description: "Токен метаданных для текущего метода."
  overload: System.Diagnostics.SymbolStore.SymMethod.Token*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.SymbolStore.SymMethodBase
  isExternal: false
  name: System.Diagnostics.SymbolStore.SymMethodBase
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod(ISymUnmanagedMethod*)
  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)
  fullName: System.Diagnostics.SymbolStore.SymMethod.SymMethod(ISymUnmanagedMethod*)
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose()
  nameWithType: SymMethod.Dispose()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose()
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymMethod.Dispose(Boolean)
  fullName: System.Diagnostics.SymbolStore.SymMethod.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize()
  nameWithType: SymMethod.Finalize()
  fullName: System.Diagnostics.SymbolStore.SymMethod.Finalize()
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace()
  nameWithType: SymMethod.GetNamespace()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetNamespace()
- uid: System.Diagnostics.SymbolStore.ISymbolNamespace
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolNamespace
  nameWithType: ISymbolNamespace
  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetOffset(ISymbolDocument,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.SymbolStore.ISymbolDocument
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters()
  nameWithType: SymMethod.GetParameters()
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetParameters()
- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolVariable
  nameWithType: ISymbolVariable
  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolVariable
    name: ISymbolVariable
    nameWithType: ISymbolVariable
    fullName: ISymbolVariable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges(ISymbolDocument,Int32,Int32)
  nameWithType: SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetRanges(ISymbolDocument,Int32,Int32)
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope(Int32)
  nameWithType: SymMethod.GetScope(Int32)
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetScope(Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolScope
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolScope
  nameWithType: ISymbolScope
  fullName: System.Diagnostics.SymbolStore.ISymbolScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  nameWithType: SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(Int32[],ISymbolDocument[],Int32[],Int32[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocument
  nameWithType: ISymbolDocument
  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]
  spec.csharp:
  - uid: System.Diagnostics.SymbolStore.ISymbolDocument
    name: ISymbolDocument
    nameWithType: ISymbolDocument
    fullName: ISymbolDocument[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
  fullName: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(ISymbolDocument[],Int32[],Int32[])
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal()
  nameWithType: SymMethod.RootScopeInternal()
  fullName: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal()
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
  fullName: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
  fullName: System.Diagnostics.SymbolStore.SymMethod.Token
- uid: System.Diagnostics.SymbolStore.SymbolToken
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: SymbolToken
  nameWithType: SymbolToken
  fullName: System.Diagnostics.SymbolStore.SymbolToken
- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SymMethod
  nameWithType: SymMethod.SymMethod
- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Dispose
  nameWithType: SymMethod.Dispose
- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Finalize
  nameWithType: SymMethod.Finalize
- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetNamespace
  nameWithType: SymMethod.GetNamespace
- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetOffset
  nameWithType: SymMethod.GetOffset
- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetParameters
  nameWithType: SymMethod.GetParameters
- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetRanges
  nameWithType: SymMethod.GetRanges
- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetScope
  nameWithType: SymMethod.GetScope
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSequencePoints
  nameWithType: SymMethod.GetSequencePoints
- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: GetSourceStartEnd
  nameWithType: SymMethod.GetSourceStartEnd
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScope
  nameWithType: SymMethod.RootScope
- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: RootScopeInternal
  nameWithType: SymMethod.RootScopeInternal
- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: SequencePointCount
  nameWithType: SymMethod.SequencePointCount
- uid: System.Diagnostics.SymbolStore.SymMethod.Token*
  parent: System.Diagnostics.SymbolStore.SymMethod
  isExternal: false
  name: Token
  nameWithType: SymMethod.Token
