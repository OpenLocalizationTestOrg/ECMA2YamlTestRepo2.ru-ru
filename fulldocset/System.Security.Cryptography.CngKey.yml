### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CngKey
  id: CngKey
  children:
  - System.Security.Cryptography.CngKey.Algorithm
  - System.Security.Cryptography.CngKey.AlgorithmGroup
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  - System.Security.Cryptography.CngKey.Delete
  - System.Security.Cryptography.CngKey.Dispose
  - System.Security.Cryptography.CngKey.Exists(System.String)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.ExportPolicy
  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Handle
  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.IsEphemeral
  - System.Security.Cryptography.CngKey.IsMachineKey
  - System.Security.Cryptography.CngKey.KeyName
  - System.Security.Cryptography.CngKey.KeySize
  - System.Security.Cryptography.CngKey.KeyUsage
  - System.Security.Cryptography.CngKey.Open(System.String)
  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  - System.Security.Cryptography.CngKey.ParentWindowHandle
  - System.Security.Cryptography.CngKey.Provider
  - System.Security.Cryptography.CngKey.ProviderHandle
  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngKey.UIPolicy
  - System.Security.Cryptography.CngKey.UniqueName
  langs:
  - csharp
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
  type: Class
  summary: "Определяет базовую функциональность для ключей, используемых объектами криптографии следующего поколения (CNG)."
  remarks: "Этот класс инкапсулирует NCrypt ключей, не BCrypt ключи. NCrypt — это подмножество, обеспечивающий функциональность хранилища ключей CNG. BCrypt — это подмножество, которое предоставляет базовые криптографические службы, такие как Генерация случайных чисел, функции хэширования, подписи и ключи шифрования."
  syntax:
    content: 'public sealed class CngKey : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает алгоритм, используемый ключ."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm Algorithm { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "Объект, задающий имя алгоритма шифрования."
  overload: System.Security.Cryptography.CngKey.Algorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  id: AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает группу алгоритмов, используемый ключ."
  syntax:
    content: public System.Security.Cryptography.CngAlgorithmGroup AlgorithmGroup { get; }
    return:
      type: System.Security.Cryptography.CngAlgorithmGroup
      description: "Объект, задающий имя группы алгоритмов шифрования."
  overload: System.Security.Cryptography.CngKey.AlgorithmGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  id: Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объекта, который может использоваться с помощью указанного алгоритма."
  remarks: "Эта перегрузка создает ключ без имени, это означает, что ключ является эфемерным (то есть, он не будет сохранен). Он также создает значение по умолчанию <xref:System.Security.Cryptography.CngKeyCreationParameters>, указывающий значение по умолчанию <xref:System.Security.Cryptography.CngProvider>и другие дополнительные параметры для ключа.</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "Алгоритм, который будет использоваться ключ."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Эфемерный ключ."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает именованный <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объект, предоставляющий указанный алгоритм."
  remarks: "Если `keyName` указан, эта перегрузка создает постоянный ключ. Если `keyName` не указан, ключ будет эфемерным. Эта перегрузка также создает значение по умолчанию <xref:System.Security.Cryptography.CngKeyCreationParameters>, указывающий значение по умолчанию <xref:System.Security.Cryptography.CngProvider>и другие дополнительные параметры для ключа.</xref:System.Security.Cryptography.CngProvider> </xref:System.Security.Cryptography.CngKeyCreationParameters>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "Алгоритм, который будет использоваться ключ."
    - id: keyName
      type: System.String
      description: "Имя ключа. Если имя не указано, то ключ, не будут сохранены."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Постоянный или эфемерный ключ, предоставляющий указанный алгоритм."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает именованный <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объект, предоставляющий указанный алгоритм, с помощью параметров создания указанного ключа."
  remarks: "Если `keyName` указан, эта перегрузка создает постоянный ключ. Если `keyName` не указан, ключ будет эфемерным."
  syntax:
    content: public static System.Security.Cryptography.CngKey Create (System.Security.Cryptography.CngAlgorithm algorithm, string keyName, System.Security.Cryptography.CngKeyCreationParameters creationParameters);
    parameters:
    - id: algorithm
      type: System.Security.Cryptography.CngAlgorithm
      description: "Алгоритм, который будет использоваться ключ."
    - id: keyName
      type: System.String
      description: "Имя ключа. Если имя не указано, то ключ, не будут сохранены."
    - id: creationParameters
      type: System.Security.Cryptography.CngKeyCreationParameters
      description: "Объект, который указывает дополнительные параметры для метода, включая <xref href=&quot;System.Security.Cryptography.CngProvider&quot;> </xref>."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Постоянный или эфемерный ключ, предоставляющий указанный алгоритм."
  overload: System.Security.Cryptography.CngKey.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>algorithm</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Delete
  id: Delete
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Удаляет ключ, связанный с объектом."
  remarks: "-   При вызове метода Delete на эфемерный ключ, он закрывает дескриптор к ключу.       При вызове метода Delete для ключа с именем, <xref:System.Security.Cryptography.CngKey>объект больше не может использоваться, после удаления ключа с именем.</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Delete ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Delete*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Была предпринята попытка получить доступ к удаленный ключ."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Освобождает все ресурсы, используемые текущим экземпляром <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> класса."
  remarks: "После использования <xref:System.Security.Cryptography.CngKey>.</xref:System.Security.Cryptography.CngKey> всегда вызывать Dispose. Метод Dispose оставляет <xref:System.Security.Cryptography.CngKey>окажется в неработоспособном состоянии.</xref:System.Security.Cryptography.CngKey> После вызова Dispose, необходимо освободить все ссылки на <xref:System.Security.Cryptography.CngKey>, сборщик мусора мог освободить память, <xref:System.Security.Cryptography.CngKey>занимаемую.</xref:System.Security.Cryptography.CngKey> </xref:System.Security.Cryptography.CngKey> Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [метода](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек всегда вызова Dispose перед освобождением последней ссылки на <xref:System.Security.Cryptography.CngKey>.</xref:System.Security.Cryptography.CngKey> В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет метод <xref:System.Security.Cryptography.CngKey>объекта `Finalize` метод.</xref:System.Security.Cryptography.CngKey>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CngKey.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  id: Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет, существует ли именованный ключ поставщика хранилища ключей (KSP) по умолчанию."
  remarks: "Значение по умолчанию KSP — <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если именованный ключ существует в KSP по умолчанию; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  id: Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP)."
  remarks: "Используйте этот перегруженный метод для проверки наличия ключа в KSP нестандартных KSP, который является <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP, проверяемый на ключ."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если именованный ключ существует в указанном поставщике; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP), в соответствии с заданными параметрами."
  remarks: "Используйте этот перегруженный метод для проверки наличия ключа в KSP нестандартных <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>, а также указать параметры открытия ключа.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>"
  syntax:
    content: public static bool Exists (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions options);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP для поиска ключа."
    - id: options
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "Побитовое сочетание значений перечисления, определяющих параметры открытия ключа."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если именованный ключ существует в указанном поставщике; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.Exists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  id: Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Экспортирует ключевой материал в большой двоичный объект в указанном формате."
  remarks: "Криптография следующего поколения (CNG) позволяет выполнять экспорт в любой формат, поддерживающий базовый поставщик хранилища ключей (KSP). Например, в Windows Vista, KSP по умолчанию (который является <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>) позволяет только при экспорте закрытых ключей в <xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A>, <xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A>, и <xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A>форматы.</xref:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob%2A> </xref:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob%2A> </xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Это ограничение контролируется базовой KSP. Если вы используете другой KSP, могут применяться другие форматы."
  syntax:
    content: public byte[] Export (System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Объект, задающий формат большого двоичного ОБЪЕКТА ключа."
    return:
      type: System.Byte[]
      description: "Большой двоичный объект, содержащий ключевой материал в указанном формате."
  overload: System.Security.Cryptography.CngKey.Export*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки. Как правило <xref:System.Security.Cryptography.CngKey.ExportPolicy*>не позволяет экспортировать ключ.</xref:System.Security.Cryptography.CngKey.ExportPolicy*>"
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  id: ExportPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает политику экспорта, используемый ключ."
  remarks: "Экспорт политики управления частоту экспорта и формат для ключа."
  syntax:
    content: public System.Security.Cryptography.CngExportPolicies ExportPolicy { get; }
    return:
      type: System.Security.Cryptography.CngExportPolicies
      description: "Объект, задающий политику экспорта для ключа."
  overload: System.Security.Cryptography.CngKey.ExportPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает свойство по заданному имени и набору параметров."
  remarks: "Этот метод предназначен для возврата значения из произвольно выбранного свойства ключа. Типичный способ получить свойства — с помощью методов доступа свойства, предоставляемые <xref:System.Security.Cryptography.CngKey>классом.</xref:System.Security.Cryptography.CngKey> <xref:System.Security.Cryptography.CngKey>предоставляет программы-оболочки для нескольких, но не все свойства.</xref:System.Security.Cryptography.CngKey> GetProperty — метод в основном используется для доступа к значению свойства, которое не помещается в оболочку.       Этот метод полезен в следующих случаях:-новой версии операционной системы поддерживает новое свойство ключа криптографии следующего поколения (CNG) не поддерживает оболочку.      -Можно добавить пользовательское свойство к ключу.       `options` Параметра используется специально для указывает следующее: - является ли свойство встроенным или пользовательским.      -Ли свойство должно быть сохранено с ключом.       Эти параметры должны соответствовать значение, которое было задано для свойства, или свойство не найдено.       <xref:System.Security.Cryptography.CryptographicException>возникает, если не удается найти свойство.</xref:System.Security.Cryptography.CryptographicException> Необходимо вызвать <xref:System.Security.Cryptography.CngKey.HasProperty%2A>вызов метода, чтобы избежать исключения вместо вокруг метода `try/catch` блока.</xref:System.Security.Cryptography.CngKey.HasProperty%2A>"
  syntax:
    content: public System.Security.Cryptography.CngProperty GetProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "Имя нужного свойства."
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "Побитовое сочетание значений перечисления, определяющих параметры именованного свойства."
    return:
      type: System.Security.Cryptography.CngProperty
      description: "Объект, содержащий необработанное значение указанного свойства."
  overload: System.Security.Cryptography.CngKey.GetProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Handle
  id: Handle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает безопасный дескриптор, представляющий собственный ключ (NCRYPT_KEY_HANDLE)."
  remarks: "Возвращенный дескриптор является копией дескриптора в текущем <xref:System.Security.Cryptography.CngKey>объекта.</xref:System.Security.Cryptography.CngKey> Будет сохраняться даже в том случае, если текущий <xref:System.Security.Cryptography.CngKey>удаляется и следует уничтожать по-отдельности.</xref:System.Security.Cryptography.CngKey>       Можно освободить текущий объект и дескриптор в любом порядке, без каких-либо последствий."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle Handle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "Безопасный дескриптор, представляющий ключ."
  overload: System.Security.Cryptography.CngKey.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Проверяет, существует ли указанное свойство ключа."
  remarks: "`options` Параметра используется специально для указывает следующее: - является ли свойство встроенным или пользовательским.      -Ли свойство должно быть сохранено с ключом.       Эти параметры должны соответствовать значение, которое было задано для свойства, или свойство не найдено.       Этот метод работает правильно, даже если свойство имеет значение `false` или ноль."
  syntax:
    content: public bool HasProperty (string name, System.Security.Cryptography.CngPropertyOptions options);
    parameters:
    - id: name
      type: System.String
      description: "Имя свойства для проверки."
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "Побитовое сочетание значений перечисления, определяющих параметры именованного свойства."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанное свойство найдено; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.HasProperty*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый ключ путем импорта заданных сведений о ключе в поставщика хранилища ключей (KSP) по умолчанию и с использованием указанного формата."
  remarks: "Значение по умолчанию KSP — <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>      Настроек [!IMPORTANT] настроек для операционных систем Windows до Windows 7 и Windows Server 2008 R2, некоторые форматы CNG ключа больших двоичных объектов (BLOB) не поддерживаются."
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Массив, содержащий ключевые сведения."
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Объект, задающий формат `keyBlob` массива."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Новый ключ."
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>or <code>format</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает новый ключ путем импорта заданных сведений о ключе в заданном поставщике хранилища ключей (KSP), используя указанный формат."
  remarks: >-
    > [!IMPORTANT]

    >  On Windows operating systems before Windows 7 and Windows Server 2008 R2, some CNG key binary large object (BLOB) formats are not supported.
  syntax:
    content: public static System.Security.Cryptography.CngKey Import (byte[] keyBlob, System.Security.Cryptography.CngKeyBlobFormat format, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyBlob
      type: System.Byte[]
      description: "Массив, содержащий ключевые сведения."
    - id: format
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "Объект, задающий формат `keyBlob` массива."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Новый ключ."
  overload: System.Security.Cryptography.CngKey.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyBlob</code>, <code>format</code>, or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  id: IsEphemeral
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает состояние сохраняемости ключа."
  remarks: "Это свойство определяет, является ли ключ эфемерным (то есть, ключ существует только в течение времени существования дескриптора), или сохранять (то есть, ключ существует независимо от дескриптора).       Возвращаемое значение зависит от метода, который используется для получения ключа: - Если ключ не был открыт с <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>перегруженный метод общеязыковой среды выполнения (CLR) управляет ключ и можно определить, является ли он эфемерных.</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>      -Если ключ был открыт <xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29>перегрузку метода, среда CLR не может определить, является ли эфемерных.</xref:System.Security.Cryptography.CngKey.Open%28Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle%2CSystem.Security.Cryptography.CngKeyHandleOpenOptions%29> Таким образом ключ предполагается будет сохраняться. Тем не менее если этот метод используется для открытия дескриптора ключа, созданного средой CLR, среда CLR будет возможность определить, является ли эфемерных.       Это свойство не имеет общедоступного метода задания свойств; он доступен только для чтения."
  syntax:
    content: public bool IsEphemeral { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если ключ является эфемерным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.IsEphemeral*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  id: IsMachineKey
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает область (компьютер или пользователя) ключа."
  syntax:
    content: public bool IsMachineKey { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если он доступен для всех пользователей компьютера; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Если ключ только для текущего пользователя."
  overload: System.Security.Cryptography.CngKey.IsMachineKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyName
  id: KeyName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает имя ключа."
  syntax:
    content: public string KeyName { get; }
    return:
      type: System.String
      description: "Имя ключа. Если ключ является эфемерным, это значение равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.KeyName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeySize
  id: KeySize
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает размер ключа в битах."
  syntax:
    content: public int KeySize { get; }
    return:
      type: System.Int32
      description: "Размер ключа в битах."
  overload: System.Security.Cryptography.CngKey.KeySize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.KeyUsage
  id: KeyUsage
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает криптографические операции, указанный ключом."
  syntax:
    content: public System.Security.Cryptography.CngKeyUsages KeyUsage { get; }
    return:
      type: System.Security.Cryptography.CngKeyUsages
      description: "Побитовое сочетание значений перечисления, указывающих их использование, допустимое для ключа."
  overload: System.Security.Cryptography.CngKey.KeyUsage*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  id: Open(System.String)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает экземпляр <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объект, который представляет существующий именованный ключ."
  remarks: "Эта перегрузка использует следующие значения по умолчанию:-поставщик хранилища ключей (KSP): <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Используйте <xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>перегрузки, если вы хотите указать другой KSP.</xref:System.Security.Cryptography.CngKey.Open%28System.String%2CSystem.Security.Cryptography.CngProvider%29>      -Откройте параметры ключей: <xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>.</xref:System.Security.Cryptography.CngKeyOpenOptions?displayProperty=fullName>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Существующий ключ."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает экземпляр <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> , используя дескриптор существующего ключа."
  remarks: "Эта перегрузка позволяет опытным пользователям с помощью классов CNG, даже если они полагаются на платформе invoke или возможностей управляемого взаимодействия C++. Например при наличии собственной библиотеки, возвращающей ключ в виде NCRYPT_KEY_HANDLE Эта перегрузка позволяет создать управляемую оболочку ключа и использовать классы CNG, чтобы управлять ими.       При открытии ключа с помощью дескриптора, вам не удается определить состояние постоянства ключа и необходимо указать его самостоятельно. Несколько свойств <xref:System.Security.Cryptography.CngKey>класс полагаться на это значение правильно.</xref:System.Security.Cryptography.CngKey> Таким образом, чтобы убедиться, что передается правильный флаг значение <xref:System.Security.Cryptography.CngKey.Open%2A>методы.</xref:System.Security.Cryptography.CngKey.Open%2A>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle keyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions keyHandleOpenOptions);
    parameters:
    - id: keyHandle
      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
      description: "Дескриптор существующего ключа."
    - id: keyHandleOpenOptions
      type: System.Security.Cryptography.CngKeyHandleOpenOptions
      description: "Одно из значений перечисления, указывающее, является ли `keyHandle` представляет эфемерный ключ или именованный ключ."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Существующий ключ."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyHandle</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyHandle</code>является недопустимым или имеет неправильный формат, или он уже закрыт. Это исключение также возникает, если ключ эфемерный ключ, созданный общеязыковой среды выполнения (CLR), но <xref href=&quot;System.Security.Cryptography.CngKeyHandleOpenOptions&quot;> </xref> значение не указано."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  id: Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает экземпляр <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объект, который представляет существующий именованный ключ, используя заданном поставщике хранилища ключей (KSP)."
  remarks: "В отличие от <xref:System.Security.Cryptography.CngKey.Open%28System.String%29>перегрузка метода Эта перегрузка позволяет указать поставщика.</xref:System.Security.Cryptography.CngKey.Open%28System.String%29> Кроме того, значение по умолчанию <xref:System.Security.Cryptography.CngKeyOpenOptions>значение <xref:System.Security.Cryptography.CngKeyOpenOptions>создается и связанного с ключом.</xref:System.Security.Cryptography.CngKeyOpenOptions> </xref:System.Security.Cryptography.CngKeyOpenOptions>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP, содержащий ключ."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Существующий ключ."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Создает экземпляр <xref href=&quot;System.Security.Cryptography.CngKey&quot;> </xref> объект, который представляет существующий именованный ключ, используя заданном поставщике хранилища ключей (KSP) и параметры открытия ключа."
  remarks: "В отличие от <xref:System.Security.Cryptography.CngKey.Open%28System.String%29>перегрузка метода Эта перегрузка позволяет указать поставщика и ключ откройте параметры.</xref:System.Security.Cryptography.CngKey.Open%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.CngKey Open (string keyName, System.Security.Cryptography.CngProvider provider, System.Security.Cryptography.CngKeyOpenOptions openOptions);
    parameters:
    - id: keyName
      type: System.String
      description: "Имя ключа."
    - id: provider
      type: System.Security.Cryptography.CngProvider
      description: "KSP, содержащий ключ."
    - id: openOptions
      type: System.Security.Cryptography.CngKeyOpenOptions
      description: "Побитовое сочетание значений перечисления, определяющих параметры открытия ключа, например когда открытия ключа (хранилище компьютера или пользователя) и следует ли блокировать запросы пользовательского интерфейса."
    return:
      type: System.Security.Cryptography.CngKey
      description: "Существующий ключ."
  overload: System.Security.Cryptography.CngKey.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyName</code>or <code>provider</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Криптография следующего поколения (CNG) не поддерживается в этой системе."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Все остальные ошибки."
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает или задает дескриптор окна (HWND), который должен использоваться для пользовательского интерфейса к пользователю при доступе к разделу."
  remarks: "Дескриптор родительского окна для ключа используется в запросах пользовательского интерфейса, таких как смарт-карты ПИН-код будет предложено. Это значение не сохраняется с постоянными ключами.       Рекомендуется всегда устанавливать это свойство для ключей, которые отображают пользовательский интерфейс. Не используйте значение по умолчанию `null` для таких ключей."
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "Дескриптор родительского окна для ключа."
  overload: System.Security.Cryptography.CngKey.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.Provider
  id: Provider
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает поставщик хранилища ключей (KSP), который управляет ключ."
  syntax:
    content: public System.Security.Cryptography.CngProvider Provider { get; }
    return:
      type: System.Security.Cryptography.CngProvider
      description: "KSP, управляющий ключом."
  overload: System.Security.Cryptography.CngKey.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  id: ProviderHandle
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает собственный дескриптор (NCRYPT_PROV_HANDLE) в поставщик хранилища ключей (KSP)."
  remarks: "Возвращенный дескриптор является копией дескриптора в текущем <xref:System.Security.Cryptography.CngKey>объекта.</xref:System.Security.Cryptography.CngKey> Будет сохраняться даже в том случае, если текущий <xref:System.Security.Cryptography.CngKey>удаляется и следует уничтожать по-отдельности.</xref:System.Security.Cryptography.CngKey>       Можно освободить текущий объект и дескриптор в любом порядке, без каких-либо последствий."
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle ProviderHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
      description: "Дескриптор KSP."
  overload: System.Security.Cryptography.CngKey.ProviderHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  id: SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Задает именованное свойство ключа."
  remarks: "Этот метод позволяет добавить новое пользовательское свойство с помощью существующего ключа <xref:System.Security.Cryptography.CngProperty>объекта.</xref:System.Security.Cryptography.CngProperty> Параметры, заданные на <xref:System.Security.Cryptography.CngProperty>объекта должно точно соответствовать возможности <xref:System.Security.Cryptography.CngKey.GetProperty%2A>вызовите.</xref:System.Security.Cryptography.CngKey.GetProperty%2A> </xref:System.Security.Cryptography.CngProperty> В противном случае свойство найдено не будет."
  syntax:
    content: public void SetProperty (System.Security.Cryptography.CngProperty property);
    parameters:
    - id: property
      type: System.Security.Cryptography.CngProperty
      description: "Свойство ключа."
  overload: System.Security.Cryptography.CngKey.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UIPolicy
  id: UIPolicy
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Получает параметры, управляющие пользовательский интерфейс (UI) для доступа к разделу."
  remarks: "Политика пользовательского интерфейса для ключа используется с запросах пользовательского интерфейса, таких как запрос ПИН-кода смарт-карты. Эта политика также управляет окнами ввода пароля для защищенных ключей."
  syntax:
    content: public System.Security.Cryptography.CngUIPolicy UIPolicy { get; }
    return:
      type: System.Security.Cryptography.CngUIPolicy
      description: "Объект, содержащий параметры конфигурации для отображения пользовательского интерфейса."
  overload: System.Security.Cryptography.CngKey.UIPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CngKey.UniqueName
  id: UniqueName
  parent: System.Security.Cryptography.CngKey
  langs:
  - csharp
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "Возвращает уникальное имя для ключа."
  remarks: "Это свойство получает альтернативное имя, которое может использоваться при доступе к ключу. Это свойство можно использовать, если исходное имя ключа не определяет уникально постоянного ключа. <xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A>Свойство будет возвращать имя файла ключа в качестве этого свойства.</xref:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider%2A> Имя, возвращенное <xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>зависит от реализации.</xref:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider%2A>"
  syntax:
    content: public string UniqueName { get; }
    return:
      type: System.String
      description: "Альтернативное имя для ключа. Если ключ является эфемерным, это значение равно <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.CngKey.UniqueName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CngKey.Algorithm
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
  fullName: System.Security.Cryptography.CngKey.Algorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngAlgorithmGroup
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithmGroup
  nameWithType: CngAlgorithmGroup
  fullName: System.Security.Cryptography.CngAlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm)
  nameWithType: CngKey.Create(CngAlgorithm)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String)
  nameWithType: CngKey.Create(CngAlgorithm,String)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create(CngAlgorithm,String,CngKeyCreationParameters)
  nameWithType: CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
  fullName: System.Security.Cryptography.CngKey.Create(CngAlgorithm,String,CngKeyCreationParameters)
- uid: System.Security.Cryptography.CngKeyCreationParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyCreationParameters
  nameWithType: CngKeyCreationParameters
  fullName: System.Security.Cryptography.CngKeyCreationParameters
- uid: System.Security.Cryptography.CngKey.Delete
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete()
  nameWithType: CngKey.Delete()
  fullName: System.Security.Cryptography.CngKey.Delete()
- uid: System.Security.Cryptography.CngKey.Dispose
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose()
  nameWithType: CngKey.Dispose()
  fullName: System.Security.Cryptography.CngKey.Dispose()
- uid: System.Security.Cryptography.CngKey.Exists(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String)
  nameWithType: CngKey.Exists(String)
  fullName: System.Security.Cryptography.CngKey.Exists(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider)
  nameWithType: CngKey.Exists(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider)
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  nameWithType: CngProvider
  fullName: System.Security.Cryptography.CngProvider
- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Exists(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKeyOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyOpenOptions
  nameWithType: CngKeyOpenOptions
  fullName: System.Security.Cryptography.CngKeyOpenOptions
- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export(CngKeyBlobFormat)
  nameWithType: CngKey.Export(CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Export(CngKeyBlobFormat)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CngKeyBlobFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyBlobFormat
  nameWithType: CngKeyBlobFormat
  fullName: System.Security.Cryptography.CngKeyBlobFormat
- uid: System.Security.Cryptography.CngKey.ExportPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
  fullName: System.Security.Cryptography.CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngExportPolicies
  parent: System.Security.Cryptography
  isExternal: false
  name: CngExportPolicies
  nameWithType: CngExportPolicies
  fullName: System.Security.Cryptography.CngExportPolicies
- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty(String,CngPropertyOptions)
  nameWithType: CngKey.GetProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.GetProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngProperty
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProperty
  nameWithType: CngProperty
  fullName: System.Security.Cryptography.CngProperty
- uid: System.Security.Cryptography.CngPropertyOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngPropertyOptions
  nameWithType: CngPropertyOptions
  fullName: System.Security.Cryptography.CngPropertyOptions
- uid: System.Security.Cryptography.CngKey.Handle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
  fullName: System.Security.Cryptography.CngKey.Handle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptKeyHandle
  nameWithType: SafeNCryptKeyHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty(String,CngPropertyOptions)
  nameWithType: CngKey.HasProperty(String,CngPropertyOptions)
  fullName: System.Security.Cryptography.CngKey.HasProperty(String,CngPropertyOptions)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import(Byte[],CngKeyBlobFormat,CngProvider)
  nameWithType: CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Import(Byte[],CngKeyBlobFormat,CngProvider)
- uid: System.Security.Cryptography.CngKey.IsEphemeral
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
  fullName: System.Security.Cryptography.CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
  fullName: System.Security.Cryptography.CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
  fullName: System.Security.Cryptography.CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
  fullName: System.Security.Cryptography.CngKey.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CngKey.KeyUsage
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
  fullName: System.Security.Cryptography.CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKeyUsages
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyUsages
  nameWithType: CngKeyUsages
  fullName: System.Security.Cryptography.CngKeyUsages
- uid: System.Security.Cryptography.CngKey.Open(System.String)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String)
  nameWithType: CngKey.Open(String)
  fullName: System.Security.Cryptography.CngKey.Open(String)
- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  nameWithType: CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(SafeNCryptKeyHandle,CngKeyHandleOpenOptions)
- uid: System.Security.Cryptography.CngKeyHandleOpenOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyHandleOpenOptions
  nameWithType: CngKeyHandleOpenOptions
  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider)
  nameWithType: CngKey.Open(String,CngProvider)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider)
- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open(String,CngProvider,CngKeyOpenOptions)
  nameWithType: CngKey.Open(String,CngProvider,CngKeyOpenOptions)
  fullName: System.Security.Cryptography.CngKey.Open(String,CngProvider,CngKeyOpenOptions)
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CngKey.Provider
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
  fullName: System.Security.Cryptography.CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
  fullName: System.Security.Cryptography.CngKey.ProviderHandle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptProviderHandle
  nameWithType: SafeNCryptProviderHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty(CngProperty)
  nameWithType: CngKey.SetProperty(CngProperty)
  fullName: System.Security.Cryptography.CngKey.SetProperty(CngProperty)
- uid: System.Security.Cryptography.CngKey.UIPolicy
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
  fullName: System.Security.Cryptography.CngKey.UIPolicy
- uid: System.Security.Cryptography.CngUIPolicy
  parent: System.Security.Cryptography
  isExternal: false
  name: CngUIPolicy
  nameWithType: CngUIPolicy
  fullName: System.Security.Cryptography.CngUIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
  fullName: System.Security.Cryptography.CngKey.UniqueName
- uid: System.Security.Cryptography.CngKey.Algorithm*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Algorithm
  nameWithType: CngKey.Algorithm
- uid: System.Security.Cryptography.CngKey.AlgorithmGroup*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: AlgorithmGroup
  nameWithType: CngKey.AlgorithmGroup
- uid: System.Security.Cryptography.CngKey.Create*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Create
  nameWithType: CngKey.Create
- uid: System.Security.Cryptography.CngKey.Delete*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Delete
  nameWithType: CngKey.Delete
- uid: System.Security.Cryptography.CngKey.Dispose*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Dispose
  nameWithType: CngKey.Dispose
- uid: System.Security.Cryptography.CngKey.Exists*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Exists
  nameWithType: CngKey.Exists
- uid: System.Security.Cryptography.CngKey.Export*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Export
  nameWithType: CngKey.Export
- uid: System.Security.Cryptography.CngKey.ExportPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ExportPolicy
  nameWithType: CngKey.ExportPolicy
- uid: System.Security.Cryptography.CngKey.GetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: GetProperty
  nameWithType: CngKey.GetProperty
- uid: System.Security.Cryptography.CngKey.Handle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Handle
  nameWithType: CngKey.Handle
- uid: System.Security.Cryptography.CngKey.HasProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: HasProperty
  nameWithType: CngKey.HasProperty
- uid: System.Security.Cryptography.CngKey.Import*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Import
  nameWithType: CngKey.Import
- uid: System.Security.Cryptography.CngKey.IsEphemeral*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsEphemeral
  nameWithType: CngKey.IsEphemeral
- uid: System.Security.Cryptography.CngKey.IsMachineKey*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: IsMachineKey
  nameWithType: CngKey.IsMachineKey
- uid: System.Security.Cryptography.CngKey.KeyName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyName
  nameWithType: CngKey.KeyName
- uid: System.Security.Cryptography.CngKey.KeySize*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeySize
  nameWithType: CngKey.KeySize
- uid: System.Security.Cryptography.CngKey.KeyUsage*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: KeyUsage
  nameWithType: CngKey.KeyUsage
- uid: System.Security.Cryptography.CngKey.Open*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Open
  nameWithType: CngKey.Open
- uid: System.Security.Cryptography.CngKey.ParentWindowHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CngKey.ParentWindowHandle
- uid: System.Security.Cryptography.CngKey.Provider*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: Provider
  nameWithType: CngKey.Provider
- uid: System.Security.Cryptography.CngKey.ProviderHandle*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: ProviderHandle
  nameWithType: CngKey.ProviderHandle
- uid: System.Security.Cryptography.CngKey.SetProperty*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: SetProperty
  nameWithType: CngKey.SetProperty
- uid: System.Security.Cryptography.CngKey.UIPolicy*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UIPolicy
  nameWithType: CngKey.UIPolicy
- uid: System.Security.Cryptography.CngKey.UniqueName*
  parent: System.Security.Cryptography.CngKey
  isExternal: false
  name: UniqueName
  nameWithType: CngKey.UniqueName
