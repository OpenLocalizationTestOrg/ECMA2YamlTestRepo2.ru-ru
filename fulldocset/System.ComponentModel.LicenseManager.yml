### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "Предоставляет свойства и методы для добавления лицензии для компонента и управления <xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>. Этот класс не наследуется."
  remarks: "Класс LicenseManager предоставляет следующие `static` свойства: <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>до <xref:System.ComponentModel.LicenseManager.UsageMode%2A>.</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> Этот класс также предоставляет следующие `static` методы: <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>, <xref:System.ComponentModel.LicenseManager.IsValid%2A>и <xref:System.ComponentModel.LicenseManager.Validate%2A>.</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       При создании компонента, необходимо предоставить лицензию, необходимо выполнить следующее: 1.  Укажите <xref:System.ComponentModel.LicenseProvider>, помечая компонента с <xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute> </xref:System.ComponentModel.LicenseProvider>      2.  Вызовите <xref:System.ComponentModel.LicenseManager.Validate%2A>или <xref:System.ComponentModel.LicenseManager.IsValid%2A>в конструкторе компонента.</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>вызывает <xref:System.ComponentModel.LicenseException>при попытке создать экземпляр без действительной лицензии.</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>не вызывает исключение.</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  Вызов <xref:System.ComponentModel.License.Dispose%2A>на любой предоставленную лицензию, когда компонент уничтожается или завершает работу.</xref:System.ComponentModel.License.Dispose%2A>       Дополнительные сведения о лицензировании см. в разделе [как: лицензии компонентов и элементов управления](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает экземпляр указанного типа, задавая контекст, в котором можно использовать лицензированный экземпляр."
  remarks: "<xref:System.ComponentModel.LicenseContext>Указан в качестве `creationContext` используется в качестве <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>в течение жизненного цикла <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Метод CreateWithContext блокирует все другие потоки <xref:System.AppDomain>Изменение <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, позволяя CreateWithContext вести себя как атомарную операцию.</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип создаваемого.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Объект <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , указывающий, когда можно использовать лицензированный экземпляр."
    return:
      type: System.Object
      description: "Экземпляр указанного типа."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает экземпляр указанного типа с заданными аргументами, задавая контекст, в котором можно использовать лицензированный экземпляр."
  remarks: "<xref:System.ComponentModel.LicenseContext>Указан в качестве `creationContext` используется в качестве <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>в течение жизненного цикла <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.ComponentModel.LicenseContext> Этот метод блокирует все другие потоки <xref:System.AppDomain>Изменение <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>, обеспечивая <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>вести себя как атомарную операцию.</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип создаваемого.</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "Объект <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , указывающий, когда можно использовать лицензированный экземпляр."
    - id: args
      type: System.Object[]
      description: "Массив объектов типа <xref:System.Object>, представляющий аргументы для данного типа.</xref:System.Object>"
    return:
      type: System.Object
      description: "Экземпляр указанного типа с заданным массивом аргументов."
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает или задает текущий <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>, которое указывает, когда можно использовать лицензированный объект."
  remarks: "При запросе является допустимым пользователем <xref:System.ComponentModel.License>, пользователь должен будет дать контекст в котором <xref:System.ComponentModel.License>является допустимым для <xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>метод.</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> <xref:System.ComponentModel.LicenseContext>Возвращаемый этим свойством должны быть переданы на все <xref:System.ComponentModel.LicenseProvider>классы.</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "Объект <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> , указывающий, когда можно использовать лицензированный объект."
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Свойство CurrentContext заблокирован и не может быть изменено."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Показывает, имеет ли данный тип действительной лицензии."
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>Чтобы найти for. действительной лицензии</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если данный тип является лицензированным; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Определяет, может ли быть предоставлена действительная лицензия для указанного типа."
  remarks: "Метод IsValid возвращает `true` когда тип не лицензирован или лицензируется и лицензия считается действительной.       Этот метод не исключение, <xref:System.ComponentModel.LicenseException>Если он не может предоставить допустимый <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>Метод вызывает исключения.</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип объекта, запрашивающего <xref href=&quot;System.ComponentModel.License&quot;> </xref>.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если может быть предоставлена действительная лицензия; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Определяет, может ли быть предоставлена действительная лицензия для указанного экземпляра типа. Этот метод создает действительный <xref href=&quot;System.ComponentModel.License&quot;> </xref>."
  remarks: "<xref:System.ComponentModel.LicenseManager.IsValid%2A>Возвращает `true` при `type` параметр не имеет лицензии, или когда он лицензирован и `license` параметр является допустимым.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Этот метод не исключение, <xref:System.ComponentModel.LicenseException>Если он не может предоставить допустимый <xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>Метод вызывает исключения.</xref:System.ComponentModel.LicenseManager.Validate%2A>       Если `license` не `null` после этого вызова, объект, запрашивающий <xref:System.ComponentModel.License>необходимо уничтожить лицензию путем вызова <xref:System.ComponentModel.License.Dispose%2A>метод, когда объект уничтожается или завершает работу.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип объекта, запрашивающего лицензию.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "Объект указанного типа или типа, производным от указанного типа."
    - id: license
      type: System.ComponentModel.License
      description: "Объект <xref href=&quot;System.ComponentModel.License&quot;> </xref> именно действительной лицензии или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если не может быть предоставлена действительная лицензия."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если допустимый <xref href=&quot;System.ComponentModel.License&quot;> </xref> может быть предоставлена; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Не допускает внесения изменений в текущий <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> данного объекта."
  remarks: "Используйте <xref:System.ComponentModel.LicenseContext>для получения <xref:System.ComponentModel.License>объекта.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Этот метод блокирует <xref:System.ComponentModel.LicenseContext>, предотвращая <xref:System.ComponentModel.License>Получение.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Объект, содержимое которого требуется заблокировать."
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Контекст уже заблокирован."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Позволяет вносить изменения в текущий <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> данного объекта."
  remarks: "Используйте <xref:System.ComponentModel.LicenseContext>для получения <xref:System.ComponentModel.License>объекта.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> Этот метод разблокирует <xref:System.ComponentModel.LicenseContext>, обеспечивая <xref:System.ComponentModel.License>извлекаемого.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "Объект, содержимое которого требуется разблокировать."
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>Представляет другого пользователя, отличной от указанной в предыдущем вызове <xref:System.ComponentModel.LicenseManager.LockContext*>."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> указывает, когда можно использовать лицензированный объект для <xref:System.ComponentModel.LicenseManager.CurrentContext*>.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  remarks: "Если это свойство не может найти <xref:System.ComponentModel.LicenseManager.CurrentContext%2A>значение, возвращает <xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "Один из <xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;> </xref> значения, как указано в <xref:System.ComponentModel.LicenseManager.CurrentContext*>свойство.</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Определяет, может ли быть предоставлена лицензия для указанного типа."
  remarks: "Этот метод создает исключение <xref:System.ComponentModel.LicenseException>при является допустимым <xref:System.ComponentModel.License>не может быть предоставлено.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>Метод не вызывает исключение.</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип объекта, запрашивающего лицензию.</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Объект <xref href=&quot;System.ComponentModel.License&quot;> </xref> не может быть предоставлено."
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Определяет, может ли быть предоставлена лицензия для экземпляра заданного типа."
  remarks: "Этот метод создает исключение <xref:System.ComponentModel.LicenseException>при является допустимым <xref:System.ComponentModel.License>не может быть предоставлено.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>Метод не вызывает исключение.</xref:System.ComponentModel.LicenseManager.IsValid%2A>       Все объекты, запрашивающие <xref:System.ComponentModel.License>необходимо уничтожить лицензию путем вызова <xref:System.ComponentModel.License.Dispose%2A>метод, когда объект уничтожается или завершает работу.</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип объекта, запрашивающего лицензию.</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "<xref:System.Object>Указанного типа или типа, производного от указанного типа.</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "Тип лицензии, но <xref href=&quot;System.ComponentModel.License&quot;> </xref> не может быть предоставлено."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
