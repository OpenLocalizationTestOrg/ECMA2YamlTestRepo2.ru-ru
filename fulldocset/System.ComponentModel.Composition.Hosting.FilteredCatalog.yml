### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog
  id: FilteredCatalog
  children:
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  - System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  langs:
  - csharp
  name: FilteredCatalog
  nameWithType: FilteredCatalog
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog
  type: Class
  summary: "Представляет каталог, после применения функции фильтров к нему."
  remarks: >-
    > [!IMPORTANT]

    >  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.
  syntax:
    content: 'public class FilteredCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog, System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged'
  inheritance:
  - System.Object
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog
  implements:
  - System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged
  inheritedMembers:
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Parts
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.System#Collections#IEnumerable#GetEnumerator
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  id: '#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})'
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  nameWithType: FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> с указанного базового каталога и фильтра."
  syntax:
    content: public FilteredCatalog (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,bool> filter);
    parameters:
    - id: catalog
      type: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
      description: "Базовый каталог."
    - id: filter
      type: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}
      description: "Функция для фильтрации элементов."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed
  id: Changed
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: Changed
  nameWithType: FilteredCatalog.Changed
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed
  type: Event
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Происходит при изменении базового каталога."
  syntax:
    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changed;
    return:
      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing
  id: Changing
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: Changing
  nameWithType: FilteredCatalog.Changing
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing
  type: Event
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Происходит при изменении базового каталога."
  syntax:
    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changing;
    return:
      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement
  id: Complement
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: Complement
  nameWithType: FilteredCatalog.Complement
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Возвращает каталог, содержащий элементы, представленные в базовый каталог, но, были отфильтрованы функцией фильтрации."
  syntax:
    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog Complement { get; }
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Каталог, содержащий дополнением этого каталога."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FilteredCatalog.Dispose(Boolean)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Вызывается методом <xref uid=&quot;langword_csharp_Dispose()&quot; name=&quot;Dispose()&quot; href=&quot;&quot;> </xref> и <xref uid=&quot;langword_csharp_Finalize()&quot; name=&quot;Finalize()&quot; href=&quot;&quot;> </xref> методов, чтобы освободить управляемые и неуправляемые ресурсы, используемые текущим экземпляром <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> класса."
  remarks: "Этот метод вызывается только открытые `Dispose()` и `Finalize()` методов; не вызывайте этот метод напрямую. При реализации шаблона удаления логического параметра для `Dispose(Boolean)` метод должен использоваться следующим образом: - `Dispose()` метод текущего объекта должен вызывать `Dispose(Boolean)` с параметром логическое значение `true` для освобождения управляемых и неуправляемых ресурсов.      - `Finalize()` Метод текущего объекта должен вызывать `Dispose(Boolean)` с параметром логическое значение `false` для освобождения только неуправляемых ресурсов.       Дополнительные сведения см. в разделе."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы освободить управляемые и неуправляемые ресурсы; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: FilteredCatalog.GetEnumerator()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Возвращает перечислитель, выполняющий перебор элементов каталога."
  syntax:
    content: public override System.Collections.Generic.IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}
      description: "Перечислитель, который может использоваться для итерации по каталогу."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  id: GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: GetExports(ImportDefinition)
  nameWithType: FilteredCatalog.GetExports(ImportDefinition)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(ImportDefinition)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Возвращает экспортированные части из этого каталога, отвечающие указанным импорта."
  syntax:
    content: public override System.Collections.Generic.IEnumerable<Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>> GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);
    parameters:
    - id: definition
      type: System.ComponentModel.Composition.Primitives.ImportDefinition
      description: "Для сопоставления импорта."
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}
      description: "Коллекции соответствующих элементов."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies
  id: IncludeDependencies
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: IncludeDependencies()
  nameWithType: FilteredCatalog.IncludeDependencies()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Получает новый <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> , содержащий все элементы из этого каталога и их зависимости."
  syntax:
    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Новый каталог."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  id: IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: IncludeDependencies(Func<ImportDefinition,Boolean>)
  nameWithType: FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Получает новый <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> , содержащий все элементы из этого каталога и все зависимости, которые могут быть достигнуты через импортируемых файлов, которые соответствуют заданному фильтру."
  syntax:
    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependencies (Func<System.ComponentModel.Composition.Primitives.ImportDefinition,bool> importFilter);
    parameters:
    - id: importFilter
      type: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}
      description: "Фильтр для импорта."
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Новый каталог."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents
  id: IncludeDependents
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: IncludeDependents()
  nameWithType: FilteredCatalog.IncludeDependents()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Получает новый <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> , содержащий все элементы из этого каталога и все зависимые от них объекты."
  syntax:
    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents ();
    parameters: []
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Новый каталог."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  id: IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: IncludeDependents(Func<ImportDefinition,Boolean>)
  nameWithType: FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Получает новый <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog&quot;> </xref> , содержащий все элементы из этого каталога и всех зависимых элементов, которым можно получить через импортируемых файлов, которые соответствуют заданному фильтру."
  syntax:
    content: public System.ComponentModel.Composition.Hosting.FilteredCatalog IncludeDependents (Func<System.ComponentModel.Composition.Primitives.ImportDefinition,bool> importFilter);
    parameters:
    - id: importFilter
      type: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}
      description: "Фильтр для импорта."
    return:
      type: System.ComponentModel.Composition.Hosting.FilteredCatalog
      description: "Новый каталог."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  id: OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: OnChanged(ComposablePartCatalogChangeEventArgs)
  nameWithType: FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Вызывает <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed&quot;> </xref> событий."
  syntax:
    content: protected virtual void OnChanged (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
      description: "Предоставляет данные для события."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  id: OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  langs:
  - csharp
  name: OnChanging(ComposablePartCatalogChangeEventArgs)
  nameWithType: FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: "Вызывает <xref href=&quot;System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing&quot;> </xref> событий."
  syntax:
    content: protected virtual void OnChanging (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
      description: "Предоставляет данные для события."
  overload: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
  isExternal: false
  name: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  nameWithType: FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.FilteredCatalog(ComposablePartCatalog,Func<ComposablePartDefinition,Boolean>)
- uid: System.Func{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean}
  parent: System
  isExternal: true
  name: Func<ComposablePartDefinition,Boolean>
  nameWithType: Func<ComposablePartDefinition,Boolean>
  fullName: System.Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Changed
  nameWithType: FilteredCatalog.Changed
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changed
- uid: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ComposablePartCatalogChangeEventArgs>
  nameWithType: EventHandler<ComposablePartCatalogChangeEventArgs>
  fullName: System.EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
    name: ComposablePartCatalogChangeEventArgs
    nameWithType: ComposablePartCatalogChangeEventArgs
    fullName: ComposablePartCatalogChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Changing
  nameWithType: FilteredCatalog.Changing
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Changing
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Complement
  nameWithType: FilteredCatalog.Complement
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog
  parent: System.ComponentModel.Composition.Hosting
  isExternal: false
  name: FilteredCatalog
  nameWithType: FilteredCatalog
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(System.Boolean)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FilteredCatalog.Dispose(Boolean)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: GetEnumerator()
  nameWithType: FilteredCatalog.GetEnumerator()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<ComposablePartDefinition>
  nameWithType: IEnumerator<ComposablePartDefinition>
  fullName: System.Collections.Generic.IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: GetExports(ImportDefinition)
  nameWithType: FilteredCatalog.GetExports(ImportDefinition)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports(ImportDefinition)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>
  nameWithType: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Primitives.ExportDefinition
    name: ExportDefinition
    nameWithType: ExportDefinition
    fullName: ExportDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Primitives.ImportDefinition
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ImportDefinition
  nameWithType: ImportDefinition
  fullName: System.ComponentModel.Composition.Primitives.ImportDefinition
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependencies()
  nameWithType: FilteredCatalog.IncludeDependencies()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies()
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependencies(Func<ImportDefinition,Boolean>)
  nameWithType: FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies(Func<ImportDefinition,Boolean>)
- uid: System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean}
  parent: System
  isExternal: true
  name: Func<ImportDefinition,Boolean>
  nameWithType: Func<ImportDefinition,Boolean>
  fullName: System.Func<System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ImportDefinition
    name: ImportDefinition
    nameWithType: ImportDefinition
    fullName: ImportDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependents()
  nameWithType: FilteredCatalog.IncludeDependents()
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents()
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(System.Func{System.ComponentModel.Composition.Primitives.ImportDefinition,System.Boolean})
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependents(Func<ImportDefinition,Boolean>)
  nameWithType: FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents(Func<ImportDefinition,Boolean>)
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: OnChanged(ComposablePartCatalogChangeEventArgs)
  nameWithType: FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
- uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
  parent: System.ComponentModel.Composition.Hosting
  isExternal: false
  name: ComposablePartCatalogChangeEventArgs
  nameWithType: ComposablePartCatalogChangeEventArgs
  fullName: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: OnChanging(ComposablePartCatalogChangeEventArgs)
  nameWithType: FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.#ctor*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: FilteredCatalog
  nameWithType: FilteredCatalog.FilteredCatalog
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Complement*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Complement
  nameWithType: FilteredCatalog.Complement
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.Dispose*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: Dispose
  nameWithType: FilteredCatalog.Dispose
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetEnumerator*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: GetEnumerator
  nameWithType: FilteredCatalog.GetEnumerator
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.GetExports*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: GetExports
  nameWithType: FilteredCatalog.GetExports
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependencies*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependencies
  nameWithType: FilteredCatalog.IncludeDependencies
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.IncludeDependents*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: IncludeDependents
  nameWithType: FilteredCatalog.IncludeDependents
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanged*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: OnChanged
  nameWithType: FilteredCatalog.OnChanged
- uid: System.ComponentModel.Composition.Hosting.FilteredCatalog.OnChanging*
  parent: System.ComponentModel.Composition.Hosting.FilteredCatalog
  isExternal: false
  name: OnChanging
  nameWithType: FilteredCatalog.OnChanging
