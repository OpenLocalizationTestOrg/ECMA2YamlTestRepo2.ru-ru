### YamlMime:ManagedReference
items:
- uid: System.Web.Security.UrlAuthorizationModule
  id: UrlAuthorizationModule
  children:
  - System.Web.Security.UrlAuthorizationModule.#ctor
  - System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  - System.Web.Security.UrlAuthorizationModule.Dispose
  - System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  langs:
  - csharp
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule
  fullName: System.Web.Security.UrlAuthorizationModule
  type: Class
  summary: "Проверяет, имеет ли пользователь разрешение на доступ к запрошенного URL-адреса. Этот класс не наследуется."
  remarks: "UrlAuthorizationModule определяет, разрешены ли текущий пользователь доступ к URL-адресу, зависящих от пользователя <xref:System.Security.Principal.IIdentity.Name%2A>или список ролей, в которых состоит пользователь.</xref:System.Security.Principal.IIdentity.Name%2A> Сведения о том, как определить имя пользователя в разделе [проверки подлинности ASP.NET](~/add/includes/ajax-current-ext-md.md). Сведения о способах управления ролями пользователей см. в разделе [управление ролями с помощью авторизации](~/add/includes/ajax-current-ext-md.md).       Авторизация для пользователя или роли управляется с помощью элемента конфигурации. Можно разрешить или запретить пользователю или роли с помощью `allow` или `deny` подэлементы, соответственно. `allow` И `deny` подэлементов интерпретируются в порядке их появления в конфигурации. Как только элемент указывает, разрешен или запрещен доступ, UrlAuthorizationModule завершает проверку авторизации. Например следующий раздел из файла Web.config требует, чтобы пользователи могли входить (Запрет анонимных пользователей) и затем позволяет только пользователям в роли &quot;Администраторы&quot; должна иметь доступ. Пользователи, отсутствующие в роли &quot;Администраторы&quot; запрещен.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Пользователь или роль необходимо специально запрещен на отказ от пользователя или роли разрешение на URL-адрес. То есть если в предыдущем примере не был указан `<deny users=&quot;*&quot; />` элемент, а затем всем прошедшим проверку пользователям будет разрешен доступ к URL-адресу, независимо от того, какой роли они являются членом."
  example:
  - "The following code example grants access to Kim and members of the Admins role, while denying it to John and all anonymous users.  \n  \n```  \n<authorization>  \n  <allow users=\"Kim\"/>  \n  <allow roles=\"Admins\"/>  \n  <deny users=\"John\"/>  \n  <deny users=\"?\"/>  \n</authorization>  \n```"
  syntax:
    content: 'public sealed class UrlAuthorizationModule : System.Web.IHttpModule'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpModule
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  id: '#ctor'
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Создает экземпляр <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref> класса."
  remarks: "Этот конструктор не предназначен для вызова из кода приложения.       ASP.NET вызывает этот конструктор для создания экземпляра <xref:System.Web.Security.UrlAuthorizationModule>класса.</xref:System.Web.Security.UrlAuthorizationModule> После вызова конструктора, он вызывает <xref:System.Web.Security.UrlAuthorizationModule.Init%2A>метод для инициализации нового <xref:System.Web.Security.UrlAuthorizationModule>объекта.</xref:System.Web.Security.UrlAuthorizationModule> </xref:System.Web.Security.UrlAuthorizationModule.Init%2A>"
  syntax:
    content: public UrlAuthorizationModule ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  id: CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Определяет, имеет ли пользователь доступ к запрошенному файлу."
  remarks: "Метод CheckUrlAccessForPrincipal проверяет, предоставляется ли текущий пользователь доступ к запрошенному файлу в файле Web.config для приложения.       Если команду HTTP, используемую для выполнения запроса является `GET`, `POST`, или `HEAD`, метод CheckUrlAccessForPrincipal проверяет доступ для чтения к файлу. При использовании любой другой глагол CheckUrlAccessForPrincipal проверяет наличие доступа на чтение и запись в файл.       Дополнительные сведения и пример файла Web.config см. в разделе <xref:System.Web.Security.UrlAuthorizationModule>документации по классу.</xref:System.Web.Security.UrlAuthorizationModule>"
  syntax:
    content: public static bool CheckUrlAccessForPrincipal (string virtualPath, System.Security.Principal.IPrincipal user, string verb);
    parameters:
    - id: virtualPath
      type: System.String
      description: "Виртуальный путь к файлу."
    - id: user
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>Объект, представляющий текущего пользователя.</xref:System.Security.Principal.IPrincipal>"
    - id: verb
      type: System.String
      description: "Команду HTTP, используемую для выполнения запроса."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий пользователь имеет доступ к файлу; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>virtualPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>user</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>verb</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>virtualPath</code>находится вне корневого пути приложения."
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  id: Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Освобождает все ресурсы, кроме памяти, используемой <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref>."
  remarks: "Этот метод не предназначен для непосредственного вызова из кода приложения."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Security.UrlAuthorizationModule.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  id: Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  langs:
  - csharp
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Инициализирует <xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;> </xref> объекта."
  remarks: "Этот метод не предназначен для непосредственного вызова из кода приложения.       Метод Init гарантирует, что <xref:System.Web.Security.UrlAuthorizationModule>включается в обработку <xref:System.Web.HttpApplication.AuthorizeRequest>событий.</xref:System.Web.HttpApplication.AuthorizeRequest> </xref:System.Web.Security.UrlAuthorizationModule>"
  syntax:
    content: public void Init (System.Web.HttpApplication app);
    parameters:
    - id: app
      type: System.Web.HttpApplication
      description: "Текущий <xref href=&quot;System.Web.HttpApplication&quot;> </xref> экземпляра."
  overload: System.Web.Security.UrlAuthorizationModule.Init*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Security.UrlAuthorizationModule.#ctor
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule()
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule()
  fullName: System.Web.Security.UrlAuthorizationModule.UrlAuthorizationModule()
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(System.String,System.Security.Principal.IPrincipal,System.String)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal(String,IPrincipal,String)
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
  fullName: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal(String,IPrincipal,String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose()
  nameWithType: UrlAuthorizationModule.Dispose()
  fullName: System.Web.Security.UrlAuthorizationModule.Dispose()
- uid: System.Web.Security.UrlAuthorizationModule.Init(System.Web.HttpApplication)
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init(HttpApplication)
  nameWithType: UrlAuthorizationModule.Init(HttpApplication)
  fullName: System.Web.Security.UrlAuthorizationModule.Init(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.Security.UrlAuthorizationModule.#ctor*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: UrlAuthorizationModule
  nameWithType: UrlAuthorizationModule.UrlAuthorizationModule
- uid: System.Web.Security.UrlAuthorizationModule.CheckUrlAccessForPrincipal*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: CheckUrlAccessForPrincipal
  nameWithType: UrlAuthorizationModule.CheckUrlAccessForPrincipal
- uid: System.Web.Security.UrlAuthorizationModule.Dispose*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Dispose
  nameWithType: UrlAuthorizationModule.Dispose
- uid: System.Web.Security.UrlAuthorizationModule.Init*
  parent: System.Web.Security.UrlAuthorizationModule
  isExternal: false
  name: Init
  nameWithType: UrlAuthorizationModule.Init
