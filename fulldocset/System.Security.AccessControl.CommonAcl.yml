### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.CommonAcl
  id: CommonAcl
  children:
  - System.Security.AccessControl.CommonAcl.BinaryLength
  - System.Security.AccessControl.CommonAcl.Count
  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonAcl.IsCanonical
  - System.Security.AccessControl.CommonAcl.IsContainer
  - System.Security.AccessControl.CommonAcl.IsDS
  - System.Security.AccessControl.CommonAcl.Item(System.Int32)
  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces
  - System.Security.AccessControl.CommonAcl.Revision
  langs:
  - csharp
  name: CommonAcl
  nameWithType: CommonAcl
  fullName: System.Security.AccessControl.CommonAcl
  type: Class
  summary: "Представляет список управления доступом (ACL) и является базовым классом для <xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;> </xref> и <xref href=&quot;System.Security.AccessControl.SystemAcl&quot;> </xref> классы."
  remarks: "-   Определенные комбинации флагов Маска наследования и доступа не имеет смысла:-удаляются все записи управления доступом (ACE) с помощью маски доступа к нулю.      -Наследовать только для элементов управления доступом в списки управления доступом объекта будут удалены.      - <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.InheritanceFlags>, и <xref:System.Security.AccessControl.InheritanceFlags>флаги на все элементы управления доступом в конечный объект очищаются списки управления доступом.</xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.PropagationFlags> </xref:System.Security.AccessControl.PropagationFlags>      -Элементы управления доступом, имеющих <xref:System.Security.AccessControl.PropagationFlags>флаг при отсутствии <xref:System.Security.AccessControl.InheritanceFlags>или <xref:System.Security.AccessControl.InheritanceFlags>флаг не имеет смысла; они удаляются.</xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.PropagationFlags>      - <xref:System.Security.AccessControl.PropagationFlags>Флаг при отсутствии <xref:System.Security.AccessControl.InheritanceFlags>или <xref:System.Security.AccessControl.InheritanceFlags>флаг может быть удален.</xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.InheritanceFlags> </xref:System.Security.AccessControl.PropagationFlags>      -Элементы управления доступом, имеющих <xref:System.Security.AccessControl.AuditFlags>значение <xref:System.Security.AccessControl.AuditFlags>или <xref:System.Security.AccessControl.AuditFlags>управления доступом в списки (DACL), удаляются.</xref:System.Security.AccessControl.AuditFlags> </xref:System.Security.AccessControl.AuditFlags> </xref:System.Security.AccessControl.AuditFlags>      -Любой Аудит управления ДОСТУПОМ, которые не заданы <xref:System.Security.AccessControl.AuditFlags>или <xref:System.Security.AccessControl.AuditFlags>удаляется.</xref:System.Security.AccessControl.AuditFlags> </xref:System.Security.AccessControl.AuditFlags>      -Списки DACL, SystemAudit и записи ACE SystemAlarm удаляются.      -В системе управления доступом (SACL) удаляются AccessAllowed и записи ACE доступ запрещен.       Канонический порядок поддерживается согласно следующий алгоритм:-явные имеют приоритет над (ACE); Это правило применяется к списки DACL и SACL.      -В DACL среди явные ACE элементы, запрещающие доступ имеют приоритет перед элементами, разрешающими доступ. Для списков управления доступом объекта каталога, элементы без объектов имеют перед элементами с объектами.      -Все общие элементы управления доступом имеют приоритет над noncommon элементов управления доступом.      -(ACE) поддерживают их относительного порядка после установления канонического порядка.      -Неизвестные и пользовательские элементы запрещены в списки DACL и SACL.      — В смежных диапазонов (явные AccessDenied и AccessAllowed записи ACE на списки DACL, все явные ACE на SACL) сортируются элементы управления доступом с помощью <xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A>методы <xref:System.Security.Principal.SecurityIdentifier>объектов, связанных с доступом.</xref:System.Security.Principal.SecurityIdentifier> </xref:System.Security.Principal.SecurityIdentifier.CompareTo%2A>       Соседние элементы управления доступом объединяются и при необходимости.  Это уменьшает размер списка управления доступом, не затрагивая семантику управления доступом, которые он предоставляет."
  syntax:
    content: 'public abstract class CommonAcl : System.Security.AccessControl.GenericAcl'
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAcl
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.GenericAcl.AclRevision
  - System.Security.AccessControl.GenericAcl.AclRevisionDS
  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  - System.Security.AccessControl.GenericAcl.GetEnumerator
  - System.Security.AccessControl.GenericAcl.IsSynchronized
  - System.Security.AccessControl.GenericAcl.MaxBinaryLength
  - System.Security.AccessControl.GenericAcl.SyncRoot
  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: BinaryLength
  nameWithType: CommonAcl.BinaryLength
  fullName: System.Security.AccessControl.CommonAcl.BinaryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Возвращает длину в байтах двоичного представления текущего <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта. Эту длину необходимо использовать перед маршалингом списка управления доступом (ACL) в двоичный массив с помощью <xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*>метод.</xref:System.Security.AccessControl.CommonAcl.GetBinaryForm*>"
  syntax:
    content: public override sealed int BinaryLength { get; }
    return:
      type: System.Int32
      description: "Длина в байтах двоичного представления текущего <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта."
  overload: System.Security.AccessControl.CommonAcl.BinaryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.Count
  id: Count
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: Count
  nameWithType: CommonAcl.Count
  fullName: System.Security.AccessControl.CommonAcl.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Возвращает количество элементов управления (ACE) в текущем <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта."
  syntax:
    content: public override sealed int Count { get; }
    return:
      type: System.Int32
      description: "Количество элементов управления доступом в текущем <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта."
  overload: System.Security.AccessControl.CommonAcl.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: CommonAcl.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Маршалирует содержимое объекта <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объект в указанный байтовый массив, начиная с указанной позиции."
  syntax:
    content: public override sealed void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "Массив байтов, в котором содержимое <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> маршалинге."
    - id: offset
      type: System.Int32
      description: "Позиция, с которой начинается маршалинг."
  overload: System.Security.AccessControl.CommonAcl.GetBinaryForm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.IsCanonical
  id: IsCanonical
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: IsCanonical
  nameWithType: CommonAcl.IsCanonical
  fullName: System.Security.AccessControl.CommonAcl.IsCanonical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Возвращает логическое значение, указывающее, является ли управления доступом (ACE) в текущем <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта следуют в каноническом порядке."
  syntax:
    content: public bool IsCanonical { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если элементы управления доступом в текущем <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта следуют в каноническом порядке; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.CommonAcl.IsCanonical*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.IsContainer
  id: IsContainer
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: IsContainer
  nameWithType: CommonAcl.IsContainer
  fullName: System.Security.AccessControl.CommonAcl.IsContainer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Задает ли <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объект-контейнер."
  syntax:
    content: public bool IsContainer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объект-контейнер."
  overload: System.Security.AccessControl.CommonAcl.IsContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.IsDS
  id: IsDS
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: IsDS
  nameWithType: CommonAcl.IsDS
  fullName: System.Security.AccessControl.CommonAcl.IsDS
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Задает ли текущий <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объект находится в каталоге объекта управления доступом (ACL)."
  syntax:
    content: public bool IsDS { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объект является объектом каталога ACL."
  overload: System.Security.AccessControl.CommonAcl.IsDS*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: CommonAcl.Item(Int32)
  fullName: System.Security.AccessControl.CommonAcl.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Возвращает или задает <xref href=&quot;System.Security.AccessControl.CommonAce&quot;> </xref> по указанному индексу."
  syntax:
    content: public override sealed System.Security.AccessControl.GenericAce this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Отсчитываемый от нуля индекс <xref href=&quot;System.Security.AccessControl.CommonAce&quot;> </xref> для получения или задания."
    return:
      type: System.Security.AccessControl.GenericAce
      description: "<xref href=&quot;System.Security.AccessControl.CommonAce&quot;> </xref> По указанному индексу."
  overload: System.Security.AccessControl.CommonAcl.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)
  id: Purge(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: Purge(SecurityIdentifier)
  nameWithType: CommonAcl.Purge(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonAcl.Purge(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Удаляет все записи управления доступом (ACE), содержащиеся в этом <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объектов, которые связаны с указанным <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> объекта."
  syntax:
    content: public void Purge (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> Объект для проверки."
  overload: System.Security.AccessControl.CommonAcl.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces
  id: RemoveInheritedAces
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: RemoveInheritedAces()
  nameWithType: CommonAcl.RemoveInheritedAces()
  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Удаляет все наследуемые элементы управления (ACE) из этого <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref> объекта."
  syntax:
    content: public void RemoveInheritedAces ();
    parameters: []
  overload: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonAcl.Revision
  id: Revision
  parent: System.Security.AccessControl.CommonAcl
  langs:
  - csharp
  name: Revision
  nameWithType: CommonAcl.Revision
  fullName: System.Security.AccessControl.CommonAcl.Revision
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Возвращает уровень редакции объекта <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref>."
  syntax:
    content: public override sealed byte Revision { get; }
    return:
      type: System.Byte
      description: "Байтовое значение, определяющее уровень редакции объекта <xref href=&quot;System.Security.AccessControl.CommonAcl&quot;> </xref>."
  overload: System.Security.AccessControl.CommonAcl.Revision*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: System.Security.AccessControl.GenericAcl
- uid: System.Security.AccessControl.CommonAcl.BinaryLength
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: BinaryLength
  nameWithType: CommonAcl.BinaryLength
  fullName: System.Security.AccessControl.CommonAcl.BinaryLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.CommonAcl.Count
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Count
  nameWithType: CommonAcl.Count
  fullName: System.Security.AccessControl.CommonAcl.Count
- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: CommonAcl.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.CommonAcl.IsCanonical
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsCanonical
  nameWithType: CommonAcl.IsCanonical
  fullName: System.Security.AccessControl.CommonAcl.IsCanonical
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.CommonAcl.IsContainer
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsContainer
  nameWithType: CommonAcl.IsContainer
  fullName: System.Security.AccessControl.CommonAcl.IsContainer
- uid: System.Security.AccessControl.CommonAcl.IsDS
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsDS
  nameWithType: CommonAcl.IsDS
  fullName: System.Security.AccessControl.CommonAcl.IsDS
- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Item(Int32)
  nameWithType: CommonAcl.Item(Int32)
  fullName: System.Security.AccessControl.CommonAcl.Item(Int32)
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Purge(SecurityIdentifier)
  nameWithType: CommonAcl.Purge(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonAcl.Purge(SecurityIdentifier)
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: RemoveInheritedAces()
  nameWithType: CommonAcl.RemoveInheritedAces()
  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()
- uid: System.Security.AccessControl.CommonAcl.Revision
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Revision
  nameWithType: CommonAcl.Revision
  fullName: System.Security.AccessControl.CommonAcl.Revision
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Security.AccessControl.CommonAcl.BinaryLength*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: BinaryLength
  nameWithType: CommonAcl.BinaryLength
- uid: System.Security.AccessControl.CommonAcl.Count*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Count
  nameWithType: CommonAcl.Count
- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: GetBinaryForm
  nameWithType: CommonAcl.GetBinaryForm
- uid: System.Security.AccessControl.CommonAcl.IsCanonical*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsCanonical
  nameWithType: CommonAcl.IsCanonical
- uid: System.Security.AccessControl.CommonAcl.IsContainer*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsContainer
  nameWithType: CommonAcl.IsContainer
- uid: System.Security.AccessControl.CommonAcl.IsDS*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: IsDS
  nameWithType: CommonAcl.IsDS
- uid: System.Security.AccessControl.CommonAcl.Item*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Item
  nameWithType: CommonAcl.Item
- uid: System.Security.AccessControl.CommonAcl.Purge*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Purge
  nameWithType: CommonAcl.Purge
- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: RemoveInheritedAces
  nameWithType: CommonAcl.RemoveInheritedAces
- uid: System.Security.AccessControl.CommonAcl.Revision*
  parent: System.Security.AccessControl.CommonAcl
  isExternal: false
  name: Revision
  nameWithType: CommonAcl.Revision
