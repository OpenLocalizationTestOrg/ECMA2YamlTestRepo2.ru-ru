### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.ExpressionContext
  id: ExpressionContext
  children:
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  - System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  - System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  - System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  langs:
  - csharp
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext
  type: Class
  summary: "Предоставляет средство передачи состояния контекста сериализаторам. Этот класс не наследуется."
  remarks: "ExpressionContext помещается в стек контекстов и содержит наиболее важные выражение во время сериализации. Следующий код C# демонстрирует назначение.      ```   button1.Text = &quot;Hello&quot;;   ```В процессе сериализации несколько сериализаторов отвечают за создание одного оператора. Один из сериализаторов отвечает за создание «Hello». Бывают случаи, когда сериализатор может потребоваться знание контекста, в котором создается выражение. В предыдущем примере этот контекст не требуется. Следующий код C# показывает ситуацию, в которой требуется знание контекста.      ```   button1.Text = rm.GetString(&quot;button1_Text&quot;);   ```В этом случае сериализатор, ответственный за создание выражения ресурса необходимо знать имена целевых объектов. Для этого можно использовать класс ExpressionContext. Каждый сериализатор создает выражение, и вызывает сериализатор для обработки меньших частей инструкции в целом, сериализатор передает контекст выражения в стек контекста. Каждый контекст выражения обладает родительским свойством, которое находит следующего контекста выражения в стеке. Это обеспечивает удобную возможность обхода."
  syntax:
    content: public sealed class ExpressionContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref> класса с указанным выражением и владельцем."
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "Заданное выражение кода."
    - id: expressionType
      type: System.Type
      description: "Тип заданного выражения кода."
    - id: owner
      type: System.Object
      description: "Владелец заданного выражения кода."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;> </xref> класса с текущим значением."
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "Заданное выражение кода."
    - id: expressionType
      type: System.Type
      description: "Тип заданного выражения кода."
    - id: owner
      type: System.Object
      description: "Владелец заданного выражения кода."
    - id: presetValue
      type: System.Object
      description: "Заданное выражение кода предустановленное значение."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  id: Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Возвращает выражение, представленное контекстом."
  syntax:
    content: public System.CodeDom.CodeExpression Expression { get; }
    return:
      type: System.CodeDom.CodeExpression
      description: "Выражение представляет этого контекста."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  id: ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Возвращает <xref:System.Type>выражения.</xref:System.Type>"
  remarks: "Можно использовать <xref:System.ComponentModel.Design.Serialization.ExpressionContext>для определения необходимости приведения к типу при присвоении выражения.</xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public Type ExpressionType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>Выражения.</xref:System.Type>"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  id: Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Возвращает объект, владеющий этим выражением."
  remarks: "Если выражение является ссылка на свойство в <xref:System.Windows.Forms.Control.Text%2A>Свойства экземпляра <xref:System.Windows.Forms.Button>вызывается `button1`, возвращает владельца `button1`.</xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Text%2A>"
  syntax:
    content: public object Owner { get; }
    return:
      type: System.Object
      description: "Объект, владеющий этим выражением."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  id: PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "Возвращает заранее установленное значение выражения."
  remarks: "Содержит заранее установленное значение выражения, оно существует. Например, если выражение является выражением свойства ссылки, ссылающиеся на <xref:System.Windows.Forms.Control.Controls%2A>свойство <xref:System.Windows.Forms.Button>, свойство PresetValue содержит экземпляр <xref:System.Windows.Forms.Control.Controls%2A>свойство.</xref:System.Windows.Forms.Control.Controls%2A> </xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Controls%2A> Это, поскольку свойство только для чтения и заранее установленное объектом значение. С другой стороны, что свойство <xref:System.Windows.Forms.Control.Text%2A>или <xref:System.Windows.Forms.Control.Visible%2A>не имеет заранее установленное значение и, следовательно, свойство PresetValue возвращает `null`.</xref:System.Windows.Forms.Control.Visible%2A> </xref:System.Windows.Forms.Control.Text%2A>       Следующий код C# показано, как сериализаторов можно использовать эту информацию для проведения сериализации.       [C#]      ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ``` Сериализатор <xref:System.Windows.Forms.Padding>структуры должен быть в курсе он должен создать первой или второй формы.</xref:System.Windows.Forms.Padding> Первая форма создается по умолчанию. Вторая форма создается только в том случае, если имеется <xref:System.ComponentModel.Design.Serialization.ExpressionContext>стека контекста, который содержит PresetValue равно значению <xref:System.Windows.Forms.Padding>в настоящее время сериализации.</xref:System.Windows.Forms.Padding> </xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public object PresetValue { get; }
    return:
      type: System.Object
      description: "Заранее установленное значение этого выражения или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если не назначено."
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext
  nameWithType: ExpressionContext.ExpressionContext
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
