### YamlMime:ManagedReference
items:
- uid: System.Data.DataRow
  id: DataRow
  children:
  - System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  - System.Data.DataRow.AcceptChanges
  - System.Data.DataRow.BeginEdit
  - System.Data.DataRow.CancelEdit
  - System.Data.DataRow.ClearErrors
  - System.Data.DataRow.Delete
  - System.Data.DataRow.EndEdit
  - System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  - System.Data.DataRow.GetChildRows(System.String)
  - System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  - System.Data.DataRow.GetColumnError(System.Int32)
  - System.Data.DataRow.GetColumnError(System.String)
  - System.Data.DataRow.GetColumnsInError
  - System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  - System.Data.DataRow.GetParentRow(System.String)
  - System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  - System.Data.DataRow.GetParentRows(System.String)
  - System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  - System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.HasErrors
  - System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  - System.Data.DataRow.IsNull(System.Data.DataColumn)
  - System.Data.DataRow.IsNull(System.Int32)
  - System.Data.DataRow.IsNull(System.String)
  - System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.Data.DataColumn)
  - System.Data.DataRow.Item(System.Int32)
  - System.Data.DataRow.Item(System.String)
  - System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  - System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  - System.Data.DataRow.ItemArray
  - System.Data.DataRow.RejectChanges
  - System.Data.DataRow.RowError
  - System.Data.DataRow.RowState
  - System.Data.DataRow.SetAdded
  - System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  - System.Data.DataRow.SetColumnError(System.Int32,System.String)
  - System.Data.DataRow.SetColumnError(System.String,System.String)
  - System.Data.DataRow.SetModified
  - System.Data.DataRow.SetNull(System.Data.DataColumn)
  - System.Data.DataRow.SetParentRow(System.Data.DataRow)
  - System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  - System.Data.DataRow.Table
  langs:
  - csharp
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
  type: Class
  summary: "Представляет строку данных в <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "DataRow с <xref:System.Data.DataColumn>объектами, основные компоненты <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataColumn> Используйте объект DataRow и его свойства и методы для получения и оценки; и вставки, удаления и обновления значений в списке <xref:System.Data.DataTable>.</xref:System.Data.DataTable> <xref:System.Data.DataRowCollection>Представляет фактические объекты DataRow в <xref:System.Data.DataTable>и <xref:System.Data.DataColumnCollection>содержит <xref:System.Data.DataColumn>объекты, которые описывают схему <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataColumn> </xref:System.Data.DataColumnCollection> </xref:System.Data.DataTable> </xref:System.Data.DataRowCollection> Перегруженные <xref:System.Data.DataRow.Item%2A>Свойства для возвращения или задать значение <xref:System.Data.DataColumn>.</xref:System.Data.DataColumn> </xref:System.Data.DataRow.Item%2A>       Использование <xref:System.Data.DataRow.HasVersion%2A>и <xref:System.Data.DataRow.IsNull%2A>Свойства, чтобы определить состояние конкретной строки, значение и <xref:System.Data.DataRow.RowState%2A>свойство, чтобы определить состояние строки относительно родительского <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRow.IsNull%2A> </xref:System.Data.DataRow.HasVersion%2A>       Для создания новой строки DataRow, используйте <xref:System.Data.DataTable.NewRow%2A>метод <xref:System.Data.DataTable>объекта.</xref:System.Data.DataTable> </xref:System.Data.DataTable.NewRow%2A> После создания новой строки DataRow, используйте <xref:System.Data.DataRowCollection.Add%2A>метод для добавления новой строки DataRow на <xref:System.Data.DataRowCollection>.</xref:System.Data.DataRowCollection> </xref:System.Data.DataRowCollection.Add%2A> Наконец, вызовите <xref:System.Data.DataRow.AcceptChanges%2A>метод <xref:System.Data.DataTable>объекта, чтобы подтвердить добавление.</xref:System.Data.DataTable> </xref:System.Data.DataRow.AcceptChanges%2A> Дополнительные сведения о добавлении данных в <xref:System.Data.DataTable>, в разделе [Добавление данных в объект DataTable](~/add/includes/ajax-current-ext-md.md).</xref:System.Data.DataTable>       Вы можете удалить DataRow из <xref:System.Data.DataRowCollection>путем вызова <xref:System.Data.DataRowCollection.Remove%2A>метод <xref:System.Data.DataRowCollection>, или путем вызова <xref:System.Data.DataRow.Delete%2A>метод объекта DataRow.</xref:System.Data.DataRow.Delete%2A> </xref:System.Data.DataRowCollection> </xref:System.Data.DataRowCollection.Remove%2A> </xref:System.Data.DataRowCollection> <xref:System.Data.DataRowCollection.Remove%2A>Метод удаляет строку из коллекции.</xref:System.Data.DataRowCollection.Remove%2A> Напротив <xref:System.Data.DataRow.Delete%2A>помечается для удаления DataRow.</xref:System.Data.DataRow.Delete%2A> Фактическое удаление происходит при вызове <xref:System.Data.DataRow.AcceptChanges%2A>метода.</xref:System.Data.DataRow.AcceptChanges%2A> Путем вызова <xref:System.Data.DataRow.Delete%2A>, позволяет программно проверять, какие строки помечены для удаления, прежде чем выполнять их фактическое удаление.</xref:System.Data.DataRow.Delete%2A> Дополнительные сведения см. в разделе [удаление DataRow](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates a new DataRow by calling the <xref:System.Data.DataTable.NewRow%2A> method of the <xref:System.Data.DataTable> object.  \n  \n [!code-vb[Classic WebData DataRow Example#1](~/add/codesnippet/visualbasic/t-system.data.datarow_1.vb)]\n [!code-cs[Classic WebData DataRow Example#1](~/add/codesnippet/csharp/t-system.data.datarow_1.cs)]"
  syntax:
    content: public class DataRow
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  id: '#ctor(System.Data.DataRowBuilder)'
  parent: System.Data.DataRow
  langs:
  - csharp
  name: DataRow(DataRowBuilder)
  nameWithType: DataRow.DataRow(DataRowBuilder)
  fullName: System.Data.DataRow.DataRow(DataRowBuilder)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Инициализирует новый экземпляр DataRow. Создает строку из конструктора. Только для внутреннего использования..."
  syntax:
    content: protected DataRow (System.Data.DataRowBuilder builder);
    parameters:
    - id: builder
      type: System.Data.DataRowBuilder
      description: "построитель"
  overload: System.Data.DataRow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.AcceptChanges
  id: AcceptChanges
  parent: System.Data.DataRow
  langs:
  - csharp
  name: AcceptChanges()
  nameWithType: DataRow.AcceptChanges()
  fullName: System.Data.DataRow.AcceptChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Фиксирует все изменения, внесенные в эту строку со времени последнего вызова метода AcceptChanges."
  remarks: "При вызове метода AcceptChanges, <xref:System.Data.DataRow.EndEdit%2A>вызывается явно, чтобы завершить изменения.</xref:System.Data.DataRow.EndEdit%2A> Если <xref:System.Data.DataRow.RowState%2A>строки были добавлены или изменены, <xref:System.Data.DataRow.RowState%2A>становится Unchanged.</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRow.RowState%2A> Если <xref:System.Data.DataRow.RowState%2A>был удален, строка удаляется.</xref:System.Data.DataRow.RowState%2A>       В разделе <xref:System.Data.DataRow.BeginEdit%2A>метод для получения дополнительной информации.</xref:System.Data.DataRow.BeginEdit%2A>       <xref:System.Data.DataTable>Класс также содержит <xref:System.Data.DataTable.AcceptChanges%2A>метод, который влияет на изменения, внесенные в таблицу целиком.</xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataTable> Дополнительные сведения и пример кода, демонстрирующий принятия и отклонения изменений в отдельные строки данных см. в разделе [AcceptChanges и RejectChanges](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its <xref:System.Data.DataRow.RowState%2A> is printed.  \n  \n [!code-cs[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ac_1.cs)]\n [!code-vb[Classic WebData DataRow.AcceptChanges Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ac_1.vb)]"
  syntax:
    content: public void AcceptChanges ();
    parameters: []
  overload: System.Data.DataRow.AcceptChanges*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.BeginEdit
  id: BeginEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: BeginEdit()
  nameWithType: DataRow.BeginEdit()
  fullName: System.Data.DataRow.BeginEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Запускает операцию редактирования на <xref href=&quot;System.Data.DataRow&quot;> </xref> объекта."
  remarks: "Используйте метод BeginEdit поместить <xref:System.Data.DataRow>в режим редактирования.</xref:System.Data.DataRow> В этом режиме события временно приостанавливается, что дает пользователю возможность вносить изменения в более чем одной строке без активации правил проверки. Например если необходимо убедитесь в том, что значение столбца для суммарного равны значениям дебета и кредита столбцов в строке, можно поместить каждую строку в режим редактирования, чтобы приостановить проверку значений строк, пока пользователь пытается зафиксировать эти значения.       Метод BeginEdit вызывается неявно, когда пользователь изменяет значение элемента управления с привязкой к данным; <xref:System.Data.DataRow.EndEdit%2A>метод неявно вызывается при вызове <xref:System.Data.DataTable.AcceptChanges%2A>метод <xref:System.Data.DataTable>объекта.</xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataRow.EndEdit%2A> В этом режиме редактирования <xref:System.Data.DataRow>сохраняются представления исходные и новые предложенные значения.</xref:System.Data.DataRow> Таким образом при условии, что <xref:System.Data.DataRow.EndEdit%2A>не был вызван метод, вы можете получить исходной или предложенной версии путем передачи `DataRowVersion.Original` или `DataRowVersion.Proposed` для `version` параметр <xref:System.Data.DataRow.Item%2A>свойство.</xref:System.Data.DataRow.Item%2A> </xref:System.Data.DataRow.EndEdit%2A> Также можно отменить любые изменения на этом этапе с помощью вызова <xref:System.Data.DataRow.CancelEdit%2A>метод.</xref:System.Data.DataRow.CancelEdit%2A>       Чтобы определить, содержит ли строка исходное или предложенное значение, вызовите <xref:System.Data.DataRow.HasVersion%2A>метод.</xref:System.Data.DataRow.HasVersion%2A>      Настроек [!NOTE] настроек метод BeginEdit временно приостанавливает <xref:System.Data.DataTable.RowChanging>события, но `delete` операции — нет.</xref:System.Data.DataTable.RowChanging>"
  example:
  - "The example creates a simple <xref:System.Data.DataTable> with one <xref:System.Data.DataColumn> and five <xref:System.Data.DataRow> objects, and a <xref:System.Data.UniqueConstraint>. A <xref:System.Data.DataTable.RowChanged> event handler is also added to monitor when the row's value is changing. After invoking BeginEdit on the existing rows, the constraint and event are temporarily disabled and the original and proposed values are printed. The BeginEdit is again invoked to set two rows to the same value. When <xref:System.Data.DataRow.EndEdit%2A> is called, the <xref:System.Data.UniqueConstraint> is enforced on the identical values.  \n  \n [!code-vb[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.be_1.vb)]\n [!code-cs[Classic WebData DataRow.BeginEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.be_1.cs)]"
  syntax:
    content: public void BeginEdit ();
    parameters: []
  overload: System.Data.DataRow.BeginEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "Метод был вызван внутри <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> событий."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Метод был вызван на удаленную строку."
  platform:
  - net462
- uid: System.Data.DataRow.CancelEdit
  id: CancelEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: CancelEdit()
  nameWithType: DataRow.CancelEdit()
  fullName: System.Data.DataRow.CancelEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Отменяет текущее изменение строки."
  remarks: "В разделе <xref:System.Data.DataRow.BeginEdit%2A>метод для получения дополнительной информации.</xref:System.Data.DataRow.BeginEdit%2A>"
  example:
  - "The following example edits the value of one column in the last row of a <xref:System.Windows.Forms.DataGrid> control. The example uses the <xref:System.Data.DataRow.BeginEdit%2A>, <xref:System.Data.DataRow.EndEdit%2A>, methods to edit the column's value and commit the change to the row.  \n  \n [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ca_1.vb)]\n [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ca_1.cs)]"
  syntax:
    content: public void CancelEdit ();
    parameters: []
  overload: System.Data.DataRow.CancelEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "Метод был вызван внутри <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> событий."
  platform:
  - net462
- uid: System.Data.DataRow.ClearErrors
  id: ClearErrors
  parent: System.Data.DataRow
  langs:
  - csharp
  name: ClearErrors()
  nameWithType: DataRow.ClearErrors()
  fullName: System.Data.DataRow.ClearErrors()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Удаляет ошибки для строки. Сюда входят <> </> *настроек и задайте для ошибок <> </> *настроек."
  remarks: "Используйте <xref:System.Data.DataRow.SetColumnError%2A>и <xref:System.Data.DataRow.GetColumnError%2A>для установки и возвращения ошибок для отдельных столбцов.</xref:System.Data.DataRow.GetColumnError%2A> </xref:System.Data.DataRow.SetColumnError%2A>       Задать <xref:System.Data.DataRow.RowError%2A>свойство ошибки, которая применяется ко всей строке.</xref:System.Data.DataRow.RowError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The ClearErrors method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.cl_1.cs)]\n [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.cl_1.vb)]"
  syntax:
    content: public void ClearErrors ();
    parameters: []
  overload: System.Data.DataRow.ClearErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.Delete
  id: Delete
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Delete()
  nameWithType: DataRow.Delete()
  fullName: System.Data.DataRow.Delete()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Удаляет <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  remarks: "Если <xref:System.Data.DataRow.RowState%2A>добавлены строки <xref:System.Data.DataRow.RowState%2A>становится `Detached` и удаления строки из таблицы, при вызове <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRow.RowState%2A>       <xref:System.Data.DataRow.RowState%2A>Становится `Deleted` после использования метода удаления существующего <xref:System.Data.DataRow>.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A> Он остается `Deleted` до вызова <xref:System.Data.DataRow.AcceptChanges%2A>.</xref:System.Data.DataRow.AcceptChanges%2A> В настоящее время <xref:System.Data.DataRow>удаляется из таблицы.</xref:System.Data.DataRow>       Удаление не должен вызываться в цикле foreach во время итерации по <xref:System.Data.DataRowCollection>объекта.</xref:System.Data.DataRowCollection> DELETE изменяет состояние коллекции.       Удаленная строка может быть неудаленные путем вызова <xref:System.Data.DataRow.RejectChanges%2A>.</xref:System.Data.DataRow.RejectChanges%2A>      Настроек [!NOTE] настроек <xref:System.Data.DataRow.BeginEdit%2A>метод временно приостанавливает <xref:System.Data.DataTable.RowChanging>события, но операция удаления не поддерживает.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataRow.BeginEdit%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataTable> with two columns and ten rows. After deleting several <xref:System.Data.DataRow> items with the Delete method, one of the rows is undeleted by invoking <xref:System.Data.DataRow.RejectChanges%2A>.  \n  \n [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.de_1.vb)]\n [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.de_1.cs)]"
  syntax:
    content: public void Delete ();
    parameters: []
  overload: System.Data.DataRow.Delete*
  exceptions:
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> Уже был удален."
  platform:
  - net462
- uid: System.Data.DataRow.EndEdit
  id: EndEdit
  parent: System.Data.DataRow
  langs:
  - csharp
  name: EndEdit()
  nameWithType: DataRow.EndEdit()
  fullName: System.Data.DataRow.EndEdit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Прекращает изменение строки."
  remarks: "Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.RowChanging>событий.</xref:System.Data.DataTable.RowChanging>"
  example:
  - "The following example uses the EndEdit method to end the edit of a <xref:System.Data.DataRow> value if the validation function returns true.  \n  \n [!code-vb[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.en_1.vb)]\n [!code-cs[Classic WebData DataRow.CancelEdit Example#1](~/add/codesnippet/csharp/m-system.data.datarow.en_1.cs)]"
  syntax:
    content: public void EndEdit ();
    parameters: []
  overload: System.Data.DataRow.EndEdit*
  exceptions:
  - type: System.Data.InRowChangingEventException
    commentId: T:System.Data.InRowChangingEventException
    description: "Метод был вызван внутри <xref href=&quot;System.Data.DataTable.RowChanging&quot;> </xref> событий."
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Редактирование нарушило ограничение."
  - type: System.Data.ReadOnlyException
    commentId: T:System.Data.ReadOnlyException
    description: "Строка принадлежит таблице и редактирование пытается изменить значение столбца только для чтения."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Редактирование пытается поместить нулевое значение в столбец где <xref:System.Data.DataColumn.AllowDBNull*>имеет значение false.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  id: GetChildRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(DataRelation)
  nameWithType: DataRow.GetChildRows(DataRelation)
  fullName: System.Data.DataRow.GetChildRows(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочерние строки объекта <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объектов, возвращаемый методом <xref:System.Data.DataTable.ChildRelations%2A>свойство.</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_8_1.cs)]\n [!code-vb[Classic WebData DataRow.GetChildRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_8_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Отношение <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строка не содержит эту версию данных."
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.String)
  id: GetChildRows(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(String)
  nameWithType: DataRow.GetChildRows(String)
  fullName: System.Data.DataRow.GetChildRows(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочерние строки объекта <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "<xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объектов, возвращаемый методом <xref:System.Data.DataTable.ChildRelations%2A>свойство.</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "<xref:System.Data.DataRelation.RelationName*>Из <xref href=&quot;System.Data.DataRelation&quot;> </xref> для использования.</xref:System.Data.DataRelation.RelationName*>"
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetChildRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочерние строки объекта <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  remarks: "<xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объектов, возвращаемый методом <xref:System.Data.DataTable.ChildRelations%2A>свойство.</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>       Если <xref:System.Data.DataRowVersion>указано, используется версия зависит от <xref:System.Data.DataRow.RowState%2A>строки, на которой `GetChildRows` вызывается.</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRowVersion> Если строки, на которой `GetChildRows` вызывается имеет `RowState` из `Modified`, `New`, или `Unchanged`, <xref:System.Data.DataRowVersion>версии строки используется для выборки связанным строкам дочерних таблиц с совпадающими значениями в своей текущей версии.</xref:System.Data.DataRowVersion> Если строки, на которой `GetChildRows` вызывается имеет `RowState` из `Deleted`, <xref:System.Data.DataRowVersion>версии строки используется для выборки связанным строкам дочерних таблиц с совпадающими значениями исходные версии.</xref:System.Data.DataRowVersion>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetChildRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column with the specified version in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/visualbasic/47f0f4a3-cc08-456d-98cc-_1.vb)]\n [!code-cs[Classic WebData DataRow.GetChildRows3 Example#1](~/add/codesnippet/csharp/47f0f4a3-cc08-456d-98cc-_1.cs)]"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения, указывающие версии получаемых данных. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов."
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строки не поддерживает запрошенный <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  id: GetChildRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetChildRows(String,DataRowVersion)
  nameWithType: DataRow.GetChildRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает дочерние строки объекта <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "<xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объектов, возвращаемый методом <xref:System.Data.DataTable.ChildRelations%2A>свойство.</xref:System.Data.DataTable.ChildRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>       Если <xref:System.Data.DataRowVersion>указано, используется версия зависит от <xref:System.Data.DataRow.RowState%2A>строки, на которой `GetChildRows` вызывается.</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRowVersion> Если строки, на которой `GetChildRows` вызывается имеет `RowState` из `Modified`, `New`, или `Unchanged`, <xref:System.Data.DataRowVersion>версии строки используется для выборки связанным строкам дочерних таблиц с совпадающими значениями в своей текущей версии.</xref:System.Data.DataRowVersion> Если строки, на которой `GetChildRows` вызывается имеет `RowState` из `Deleted`, <xref:System.Data.DataRowVersion>версии строки используется для выборки связанным строкам дочерних таблиц с совпадающими значениями исходные версии.</xref:System.Data.DataRowVersion>"
  syntax:
    content: public System.Data.DataRow[] GetChildRows (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "<xref:System.Data.DataRelation.RelationName*>Из <xref href=&quot;System.Data.DataRelation&quot;> </xref> для использования.</xref:System.Data.DataRelation.RelationName*>"
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения, указывающие версии получаемых данных. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetChildRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строки не поддерживает запрошенный <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  id: GetColumnError(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(DataColumn)
  nameWithType: DataRow.GetColumnError(DataColumn)
  fullName: System.Data.DataRow.GetColumnError(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает описание ошибки указанного <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "Используйте <xref:System.Data.DataRow.SetColumnError%2A>метод для установки ошибок столбца.</xref:System.Data.DataRow.SetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A> Кроме того <xref:System.Data.DataTable.GetErrors%2A>метод <xref:System.Data.DataTable>возвращает все строки с ошибками.</xref:System.Data.DataTable> </xref:System.Data.DataTable.GetErrors%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_1_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_1_1.vb)]"
  syntax:
    content: public string GetColumnError (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    return:
      type: System.String
      description: "Текст описания ошибки."
  overload: System.Data.DataRow.GetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.Int32)
  id: GetColumnError(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(Int32)
  nameWithType: DataRow.GetColumnError(Int32)
  fullName: System.Data.DataRow.GetColumnError(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает описание ошибки для столбца с указанным индексом."
  remarks: "Используйте <xref:System.Data.DataRow.SetColumnError%2A>метод для установки ошибок столбца.</xref:System.Data.DataRow.SetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_6_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_6_1.vb)]"
  syntax:
    content: public string GetColumnError (int columnIndex);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс столбца."
    return:
      type: System.String
      description: "Текст описания ошибки."
  overload: System.Data.DataRow.GetColumnError*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code> Аргумент находится вне допустимого диапазона."
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnError(System.String)
  id: GetColumnError(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnError(String)
  nameWithType: DataRow.GetColumnError(String)
  fullName: System.Data.DataRow.GetColumnError(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает описание ошибки для столбца, указанного по имени."
  remarks: "Используйте <xref:System.Data.DataRow.SetColumnError%2A>метод для установки ошибок столбца.</xref:System.Data.DataRow.SetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_0_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_0_1.vb)]"
  syntax:
    content: public string GetColumnError (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "Имя столбца."
    return:
      type: System.String
      description: "Текст описания ошибки."
  overload: System.Data.DataRow.GetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetColumnsInError
  id: GetColumnsInError
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetColumnsInError()
  nameWithType: DataRow.GetColumnsInError()
  fullName: System.Data.DataRow.GetColumnsInError()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает массив столбцов с ошибками."
  remarks: "GetColumnsInError позволяет уменьшить количество <xref:System.Data.DataColumn>объекты, которые должны быть обработаны для ошибок, возвращая только те столбцы, которые содержат ошибку.</xref:System.Data.DataColumn> Ошибки могут быть установлены на отдельные столбцы с <xref:System.Data.DataRow.SetColumnError%2A>метод.</xref:System.Data.DataRow.SetColumnError%2A> Чтобы еще больше снизить количество объектов для обработки, проверьте <xref:System.Data.DataRow.HasErrors%2A>свойство <xref:System.Data.DataRow>класс, чтобы определить ли <xref:System.Data.DataRow>содержит ошибки перед вызовом GetColumnsInError.</xref:System.Data.DataRow> </xref:System.Data.DataRow> </xref:System.Data.DataRow.HasErrors%2A>       Используйте <xref:System.Data.DataRow.ClearErrors%2A>метод, чтобы удалить все ошибки в строке.</xref:System.Data.DataRow.ClearErrors%2A> Сюда входят <xref:System.Data.DataRow.RowError%2A>.</xref:System.Data.DataRow.RowError%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.HasErrors%2A> to look for errors. If the row has errors, the GetColumnsInError method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_5_1.cs)]\n [!code-vb[Classic WebData DataRow.ClearErrors Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_5_1.vb)]"
  syntax:
    content: public System.Data.DataColumn[] GetColumnsInError ();
    parameters: []
    return:
      type: System.Data.DataColumn[]
      description: "Массив <xref href=&quot;System.Data.DataColumn&quot;> </xref> объектов, содержащих ошибки."
  overload: System.Data.DataRow.GetColumnsInError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  id: GetParentRow(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(DataRelation)
  nameWithType: DataRow.GetParentRow(DataRelation)
  fullName: System.Data.DataRow.GetParentRow(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-cs[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_3_1.cs)]\n [!code-vb[Classic WebData DataRow.GetParentRow2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_3_1.vb)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow
      description: "Родительский <xref href=&quot;System.Data.DataRow&quot;> </xref> текущей строки."
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> relation </code> Не принадлежит <xref href=&quot;System.Data.DataTable&quot;> </xref>.       The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Дочерняя строка имеет несколько родительских элементов."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Эта строка не принадлежит дочернюю таблицу <xref href=&quot;System.Data.DataRelation&quot;> </xref> объекта."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.String)
  id: GetParentRow(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(String)
  nameWithType: DataRow.GetParentRow(String)
  fullName: System.Data.DataRow.GetParentRow(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  example:
  - "The following example uses the GetParentRow to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_4_1.cs)]\n [!code-vb[Classic WebData DataRow.GetParentRow Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_4_1.vb)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    return:
      type: System.Data.DataRow
      description: "Родительский <xref href=&quot;System.Data.DataRow&quot;> </xref> текущей строки."
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Дочерняя строка имеет несколько родительских элементов."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRow(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/visualbasic/a16d1012-4e05-4bd8-9275-_1.vb)]\n [!code-cs[Classic WebData DataRow.GetParentRow3 Example#1](~/add/codesnippet/csharp/a16d1012-4e05-4bd8-9275-_1.cs)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения, указывающие версии получаемых данных."
    return:
      type: System.Data.DataRow
      description: "Родительский <xref href=&quot;System.Data.DataRow&quot;> </xref> текущей строки."
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       <code> relation </code> Не принадлежит этой таблицы родительские отношения."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Дочерняя строка имеет несколько родительских элементов."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Дочерняя таблица отношения не таблицы, к которой принадлежит строка."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строка не содержит эту версию данных."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  id: GetParentRow(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRow(String,DataRowVersion)
  nameWithType: DataRow.GetParentRow(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRow%2A> to print a value from each parent row of each <xref:System.Data.DataRow> in a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_7_1.vb)]\n [!code-cs[Classic WebData DataRow.GetParentRow1 Example#1](~/add/codesnippet/csharp/m-system.data.datarow.ge_7_1.cs)]"
  syntax:
    content: public System.Data.DataRow GetParentRow (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения."
    return:
      type: System.Data.DataRow
      description: "Родительский <xref href=&quot;System.Data.DataRow&quot;> </xref> текущей строки."
  overload: System.Data.DataRow.GetParentRow*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.DataException
    commentId: T:System.Data.DataException
    description: "Дочерняя строка имеет несколько родительских элементов."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строки не поддерживает запрошенный <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  id: GetParentRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(DataRelation)
  nameWithType: DataRow.GetParentRows(DataRelation)
  fullName: System.Data.DataRow.GetParentRows(DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительский объект строки <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRows2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ge_2_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref> Не принадлежит к этой строке <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Дочерняя таблица отношения не таблицы, к которой принадлежит строка."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.String)
  id: GetParentRows(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(String)
  nameWithType: DataRow.GetParentRows(String)
  fullName: System.Data.DataRow.GetParentRows(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительский объект строки <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращаемого методом GetParentRows.</xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (string relationName);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  id: GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(DataRelation,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительский объект строки <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>"
  example:
  - "The following example uses the <xref:System.Data.DataRow.GetParentRows%2A> to return the child <xref:System.Data.DataRow> objects for every child <xref:System.Data.DataRelation> in a <xref:System.Data.DataTable>. The value of each column in the row is then printed.  \n  \n [!code-vb[Classic WebData DataRow.GetParentRows3 Example#1](~/add/codesnippet/visualbasic/14f3e3ca-84f4-434d-94fa-_1.vb)]"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (System.Data.DataRelation relation, System.Data.DataRowVersion version);
    parameters:
    - id: relation
      type: System.Data.DataRelation
      description: "The <xref href=&quot;System.Data.DataRelation&quot;></xref> to use."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения, указывающие версии получаемых данных."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Data.DataRelation&quot;> </xref> Не принадлежит к этой строке <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The row is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Дочерняя таблица отношения не таблицы, к которой принадлежит строка."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строки не поддерживает запрошенный <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  id: GetParentRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: GetParentRows(String,DataRowVersion)
  nameWithType: DataRow.GetParentRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(String,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает родительский объект строки <xref href=&quot;System.Data.DataRow&quot;> </xref> с использованием указанного <xref:System.Data.DataRelation.RelationName*>из <xref href=&quot;System.Data.DataRelation&quot;> </xref>, и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>.</xref:System.Data.DataRelation.RelationName*>"
  remarks: "В <xref:System.Data.DataSet>, коллекция всех родительских <xref:System.Data.DataRelation>объектов для набора данных, возвращается <xref:System.Data.DataRow.GetParentRows%2A>метод.</xref:System.Data.DataRow.GetParentRows%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataSet>       <xref:System.Data.DataTable>Также содержит коллекцию <xref:System.Data.DataRelation>объекты, возвращаемые <xref:System.Data.DataTable.ParentRelations%2A>свойство.</xref:System.Data.DataTable.ParentRelations%2A> </xref:System.Data.DataRelation> </xref:System.Data.DataTable>       Используйте <xref:System.Data.DataRow.HasVersion%2A>свойство, чтобы определить ли <xref:System.Data.DataRowVersion>требуется существует.</xref:System.Data.DataRowVersion> </xref:System.Data.DataRow.HasVersion%2A>"
  syntax:
    content: public System.Data.DataRow[] GetParentRows (string relationName, System.Data.DataRowVersion version);
    parameters:
    - id: relationName
      type: System.String
      description: "The <xref:System.Data.DataRelation.RelationName*> of a <xref href=&quot;System.Data.DataRelation&quot;></xref>.</xref:System.Data.DataRelation.RelationName*>"
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значения, указывающие версии получаемых данных. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов или массив нулевой длины."
  overload: System.Data.DataRow.GetParentRows*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение и строка не принадлежит к той же таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>relation</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строки не поддерживает запрошенный <xref href=&quot;System.Data.DataRowVersion&quot;> </xref>."
  platform:
  - net462
- uid: System.Data.DataRow.HasErrors
  id: HasErrors
  parent: System.Data.DataRow
  langs:
  - csharp
  name: HasErrors
  nameWithType: DataRow.HasErrors
  fullName: System.Data.DataRow.HasErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает значение, указывающее, есть ли ошибки в строке."
  remarks: "`HasErrors`Возвращает `true` при наличии <xref:System.Data.DataColumn>объект в строке, содержит ошибку, или если <xref:System.Data.DataRow.RowError%2A>свойство <xref:System.Data.DataRow>не является пустой строкой.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowError%2A> </xref:System.Data.DataColumn>       При проверке данных можно установить ошибку на любой столбец в строке. Такой столбец при отображении в <xref:System.Windows.Forms.DataGrid?displayProperty=fullName>управления, помеченный красным восклицательным знаком, чтобы показать пользователю, что столбец содержит ошибку.</xref:System.Windows.Forms.DataGrid?displayProperty=fullName>       Используйте <xref:System.Data.DataRow.SetColumnError%2A>задаваемое ошибку для любого столбца.</xref:System.Data.DataRow.SetColumnError%2A>       Используйте <xref:System.Data.DataRow.GetColumnError%2A>и `GetColumnsInError` методы для возврата столбцов с ошибками.</xref:System.Data.DataRow.GetColumnError%2A>       <xref:System.Data.DataRow.ClearErrors%2A>Метод удаляет все ошибки для строки.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example uses the HasErrors to look for errors. If the row has errors, the <xref:System.Data.DataRow.GetColumnsInError%2A> method returns the array of columns with errors that can then be resolved. The <xref:System.Data.DataRow.ClearErrors%2A> method is then called to clear all errors.  \n  \n [!code-cs[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ha_1.cs)]\n [!code-vb[Classic WebData DataRow.HasErrors Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ha_1.vb)]"
  syntax:
    content: public bool HasErrors { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если строка содержит ошибку; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.HasErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  id: HasVersion(System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: HasVersion(DataRowVersion)
  nameWithType: DataRow.HasVersion(DataRowVersion)
  fullName: System.Data.DataRow.HasVersion(DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает значение, указывающее, существует ли указанная версия."
  remarks: "В разделе <xref:System.Data.DataRow.BeginEdit%2A>метод для получения дополнительной информации.</xref:System.Data.DataRow.BeginEdit%2A>"
  example:
  - "The following example uses the HasVersion method to determine whether the current value of a column and the proposed value are the same. If so, the edit is canceled. Otherwise, the <xref:System.Data.DataRow.AcceptChanges%2A> method is called to end the edit.  \n  \n [!code-vb[Classic WebData DataRow.HasVersion Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.ha_1.vb)]"
  syntax:
    content: public bool HasVersion (System.Data.DataRowVersion version);
    parameters:
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значений, определяющее версию строки."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если версия существует; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.HasVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn)
  id: IsNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(DataColumn)
  nameWithType: DataRow.IsNull(DataColumn)
  fullName: System.Data.DataRow.IsNull(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает значение, указывающее, является ли указанный <xref href=&quot;System.Data.DataColumn&quot;> </xref> содержит значение null."
  remarks: ''
  example:
  - "The following example prints each column of each row in each table of a <xref:System.Data.DataSet>. If the row is set to a null value, the value is not printed.  \n  \n [!code-vb[Classic WebData DataRow.IsNull2 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_2_1.vb)]"
  syntax:
    content: public bool IsNull (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если столбец содержит значение null; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Int32)
  id: IsNull(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(Int32)
  nameWithType: DataRow.IsNull(Int32)
  fullName: System.Data.DataRow.IsNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает значение, указывающее, содержит ли столбец по указанному индексу значение null."
  remarks: ''
  example:
  - "The following example changes the value of a column to a null value, and then uses the IsNull method to determine whether the value is null.  \n  \n [!code-vb[Classic WebData DataRow.IsNull Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_1_1.vb)]"
  syntax:
    content: public bool IsNull (int columnIndex);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс столбца."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если столбец содержит значение null; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.String)
  id: IsNull(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(String)
  nameWithType: DataRow.IsNull(String)
  fullName: System.Data.DataRow.IsNull(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает значение, указывающее, содержит ли именованный столбец значение null."
  remarks: ''
  example:
  - "The following example changes the value of a column to a null value, and then uses the <xref:System.Data.DataRow.IsNull%2A> method to determine whether the value is null.  \n  \n [!code-vb[Classic WebData DataRow.IsNull1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.is_0_1.vb)]"
  syntax:
    content: public bool IsNull (string columnName);
    parameters:
    - id: columnName
      type: System.String
      description: "Имя столбца."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если столбец содержит значение null; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  id: IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: IsNull(DataColumn,DataRowVersion)
  nameWithType: DataRow.IsNull(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.IsNull(DataColumn,DataRowVersion)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает значение, указывающее, является ли указанный <xref href=&quot;System.Data.DataColumn&quot;> </xref> и <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> содержит значение null."
  syntax:
    content: public bool IsNull (System.Data.DataColumn column, System.Data.DataRowVersion version);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значений, определяющее версию строки. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если столбец содержит значение null; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.DataRow.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Data.DataColumn)
  id: Item(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(DataColumn)
  nameWithType: DataRow.Item(DataColumn)
  fullName: System.Data.DataRow.Item(DataColumn)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает данные, хранящиеся в указанном <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если прямое редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  \n  \n [!code-vb[Classic WebData DataRow.this2 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_3_1.vb)]"
  syntax:
    content: public object this[System.Data.DataColumn column] { get; set; }
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "Объект <xref href=&quot;System.Data.DataColumn&quot;> </xref> , содержащий данные."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Столбец не принадлежит данной таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>column</code> is null."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Была предпринята попытка присвоить значение в удаленной строке."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Типы данных значения и столбца не совпадают."
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: DataRow.Item(Int32)
  fullName: System.Data.DataRow.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает данные, сохраненные в столбце, указанном по индексу."
  remarks: "Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если выполняется редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following examples demonstrate the use of the Item property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-vb[Classic WebData DataRow.this Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_0_1.vb)]\n [!code-cs[Classic WebData DataRow.this Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_0_1.cs)]"
  syntax:
    content: public object this[int columnIndex] { get; set; }
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс столбца."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Происходит при попытке задать значение в удаленной строке."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code> Аргумент находится вне допустимого диапазона."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Возникает, когда значение значение и новое значение <xref:System.Type>не соответствует <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> </xref:System.Type>"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.String)
  id: Item(System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(String)
  nameWithType: DataRow.Item(String)
  fullName: System.Data.DataRow.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает данные, сохраненные в столбце, указанном по имени."
  remarks: "Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если прямое редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following examples demonstrate the use of the <xref:System.Data.DataRow.Item%2A> property to get and set the value of a specific column index. The first example gets the value of the first column in any row that a user clicks in a <xref:System.Windows.Forms.DataGrid> control. The second sets a value passed as an argument to the method.  \n  \n [!code-vb[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_2_1.vb)]\n [!code-cs[Classic WebData DataRow.this1 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_2_1.cs)]"
  syntax:
    content: public object this[string columnName] { get; set; }
    parameters:
    - id: columnName
      type: System.String
      description: "Имя столбца."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Столбец, указанный <code> columnName </code> не удается найти."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Происходит при попытке задать значение в удаленной строке."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Возникает, когда значение значением и его <xref:System.Type>не соответствует <xref:System.Data.DataColumn.DataType*>.</xref:System.Data.DataColumn.DataType*> </xref:System.Type>"
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Возникает при попытке вставки значения null в столбец где <xref:System.Data.DataColumn.AllowDBNull*>имеет значение <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AllowDBNull*>"
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  id: Item(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(DataColumn,DataRowVersion)
  nameWithType: DataRow.Item(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.Item(DataColumn,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает указанную версию данных, хранящихся в указанном <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "`version` Не следует путать с <xref:System.Data.DataRow.RowState%2A>свойство.</xref:System.Data.DataRow.RowState%2A> `version` Аргумент описывает состояние данных, содержащихся в столбце относительно исходное значение столбца.       Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если прямое редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following example gets the current value of a clicked cell in the <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_6_1.cs)]\n [!code-vb[Classic WebData DataRow.this5 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_6_1.vb)]"
  syntax:
    content: public object this[System.Data.DataColumn column, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "Объект <xref href=&quot;System.Data.DataColumn&quot;> </xref> , содержащий сведения о столбце."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значений, определяющее версию строки, который будет. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Столбец не принадлежит к таблице."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> column </code> Аргумент содержит значение null."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строка не содержит эту версию данных."
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  id: Item(System.Int32,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(Int32,DataRowVersion)
  nameWithType: DataRow.Item(Int32,DataRowVersion)
  fullName: System.Data.DataRow.Item(Int32,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает данные, хранящиеся в столбце, указанном по индексу и версии извлекаемых данных."
  remarks: "Можно создать или обновить строку после вызова <xref:System.Data.DataRow.BeginEdit%2A>метода, аналогичным образом, <xref:System.Data.DataRow.EndEdit%2A>Чтобы зафиксировать изменения, необходимо вызвать метод</xref:System.Data.DataRow.EndEdit%2A> </xref:System.Data.DataRow.BeginEdit%2A> только После вызова метода <xref:System.Data.DataRow.EndEdit%2A>метод, и перед вызовом метода <xref:System.Data.DataRow.AcceptChanges%2A>метода внутренних представлений исходные и новые предложенные значения хранятся.</xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.EndEdit%2A> Таким образом пока не будет вызван <xref:System.Data.DataRow.AcceptChanges%2A>, можно использовать `version` аргумент, чтобы указать, какая версия значение столбца необходимо, либо `DataRowVersion.Original` или `DataRowVersion.Proposed`.</xref:System.Data.DataRow.AcceptChanges%2A> Но как только вы вызываете <xref:System.Data.DataRow.AcceptChanges%2A>метод, версия столбца перейдет к поиску `DataRowVersion.Original`.</xref:System.Data.DataRow.AcceptChanges%2A> Если строка является новой, можно также передать `DataRowVersion.Default` для параметра значение столбца по умолчанию. При передаче `DataRowVersion.Current`, свойство возвращает текущее значение, независимо от его версии.      Настроек [!NOTE] настроек <xref:System.Data.DataRow.BeginEdit%2A>метод неявно вызывается при изменении значения элемента управления с привязкой к данным или когда <xref:System.Data.DataRow>добавляется объект <xref:System.Data.DataRowCollection>; <xref:System.Data.DataRow.EndEdit%2A>метод неявно вызывается при вызове следующих методов: <xref:System.Data.DataRow.AcceptChanges%2A>метод <xref:System.Data.DataRow>объекта, <xref:System.Data.DataTable.AcceptChanges%2A>метод <xref:System.Data.DataTable>объекта, или <xref:System.Data.DataRow.CancelEdit%2A>метод.</xref:System.Data.DataRow.CancelEdit%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.AcceptChanges%2A> </xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A> </xref:System.Data.DataRow.EndEdit%2A> </xref:System.Data.DataRowCollection> </xref:System.Data.DataRow> </xref:System.Data.DataRow.BeginEdit%2A>       В отличие от этого <xref:System.Data.DataRowVersion>перечисления `Current` Возвращает версию данных после <xref:System.Data.DataRow.EndEdit%2A>был вызван метод.</xref:System.Data.DataRow.EndEdit%2A> </xref:System.Data.DataRowVersion>       `version` Аргумент не следует путать с <xref:System.Data.DataRow.RowState%2A>свойство.</xref:System.Data.DataRow.RowState%2A> `version` Аргумент описывает состояние данных, содержащихся в столбце относительно исходное значение столбца. <xref:System.Data.DataRow.RowState%2A>Свойство описывает состояние всей строки относительно родительского <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow.RowState%2A>       Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если прямое редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following example gets the current value of a column through the <xref:System.Data.DataRow.Item%2A> property of the <xref:System.Data.DataRow> object.  \n  \n [!code-vb[Classic WebData DataRow.this3 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_4_1.vb)]"
  syntax:
    content: public object this[int columnIndex, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс столбца."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значений, определяющее версию строки, который будет. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code> Аргумент находится вне допустимого диапазона."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Типы данных значения и столбца не совпадают."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строка не содержит эту версию данных."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Была предпринята попытка присвоить значение в удаленной строке."
  platform:
  - net462
- uid: System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  id: Item(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Item(String,DataRowVersion)
  nameWithType: DataRow.Item(String,DataRowVersion)
  fullName: System.Data.DataRow.Item(String,DataRowVersion)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Получает указанную версию данных, хранящихся в именованный столбец."
  remarks: "Версия не следует путать с <xref:System.Data.DataRow.RowState%2A>свойство.</xref:System.Data.DataRow.RowState%2A> `version` Аргумент описывает состояние данных, содержащихся в столбце относительно исходное значение столбца. <xref:System.Data.DataRow.RowState%2A>Свойство описывает состояние всей строки относительно родительского <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataRow.RowState%2A>       Если свойство задано, создается исключение при возникновении исключения в <xref:System.Data.DataTable.ColumnChanging>событий.</xref:System.Data.DataTable.ColumnChanging>       Если прямое редактирование, см. раздел <xref:System.Data.DataRow.EndEdit%2A>для исключений, которые могут быть созданы.</xref:System.Data.DataRow.EndEdit%2A>"
  example:
  - "The following example gets the current version of data at a clicked cell of a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-vb[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_5_1.vb)]\n [!code-cs[Classic WebData DataRow.this4 Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_5_1.cs)]"
  syntax:
    content: public object this[string columnName, System.Data.DataRowVersion version] { get; }
    parameters:
    - id: columnName
      type: System.String
      description: "Имя столбца."
    - id: version
      type: System.Data.DataRowVersion
      description: "Один из <xref href=&quot;System.Data.DataRowVersion&quot;> </xref> значений, определяющее версию строки, который будет. Possible values are <xref uid=&quot;langword_csharp_Default&quot; name=&quot;Default&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Original&quot; name=&quot;Original&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Current&quot; name=&quot;Current&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_Proposed&quot; name=&quot;Proposed&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "<xref:System.Object>, Содержащий данные.</xref:System.Object>"
  overload: System.Data.DataRow.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Столбец, указанный <code> columnName </code> не удается найти."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Типы данных значения и столбца не совпадают."
  - type: System.Data.VersionNotFoundException
    commentId: T:System.Data.VersionNotFoundException
    description: "Строка не содержит эту версию данных."
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Строка была удалена."
  platform:
  - net462
- uid: System.Data.DataRow.ItemArray
  id: ItemArray
  parent: System.Data.DataRow
  langs:
  - csharp
  name: ItemArray
  nameWithType: DataRow.ItemArray
  fullName: System.Data.DataRow.ItemArray
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает все значения для этой строки с помощью массива."
  remarks: "Это свойство можно использовать для задания или получения значений для этой строки с помощью массива. Если это свойство используется для задания значений, массив должен иметь тот же размер и порядок, что коллекция столбцов. Передача `null` ItemArray указывает, что значение не указано.       Пользователи могут создавать исключения в <xref:System.Data.DataTable.ColumnChanging>событий или <xref:System.Data.DataTable.RowChanging>событий.</xref:System.Data.DataTable.RowChanging> </xref:System.Data.DataTable.ColumnChanging>"
  example:
  - "The following examples show how to get and set values using the ItemArray property.  \n  \n [!code-vb[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.it_1_1.vb)]\n [!code-cs[Classic WebData DataRow.ItemArray Example#1](~/add/codesnippet/csharp/p-system.data.datarow.it_1_1.cs)]"
  syntax:
    content: public object[] ItemArray { get; set; }
    return:
      type: System.Object[]
      description: "Массив объектов типа <xref:System.Object>.</xref:System.Object>"
  overload: System.Data.DataRow.ItemArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Массив не должен превышать количество столбцов в таблице."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Значение в массиве не соответствует его <xref:System.Data.DataColumn.DataType*>в его соответствующем <xref href=&quot;System.Data.DataColumn&quot;> </xref>.</xref:System.Data.DataColumn.DataType*>"
  - type: System.Data.ConstraintException
    commentId: T:System.Data.ConstraintException
    description: "Редактирование нарушило ограничение."
  - type: System.Data.ReadOnlyException
    commentId: T:System.Data.ReadOnlyException
    description: "Редактирование пытается изменить значение столбца только для чтения."
  - type: System.Data.NoNullAllowedException
    commentId: T:System.Data.NoNullAllowedException
    description: "Редактирование пытается поместить нулевое значение в столбце где <xref:System.Data.DataColumn.AllowDBNull*>из <xref href=&quot;System.Data.DataColumn&quot;> </xref> объект <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Data.DataColumn.AllowDBNull*>"
  - type: System.Data.DeletedRowInaccessibleException
    commentId: T:System.Data.DeletedRowInaccessibleException
    description: "Строка была удалена."
  platform:
  - net462
- uid: System.Data.DataRow.RejectChanges
  id: RejectChanges
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RejectChanges()
  nameWithType: DataRow.RejectChanges()
  fullName: System.Data.DataRow.RejectChanges()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Отклоняет все изменения, внесенные в строку с момента <xref:System.Data.DataRow.AcceptChanges*>последнего вызова.</xref:System.Data.DataRow.AcceptChanges*>"
  remarks: "При вызове метода RejectChanges <xref:System.Data.DataRow.CancelEdit%2A>вызывается явно, чтобы отменить все изменения.</xref:System.Data.DataRow.CancelEdit%2A> Если <xref:System.Data.DataRow.RowState%2A>удален или изменен, возвращается в предыдущее значение, и <xref:System.Data.DataRow.RowState%2A>становится без изменений.</xref:System.Data.DataRow.RowState%2A> </xref:System.Data.DataRow.RowState%2A> Если <xref:System.Data.DataRow.RowState%2A>добавляется, строка удаляется.</xref:System.Data.DataRow.RowState%2A>"
  example:
  - "The following example creates a simple <xref:System.Data.DataTable> with 2 columns and 10 rows. After several <xref:System.Data.DataRow> items are deleted with the <xref:System.Data.DataRow.Delete%2A> method, one of the rows is undeleted by invoking RejectChanges.  \n  \n [!code-vb[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.re_1.vb)]\n [!code-cs[Classic WebData DataRow.Delete Example#1](~/add/codesnippet/csharp/m-system.data.datarow.re_1.cs)]"
  syntax:
    content: public void RejectChanges ();
    parameters: []
  overload: System.Data.DataRow.RejectChanges*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Эта строка не принадлежит к таблице."
  platform:
  - net462
- uid: System.Data.DataRow.RowError
  id: RowError
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RowError
  nameWithType: DataRow.RowError
  fullName: System.Data.DataRow.RowError
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает или задает пользовательское описание ошибки для строки."
  remarks: "Использует <xref:System.Data.DataRow.HasErrors%2A>свойство, чтобы определить, является ли <xref:System.Data.DataRow>содержит ошибки.</xref:System.Data.DataRow> </xref:System.Data.DataRow.HasErrors%2A>"
  example:
  - "The following example sets error text for ten rows of a table displayed in a <xref:System.Windows.Forms.DataGrid> control.  \n  \n [!code-cs[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_1_1.cs)]\n [!code-vb[Classic WebData DataRow.RowError Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_1_1.vb)]"
  syntax:
    content: public string RowError { get; set; }
    return:
      type: System.String
      description: "Текст, описывающий ошибку."
  overload: System.Data.DataRow.RowError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.RowState
  id: RowState
  parent: System.Data.DataRow
  langs:
  - csharp
  name: RowState
  nameWithType: DataRow.RowState
  fullName: System.Data.DataRow.RowState
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает текущее состояние строки по отношению к его связь с <xref href=&quot;System.Data.DataRowCollection&quot;> </xref>."
  remarks: 'Значение свойства RowState зависит от двух факторов: вид операции была выполнена в строке и необходимость <xref:System.Data.DataRow.AcceptChanges%2A>вызова <xref:System.Data.DataRow>.</xref:System.Data.DataRow> </xref:System.Data.DataRow.AcceptChanges%2A>'
  example:
  - "The following example first creates a new <xref:System.Data.DataTable> with one column, and then creates a single <xref:System.Data.DataRow>. As the <xref:System.Data.DataRow> is created, added, modified, and deleted, its RowState is printed.  \n  \n [!code-vb[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ro_0_1.vb)]\n [!code-cs[Classic WebData DataRow.RowState Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ro_0_1.cs)]"
  syntax:
    content: public System.Data.DataRowState RowState { get; }
    return:
      type: System.Data.DataRowState
      description: "Один из <xref href=&quot;System.Data.DataRowState&quot;> </xref> значения."
  overload: System.Data.DataRow.RowState*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetAdded
  id: SetAdded
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetAdded()
  nameWithType: DataRow.SetAdded()
  fullName: System.Data.DataRow.SetAdded()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Changes the <xref:System.Data.DataRow.Rowstate*> of a <xref href=&quot;System.Data.DataRow&quot;></xref> to <xref uid=&quot;langword_csharp_Added&quot; name=&quot;Added&quot; href=&quot;&quot;></xref>.</xref:System.Data.DataRow.Rowstate*>"
  remarks: "Изменения <xref:System.Data.DataRow.RowState%2A>из <xref:System.Data.DataRow>для `Added`.</xref:System.Data.DataRow> </xref:System.Data.DataRow.RowState%2A> Если текущая строка не является одним `Unchanged` или `Added` состоянии, он выдает <xref:System.InvalidOperationException>с сообщением, `SetAdded` может быть вызвана только на `DataRow` экземпляр, на котором `RowState` — `Unchanged`.</xref:System.InvalidOperationException>"
  syntax:
    content: public void SetAdded ();
    parameters: []
  overload: System.Data.DataRow.SetAdded*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  id: SetColumnError(System.Data.DataColumn,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(DataColumn,String)
  nameWithType: DataRow.SetColumnError(DataColumn,String)
  fullName: System.Data.DataRow.SetColumnError(DataColumn,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает описание ошибки для столбца, указанного как <xref href=&quot;System.Data.DataColumn&quot;> </xref>."
  remarks: "Чтобы проверить описания ошибок, используйте <xref:System.Data.DataRow.GetColumnError%2A>метод.</xref:System.Data.DataRow.GetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>свойство.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>       Если `null` или пустая строка передается в качестве `error` параметр <xref:System.Data.DataRow>ведет себя как если бы ошибки не было задано и <xref:System.Data.DataRow.HasErrors%2A>свойство будет возвращать значение false.</xref:System.Data.DataRow.HasErrors%2A> </xref:System.Data.DataRow>       Чтобы задать пользовательское описание ошибки для всей строки, используйте <xref:System.Data.DataRow.RowError%2A>свойство.</xref:System.Data.DataRow.RowError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_3_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_3_1.vb)]"
  syntax:
    content: public void SetColumnError (System.Data.DataColumn column, string error);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "<xref href=&quot;System.Data.DataColumn&quot;> </xref> Для установки описания ошибки."
    - id: error
      type: System.String
      description: "Описание ошибки."
  overload: System.Data.DataRow.SetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.Int32,System.String)
  id: SetColumnError(System.Int32,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(Int32,String)
  nameWithType: DataRow.SetColumnError(Int32,String)
  fullName: System.Data.DataRow.SetColumnError(Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает описание ошибки для столбца, указанного по индексу."
  remarks: "Метод используется для задания пользовательских описаний ошибок на указанные столбцы. Можно использовать <xref:System.Windows.Forms.ErrorProvider>управления, чтобы отобразить текст сообщения об ошибке.</xref:System.Windows.Forms.ErrorProvider>       Чтобы проверить описания ошибок, используйте <xref:System.Data.DataRow.GetColumnError%2A>метод.</xref:System.Data.DataRow.GetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>свойство.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>       Если `null` или пустая строка передается в качестве `error` параметр <xref:System.Data.DataRow>ведет себя как если бы ошибки не было задано и <xref:System.Data.DataRow.HasErrors%2A>свойство будет возвращать значение false.</xref:System.Data.DataRow.HasErrors%2A> </xref:System.Data.DataRow>       Чтобы задать пользовательское описание ошибки для всей строки, используйте <xref:System.Data.DataRow.RowError%2A>свойство.</xref:System.Data.DataRow.RowError%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>       Чтобы задать текст ошибки, применимый для всей строки, задайте <xref:System.Data.DataRow.RowError%2A>свойство.</xref:System.Data.DataRow.RowError%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_0_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_0_1.vb)]"
  syntax:
    content: public void SetColumnError (int columnIndex, string error);
    parameters:
    - id: columnIndex
      type: System.Int32
      description: "Отсчитываемый от нуля индекс столбца."
    - id: error
      type: System.String
      description: "Описание ошибки."
  overload: System.Data.DataRow.SetColumnError*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> columnIndex </code> Аргумент находится вне допустимого диапазона"
  platform:
  - net462
- uid: System.Data.DataRow.SetColumnError(System.String,System.String)
  id: SetColumnError(System.String,System.String)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetColumnError(String,String)
  nameWithType: DataRow.SetColumnError(String,String)
  fullName: System.Data.DataRow.SetColumnError(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает описание ошибки для столбца, указанного по имени."
  remarks: "Имя столбца задается с помощью <xref:System.Data.DataColumn.ColumnName%2A>Свойства <xref:System.Data.DataColumn>класса.</xref:System.Data.DataColumn> </xref:System.Data.DataColumn.ColumnName%2A>       Чтобы проверить описания ошибок, используйте <xref:System.Data.DataRow.GetColumnError%2A>метод.</xref:System.Data.DataRow.GetColumnError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>свойство.</xref:System.Data.DataRow.HasErrors%2A> Следовательно, можно использовать <xref:System.Data.DataRow.GetColumnsInError%2A>метод для извлечения всех столбцов с ошибками.</xref:System.Data.DataRow.GetColumnsInError%2A>       Если `null` или пустая строка передается в качестве `error` параметр <xref:System.Data.DataRow>ведет себя как если бы ошибки не было задано и <xref:System.Data.DataRow.HasErrors%2A>свойство будет возвращать значение false.</xref:System.Data.DataRow.HasErrors%2A> </xref:System.Data.DataRow>       Чтобы задать пользовательское описание ошибки для всей строки, используйте <xref:System.Data.DataRow.RowError%2A>свойство.</xref:System.Data.DataRow.RowError%2A>       Чтобы определить, существуют ли все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.HasErrors%2A>метод.</xref:System.Data.DataRow.HasErrors%2A>       Чтобы очистить все ошибки в коллекции столбцов, используйте <xref:System.Data.DataRow.ClearErrors%2A>метод.</xref:System.Data.DataRow.ClearErrors%2A>"
  example:
  - "The following example sets an error description for a specified <xref:System.Data.DataRow>.  \n  \n [!code-cs[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/csharp/m-system.data.datarow.se_1_1.cs)]\n [!code-vb[Classic WebData DataRow.SetColumnError Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_1_1.vb)]"
  syntax:
    content: public void SetColumnError (string columnName, string error);
    parameters:
    - id: columnName
      type: System.String
      description: "Имя столбца."
    - id: error
      type: System.String
      description: "Описание ошибки."
  overload: System.Data.DataRow.SetColumnError*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetModified
  id: SetModified
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetModified()
  nameWithType: DataRow.SetModified()
  fullName: System.Data.DataRow.SetModified()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Changes the <xref:System.Data.DataRow.Rowstate*> of a <xref href=&quot;System.Data.DataRow&quot;></xref> to <xref uid=&quot;langword_csharp_Modified&quot; name=&quot;Modified&quot; href=&quot;&quot;></xref>.</xref:System.Data.DataRow.Rowstate*>"
  remarks: "Изменения <xref:System.Data.DataRow.Rowstate%2A>из <xref:System.Data.DataRow>для `Modified`.</xref:System.Data.DataRow> </xref:System.Data.DataRow.Rowstate%2A> Если текущая строка не является одним `Unchanged` или `Added` состоянии, он выдает <xref:System.InvalidOperationException>с сообщением, `SetModified` может быть вызвана только на `DataRow` экземпляр, на котором `RowState` — `Unchanged`.</xref:System.InvalidOperationException>"
  syntax:
    content: public void SetModified ();
    parameters: []
  overload: System.Data.DataRow.SetModified*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetNull(System.Data.DataColumn)
  id: SetNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetNull(DataColumn)
  nameWithType: DataRow.SetNull(DataColumn)
  fullName: System.Data.DataRow.SetNull(DataColumn)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает значение указанного <xref href=&quot;System.Data.DataColumn&quot;> </xref> со значением null."
  remarks: "Используйте <xref:System.Data.DataRow.IsNull%2A>метод, чтобы определить, содержит ли столбец значение null.</xref:System.Data.DataRow.IsNull%2A>"
  syntax:
    content: protected void SetNull (System.Data.DataColumn column);
    parameters:
    - id: column
      type: System.Data.DataColumn
      description: "A <xref href=&quot;System.Data.DataColumn&quot;></xref>."
  overload: System.Data.DataRow.SetNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow)
  id: SetParentRow(System.Data.DataRow)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetParentRow(DataRow)
  nameWithType: DataRow.SetParentRow(DataRow)
  fullName: System.Data.DataRow.SetParentRow(DataRow)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с указанным новым родительским <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  syntax:
    content: public void SetParentRow (System.Data.DataRow parentRow);
    parameters:
    - id: parentRow
      type: System.Data.DataRow
      description: "Новый родительский <xref href=&quot;System.Data.DataRow&quot;> </xref>."
  overload: System.Data.DataRow.SetParentRow*
  exceptions: []
  platform:
  - net462
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  id: SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  parent: System.Data.DataRow
  langs:
  - csharp
  name: SetParentRow(DataRow,DataRelation)
  nameWithType: DataRow.SetParentRow(DataRow,DataRelation)
  fullName: System.Data.DataRow.SetParentRow(DataRow,DataRelation)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Задает родительскую строку <xref href=&quot;System.Data.DataRow&quot;> </xref> с указанным новым родительским <xref href=&quot;System.Data.DataRow&quot;> </xref> и <xref href=&quot;System.Data.DataRelation&quot;> </xref>."
  remarks: ''
  example:
  - "The following example sets the parent row of a specific child row.  \n  \n [!code-vb[Classic WebData DataRow.SetParentRow1 Example#1](~/add/codesnippet/visualbasic/m-system.data.datarow.se_2_1.vb)]"
  syntax:
    content: public void SetParentRow (System.Data.DataRow parentRow, System.Data.DataRelation relation);
    parameters:
    - id: parentRow
      type: System.Data.DataRow
      description: "Новый родительский <xref href=&quot;System.Data.DataRow&quot;> </xref>."
    - id: relation
      type: System.Data.DataRelation
      description: "Отношение <xref href=&quot;System.Data.DataRelation&quot;> </xref> для использования."
  overload: System.Data.DataRow.SetParentRow*
  exceptions:
  - type: System.Data.RowNotInTableException
    commentId: T:System.Data.RowNotInTableException
    description: "Одна из строк не принадлежит к таблице"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Одна из строк является <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Отношение не принадлежит <xref href=&quot;System.Data.DataRelationCollection&quot;> </xref> из <xref href=&quot;System.Data.DataSet&quot;> </xref> объекта."
  - type: System.Data.InvalidConstraintException
    commentId: T:System.Data.InvalidConstraintException
    description: "Дочерние отношения <xref href=&quot;System.Data.DataTable&quot;> </xref> не принадлежит этой строки таблицы."
  platform:
  - net462
- uid: System.Data.DataRow.Table
  id: Table
  parent: System.Data.DataRow
  langs:
  - csharp
  name: Table
  nameWithType: DataRow.Table
  fullName: System.Data.DataRow.Table
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Возвращает <xref href=&quot;System.Data.DataTable&quot;> </xref> для которой эта строка имеет схему."
  remarks: "Объект <xref:System.Data.DataRow>не должен обязательно принадлежать любой таблицы коллекции строк.</xref:System.Data.DataRow> Это происходит, когда <xref:System.Data.DataRow>был создан, но не добавлен <xref:System.Data.DataRowCollection>.</xref:System.Data.DataRowCollection> </xref:System.Data.DataRow> Если <xref:System.Data.DataRow.RowState%2A>возвращает `DataRowState.Detached`, строка не существует в коллекции.</xref:System.Data.DataRow.RowState%2A>"
  example:
  - "The following example uses the Table property to return a reference to the columns collection of the <xref:System.Data.DataTable>.  \n  \n [!code-cs[Classic WebData DataRow.Table Example#1](~/add/codesnippet/csharp/p-system.data.datarow.ta_1.cs)]\n [!code-vb[Classic WebData DataRow.Table Example#1](~/add/codesnippet/visualbasic/p-system.data.datarow.ta_1.vb)]"
  syntax:
    content: public System.Data.DataTable Table { get; }
    return:
      type: System.Data.DataTable
      description: "<xref href=&quot;System.Data.DataTable&quot;> </xref> К которой принадлежит строка."
  overload: System.Data.DataRow.Table*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.RowNotInTableException
  parent: System.Data
  isExternal: false
  name: RowNotInTableException
  nameWithType: RowNotInTableException
  fullName: System.Data.RowNotInTableException
- uid: System.Data.InRowChangingEventException
  parent: System.Data
  isExternal: false
  name: InRowChangingEventException
  nameWithType: InRowChangingEventException
  fullName: System.Data.InRowChangingEventException
- uid: System.Data.DeletedRowInaccessibleException
  parent: System.Data
  isExternal: false
  name: DeletedRowInaccessibleException
  nameWithType: DeletedRowInaccessibleException
  fullName: System.Data.DeletedRowInaccessibleException
- uid: System.Data.ConstraintException
  parent: System.Data
  isExternal: false
  name: ConstraintException
  nameWithType: ConstraintException
  fullName: System.Data.ConstraintException
- uid: System.Data.ReadOnlyException
  parent: System.Data
  isExternal: false
  name: ReadOnlyException
  nameWithType: ReadOnlyException
  fullName: System.Data.ReadOnlyException
- uid: System.Data.NoNullAllowedException
  parent: System.Data
  isExternal: false
  name: NoNullAllowedException
  nameWithType: NoNullAllowedException
  fullName: System.Data.NoNullAllowedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.VersionNotFoundException
  parent: System.Data
  isExternal: false
  name: VersionNotFoundException
  nameWithType: VersionNotFoundException
  fullName: System.Data.VersionNotFoundException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.DataException
  parent: System.Data
  isExternal: false
  name: DataException
  nameWithType: DataException
  fullName: System.Data.DataException
- uid: System.Data.InvalidConstraintException
  parent: System.Data
  isExternal: false
  name: InvalidConstraintException
  nameWithType: InvalidConstraintException
  fullName: System.Data.InvalidConstraintException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Data.DataRow.#ctor(System.Data.DataRowBuilder)
  parent: System.Data.DataRow
  isExternal: false
  name: DataRow(DataRowBuilder)
  nameWithType: DataRow.DataRow(DataRowBuilder)
  fullName: System.Data.DataRow.DataRow(DataRowBuilder)
- uid: System.Data.DataRowBuilder
  parent: System.Data
  isExternal: false
  name: DataRowBuilder
  nameWithType: DataRowBuilder
  fullName: System.Data.DataRowBuilder
- uid: System.Data.DataRow.AcceptChanges
  parent: System.Data.DataRow
  isExternal: false
  name: AcceptChanges()
  nameWithType: DataRow.AcceptChanges()
  fullName: System.Data.DataRow.AcceptChanges()
- uid: System.Data.DataRow.BeginEdit
  parent: System.Data.DataRow
  isExternal: false
  name: BeginEdit()
  nameWithType: DataRow.BeginEdit()
  fullName: System.Data.DataRow.BeginEdit()
- uid: System.Data.DataRow.CancelEdit
  parent: System.Data.DataRow
  isExternal: false
  name: CancelEdit()
  nameWithType: DataRow.CancelEdit()
  fullName: System.Data.DataRow.CancelEdit()
- uid: System.Data.DataRow.ClearErrors
  parent: System.Data.DataRow
  isExternal: false
  name: ClearErrors()
  nameWithType: DataRow.ClearErrors()
  fullName: System.Data.DataRow.ClearErrors()
- uid: System.Data.DataRow.Delete
  parent: System.Data.DataRow
  isExternal: false
  name: Delete()
  nameWithType: DataRow.Delete()
  fullName: System.Data.DataRow.Delete()
- uid: System.Data.DataRow.EndEdit
  parent: System.Data.DataRow
  isExternal: false
  name: EndEdit()
  nameWithType: DataRow.EndEdit()
  fullName: System.Data.DataRow.EndEdit()
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(DataRelation)
  nameWithType: DataRow.GetChildRows(DataRelation)
  fullName: System.Data.DataRow.GetChildRows(DataRelation)
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRelation
  parent: System.Data
  isExternal: false
  name: DataRelation
  nameWithType: DataRelation
  fullName: System.Data.DataRelation
- uid: System.Data.DataRow.GetChildRows(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(String)
  nameWithType: DataRow.GetChildRows(String)
  fullName: System.Data.DataRow.GetChildRows(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetChildRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(DataRelation,DataRowVersion)
- uid: System.Data.DataRowVersion
  parent: System.Data
  isExternal: false
  name: DataRowVersion
  nameWithType: DataRowVersion
  fullName: System.Data.DataRowVersion
- uid: System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows(String,DataRowVersion)
  nameWithType: DataRow.GetChildRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetChildRows(String,DataRowVersion)
- uid: System.Data.DataRow.GetColumnError(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(DataColumn)
  nameWithType: DataRow.GetColumnError(DataColumn)
  fullName: System.Data.DataRow.GetColumnError(DataColumn)
- uid: System.Data.DataColumn
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn
- uid: System.Data.DataRow.GetColumnError(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(Int32)
  nameWithType: DataRow.GetColumnError(Int32)
  fullName: System.Data.DataRow.GetColumnError(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataRow.GetColumnError(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError(String)
  nameWithType: DataRow.GetColumnError(String)
  fullName: System.Data.DataRow.GetColumnError(String)
- uid: System.Data.DataRow.GetColumnsInError
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnsInError()
  nameWithType: DataRow.GetColumnsInError()
  fullName: System.Data.DataRow.GetColumnsInError()
- uid: System.Data.DataColumn[]
  parent: System.Data
  isExternal: false
  name: DataColumn
  nameWithType: DataColumn
  fullName: System.Data.DataColumn[]
  spec.csharp:
  - uid: System.Data.DataColumn
    name: DataColumn
    nameWithType: DataColumn
    fullName: DataColumn[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(DataRelation)
  nameWithType: DataRow.GetParentRow(DataRelation)
  fullName: System.Data.DataRow.GetParentRow(DataRelation)
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRow.GetParentRow(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(String)
  nameWithType: DataRow.GetParentRow(String)
  fullName: System.Data.DataRow.GetParentRow(String)
- uid: System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRow(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(DataRelation,DataRowVersion)
- uid: System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow(String,DataRowVersion)
  nameWithType: DataRow.GetParentRow(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRow(String,DataRowVersion)
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(DataRelation)
  nameWithType: DataRow.GetParentRows(DataRelation)
  fullName: System.Data.DataRow.GetParentRows(DataRelation)
- uid: System.Data.DataRow.GetParentRows(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(String)
  nameWithType: DataRow.GetParentRows(String)
  fullName: System.Data.DataRow.GetParentRows(String)
- uid: System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(DataRelation,DataRowVersion)
  nameWithType: DataRow.GetParentRows(DataRelation,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(DataRelation,DataRowVersion)
- uid: System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows(String,DataRowVersion)
  nameWithType: DataRow.GetParentRows(String,DataRowVersion)
  fullName: System.Data.DataRow.GetParentRows(String,DataRowVersion)
- uid: System.Data.DataRow.HasErrors
  parent: System.Data.DataRow
  isExternal: false
  name: HasErrors
  nameWithType: DataRow.HasErrors
  fullName: System.Data.DataRow.HasErrors
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.DataRow.HasVersion(System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: HasVersion(DataRowVersion)
  nameWithType: DataRow.HasVersion(DataRowVersion)
  fullName: System.Data.DataRow.HasVersion(DataRowVersion)
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(DataColumn)
  nameWithType: DataRow.IsNull(DataColumn)
  fullName: System.Data.DataRow.IsNull(DataColumn)
- uid: System.Data.DataRow.IsNull(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(Int32)
  nameWithType: DataRow.IsNull(Int32)
  fullName: System.Data.DataRow.IsNull(Int32)
- uid: System.Data.DataRow.IsNull(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(String)
  nameWithType: DataRow.IsNull(String)
  fullName: System.Data.DataRow.IsNull(String)
- uid: System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull(DataColumn,DataRowVersion)
  nameWithType: DataRow.IsNull(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.IsNull(DataColumn,DataRowVersion)
- uid: System.Data.DataRow.Item(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(DataColumn)
  nameWithType: DataRow.Item(DataColumn)
  fullName: System.Data.DataRow.Item(DataColumn)
- uid: System.Data.DataRow.Item(System.Int32)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(Int32)
  nameWithType: DataRow.Item(Int32)
  fullName: System.Data.DataRow.Item(Int32)
- uid: System.Data.DataRow.Item(System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(String)
  nameWithType: DataRow.Item(String)
  fullName: System.Data.DataRow.Item(String)
- uid: System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(DataColumn,DataRowVersion)
  nameWithType: DataRow.Item(DataColumn,DataRowVersion)
  fullName: System.Data.DataRow.Item(DataColumn,DataRowVersion)
- uid: System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(Int32,DataRowVersion)
  nameWithType: DataRow.Item(Int32,DataRowVersion)
  fullName: System.Data.DataRow.Item(Int32,DataRowVersion)
- uid: System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)
  parent: System.Data.DataRow
  isExternal: false
  name: Item(String,DataRowVersion)
  nameWithType: DataRow.Item(String,DataRowVersion)
  fullName: System.Data.DataRow.Item(String,DataRowVersion)
- uid: System.Data.DataRow.ItemArray
  parent: System.Data.DataRow
  isExternal: false
  name: ItemArray
  nameWithType: DataRow.ItemArray
  fullName: System.Data.DataRow.ItemArray
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.DataRow.RejectChanges
  parent: System.Data.DataRow
  isExternal: false
  name: RejectChanges()
  nameWithType: DataRow.RejectChanges()
  fullName: System.Data.DataRow.RejectChanges()
- uid: System.Data.DataRow.RowError
  parent: System.Data.DataRow
  isExternal: false
  name: RowError
  nameWithType: DataRow.RowError
  fullName: System.Data.DataRow.RowError
- uid: System.Data.DataRow.RowState
  parent: System.Data.DataRow
  isExternal: false
  name: RowState
  nameWithType: DataRow.RowState
  fullName: System.Data.DataRow.RowState
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.DataRow.SetAdded
  parent: System.Data.DataRow
  isExternal: false
  name: SetAdded()
  nameWithType: DataRow.SetAdded()
  fullName: System.Data.DataRow.SetAdded()
- uid: System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(DataColumn,String)
  nameWithType: DataRow.SetColumnError(DataColumn,String)
  fullName: System.Data.DataRow.SetColumnError(DataColumn,String)
- uid: System.Data.DataRow.SetColumnError(System.Int32,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(Int32,String)
  nameWithType: DataRow.SetColumnError(Int32,String)
  fullName: System.Data.DataRow.SetColumnError(Int32,String)
- uid: System.Data.DataRow.SetColumnError(System.String,System.String)
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError(String,String)
  nameWithType: DataRow.SetColumnError(String,String)
  fullName: System.Data.DataRow.SetColumnError(String,String)
- uid: System.Data.DataRow.SetModified
  parent: System.Data.DataRow
  isExternal: false
  name: SetModified()
  nameWithType: DataRow.SetModified()
  fullName: System.Data.DataRow.SetModified()
- uid: System.Data.DataRow.SetNull(System.Data.DataColumn)
  parent: System.Data.DataRow
  isExternal: false
  name: SetNull(DataColumn)
  nameWithType: DataRow.SetNull(DataColumn)
  fullName: System.Data.DataRow.SetNull(DataColumn)
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow)
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow(DataRow)
  nameWithType: DataRow.SetParentRow(DataRow)
  fullName: System.Data.DataRow.SetParentRow(DataRow)
- uid: System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow(DataRow,DataRelation)
  nameWithType: DataRow.SetParentRow(DataRow,DataRelation)
  fullName: System.Data.DataRow.SetParentRow(DataRow,DataRelation)
- uid: System.Data.DataRow.Table
  parent: System.Data.DataRow
  isExternal: false
  name: Table
  nameWithType: DataRow.Table
  fullName: System.Data.DataRow.Table
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataRow.#ctor*
  parent: System.Data.DataRow
  isExternal: false
  name: DataRow
  nameWithType: DataRow.DataRow
- uid: System.Data.DataRow.AcceptChanges*
  parent: System.Data.DataRow
  isExternal: false
  name: AcceptChanges
  nameWithType: DataRow.AcceptChanges
- uid: System.Data.DataRow.BeginEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: BeginEdit
  nameWithType: DataRow.BeginEdit
- uid: System.Data.DataRow.CancelEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: CancelEdit
  nameWithType: DataRow.CancelEdit
- uid: System.Data.DataRow.ClearErrors*
  parent: System.Data.DataRow
  isExternal: false
  name: ClearErrors
  nameWithType: DataRow.ClearErrors
- uid: System.Data.DataRow.Delete*
  parent: System.Data.DataRow
  isExternal: false
  name: Delete
  nameWithType: DataRow.Delete
- uid: System.Data.DataRow.EndEdit*
  parent: System.Data.DataRow
  isExternal: false
  name: EndEdit
  nameWithType: DataRow.EndEdit
- uid: System.Data.DataRow.GetChildRows*
  parent: System.Data.DataRow
  isExternal: false
  name: GetChildRows
  nameWithType: DataRow.GetChildRows
- uid: System.Data.DataRow.GetColumnError*
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnError
  nameWithType: DataRow.GetColumnError
- uid: System.Data.DataRow.GetColumnsInError*
  parent: System.Data.DataRow
  isExternal: false
  name: GetColumnsInError
  nameWithType: DataRow.GetColumnsInError
- uid: System.Data.DataRow.GetParentRow*
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRow
  nameWithType: DataRow.GetParentRow
- uid: System.Data.DataRow.GetParentRows*
  parent: System.Data.DataRow
  isExternal: false
  name: GetParentRows
  nameWithType: DataRow.GetParentRows
- uid: System.Data.DataRow.HasErrors*
  parent: System.Data.DataRow
  isExternal: false
  name: HasErrors
  nameWithType: DataRow.HasErrors
- uid: System.Data.DataRow.HasVersion*
  parent: System.Data.DataRow
  isExternal: false
  name: HasVersion
  nameWithType: DataRow.HasVersion
- uid: System.Data.DataRow.IsNull*
  parent: System.Data.DataRow
  isExternal: false
  name: IsNull
  nameWithType: DataRow.IsNull
- uid: System.Data.DataRow.Item*
  parent: System.Data.DataRow
  isExternal: false
  name: Item
  nameWithType: DataRow.Item
- uid: System.Data.DataRow.ItemArray*
  parent: System.Data.DataRow
  isExternal: false
  name: ItemArray
  nameWithType: DataRow.ItemArray
- uid: System.Data.DataRow.RejectChanges*
  parent: System.Data.DataRow
  isExternal: false
  name: RejectChanges
  nameWithType: DataRow.RejectChanges
- uid: System.Data.DataRow.RowError*
  parent: System.Data.DataRow
  isExternal: false
  name: RowError
  nameWithType: DataRow.RowError
- uid: System.Data.DataRow.RowState*
  parent: System.Data.DataRow
  isExternal: false
  name: RowState
  nameWithType: DataRow.RowState
- uid: System.Data.DataRow.SetAdded*
  parent: System.Data.DataRow
  isExternal: false
  name: SetAdded
  nameWithType: DataRow.SetAdded
- uid: System.Data.DataRow.SetColumnError*
  parent: System.Data.DataRow
  isExternal: false
  name: SetColumnError
  nameWithType: DataRow.SetColumnError
- uid: System.Data.DataRow.SetModified*
  parent: System.Data.DataRow
  isExternal: false
  name: SetModified
  nameWithType: DataRow.SetModified
- uid: System.Data.DataRow.SetNull*
  parent: System.Data.DataRow
  isExternal: false
  name: SetNull
  nameWithType: DataRow.SetNull
- uid: System.Data.DataRow.SetParentRow*
  parent: System.Data.DataRow
  isExternal: false
  name: SetParentRow
  nameWithType: DataRow.SetParentRow
- uid: System.Data.DataRow.Table*
  parent: System.Data.DataRow
  isExternal: false
  name: Table
  nameWithType: DataRow.Table
