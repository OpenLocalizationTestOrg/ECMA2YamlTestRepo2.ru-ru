### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeConverter
  id: TypeConverter
  children:
  - System.ComponentModel.TypeConverter.#ctor
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  langs:
  - csharp
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
  type: Class
  summary: "Предоставляет унифицированный способ преобразования типов значений в другие типы, а также для доступа к стандартным значениям и вложенным свойствам."
  remarks: "Наиболее распространенный тип преобразователя то, которое преобразует текстовое представление и обратно. Преобразователь типа для класса привязан к классу с <xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute> Если этот атрибут переопределен, все классы, наследующие от этого класса использовать один и тот же преобразователь типа в качестве базового класса.      Настроек [!NOTE] настроек для системных целей общий тип, не напрямую обращаться к преобразователя типов. Вместо этого доступ к конвертер с помощью <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> Дополнительные сведения см. Примеры кода, приведенные в разделе.       **Примечание** для нужд XAML, обработчик XAML ищет <xref:System.ComponentModel.TypeConverterAttribute>напрямую, а не через <xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeConverterAttribute> Для случаев, когда необходимо <xref:System.ComponentModel.TypeDescriptor>из кода обработчика, или где создавать общие экземпляры в WPF ресурсы, допускается создание непосредственно, без указания <xref:System.ComponentModel.TypeDescriptor>или других систем отражения и типов поддержки.</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor>       Классы, производные от TypeConverter, часто упоминаются в рамках как обработчик XAML преобразует значение текста инициализации или атрибут из разметки (которая по своей природе является строкой) и создает объект для представления времени выполнения. Авторы пользовательского типа, которые собираетесь поддерживать поведение преобразования типов для XAML обычно реализуют класс TypeConverter, который поддерживает собственные уникальные `ConvertFrom` поведение из строки. Это поведение обеспечивает преобразования типов из строк, предоставленных в качестве значения атрибута XAML и предоставляет обработчик XAML с поддержкой, необходимой для создания объекта из строки, чтобы объект могут быть созданы в графе проанализированного объекта. Пользовательские типы или члены типов пользовательских обозначаются применение <xref:System.ComponentModel.TypeConverterAttribute>определений, с помощью атрибута ссылаются на пользовательскую реализацию TypeConverter.</xref:System.ComponentModel.TypeConverterAttribute> Дополнительные сведения см. в разделе [преобразователи типов для XAML Обзор](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example shows how to create an instance of a type converter and bind it to a class. The class implementing the converter, `MyClassConverter`, must inherit from the TypeConverter class.  \n  \n [!code-cpp[Classic TypeConverter Example#1](~/add/codesnippet/cpp/t-system.componentmodel._43_1.cpp)]\n [!code-cs[Classic TypeConverter Example#1](~/add/codesnippet/csharp/t-system.componentmodel._43_1.cs)]\n [!code-vb[Classic TypeConverter Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._43_1.vb)]  \n  \n When you have a property that has an enumeration, check to see whether an enumeration value is valid before setting the property. The next code example requires that an enumeration called `MyPropertyEnum` has been declared.  \n  \n [!code-cpp[Classic TypeConverter Example#2](~/add/codesnippet/cpp/t-system.componentmodel._43_2.cpp)]\n [!code-cs[Classic TypeConverter Example#2](~/add/codesnippet/csharp/t-system.componentmodel._43_2.cs)]\n [!code-vb[Classic TypeConverter Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._43_2.vb)]  \n  \n Another common type converter usage is to convert an object to a string. The following code example prints out the name of the <xref:System.Drawing.Color> stored in the variable `c`.  \n  \n [!code-cpp[Classic TypeConverter Example#3](~/add/codesnippet/cpp/t-system.componentmodel._43_3.cpp)]\n [!code-cs[Classic TypeConverter Example#3](~/add/codesnippet/csharp/t-system.componentmodel._43_3.cs)]\n [!code-vb[Classic TypeConverter Example#3](~/add/codesnippet/visualbasic/t-system.componentmodel._43_3.vb)]  \n  \n You can also use a type converter to convert a value from its name, as shown in the next code example.  \n  \n [!code-cpp[Classic TypeConverter Example#4](~/add/codesnippet/cpp/t-system.componentmodel._43_4.cpp)]\n [!code-cs[Classic TypeConverter Example#4](~/add/codesnippet/csharp/t-system.componentmodel._43_4.cs)]\n [!code-vb[Classic TypeConverter Example#4](~/add/codesnippet/visualbasic/t-system.componentmodel._43_4.vb)]  \n  \n In the following code example, you can use a type converter to print out the set of standard values that the object supports.  \n  \n [!code-cpp[Classic TypeConverter Example#5](~/add/codesnippet/cpp/t-system.componentmodel._43_5.cpp)]\n [!code-cs[Classic TypeConverter Example#5](~/add/codesnippet/csharp/t-system.componentmodel._43_5.cs)]\n [!code-vb[Classic TypeConverter Example#5](~/add/codesnippet/visualbasic/t-system.componentmodel._43_5.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TypeConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: TypeConverter()
  nameWithType: TypeConverter.TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> класса."
  syntax:
    content: public TypeConverter ();
    parameters: []
  overload: System.ComponentModel.TypeConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  id: CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertFrom(Type)
  nameWithType: TypeConverter.CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает, может ли этот преобразователь выполнить преобразование объекта заданного типа в тип этого преобразователя."
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`. Никогда не возвращает `true`."
  syntax:
    content: public bool CanConvertFrom (Type sourceType);
    parameters:
    - id: sourceType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип, который нужно преобразовать.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если преобразователь может выполнить преобразование; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CanConvertFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает, может ли этот преобразователь выполнить преобразование объекта заданного типа в тип этого преобразователя, используя заданный контекст."
  remarks: "Реализация в этом классе этот метод возвращает `false`, пока не `sourceType` является <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>.</xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>"
  syntax:
    content: public virtual bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: sourceType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип, который нужно преобразовать.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если преобразователь может выполнить преобразование; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CanConvertFrom*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  id: CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertTo(Type)
  nameWithType: TypeConverter.CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает, может ли этот преобразователь преобразовать объект указанного типа."
  remarks: "Если `destinationType` представляет собой строку, реализация по умолчанию <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>всегда возвращает `true`.</xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>"
  syntax:
    content: public bool CanConvertTo (Type destinationType);
    parameters:
    - id: destinationType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип, который нужно преобразовать.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если преобразователь может выполнить преобразование; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CanConvertTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает, может ли этот преобразователь преобразовать объект указанного типа, используя заданный контекст."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       Если `destinationType` представляет собой строку, реализация по умолчанию <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>всегда возвращает `true`.</xref:System.ComponentModel.TypeConverter.CanConvertTo%2A>"
  syntax:
    content: public virtual bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: destinationType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип, который нужно преобразовать.</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если преобразователь может выполнить преобразование; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CanConvertTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  id: ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFrom(Object)
  nameWithType: TypeConverter.ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданное значение в тип этого преобразователя."
  syntax:
    content: public object ConvertFrom (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFrom*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданный объект в тип этого преобразователя, используя указанные сведения о контексте и языка и региональных параметров."
  remarks: "Авторы пользовательского типа, которые собираетесь поддерживать поведение преобразования типов для XAML обычно реализуют <xref:System.ComponentModel.TypeConverter>класс, который поддерживает поведение ConvertFrom из строки.</xref:System.ComponentModel.TypeConverter> Это поведение обеспечивает преобразования типов из строк, предоставленных в качестве значения атрибута XAML и предоставляет обработчик XAML с поддержкой, необходимой для создания объекта из строки, чтобы объект могут быть созданы в графе проанализированного объекта. Пользовательские типы или члены типов пользовательских обозначаются применение <xref:System.ComponentModel.TypeConverterAttribute>определений, с помощью атрибута ссылаются на настраиваемый <xref:System.ComponentModel.TypeConverter>реализации.</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.TypeConverterAttribute>       В целях XAML вы обычно не предоставляется реализация ветвления на основе `culture`. Это потому, что XAML предварительно компилируется в контексте среды разработки, а также сведения о культуре для среды выполнения XAML не относится к преобразованию типов XAML. Дополнительные сведения см. в разделе [преобразователи типов для XAML Обзор](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "<xref:System.Globalization.CultureInfo>Для использования в качестве текущего языка и региональных параметров.</xref:System.Globalization.CultureInfo>"
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFrom*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  id: ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromInvariantString(String)
  nameWithType: TypeConverter.ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданную строку в тип этого преобразователя, используя инвариантный язык и региональные параметры."
  remarks: "Реализация по умолчанию всегда возвращает `null`."
  syntax:
    content: public object ConvertFromInvariantString (string text);
    parameters:
    - id: text
      type: System.String
      description: "<xref:System.String>Для преобразования.</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованный текст.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromInvariantString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданную строку в тип этого преобразователя, используя инвариантный язык и региональные параметры и указанного контекста."
  remarks: "Исключение возникает, если строку нельзя преобразовать в соответствующий объект. Реализация по умолчанию всегда возвращает `null`.       Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`."
  syntax:
    content: public object ConvertFromInvariantString (System.ComponentModel.ITypeDescriptorContext context, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: text
      type: System.String
      description: "<xref:System.String>Для преобразования.</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованный текст.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  id: ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(String)
  nameWithType: TypeConverter.ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданный текст в объект."
  remarks: "Реализация по умолчанию всегда возвращает `null`."
  example:
  - For an example of this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public object ConvertFromString (string text);
    parameters:
    - id: text
      type: System.String
      description: "Текстовое представление объекта для преобразования."
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованный текст.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно преобразовать строку в соответствующий объект."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданный текст в объект, используя заданный контекст."
  remarks: "Исключение возникает, если строку нельзя преобразовать в соответствующий объект. Реализация по умолчанию всегда возвращает `null`.       Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`."
  syntax:
    content: public object ConvertFromString (System.ComponentModel.ITypeDescriptorContext context, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: text
      type: System.String
      description: "<xref:System.String>Для преобразования.</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованный текст.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданный текст в объект, используя указанные сведения о контексте и языка и региональных параметров."
  remarks: "Исключение возникает, если строку нельзя преобразовать в соответствующий объект. Реализация по умолчанию всегда возвращает `null`.       Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`."
  syntax:
    content: public object ConvertFromString (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, string text);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> передается текущего языка и региональных параметров."
    - id: text
      type: System.String
      description: "<xref:System.String>Для преобразования.</xref:System.String>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованный текст.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  id: ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertTo(Object,Type)
  nameWithType: TypeConverter.ConvertTo(Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует данный объект значения в указанный тип, используя заданные аргументы."
  remarks: "Наиболее распространенным типом для преобразования в и из является строкового объекта. Данная реализация вызывает <xref:System.Object.ToString%2A>для объекта, если объект является допустимым и конечным типом является строка.</xref:System.Object.ToString%2A>"
  syntax:
    content: public object ConvertTo (object value, Type destinationType);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "<xref:System.Type>Для преобразования `value` параметр.</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationType</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует данный объект значения в указанный тип, используя указанные сведения о контексте и языка и региональных параметров."
  remarks: "Наиболее распространенных типов для преобразования — и из объекта string. Данная реализация вызывает <xref:System.Object.ToString%2A>для объекта, если объект является допустимым, и если конечный тип — строка.</xref:System.Object.ToString%2A>       Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       Авторы пользовательского типа, которые собираетесь поддерживать поведение преобразования типов для XAML обычно реализуют <xref:System.ComponentModel.TypeConverter>класс, поддерживающий <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>поведение из строки.</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter> Эти преобразователи также может реализовывать ConvertTo для поддержки сериализации в XAML.       Некоторые сценарии сериализации XAML не может быть достигнута с адекватно <xref:System.ComponentModel.TypeConverter>сама по себе.</xref:System.ComponentModel.TypeConverter> В этих случаях может быть необходимо также определить <xref:System.Windows.Markup.ValueSerializer>, обрабатывающий случаев сериализации, которые в противном случае обрабатывать ConvertTo.</xref:System.Windows.Markup.ValueSerializer> Дополнительные сведения см. в разделе <xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer>"
  syntax:
    content: public virtual object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> передается текущего языка и региональных параметров."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "<xref:System.Type>Для преобразования `value` параметр.</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>destinationType</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  id: ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToInvariantString(Object)
  nameWithType: TypeConverter.ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует указанное значение в строку языка и региональных параметров."
  remarks: "`context` Используется для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Это может быть `null`, поэтому всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       В зависимости от реализации форматирования значений можно передать возвращаемой строки обратно в средство форматирования значений для повторного создания экземпляра объекта."
  syntax:
    content: public string ConvertToInvariantString (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.String
      description: "Объект <xref:System.String>, представляющий преобразованное значение.</xref:System.String>"
  overload: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToInvariantString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует указанное значение языка и региональных параметров строковое представление, используя заданный контекст."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       В зависимости от реализации форматирования значений можно передать возвращаемой строки обратно в средство форматирования значений для повторного создания экземпляра объекта."
  syntax:
    content: public string ConvertToInvariantString (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.String
      description: "Объект <xref:System.String>, представляющий преобразованное значение.</xref:System.String>"
  overload: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  id: ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(Object)
  nameWithType: TypeConverter.ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует указанное значение в строковое представление."
  remarks: "В зависимости от реализации форматирования значений можно передать возвращаемой строки обратно в средство форматирования значений для повторного создания экземпляра объекта."
  example:
  - For an example on this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public string ConvertToString (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданное значение в строковое представление, используя заданный контекст."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       В зависимости от реализации форматирования значений можно передать возвращаемой строки обратно в средство форматирования значений для повторного создания экземпляра объекта."
  syntax:
    content: public string ConvertToString (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Преобразует заданное значение в строковое представление, используя указанные сведения о контексте и языка и региональных параметров."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       В зависимости от реализации форматирования значений можно передать возвращаемой строки обратно в средство форматирования значений для повторного создания экземпляра объекта."
  syntax:
    content: public string ConvertToString (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "A <xref:System.Globalization.CultureInfo>.</xref:System.Globalization.CultureInfo> Если <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> передается текущего языка и региональных параметров."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования.</xref:System.Object>"
    return:
      type: System.String
      description: "<xref:System.Object>, Представляющий преобразованное значение.</xref:System.Object>"
  overload: System.ComponentModel.TypeConverter.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Невозможно выполнить преобразование."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  id: CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CreateInstance(IDictionary)
  nameWithType: TypeConverter.CreateInstance(IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Повторно создает <xref:System.Object>переданный набор значений свойств для этого объекта.</xref:System.Object>"
  remarks: "Используйте этот метод для объектов, которые являются неизменяемыми, но для которого требуется обеспечить возможность изменения свойств.       Словарь, предоставляемый `propertyValues` параметр имеет ряд пар имя значение для каждого свойства, возвращенные <xref:System.ComponentModel.TypeConverter.GetProperties%2A>.</xref:System.ComponentModel.TypeConverter.GetProperties%2A>"
  syntax:
    content: public object CreateInstance (System.Collections.IDictionary propertyValues);
    parameters:
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>, Представляющий словарь новых значений свойств.</xref:System.Collections.IDictionary>"
    return:
      type: System.Object
      description: "<xref:System.Object>Представляющий данного <xref:System.Collections.IDictionary>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , если объект не может быть создан.</xref:System.Collections.IDictionary> </xref:System.Object> Этот метод всегда возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: CreateInstance(ITypeDescriptorContext,IDictionary)
  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Создает экземпляр типа, это <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref> связана, используя заданный контекст, задающий набор значений свойств для объекта."
  remarks: "Используйте этот метод для объектов, которые являются неизменяемыми, но для которого требуется обеспечить возможность изменения свойств."
  syntax:
    content: public virtual object CreateInstance (System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>Новых значений свойств.</xref:System.Collections.IDictionary>"
    return:
      type: System.Object
      description: "<xref:System.Object>Представляющий данного <xref:System.Collections.IDictionary>, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> , если объект не может быть создан.</xref:System.Collections.IDictionary> </xref:System.Object> Этот метод всегда возвращает <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetConvertFromException(Object)
  nameWithType: TypeConverter.GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает исключение, возникающее, если преобразование не может быть выполнено."
  syntax:
    content: protected Exception GetConvertFromException (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если объект недоступен.</xref:System.Object>"
    return:
      type: System.Exception
      description: "<xref:System.Exception>, Представляющий исключение, если преобразование не выполнено.</xref:System.Exception>"
  overload: System.ComponentModel.TypeConverter.GetConvertFromException*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Автоматически вызывается этим методом."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetConvertToException(Object,Type)
  nameWithType: TypeConverter.GetConvertToException(Object,Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает исключение, возникающее, если преобразование не может быть выполнено."
  syntax:
    content: protected Exception GetConvertToException (object value, Type destinationType);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для преобразования, или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если объект недоступен.</xref:System.Object>"
    - id: destinationType
      type: System.Type
      description: "Объект <xref:System.Type>, представляющий тип, в который осуществлялось преобразование.</xref:System.Type>"
    return:
      type: System.Exception
      description: "<xref:System.Exception>, Представляющий исключение, если преобразование не выполнено.</xref:System.Exception>"
  overload: System.ComponentModel.TypeConverter.GetConvertToException*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Автоматически вызывается этим методом."
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  id: GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetCreateInstanceSupported()
  nameWithType: TypeConverter.GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает ли изменение значения в этом объекте требуется вызов <xref:System.ComponentModel.TypeConverter.CreateInstance*>метод для создания нового значения.</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  syntax:
    content: public bool GetCreateInstanceSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если для изменения свойства в этом объекте требуется вызов <xref:System.ComponentModel.TypeConverter.CreateInstance*>для создания нового значения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  overload: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает ли изменение значения в этом объекте требуется вызов <xref:System.ComponentModel.TypeConverter.CreateInstance*>для создания нового значения, используя заданный контекст.</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`."
  syntax:
    content: public virtual bool GetCreateInstanceSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если для изменения свойства в этом объекте требуется вызов <xref:System.ComponentModel.TypeConverter.CreateInstance*>для создания нового значения; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.CreateInstance*>"
  overload: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeConverter.GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для типа массива, заданного параметром значения."
  remarks: "Реализация этого класса, этот метод всегда возвращает `null`.       По умолчанию тип не возвращает свойства. Простая реализация этого метода может вызывать <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>для соответствующего типа данных.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetProperties (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>, Задающий тип массива, для которого нужно получить свойства.</xref:System.Object>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, доступными для этого типа данных или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданный контекст."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       Реализация этого класса, этот метод всегда возвращает `null`.       По умолчанию тип не возвращает свойства. Простая реализация этого метода может вызывать <xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>для соответствующего типа данных.</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: value
      type: System.Object
      description: "<xref:System.Object>, Задающий тип массива, для которого нужно получить свойства.</xref:System.Object>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, доступными для этого типа данных или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetProperties(ITypeDescriptorContext,Object,Attribute[])
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию свойств для типа массива, заданного параметром value, используя заданный контекст и атрибуты."
  remarks: "Реализация этого класса, этот метод всегда возвращает `null`."
  syntax:
    content: public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: value
      type: System.Object
      description: "<xref:System.Object>, Задающий тип массива, для которого нужно получить свойства.</xref:System.Object>"
    - id: attributes
      type: System.Attribute[]
      description: "Массив объектов типа <xref:System.Attribute>, используемый в качестве фильтра.</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> со свойствами, доступными для этого типа данных или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если свойства отсутствуют."
  overload: System.ComponentModel.TypeConverter.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  id: GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetPropertiesSupported()
  nameWithType: TypeConverter.GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, поддерживает ли объект свойства."
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`."
  syntax:
    content: public bool GetPropertiesSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.GetProperties*>должен быть вызван для поиска свойств этого объекта; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.GetProperties*>"
  overload: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetPropertiesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, указывающее, поддерживает ли объект свойства, используя заданный контекст."
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`."
  syntax:
    content: public virtual bool GetPropertiesSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.GetProperties*>должен быть вызван для поиска свойств этого объекта; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.GetProperties*>"
  overload: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  id: GetStandardValues
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValues()
  nameWithType: TypeConverter.GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию стандартных значений из контекста по умолчанию для типа данных, для которого предназначен этот преобразователь типов."
  remarks: "Реализация этого класса, этот метод всегда возвращает `null`."
  syntax:
    content: public System.Collections.ICollection GetStandardValues ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "Объект <xref:System.ComponentModel.TypeConverter.StandardValuesCollection>содержащий стандартный набор допустимых значений или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если тип данных не поддерживает стандартный набор значений.</xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValues*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает коллекцию стандартных значений для типа данных, для которого предназначен этот преобразователь типов при предоставлении с контекстом формата."
  remarks: "Как осуществляется в <xref:System.ComponentModel.TypeConverter>, этот метод всегда возвращает `null`.</xref:System.ComponentModel.TypeConverter>"
  example:
  - For an example on this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public virtual System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата, который может использоваться для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр или свойства этого параметра может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
      description: "Объект <xref:System.ComponentModel.TypeConverter.StandardValuesCollection>, содержащий стандартный набор допустимых значений или <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> Если тип данных не поддерживает стандартный набор значений.</xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValues*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  id: GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesExclusive()
  nameWithType: TypeConverter.GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает ли коллекция стандартных значений, возвращаемая методом <xref:System.ComponentModel.TypeConverter.GetStandardValues*>является исчерпывающим списком.</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`.       Если список является исчерпывающим, например типа данных перечисления, другие значения оказываются недопустимы. Если список не является исчерпывающим, то могут существовать другие допустимые значения, кроме списка стандартных значений, <xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>метод предоставляет.</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A> Если значения являются исключающими, список, возвращаемый методом <xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>не должен позволять изменять эти значения.</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>"
  syntax:
    content: public bool GetStandardValuesExclusive ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.StandardValuesCollection>возвращенный <xref:System.ComponentModel.TypeConverter.GetStandardValues*>является исчерпывающим списком возможных значений; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Если возможны другие значения.</xref:System.ComponentModel.TypeConverter.GetStandardValues*> </xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает ли коллекция стандартных значений, возвращаемая методом <xref:System.ComponentModel.TypeConverter.GetStandardValues*>является исчерпывающим списком возможных значений, используя заданный контекст.</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`.       Если список является исчерпывающим, например типа данных перечисления, другие значения оказываются недопустимы. Если список не является исчерпывающим, то могут существовать другие допустимые значения, кроме списка стандартных значений, <xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>метод предоставляет.</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A> Если значения являются исключающими, список, возвращаемый методом <xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>не должен позволять изменять эти значения.</xref:System.ComponentModel.TypeConverter.GetStandardValues%2A>"
  syntax:
    content: public virtual bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.StandardValuesCollection>возвращенный <xref:System.ComponentModel.TypeConverter.GetStandardValues*>является исчерпывающим списком возможных значений; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> Если возможны другие значения.</xref:System.ComponentModel.TypeConverter.GetStandardValues*> </xref:System.ComponentModel.TypeConverter.StandardValuesCollection>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  id: GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesSupported()
  nameWithType: TypeConverter.GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка."
  syntax:
    content: public bool GetStandardValuesSupported ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.GetStandardValues*>должен быть вызван для поиска общего набора значений, поддерживаемых объектом, в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, показывающее, поддерживает ли этот объект стандартный набор значений, которые можно выбрать из списка, используя заданный контекст."
  remarks: "Реализация этого класса, этот метод всегда возвращает `false`.       Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`."
  syntax:
    content: public virtual bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.ComponentModel.TypeConverter.GetStandardValues*>должен быть вызван для поиска общего набора значений, поддерживаемых объектом, в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.TypeConverter.GetStandardValues*>"
  overload: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: IsValid(Object)
  nameWithType: TypeConverter.IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Указывает, является ли данное значение допустимым для этого типа."
  remarks: "Начиная с версии [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], <xref:System.ComponentModel.TypeConverter.IsValid%2A>метод перехватывает исключения из <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>и <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>методы.</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.IsValid%2A> Если тип входного значения вызывает <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>для возврата `false`, или если приводит входное значение <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>для вызова исключения, <xref:System.ComponentModel.TypeConverter.IsValid%2A>метод возвращает `false`.</xref:System.ComponentModel.TypeConverter.IsValid%2A> </xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>       Чтобы разрешить устаревшее поведение, вставьте следующие строки в файле конфигурации приложения, например application1.exe.config.      ```xml   <configuration>     <appSettings>       <add key=&quot;UseCompatibleTypeConverterBehavior&quot; value=&quot;true&quot; />     </appSettings>   </configuration>   ```"
  syntax:
    content: public bool IsValid (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Объект, проверяемый на допустимость."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанное значение является допустимым для этого объекта; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: IsValid(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(ITypeDescriptorContext,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Возвращает значение, показывающее, допустимо ли данное значение для этого типа и для заданного контекста."
  remarks: "Используйте `context` параметр для получения дополнительных сведений о среде, из которой вызывается данный преобразователь. Этот параметр может иметь `null`, поэтому его всегда необходимо проверять. Кроме того, свойства объекта контекста могут возвращать `null`.       Начиная с версии [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], метод IsValid перехватывает исключения из <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>и <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>методы.</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A> Если тип входного значения вызывает <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>для возврата `false`, или если приводит входное значение <xref:System.ComponentModel.TypeConverter.ConvertFrom%2A>вызывает исключение, метод IsValid возвращает `false`.</xref:System.ComponentModel.TypeConverter.ConvertFrom%2A> </xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A>       Чтобы разрешить устаревшее поведение, вставьте следующие строки в файле конфигурации приложения, например application1.exe.config.      ```xml   <configuration>     <appSettings>       <add key=&quot;UseCompatibleTypeConverterBehavior&quot; value=&quot;true&quot; />     </appSettings>   </configuration>   ```"
  example:
  - For an example of this function, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public virtual bool IsValid (System.ComponentModel.ITypeDescriptorContext context, object value);
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "<xref href=&quot;System.ComponentModel.ITypeDescriptorContext&quot;> </xref> , Предоставляющий контекст формата."
    - id: value
      type: System.Object
      description: "<xref:System.Object>Для проверки на допустимость.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если указанное значение является допустимым для этого объекта; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.ComponentModel.TypeConverter.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  name: SortProperties(PropertyDescriptorCollection,String[])
  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Сортирует коллекцию свойств."
  remarks: "Все свойства в коллекции, которые еще не включены в массиве имен добавляются в алфавитном порядке до конца. Если `names` является пустым массивом или `null`, все свойства в коллекции сортируются в алфавитном порядке."
  syntax:
    content: protected System.ComponentModel.PropertyDescriptorCollection SortProperties (System.ComponentModel.PropertyDescriptorCollection props, string[] names);
    parameters:
    - id: props
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> , имеет свойства для сортировки."
    - id: names
      type: System.String[]
      description: "Массив имен в том порядке, необходимо представить их в коллекции."
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "Объект <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref> , содержащий отсортированные свойства."
  overload: System.ComponentModel.TypeConverter.SortProperties*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeConverter.#ctor
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: TypeConverter()
  nameWithType: TypeConverter.TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom(Type)
  nameWithType: TypeConverter.CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(ITypeDescriptorContext,Type)
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo(Type)
  nameWithType: TypeConverter.CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(Type)
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo(ITypeDescriptorContext,Type)
  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(ITypeDescriptorContext,Type)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom(Object)
  nameWithType: TypeConverter.ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(Object)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString(String)
  nameWithType: TypeConverter.ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext,String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(String)
  nameWithType: TypeConverter.ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(ITypeDescriptorContext,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(ITypeDescriptorContext,CultureInfo,String)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo(Object,Type)
  nameWithType: TypeConverter.ConvertTo(Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(Object,Type)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(ITypeDescriptorContext,CultureInfo,Object,Type)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString(Object)
  nameWithType: TypeConverter.ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(Object)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(Object)
  nameWithType: TypeConverter.ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(ITypeDescriptorContext,CultureInfo,Object)
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance(IDictionary)
  nameWithType: TypeConverter.CreateInstance(IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance(ITypeDescriptorContext,IDictionary)
  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(ITypeDescriptorContext,IDictionary)
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertFromException(Object)
  nameWithType: TypeConverter.GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(Object)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertToException(Object,Type)
  nameWithType: TypeConverter.GetConvertToException(Object,Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(Object,Type)
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported()
  nameWithType: TypeConverter.GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeConverter.GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties(ITypeDescriptorContext,Object,Attribute[])
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(ITypeDescriptorContext,Object,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported()
  nameWithType: TypeConverter.GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues()
  nameWithType: TypeConverter.GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter+StandardValuesCollection
  nameWithType: TypeConverter+StandardValuesCollection
  fullName: System.ComponentModel.TypeConverter+StandardValuesCollection
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive()
  nameWithType: TypeConverter.GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported()
  nameWithType: TypeConverter.GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid(Object)
  nameWithType: TypeConverter.IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(Object)
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid(ITypeDescriptorContext,Object)
  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext,Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(ITypeDescriptorContext,Object)
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: SortProperties(PropertyDescriptorCollection,String[])
  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(PropertyDescriptorCollection,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeConverter.#ctor*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter.TypeConverter
- uid: System.ComponentModel.TypeConverter.CanConvertFrom*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertFrom
  nameWithType: TypeConverter.CanConvertFrom
- uid: System.ComponentModel.TypeConverter.CanConvertTo*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CanConvertTo
  nameWithType: TypeConverter.CanConvertTo
- uid: System.ComponentModel.TypeConverter.ConvertFrom*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFrom
  nameWithType: TypeConverter.ConvertFrom
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromInvariantString
  nameWithType: TypeConverter.ConvertFromInvariantString
- uid: System.ComponentModel.TypeConverter.ConvertFromString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertFromString
  nameWithType: TypeConverter.ConvertFromString
- uid: System.ComponentModel.TypeConverter.ConvertTo*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertTo
  nameWithType: TypeConverter.ConvertTo
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToInvariantString
  nameWithType: TypeConverter.ConvertToInvariantString
- uid: System.ComponentModel.TypeConverter.ConvertToString*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: ConvertToString
  nameWithType: TypeConverter.ConvertToString
- uid: System.ComponentModel.TypeConverter.CreateInstance*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: CreateInstance
  nameWithType: TypeConverter.CreateInstance
- uid: System.ComponentModel.TypeConverter.GetConvertFromException*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertFromException
  nameWithType: TypeConverter.GetConvertFromException
- uid: System.ComponentModel.TypeConverter.GetConvertToException*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetConvertToException
  nameWithType: TypeConverter.GetConvertToException
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetCreateInstanceSupported
  nameWithType: TypeConverter.GetCreateInstanceSupported
- uid: System.ComponentModel.TypeConverter.GetProperties*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetProperties
  nameWithType: TypeConverter.GetProperties
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetPropertiesSupported
  nameWithType: TypeConverter.GetPropertiesSupported
- uid: System.ComponentModel.TypeConverter.GetStandardValues*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValues
  nameWithType: TypeConverter.GetStandardValues
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesExclusive
  nameWithType: TypeConverter.GetStandardValuesExclusive
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: GetStandardValuesSupported
  nameWithType: TypeConverter.GetStandardValuesSupported
- uid: System.ComponentModel.TypeConverter.IsValid*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: IsValid
  nameWithType: TypeConverter.IsValid
- uid: System.ComponentModel.TypeConverter.SortProperties*
  parent: System.ComponentModel.TypeConverter
  isExternal: false
  name: SortProperties
  nameWithType: TypeConverter.SortProperties
