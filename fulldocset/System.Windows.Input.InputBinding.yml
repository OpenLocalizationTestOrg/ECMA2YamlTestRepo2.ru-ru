### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.InputBinding
  id: InputBinding
  children:
  - System.Windows.Input.InputBinding.#ctor
  - System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.Command
  - System.Windows.Input.InputBinding.CommandParameter
  - System.Windows.Input.InputBinding.CommandParameterProperty
  - System.Windows.Input.InputBinding.CommandProperty
  - System.Windows.Input.InputBinding.CommandTarget
  - System.Windows.Input.InputBinding.CommandTargetProperty
  - System.Windows.Input.InputBinding.CreateInstanceCore
  - System.Windows.Input.InputBinding.Gesture
  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  langs:
  - csharp
  name: InputBinding
  nameWithType: InputBinding
  fullName: System.Windows.Input.InputBinding
  type: Class
  summary: "Представляет привязку между <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref> и команды. Команда является потенциально <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>."
  remarks: "You can specify that user input invokes a command by creating a InputBinding. When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.  \n  \n You can specify that the InputBinding invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties. This enables you to define a custom command and associate it with user input. For more information, see the second example in the Examples section.  \n  \n An InputBinding can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.  \n  \n The InputBinding class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from InputBinding with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing InputBinding-derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>. The typical property in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] programming that is set in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and takes one or more InputBinding objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=fullName> property.  \n  \n<a name=\"xamlObjectElementUsage_InputBinding\"></a>   \n## XAML Object Element Usage  \n \\<*inputBindingDerivedClass…/*>  \n  \n<a name=\"xamlValues_InputBinding\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of InputBinding that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n The following examples show how to bind a custom command to InputBinding objects. These examples create an application that enables the user to change the background color by performing one of the following actions:  \n  \n-   Clicking a button.  \n  \n-   Pressing CTRL+C.  \n  \n-   Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).  \n  \n The first example creates a class named `SimpleDelegateCommand`. This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes. `SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command. `GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.  \n  \n [!code-cs[InputCommandBinding#DelegateCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#delegatecommand)]\n [!code-vb[InputCommandBinding#DelegateCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#delegatecommand)]  \n  \n The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`. The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties. An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.  \n  \n [!code-cs[InputCommandBinding#InitializeCommand](~/add/codesnippet/csharp/inputcommandbinding/mainwindow.xaml.cs#initializecommand)]\n [!code-vb[InputCommandBinding#InitializeCommand](~/add/codesnippet/visualbasic/inputcommandbinding/mainwindow.xaml.vb#initializecommand)]  \n  \n Finally, the following example creates the user interface. The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>. When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color. In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`. The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=fullName>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=fullName>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=fullName> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.  \n  \n [!code-xml[InputCommandBinding#UI](~/add/codesnippet/xaml/inputcommandbinding/mainwindow.xaml#ui)]"
  syntax:
    content: 'public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  implements:
  - System.Windows.Input.ICommandSource
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Предоставляет классы, производные от базового инициализации <xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref>."
  remarks: "<xref:System.Windows.Input.InputBinding>не является технически абстрактный класс, но конструктор по умолчанию намеренно защищенный доступ.</xref:System.Windows.Input.InputBinding> Это приводит к внесения <xref:System.Windows.Input.InputBinding>класса «abstract» для [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].</xref:System.Windows.Input.InputBinding> Имеются существующие свойства в [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] , имеющих [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] варианты использования, которые ожидают, что объекты типа <xref:System.Windows.Input.InputBinding>, но нельзя указать <xref:System.Windows.Input.InputBinding>экземпляра в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)].</xref:System.Windows.Input.InputBinding> </xref:System.Windows.Input.InputBinding> Вместо этого можно указать один из <xref:System.Windows.Input.InputBinding>производных классов, как значения, например <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding> конкретных устройств"
  syntax:
    content: protected InputBinding ();
    parameters: []
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)'
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref> класса с заданной команды и жест ввода."
  remarks: "Если вы разработчик приложения использует существующие классы привязки ввода, обычно не используется этот конструктор, даже при определении пользовательских команд. Вместо этого вы будет использовать конструкторы производных классов (<xref:System.Windows.Input.KeyBinding> и <xref:System.Windows.Input.MouseBinding>), или этот конструктор будет использоваться в качестве базового экземпляра пользовательского класса.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> Несмотря на то что <xref:System.Windows.Input.InputBinding>класс поддерживает различные устройства ввода, в принципе, на практике необходимо выбрать, какое устройство будет представлять привязка ввода.</xref:System.Windows.Input.InputBinding> Только можно задать только один <xref:System.Windows.Input.InputBinding.Gesture%2A>значение на входной привязки и жестов зависят от конкретного устройства.</xref:System.Windows.Input.InputBinding.Gesture%2A>"
  example:
  - "The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#inputbindingaddingcomand)]\n [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#inputbindingaddingcomand)]"
  syntax:
    content: public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "Команда для связи с `gesture`."
    - id: gesture
      type: System.Windows.Input.InputGesture
      description: "Жест ввода, связываемый с `command`."
  overload: System.Windows.Input.InputBinding.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>command</code>or <code>gesture</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  id: CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Копирует базовые (без анимации) значения свойств заданного объекта."
  syntax:
    content: protected override void CloneCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "Копируемый объект."
  overload: System.Windows.Input.InputBinding.CloneCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  id: CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Копирует текущие значения свойств заданного объекта."
  syntax:
    content: protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "Копируемый объект."
  overload: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Command
  id: Command
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает или задает <xref:System.Windows.Input.ICommand>связанный с данной входной привязки.</xref:System.Windows.Input.ICommand>"
  remarks: "<xref:System.Windows.Input.InputBinding>Класс не поддерживает [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] об использовании, так как он не предоставляет открытый конструктор по умолчанию (он имеет конструктор по умолчанию, но он защищен).</xref:System.Windows.Input.InputBinding> Однако производные классы могут предоставлять открытый конструктор и таким образом, можно использовать свойства, унаследованные от <xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding> Два существующих <xref:System.Windows.Input.InputBinding>производные классы, которые могут быть созданы в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] и можно задать свойства с [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] варианты использования <xref:System.Windows.Input.KeyBinding>и <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       <xref:System.Windows.Input.ICommand>ссылается на преобразователь типов, который включает определенные ранее существовавшие <xref:System.Windows.Input.ICommand>реализации для указания значений в виде строки.</xref:System.Windows.Input.ICommand></xref:System.Windows.Input.ICommand> Это поведение преобразования типов задает значение атрибута из этого свойства. Можно также связать команду, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, и <xref:System.Windows.Input.InputBinding.CommandTarget%2A>Свойства <xref:System.Windows.Input.ICommand>, определенное для объекта.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A> </xref:System.Windows.Input.InputBinding.CommandParameter%2A> Это дает возможность определить пользовательскую команду и связать ее с вводимыми пользователем данными. Дополнительные сведения см. во втором примере в папке <xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_Command&quot;></a>## Использование атрибута XAML `inputBindingDerivedClass` `Command`=»<xref:System.Windows.Input.ICommand>«и настроек <a name=&quot;xamlPropertyElementUsage_Command&quot;> </a> ## использование элемента свойства XAML ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.Command>       <iCommandImplementation/>     </inputBindingDerivedClass.Command>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_Command&quot;> </a> ## значений XAML `inputBindingDerivedClass` производный класс, <xref:System.Windows.Input.InputBinding>который поддерживает синтаксис элемента объекта, например <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       </xref:System.Windows.Input.ICommand> См. заметки.       `iCommandImplementation`Реализация объекта <xref:System.Windows.Input.ICommand>, поддерживающая синтаксис элемента объекта (имеет открытый конструктор по умолчанию).</xref:System.Windows.Input.ICommand>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=fullName> command. When the key gesture is performed, the Open command is invoked.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewxamlkeybinding)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewkeybinding)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewkeybinding)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "Связанная команда."
  overload: System.Windows.Input.InputBinding.Command*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Имеет значение команды <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает или задает связанные с командой данные для конкретной команды."
  remarks: "Свойство CommandParameter используется для передачи конкретные сведения при выполнении команды. Тип данных определяется с помощью команды. Многие команды не ожидают параметров команды; для запуска этих команд все передаваемые команды будут игнорироваться.       Если привязки ввода, связанный с командой является <xref:System.Windows.Input.RoutedCommand>, передаваемый CommandParameter входной привязки <xref:System.Windows.Input.RoutedCommand>через <xref:System.Windows.Input.ExecutedRoutedEventArgs>и <xref:System.Windows.Input.CanExecuteRoutedEventArgs>данных события при обработке команды.</xref:System.Windows.Input.CanExecuteRoutedEventArgs> </xref:System.Windows.Input.ExecutedRoutedEventArgs> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand>       Тип данных и назначение параметра команды определяются для каждой команды по-разному и может быть `null`. Можно привязать <xref:System.Windows.Input.InputBinding.Command%2A>, CommandParameter, и <xref:System.Windows.Input.InputBinding.CommandTarget%2A>Свойства <xref:System.Windows.Input.ICommand>, определенное для объекта.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A> </xref:System.Windows.Input.InputBinding.Command%2A> Это дает возможность определить пользовательскую команду и связать ее с вводимыми пользователем данными. Дополнительные сведения см. во втором примере в папке <xref:System.Windows.Input.InputBinding>.</xref:System.Windows.Input.InputBinding>       <xref:System.Windows.Input.InputBinding>Класс не поддерживает [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] об использовании, так как он не предоставляет открытый конструктор по умолчанию (он имеет конструктор по умолчанию, но он защищен).</xref:System.Windows.Input.InputBinding> Однако производные классы могут предоставлять открытый конструктор и таким образом, можно задать свойства, унаследованные от <xref:System.Windows.Input.InputBinding>с [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] использования.</xref:System.Windows.Input.InputBinding> Два существующих <xref:System.Windows.Input.InputBinding>производные классы, которые могут быть созданы в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] и свойства можно задать в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] и <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandParameter&quot;></a>## Использование атрибута XAML ```   <inputBindingDerivedClass CommandParameter=&quot;commandParameterString&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_CommandParameter&quot;> </a> ## использование элемента свойства XAML ```   <inputBindingDerivedClass>     <inputBindingDerivedClass.CommandParameter>       <commandParameterObject/>     </inputBindingDerivedClass.CommandParameter>   </inputBindingDerivedClass>   ``` <a name=&quot;xamlValues_CommandParameter&quot;> </a> ## значений XAML `inputBindingDerivedClass` производный класс, <xref:System.Windows.Input.InputBinding>который поддерживает синтаксис элемента объекта, например <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>             См. заметки.       `commandParameterString`Строка, которая обрабатывается определенной команды. Строки являются распространенным типом, используемым для параметров команды, так как они легко устанавливать в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Требуется строка формата и ее назначение см. в документации для той или иной команды, связанное со входной привязки. Многие команды не ожидают параметров.       `commandParameterObject`Объект, обрабатываемый определенной команды. Все существующие [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] команды используют строки. Таким образом этот синтаксис элемента свойства действительно только для сценариев пользовательской команды. Для поддержки этого синтаксиса `commandParameterObject` объект также должен поддерживать синтаксис элемента объекта (должен иметь открытый конструктор по умолчанию)."
  syntax:
    content: public object CommandParameter { get; set; }
    return:
      type: System.Object
      description: "Данные, связанные с командой. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.InputBinding.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  id: CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Идентифицирует <xref:System.Windows.Input.InputBinding.CommandParameter*>свойство зависимостей.</xref:System.Windows.Input.InputBinding.CommandParameter*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandParameterProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandProperty
  id: CommandProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Идентифицирует <xref:System.Windows.Input.InputBinding.Command*>свойство зависимостей.</xref:System.Windows.Input.InputBinding.Command*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает или задает целевой элемент команды."
  remarks: "В [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] заставляя системы, свойство целью команды на <xref:System.Windows.Input.ICommandSource>объект является применимо, только если <xref:System.Windows.Input.ICommand>является <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> Если задано целью команды <xref:System.Windows.Input.ICommandSource>и соответствующей команды не <xref:System.Windows.Input.RoutedCommand>, цель команды игнорируется.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource>       При использовании с <xref:System.Windows.Input.RoutedCommand>, цель команды — это объект, на котором <xref:System.Windows.Input.CommandManager.Executed>и <xref:System.Windows.Input.CommandManager.CanExecute>событий.</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> Если целью команды свойство не задано, элемент с фокусом клавиатуры используется как целевой объект.       <xref:System.Windows.Input.InputBinding>Самого класса не поддерживает [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] использования, поскольку он не предоставляет открытый конструктор по умолчанию (нет конструктора по умолчанию, но он защищен).</xref:System.Windows.Input.InputBinding> Однако производные классы могут предоставлять открытый конструктор и таким образом, можно задать свойства, унаследованные от <xref:System.Windows.Input.InputBinding>с [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] использования.</xref:System.Windows.Input.InputBinding> Два существующих <xref:System.Windows.Input.InputBinding>производные классы, которые могут быть созданы в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] и свойства можно задать в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] и <xref:System.Windows.Input.KeyBinding> <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>      <a name=&quot;xamlAttributeUsage_CommandTarget&quot;></a>## Использование атрибута XAML ```   <inputBindingDerivedClass CommandTarget=&quot;bindingToTarget&quot;/>   ``` <a name=&quot;xamlValues_CommandTarget&quot;> </a> ## значений XAML `inputBindingDerivedClass` производный класс, <xref:System.Windows.Input.InputBinding>который поддерживает синтаксис элемента объекта, например <xref:System.Windows.Input.KeyBinding>или <xref:System.Windows.Input.MouseBinding>.</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       См. заметки.       `bindingToTarget`Строка, которая использует синтаксис привязки, которая может вернуть ссылку на объект на существующий тип именованного элемента. См. заметки."
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; set; }
    return:
      type: System.Windows.IInputElement
      description: "Целевой объект команды. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.InputBinding.CommandTarget*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  id: CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Идентифицирует <xref:System.Windows.Input.InputBinding.CommandTarget*>свойство зависимостей.</xref:System.Windows.Input.InputBinding.CommandTarget*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CommandTargetProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Создает экземпляр <xref href=&quot;System.Windows.Input.InputBinding&quot;> </xref>."
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "Новый объект."
  overload: System.Windows.Input.InputBinding.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.Gesture
  id: Gesture
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Возвращает или задает <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref> связанный с данной входной привязки."
  remarks: "The input gesture is the action that invokes the command. Examples of input gestures in [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>. A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>. A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.  \n  \n The <xref:System.Windows.Input.InputBinding> class itself does not support [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage, because it does not expose a public default constructor (there is a default constructor, but it is protected). However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage. Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and can set properties in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.  \n  \n<a name=\"xamlAttributeUsage_gesture\"></a>   \n## XAML Attribute Usage  \n <<xref:System.Windows.Input.KeyBinding> `Gesture`=\"<xref:System.Windows.Input.KeyGesture>\"/>  \n  \n \\- or -  \n  \n <<xref:System.Windows.Input.MouseBinding> `Gesture`=\"<xref:System.Windows.Input.MouseGesture>\"/>  \n  \n \\- or -  \n  \n <`inputBindingDerivedClass` `Gesture`=\"<xref:System.Windows.Input.InputGesture>\"/>  \n  \n<a name=\"xamlPropertyElementUsage_gesture\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<inputBindingDerivedClass>  \n  <inputBindingDerivedClass.Gesture>  \n    <inputGestureImplementation/>  \n  </inputBindingDerivedClass.Gesture>  \n</inputBindingDerivedClass>  \n```  \n  \n<a name=\"xamlValues_gesture\"></a>   \n## XAML Values  \n `inputBindingDerivedClass`  \n A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>. See Remarks.  \n  \n `inputGestureImplementation`  \n A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax."
  example:
  - "The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>. When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.  \n  \n [!code-xml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/add/codesnippet/xaml/CommandLibarySnippets/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public virtual System.Windows.Input.InputGesture Gesture { get; set; }
    return:
      type: System.Windows.Input.InputGesture
      description: "Связанный жест. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.InputBinding.Gesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  id: GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Делает экземпляр зафиксированной копией указанного <xref href=&quot;System.Windows.Freezable&quot;> </xref> , используя базовые (без анимации) значения свойств."
  syntax:
    content: protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "Копируемый объект."
  overload: System.Windows.Input.InputBinding.GetAsFrozenCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  id: GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  langs:
  - csharp
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Делает текущий экземпляр зафиксированным клоном указанного объекта <xref href=&quot;System.Windows.Freezable&quot;> </xref>. Если объект имеет анимированные свойства зависимостей, копируются их текущие анимированные значения."
  syntax:
    content: protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);
    parameters:
    - id: sourceFreezable
      type: System.Windows.Freezable
      description: "Копируемый объект."
  overload: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Freezable
  isExternal: false
  name: System.Windows.Freezable
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.InputBinding.#ctor
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding()
  nameWithType: InputBinding.InputBinding()
  fullName: System.Windows.Input.InputBinding.InputBinding()
- uid: System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding(ICommand,InputGesture)
  nameWithType: InputBinding.InputBinding(ICommand,InputGesture)
  fullName: System.Windows.Input.InputBinding.InputBinding(ICommand,InputGesture)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.InputGesture
  parent: System.Windows.Input
  isExternal: false
  name: InputGesture
  nameWithType: InputGesture
  fullName: System.Windows.Input.InputGesture
- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore(Freezable)
  nameWithType: InputBinding.CloneCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCore(Freezable)
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore(Freezable)
  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)
  fullName: System.Windows.Input.InputBinding.CloneCurrentValueCore(Freezable)
- uid: System.Windows.Input.InputBinding.Command
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
  fullName: System.Windows.Input.InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
  fullName: System.Windows.Input.InputBinding.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputBinding.CommandParameterProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameterProperty
  nameWithType: InputBinding.CommandParameterProperty
  fullName: System.Windows.Input.InputBinding.CommandParameterProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.InputBinding.CommandProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandProperty
  nameWithType: InputBinding.CommandProperty
  fullName: System.Windows.Input.InputBinding.CommandProperty
- uid: System.Windows.Input.InputBinding.CommandTarget
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
  fullName: System.Windows.Input.InputBinding.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.InputBinding.CommandTargetProperty
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTargetProperty
  nameWithType: InputBinding.CommandTargetProperty
  fullName: System.Windows.Input.InputBinding.CommandTargetProperty
- uid: System.Windows.Input.InputBinding.CreateInstanceCore
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: InputBinding.CreateInstanceCore()
  fullName: System.Windows.Input.InputBinding.CreateInstanceCore()
- uid: System.Windows.Input.InputBinding.Gesture
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
  fullName: System.Windows.Input.InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore(Freezable)
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)
  fullName: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(Freezable)
- uid: System.Windows.Input.InputBinding.#ctor*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: InputBinding
  nameWithType: InputBinding.InputBinding
- uid: System.Windows.Input.InputBinding.CloneCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCore
  nameWithType: InputBinding.CloneCore
- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CloneCurrentValueCore
  nameWithType: InputBinding.CloneCurrentValueCore
- uid: System.Windows.Input.InputBinding.Command*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Command
  nameWithType: InputBinding.Command
- uid: System.Windows.Input.InputBinding.CommandParameter*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandParameter
  nameWithType: InputBinding.CommandParameter
- uid: System.Windows.Input.InputBinding.CommandTarget*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CommandTarget
  nameWithType: InputBinding.CommandTarget
- uid: System.Windows.Input.InputBinding.CreateInstanceCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: CreateInstanceCore
  nameWithType: InputBinding.CreateInstanceCore
- uid: System.Windows.Input.InputBinding.Gesture*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: Gesture
  nameWithType: InputBinding.Gesture
- uid: System.Windows.Input.InputBinding.GetAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetAsFrozenCore
  nameWithType: InputBinding.GetAsFrozenCore
- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore*
  parent: System.Windows.Input.InputBinding
  isExternal: false
  name: GetCurrentValueAsFrozenCore
  nameWithType: InputBinding.GetCurrentValueAsFrozenCore
