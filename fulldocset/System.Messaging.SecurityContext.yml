### YamlMime:ManagedReference
items:
- uid: System.Messaging.SecurityContext
  id: SecurityContext
  children:
  - System.Messaging.SecurityContext.Dispose
  langs:
  - csharp
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
  type: Class
  summary: "Представляет контекст безопасности для сообщения в очереди."
  remarks: "Контекст безопасности содержит кэшированные сведения безопасности как внутренний сертификат, соответствующий закрытый ключ, идентификатор безопасности пользователя, необходимых для вложения сертификата и идентификатор отправителя сообщения при запросе проверки подлинности.       Если клиент, например приложение ASP.NET олицетворяет пользователя для отправки сообщения в очередь, для доступа к очереди используется удостоверение пользователя. Если очередь является удаленной, эти учетные данные кэшируются и используются для сообщений, которые затем отправляются в очередь. Таким образом идентификатор безопасности в последующих сообщениях будет кэшированное удостоверение первого пользователя, который отправил сообщение в очередь. Кэшированное удостоверение первого пользователя, который отправил сообщение в очередь будет использоваться для последующих пользователей.       Чтобы обойти эту проблему, задайте контекста безопасности с помощью <xref:System.Messaging.Message.SecurityContext%2A>перед отправкой сообщения в удаленной очереди, чтобы убедиться, что учетные данные текущего пользователя используются для получения доступа к очереди.</xref:System.Messaging.Message.SecurityContext%2A> Тем не менее, предлагаемые рекомендуется: 1.  Сделайте очередь очередью с проверкой подлинности.      2.  Запуск приложения ASP.NET в качестве удостоверения домена и разрешите приложению записи в очередь.      3.  Олицетворяет пользователя при использовании очереди. Вместо этого рекомендуется получать удостоверение и выполните проверку авторизации в приложении ASP.NET или включить это удостоверение как часть сообщения и выполните проверку авторизации в приложении получателя."
  syntax:
    content: 'public sealed class SecurityContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.SecurityContext.Dispose
  id: Dispose
  parent: System.Messaging.SecurityContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Messaging.SecurityContext.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Освобождает все ресурсы, используемые <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.SecurityContext.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Messaging.SecurityContext.Dispose
  parent: System.Messaging.SecurityContext
  isExternal: false
  name: Dispose()
  nameWithType: SecurityContext.Dispose()
  fullName: System.Messaging.SecurityContext.Dispose()
- uid: System.Messaging.SecurityContext.Dispose*
  parent: System.Messaging.SecurityContext
  isExternal: false
  name: Dispose
  nameWithType: SecurityContext.Dispose
