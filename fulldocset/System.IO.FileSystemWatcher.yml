### YamlMime:ManagedReference
items:
- uid: System.IO.FileSystemWatcher
  id: FileSystemWatcher
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.BeginInit
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.EndInit
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.Site
  - System.IO.FileSystemWatcher.SynchronizingObject
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  summary: "Ожидает файловой системы об изменениях уведомления и инициирует события при каталога или файла в каталоге, изменения.       Для просмотра исходного кода .NET Framework для этого типа, в разделе [ссылки на источник](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System/services/io/system/io/FileSystemWatcher.cs#a9eb0249dc928b09). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use FileSystemWatcher to watch for changes in a specified directory. You can watch for changes in files and subdirectories of the specified directory. You can create a component to watch files on a local computer, a network drive, or a remote computer.  \n  \n To watch for changes in all files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to an empty string (\"\") or use wildcards (\"*.\\*\"). To watch a specific file, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name. For example, to watch for changes in the file MyDoc.txt, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"\\*.txt\".  \n  \n There are several types of changes you can watch for in a directory or file. For example, you can watch for changes in `Attributes`, the `LastWrite` date and time, or the `Size` of files or directories. This is done by setting the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> property to one of the <xref:System.IO.NotifyFilters> values. For more information on the type of changes you can watch, see <xref:System.IO.NotifyFilters>.  \n  \n You can watch for renaming, deletion, or creation of files or directories. For example, to watch for renaming of text files, set the <xref:System.IO.FileSystemWatcher.Filter%2A> property to \"*.txt\" and call the <xref:System.IO.FileSystemWatcher.WaitForChanged%2A> method with a <xref:System.IO.WatcherChangeTypes> specified for its parameter.  \n  \n The Windows operating system notifies your component of file changes in a buffer created by the FileSystemWatcher. If there are many changes in a short time, the buffer can overflow. This causes the component to lose track of changes in the directory, and it will only provide blanket notification. Increasing the size of the buffer with the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property is expensive, as it comes from non-paged memory that cannot be swapped out to disk, so keep the buffer as small yet large enough to not miss any file change events. To avoid a buffer overflow, use the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A> and <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> properties so you can filter out unwanted change notifications.  \n  \n For a list of initial property values for an instance of FileSystemWatcher, see the <xref:System.IO.FileSystemWatcher.%23ctor%2A> constructor.  \n  \n Please note the following when using the FileSystemWatcher class.  \n  \n-   Hidden files are not ignored.  \n  \n-   In some systems, FileSystemWatcher reports changes to files using the short 8.3 file name format. For example, a change to  \"LongFileName.LongExtension\" could be reported as \"LongFil~.Lon\".  \n  \n-   This class contains a link demand and an inheritance demand at the class level that applies to all members. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission. For details about security demands, see [Link Demands](~/add/includes/ajax-current-ext-md.md).  \n  \n-   The maximum size you can set for the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property for monitoring a directory over the network is 64 KB.  \n  \n> [!NOTE]\n>  Running FileSystemWatcher on Windows 98 is not supported.  \n  \n## Copying and moving folders  \n The operating system and FileSystemWatcher object interpret a cut-and-paste action or a move action as a rename action for a folder and its contents. If you cut and paste a folder with files into a folder being watched, the FileSystemWatcher object reports only the folder as new, but not its contents because they are essentially only renamed.  \n  \n To be notified that the contents of folders have been moved or copied into a watched folder, provide <xref:System.IO.FileSystemWatcher.OnChanged%2A> and <xref:System.IO.FileSystemWatcher.OnRenamed%2A> event handler methods as suggested in the following table.  \n  \n|Event Handler|Events Handled|Performs|  \n|-------------------|--------------------|--------------|  \n|<xref:System.IO.FileSystemWatcher.OnChanged%2A>|<xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>|Report changes in file attributes, created files, and deleted files.|  \n|<xref:System.IO.FileSystemWatcher.OnRenamed%2A>|<xref:System.IO.FileSystemWatcher.Renamed>|List the old and new paths of renamed files and folders, expanding recursively if needed.|  \n  \n## Events and Buffer Sizes  \n Note that several factors can affect which file system change events are raised, as described by the following:  \n  \n-   Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by FileSystemWatcher.  \n  \n-   The FileSystemWatcher can watch disks as long as they are not switched or removed. The FileSystemWatcher does not raise events for CDs and DVDs, because time stamps and properties cannot change. Remote computers must have one of the required platforms installed for the component to function properly.  \n  \n-   If multiple FileSystemWatcher objects are watching the same UNC path in Windows XP prior to Service Pack 1, or Windows 2000 SP2 or earlier, then only one of the objects will raise an event. On machines running Windows XP SP1 and newer, Windows 2000 SP3 or newer or Windows Server 2003, all FileSystemWatcher objects will raise the appropriate events.  \n  \n Note that a FileSystemWatcher may miss an event when the buffer size is exceeded. To avoid missing events, follow these guidelines:  \n  \n-   Increase the buffer size by setting the <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> property.  \n  \n-   Avoid watching files with long file names, because a long file name contributes to filling up the buffer. Consider renaming these files using shorter names.  \n  \n-   Keep your event handling code as short as possible."
  example:
  - "The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/t-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/t-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/t-system.io.filesystemwa_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Changed")]

      [System.IO.IODescription("FileSystemWatcherDesc")]

      public class FileSystemWatcher : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> класса."
  remarks: "You cannot watch a remote computer that does not have Windows NT or Windows 2000. You cannot watch a remote Windows NT 4.0 computer from a Windows NT 4.0 computer.  \n  \n The following table shows initial property values for an instance of <xref:System.IO.FileSystemWatcher>.  \n  \n|Property|Initial Value|  \n|--------------|-------------------|  \n|<xref:System.IO.FileSystemWatcher.NotifyFilter%2A>|bitwise OR combination of `LastWrite`, `FileName`, and `DirectoryName`|  \n|<xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.Filter%2A>|\"*.\\*\" (Watch all files.)|  \n|<xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>|`false`|  \n|<xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>|8192|  \n|<xref:System.IO.FileSystemWatcher.Path%2A>|empty string (\"\")|  \n  \n> [!NOTE]\n>  The component will not watch the specified directory until the <xref:System.IO.FileSystemWatcher.Path%2A> is set, and <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> is `true`."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> object to watch the directory specified at run time. The <xref:System.IO.FileSystemWatcher> object watches for changes in `LastWrite` and `LastAccess` times, and for the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file displays to the console. When a file is renamed, the old and new paths display to the console.  \n  \n This example uses the <xref:System.Diagnostics> and <xref:System.IO> namespaces.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/m-system.io.filesystemwa_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/m-system.io.filesystemwa_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/m-system.io.filesystemwa_1.vb)]"
  syntax:
    content: public FileSystemWatcher ();
    parameters: []
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> класса, с заданным каталогом для контроля."
  remarks: "> [!NOTE]Настроек компонент не будет отслеживать заданную папку до <xref:System.IO.FileSystemWatcher.Path%2A>имеет значение, и <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>является `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       Компонент может следить за файлами на персональном компьютере, на сетевом диске или удаленном компьютере.       Не может отслеживать удаленный компьютер не поддерживает Windows NT или Windows 2000. Не может отслеживать удаленный компьютер Windows NT 4.0 с компьютера Windows NT 4.0. <xref:System.IO.FileSystemWatcher.Filter%2A>Свойство имеет значение по умолчанию отслеживаются все файлы.</xref:System.IO.FileSystemWatcher.Filter%2A>"
  syntax:
    content: public FileSystemWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "Контролируемый каталог в стандартной записи или нотации соглашения об универсальных именах (UNC)."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> Параметра является пустая строка (»»).       - или - путь, заданный <code> path </code> параметр не существует."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>имеет слишком большую длину."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> класса с заданным каталогом и типом файлов для контроля."
  remarks: "> [!NOTE]Настроек компонент не будет отслеживать заданную папку до <xref:System.IO.FileSystemWatcher.Path%2A>имеет значение, и <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>является `true`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A> </xref:System.IO.FileSystemWatcher.Path%2A>       Компонент может следить за файлами на персональном компьютере, на сетевом диске или удаленном компьютере.       Не может отслеживать удаленный компьютер не поддерживает Windows NT или Windows 2000. Не может отслеживать удаленный компьютер Windows NT 4.0 с компьютера Windows NT 4.0."
  syntax:
    content: public FileSystemWatcher (string path, string filter);
    parameters:
    - id: path
      type: System.String
      description: "Контролируемый каталог в стандартной записи или нотации соглашения об универсальных именах (UNC)."
    - id: filter
      type: System.String
      description: "Тип отслеживаемых файлов. Например «*.txt» отслеживает изменения во все текстовые файлы."
  overload: System.IO.FileSystemWatcher.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>filter</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code> Параметра является пустая строка (»»).       - или - путь, заданный <code> path </code> параметр не существует."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "<code>path</code>имеет слишком большую длину."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.BeginInit
  id: BeginInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Начинает инициализацию <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> используемого в форме или другим компонентом. Инициализация происходит во время выполнения."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] Разработки, среда использует этот метод для запуска инициализации компонента, используемого в форме или другим компонентом. <xref:System.IO.FileSystemWatcher.EndInit%2A>Метод завершает инициализацию.</xref:System.IO.FileSystemWatcher.EndInit%2A> С помощью BeginInit и <xref:System.IO.FileSystemWatcher.EndInit%2A>методы предотвращает использование до полной инициализации элемента управления.</xref:System.IO.FileSystemWatcher.EndInit%2A>"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Возникает при создании файла или каталога по заданному <xref:System.IO.FileSystemWatcher.Path*>изменяется.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Событие изменения возникает при изменении размера, системных атрибутов, последней записи времени, время последнего доступа или разрешений безопасности файла или каталога в контролируемом.      Настроек [!NOTE] настроек Общие операции файловой системы могут вызывать более одного события. Например, при перемещении файла из одной папки в другую несколько <xref:System.IO.FileSystemWatcher.OnChanged%2A>и некоторые <xref:System.IO.FileSystemWatcher.OnCreated%2A>и <xref:System.IO.FileSystemWatcher.OnDeleted%2A>события могут возникать.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Поэтому при перемещении файла является сложной операцией, которая состоит из нескольких простых операций, создание нескольких событий. Аналогично некоторые приложения (например, антивирусное программное обеспечение) могут вызывать дополнительные события файловой системы, выявляемых <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>       Используйте <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>для ограничения числа уведомлений, возникающих при обработке этого события.</xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      Настроек [!NOTE] настроек событие изменения возникает неожиданно при файл будет переименован, но не возникает при переименовании каталога. Для отслеживания переименований используйте <xref:System.IO.FileSystemWatcher.Renamed>событий.</xref:System.IO.FileSystemWatcher.Renamed>      Настроек [!NOTE] настроек порядок, в котором событие изменения вызывается соединенных <xref:System.IO.FileSystemWatcher>события может измениться при <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A>свойство не `null`.</xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> </xref:System.IO.FileSystemWatcher>"
  example:
  - "The following example uses the Changed event to display the file path to the console whenever the watched file is changed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Changed;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Возникает при создании файла или каталога по заданному <xref:System.IO.FileSystemWatcher.Path*>создается.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a Created event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a Created event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a Created event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Created event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`.  \n  \n The <xref:System.IO.FileSystemWatcher.OnCreated%2A> event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the <xref:System.IO.FileSystemWatcher.OnCreated%2A> event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events."
  example:
  - "The following example uses the Created event to display the file path to the console whenever the watched file is created.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Created;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Возникает при создании файла или каталога по заданному <xref:System.IO.FileSystemWatcher.Path*>удаляется.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory would raise two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a Deleted event would be raised by FileSystemWatcher1.  \n  \n> [!NOTE]\n>  Common file system operations might raise more than one event. For example, when a file is moved from one directory to another, several <xref:System.IO.FileSystemWatcher.OnChanged%2A> and some <xref:System.IO.FileSystemWatcher.OnCreated%2A> and <xref:System.IO.FileSystemWatcher.OnDeleted%2A> events might be raised. Moving a file is a complex operation that consists of multiple simple operations, therefore raising multiple events. Likewise, some applications (for example, antivirus software) might cause additional file system events that are detected by <xref:System.IO.FileSystemWatcher>.  \n  \n> [!NOTE]\n>  The order in which the Deleted event is raised in relation to the other <xref:System.IO.FileSystemWatcher> events may change when the <xref:System.IO.FileSystemWatcher.SynchronizingObject%2A> property is not `null`."
  example:
  - "The following example uses the Deleted event to display the file path to the console whenever the watched file is deleted.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public event System.IO.FileSystemEventHandler Deleted;
    return:
      type: System.IO.FileSystemEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Освобождает неуправляемые ресурсы, используемые <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> и при необходимости освобождает также управляемые ресурсы."
  remarks: "Этот метод вызывается методом открытые <xref:System.ComponentModel.Component.Dispose%2A>метод и <xref:System.Object.Finalize%2A>метод.</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>вызывает защищенный метод Dispose с `disposing` равным `true`.</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>вызывает метод Dispose с `disposing` значение `false`.</xref:System.Object.Finalize%2A>       При `disposing` параметр `true`, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.IO.Compression.DeflateStream>ссылки.</xref:System.IO.Compression.DeflateStream> Этот метод вызывает <xref:System.ComponentModel.Component.Dispose%2A>метод для каждого объекта, на который указывает ссылка.</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>для освобождения управляемых и неуправляемых ресурсов; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> для освобождения только неуправляемых ресурсов."
  overload: System.IO.FileSystemWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает значение, указывающее, доступен ли данный компонент."
  remarks: "Компонент не вызывает события, если выбрать значение EnableRaisingEvents `true`.      Настроек [!NOTE] настроек компонент не будет отслеживать заданную папку до <xref:System.IO.FileSystemWatcher.Path%2A>свойство было задано и EnableRaisingEvents `true`.</xref:System.IO.FileSystemWatcher.Path%2A>       <xref:System.IO.FileSystemWatcher.WaitForChanged%2A>Метод позволяет обработчиков событий для реагирования на изменения файла, даже если это свойство имеет значение `false`.</xref:System.IO.FileSystemWatcher.WaitForChanged%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если компонент включен. в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. При использовании компонента в конструкторе в [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)], значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.EnableRaisingEvents*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> Объект был удален."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Текущая операционная система не является Microsoft Windows NT или более поздней версии."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Каталог, указанный в <xref:System.IO.FileSystemWatcher.Path*>не найден.</xref:System.IO.FileSystemWatcher.Path*>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.IO.FileSystemWatcher.Path*>не указан или является недопустимым.</xref:System.IO.FileSystemWatcher.Path*>"
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.EndInit
  id: EndInit
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Завершает инициализацию <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> используемого в форме или другим компонентом. Инициализация происходит во время выполнения."
  remarks: "[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] Разработки среды использует этот метод для завершения инициализации компонента, используемого в форме или другим компонентом. <xref:System.IO.FileSystemWatcher.BeginInit%2A>Метод начинает инициализацию.</xref:System.IO.FileSystemWatcher.BeginInit%2A> С помощью <xref:System.IO.FileSystemWatcher.BeginInit%2A>и методы EndInit предотвращает использование до полной инициализации элемента управления.</xref:System.IO.FileSystemWatcher.BeginInit%2A>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.IO.FileSystemWatcher.EndInit*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Происходит, когда экземпляр <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref> не удается продолжить отслеживание изменений, или при переполнении внутреннего буфера."
  remarks: "Это событие возникает каждый раз, когда что-нибудь предотвращает <xref:System.IO.FileSystemWatcher>объекта из наблюдения за изменениями.</xref:System.IO.FileSystemWatcher> Например если потеряно подключение к этому каталогу объект наблюдает за изменениями в удаленном каталоге, возникает событие ошибки.       Система уведомляет вас об изменениях файлов и сохраняет эти изменения в буфере, который компонент создает и передает в API-интерфейсы. Если за короткое время большое количество изменений, буфер может переполниться. В результате этот компонент будет отслеживать изменения в каталоге и будет давать только общие уведомления. Увеличение размера буфера является сложным, так как он поступает из не разбиением на страницы памяти, который не может быть переключен на диск, поэтому сохранить как можно меньший буфер. Чтобы избежать переполнения буфера, используйте <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.Filter%2A>, и <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>для фильтрации ненужных уведомлений об изменениях.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>      Настроек [!NOTE] настроек Общие операции файловой системы могут вызывать более одного события. Например, при перемещении файла из одной папки в другую несколько <xref:System.IO.FileSystemWatcher.OnChanged%2A>и некоторые <xref:System.IO.FileSystemWatcher.OnCreated%2A>и <xref:System.IO.FileSystemWatcher.OnDeleted%2A>события могут возникать.</xref:System.IO.FileSystemWatcher.OnDeleted%2A> </xref:System.IO.FileSystemWatcher.OnCreated%2A> </xref:System.IO.FileSystemWatcher.OnChanged%2A> Поэтому при перемещении файла является сложной операцией, которая состоит из нескольких простых операций, создание нескольких событий. Аналогично некоторые приложения (например, антивирусное программное обеспечение) могут вызывать дополнительные события файловой системы, выявляемых <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public event System.IO.ErrorEventHandler Error;
    return:
      type: System.IO.ErrorEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает строку фильтра, используемую для определения файлов, контролируемых в каталоге."
  remarks: "To watch changes in all files, set the Filter property to an empty string (\"\"). To watch a specific file, set the Filter property to the file name. For example, to watch for changes in the file MyDoc.txt, set the Filter property to \"MyDoc.txt\". You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to \"*.txt\". Use of multiple filters such as \"\\*.txt&#124;\\*.doc\" is not supported.  \n  \n The Filter property can be changed after the <xref:System.IO.FileSystemWatcher> object has started receiving events.  \n  \n For more information about filtering out unwanted notifications, see the <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, and <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> properties.  \n  \n Filter accepts wildcards for matching files, as shown in the following examples.  \n  \n|Filter string|Watches the following files|  \n|-------------------|---------------------------------|  \n|*.\\*|All files (default). An empty string (\"\") also watches all files.|  \n|*.txt|All files with a \"txt\" extension.|  \n|*recipe.doc|All files ending in \"recipe\" with a \"doc\" extension.|  \n|win*.xml|All files beginning with \"win\" with an \"xml\" extension.|  \n|Sales*200?.xls|Matches the following:<br /><br /> Sales July 2001.xlsSales Aug 2002.xlsSales March 2004.xls<br /><br /> but does not match:<br /><br /> Sales Nov 1999.xls|  \n|MyReport.Doc|Watches only MyReport.doc|"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_3_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_3_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_3_1.vb)]"
  syntax:
    content: public string Filter { get; set; }
    return:
      type: System.String
      description: "Строка фильтра. Значение по умолчанию — «*. \\*&quot; (Отслеживаются все файлы)."
  overload: System.IO.FileSystemWatcher.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает значение, показывающее необходимость контроля вложенных каталогов по указанному пути."
  remarks: "Значение IncludeSubdirectories `true` , если требуется отслеживать уведомления об изменениях для файлов и папок, содержащихся в каталоге, заданном через <xref:System.IO.FileSystemWatcher.Path%2A>свойство и его подкаталогах.</xref:System.IO.FileSystemWatcher.Path%2A> Свойства IncludeSubdirectories `false` помогает снизить количество уведомлений, отправляемых внутреннего буфера. Дополнительные сведения о фильтрации нежелательных уведомлений см. в разделе <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>и <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>Свойства.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       Когда `true`, IncludeSubdirectories является рекурсивной по дереву всей sub, а не только непосредственных дочерних каталогов. Возвращает относительный путь к файлу или каталогу в ветви в <xref:System.IO.FileSystemEventArgs.Name%2A>Свойства и <xref:System.IO.FileSystemEventArgs> <xref:System.IO.RenamedEventArgs.OldName%2A>Свойства, <xref:System.IO.RenamedEventArgs>в зависимости от изменения просмотре for.</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldName%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.Name%2A> Полный путь можно получить из <xref:System.IO.FileSystemEventArgs.FullPath%2A>Свойства и <xref:System.IO.FileSystemEventArgs> <xref:System.IO.RenamedEventArgs.OldFullPath%2A>Свойства, <xref:System.IO.RenamedEventArgs>в зависимости от изменения просмотре for.</xref:System.IO.RenamedEventArgs> </xref:System.IO.RenamedEventArgs.OldFullPath%2A> </xref:System.IO.FileSystemEventArgs> </xref:System.IO.FileSystemEventArgs.FullPath%2A>       Если создается каталог в каталоге поддерева просмотре и IncludeSubdirectories `true`, этот каталог будет автоматически отслеживаться."
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если требуется контроль вложенных каталогов; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.IncludeSubdirectories*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает размер (в байтах) внутреннего буфера."
  remarks: "Можно задать буфер размером 4 КБ или большего размера, но не должна превышать 64 КБ. При попытке задать свойство InternalBufferSize меньше, чем 4096 байт, значение удаляются, а свойство InternalBufferSize равно 4 096 байт. Для повышения производительности рекомендуется используйте кратен 4 КБ на компьютерах с процессорами Intel.       Системные уведомления об изменении файла и сохраняет эти изменения в буфере, который компонент создает и передает в API-интерфейсы. Каждое событие может использовать до 16 байтов памяти, не указывая имя файла. Если за короткое время большое количество изменений, буфер может переполниться. В результате этот компонент будет отслеживать изменения в каталоге и будет давать только общие уведомления. Увеличение размера буфера предотвращает отсутствует файловой системы событий изменения. Тем не менее увеличение размера буфера расходуется, так как он поступает из невыгружаемой памяти, который не может быть переключен на диск, поэтому сохраните как можно меньший буфер. Чтобы избежать переполнения буфера, используйте <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>и <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>для фильтрации ненужных уведомлений об изменениях.</xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>"
  syntax:
    content: public int InternalBufferSize { get; set; }
    return:
      type: System.Int32
      description: "Размер внутреннего буфера в байтах. Значение по умолчанию — 8192 (8 КБ)."
  overload: System.IO.FileSystemWatcher.InternalBufferSize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает тип отслеживаемых изменений."
  remarks: "Можно объединять элементы <xref:System.IO.NotifyFilters>перечисления для наблюдения за более чем один тип изменений одновременно.</xref:System.IO.NotifyFilters> Например, можно отслеживать изменения размера файла, а также для изменения в `LastWrite` времени. Это событие возникает есть изменения в размере файла или папки или изменении `LastWrite` время из файла или папки.       Это один из способов отфильтровывайте нежелательные уведомления об. Дополнительные сведения о фильтрации нежелательных уведомлений см. в разделе <xref:System.IO.FileSystemWatcher.Filter%2A>, <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A>, и <xref:System.IO.FileSystemWatcher.InternalBufferSize%2A>Свойства.</xref:System.IO.FileSystemWatcher.InternalBufferSize%2A> </xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> </xref:System.IO.FileSystemWatcher.Filter%2A>"
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_0_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_0_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_0_1.vb)]"
  syntax:
    content: public System.IO.NotifyFilters NotifyFilter { get; set; }
    return:
      type: System.IO.NotifyFilters
      description: "Один из <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> значения. Значение по умолчанию — побитовое сочетание OR <xref uid=&quot;langword_csharp_LastWrite&quot; name=&quot;LastWrite&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_FileName&quot; name=&quot;FileName&quot; href=&quot;&quot;> </xref>, и <xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.NotifyFilter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Значение не является допустимой битовой комбинацией или из <xref href=&quot;System.IO.NotifyFilters&quot;> </xref> значения."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Недопустимое значение, которое должно быть задано."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Вызывает <xref href=&quot;System.IO.FileSystemWatcher.Changed&quot;> </xref> событий."
  remarks: "OnChanged вызывается при изменении размера, системных атрибутов, последней записи времени, время последнего доступа или разрешений безопасности файла или каталога в контролируемом.       Используйте <xref:System.IO.FileSystemWatcher.NotifyFilter%2A>свойство, чтобы ограничить число событий возникает, когда <xref:System.IO.FileSystemWatcher.Changed>событие обрабатывается.</xref:System.IO.FileSystemWatcher.Changed> </xref:System.IO.FileSystemWatcher.NotifyFilter%2A>       <xref:System.IO.FileSystemWatcher.OnCreated%2A>События как только создается файл.</xref:System.IO.FileSystemWatcher.OnCreated%2A> Если файл копируется или перемещается в контролируемому каталогу, <xref:System.IO.FileSystemWatcher.OnCreated%2A>событие будет вызываться немедленно, следуют одно или несколько событий OnChanged.</xref:System.IO.FileSystemWatcher.OnCreated%2A>       При возникновении события вызывается обработчик события в делегате. Дополнительные сведения см. в разделе [события](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnChanged (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Объект <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.IO.FileSystemWatcher.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Вызывает <xref href=&quot;System.IO.FileSystemWatcher.Created&quot;> </xref> событий."
  remarks: "OnCreated is called when a file or directory is created in the directory being monitored.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" and paste it into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised in FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised in FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised in FileSystemWatcher1.  \n  \n The OnCreated event is raised as soon as a file is created. If a file is being copied or transferred into a watched directory, the OnCreated event will be raised immediately, followed by one or more <xref:System.IO.FileSystemWatcher.OnChanged%2A> events.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnCreated (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Объект <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.IO.FileSystemWatcher.OnCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Вызывает <xref href=&quot;System.IO.FileSystemWatcher.Deleted&quot;> </xref> событий."
  remarks: "OnDeleted is called when a file or directory, within the directory being monitored, is deleted.  \n  \n Some common occurrences, such as copying or moving a file or directory, do not correspond directly to an event, but these occurrences do cause events to be raised. When you copy a file or directory, the system raises a <xref:System.IO.FileSystemWatcher.Created> event in the directory to which the file was copied, if that directory is being watched. If the directory from which you copied was being watched by another instance of <xref:System.IO.FileSystemWatcher>, no event would be raised. For example, you create two instances of <xref:System.IO.FileSystemWatcher>. FileSystemWatcher1 is set to watch \"C:\\My Documents\", and FileSystemWatcher2 is set to watch \"C:\\Your Documents\". If you copy a file from \"My Documents\" into \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event will be raised by FileSystemWatcher2, but no event is raised for FileSystemWatcher1. Unlike copying, moving a file or directory raises two events. From the previous example, if you moved a file from \"My Documents\" to \"Your Documents\", a <xref:System.IO.FileSystemWatcher.Created> event would be raised by FileSystemWatcher2 and a <xref:System.IO.FileSystemWatcher.Deleted> event would be raised by FileSystemWatcher1.  \n  \n Raising an event invokes the event handler through a delegate. For more information, see [Events](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnDeleted (System.IO.FileSystemEventArgs e);
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "Объект <xref href=&quot;System.IO.FileSystemEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.IO.FileSystemWatcher.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Вызывает <xref href=&quot;System.IO.FileSystemWatcher.Error&quot;> </xref> событий."
  remarks: "OnError вызывается при возникновении ошибки.       При возникновении события вызывается обработчик события в делегате. Дополнительные сведения см. в разделе [события](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnError (System.IO.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "<xref href=&quot;System.IO.ErrorEventArgs&quot;> </xref> , Содержащий данные события."
  overload: System.IO.FileSystemWatcher.OnError*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Вызывает <xref href=&quot;System.IO.FileSystemWatcher.Renamed&quot;> </xref> событий."
  remarks: "При переименовании файла или каталога в контролируемом вызове метода OnRenamed.       При возникновении события вызывается обработчик события в делегате. Дополнительные сведения см. в разделе [события](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected void OnRenamed (System.IO.RenamedEventArgs e);
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "Объект <xref href=&quot;System.IO.RenamedEventArgs&quot;> </xref> , содержащий данные события."
  overload: System.IO.FileSystemWatcher.OnRenamed*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает путь каталога."
  remarks: "This is a fully qualified path to a directory. If the <xref:System.IO.FileSystemWatcher.IncludeSubdirectories%2A> property is `true`, this directory is the root at which the system watches for changes; otherwise it is the only directory watched. To watch a specific file, set the Path property to the fully qualified, correct directory, and the <xref:System.IO.FileSystemWatcher.Filter%2A> property to the file name.  \n  \n The Path property supports Universal Naming Convention (UNC) paths.  \n  \n> [!NOTE]\n>  This property must be set before the component can watch for changes.  \n  \n When a directory is renamed, the <xref:System.IO.FileSystemWatcher> automatically reattaches itself to the newly renamed item. For example, if you set the Path property to \"C:\\My Documents\" and then manually rename the directory to \"C:\\Your Documents\", the component continues listening for change notifications on the newly renamed directory. However, when you ask for the Path property, it contains the old path. This happens because the component determines what directory watches based on the handle, rather than the name of the directory. Renaming does not affect the handle. So, if you destroy the component, and then recreate it without updating the Path property, your application will fail because the directory no longer exists."
  example:
  - "The following example creates a <xref:System.IO.FileSystemWatcher> to watch the directory specified at run time. The component is set to watch for changes in `LastWrite` and `LastAccess` time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  \n  \n Use the <xref:System.Diagnostics> and <xref:System.IO> namespaces for this example.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/p-system.io.filesystemwa_1_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/p-system.io.filesystemwa_1_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/p-system.io.filesystemwa_1_1.vb)]"
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "Путь для отслеживания. Значение по умолчанию — пустая строка (»»)."
  overload: System.IO.FileSystemWatcher.Path*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Указанный путь не существует или не найден.       - или - указанный путь содержит подстановочные знаки.       - или - указанный путь содержит недопустимые символы."
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  assemblies:
  - System
  namespace: System.IO
  summary: "Возникает при создании файла или каталога по заданному <xref:System.IO.FileSystemWatcher.Path*>переименовывается.</xref:System.IO.FileSystemWatcher.Path*>"
  remarks: "Переименование каталога, к которому вы смотрите не приведет к уведомление. Уведомления возникают только для элементов каталога, к которому просмотре."
  example:
  - "The following example uses the Renamed event to display the file path to the console whenever the watched file is renamed.  \n  \n [!code-cpp[Classic NotifyFilters Example#1](~/add/codesnippet/cpp/e-system.io.filesystemwa_2_1.cpp)]\n [!code-cs[Classic NotifyFilters Example#1](~/add/codesnippet/csharp/e-system.io.filesystemwa_2_1.cs)]\n [!code-vb[Classic NotifyFilters Example#1](~/add/codesnippet/visualbasic/e-system.io.filesystemwa_2_1.vb)]"
  syntax:
    content: public event System.IO.RenamedEventHandler Renamed;
    return:
      type: System.IO.RenamedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.Site
  id: Site
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает <xref href=&quot;System.ComponentModel.ISite&quot;> </xref> для <xref href=&quot;System.IO.FileSystemWatcher&quot;> </xref>."
  remarks: "Узлы связывают <xref:System.ComponentModel.Component>для <xref:System.ComponentModel.Design.IDesignerHost.Container%2A>и разрешить связь между ними, а также предоставляют способ для управления компонентами в контейнере.</xref:System.ComponentModel.Design.IDesignerHost.Container%2A> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "An <xref href=&quot;System.ComponentModel.ISite&quot;></xref> for the <xref href=&quot;System.IO.FileSystemWatcher&quot;></xref>."
  overload: System.IO.FileSystemWatcher.Site*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  id: SynchronizingObject
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
  type: Property
  assemblies:
  - System
  namespace: System.IO
  summary: "Возвращает или задает объект, используемый для маршалинга вызовов обработчика событий, инициированных в результате изменения каталога."
  remarks: "При SynchronizingObject `null`, методы, обрабатывающие <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, и <xref:System.IO.FileSystemWatcher.Renamed>события вызываются в поток из пула потоков системы.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Дополнительные сведения о системной группе потоков см. в разделе <xref:System.Threading.ThreadPool>.</xref:System.Threading.ThreadPool>       Когда <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, и <xref:System.IO.FileSystemWatcher.Renamed>события обрабатываются компонентом Windows Forms, такие как <xref:System.Windows.Forms.Button>, обращение к компоненту через пул потоков системы могут не работать или может привести к возникновению исключения.</xref:System.Windows.Forms.Button> </xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed> Избежать этого, задав значение компонент Windows Forms, который вызывает методы, обрабатывающие SynchronizingObject <xref:System.IO.FileSystemWatcher.Changed>, <xref:System.IO.FileSystemWatcher.Created>, <xref:System.IO.FileSystemWatcher.Deleted>, и <xref:System.IO.FileSystemWatcher.Renamed>событий для вызова в том же потоке, в котором был создан компонент.</xref:System.IO.FileSystemWatcher.Renamed> </xref:System.IO.FileSystemWatcher.Deleted> </xref:System.IO.FileSystemWatcher.Created> </xref:System.IO.FileSystemWatcher.Changed>       Если <xref:System.IO.FileSystemWatcher>используется внутри [!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)] в конструкторе Windows Forms, SynchronizingObject автоматически настраивает элемент управления, содержащий <xref:System.IO.FileSystemWatcher>.</xref:System.IO.FileSystemWatcher> </xref:System.IO.FileSystemWatcher> Например, если поместить <xref:System.IO.FileSystemWatcher>в конструкторе Form1 (наследуется от класса <xref:System.Windows.Forms.Form>) свойство SynchronizingObject <xref:System.IO.FileSystemWatcher>устанавливается на экземпляр Form1.</xref:System.IO.FileSystemWatcher> </xref:System.Windows.Forms.Form> </xref:System.IO.FileSystemWatcher>"
  syntax:
    content: public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }
    return:
      type: System.ComponentModel.ISynchronizeInvoke
      description: "<xref href=&quot;System.ComponentModel.ISynchronizeInvoke&quot;> </xref> , Представляющий объект, используемый для маршалинга вызовов обработчика событий, инициированных в результате изменения каталога. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.IO.FileSystemWatcher.SynchronizingObject*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Синхронный метод, возвращающий структуру, содержащую сведения о произошедших изменениях, заданным типом изменений, которые вы хотите отслеживать."
  remarks: "Этот метод ожидает бесконечно, пока выполняется первое изменение и затем возвращает. Это эквивалентно использованию WaitForChanged с `timeout` равным-1.      Настроек [!NOTE] настроек этот метод позволяет обработчик событий, вызываемый реагировать на файле даже в случае изменения <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>свойству `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       В некоторых системах <xref:System.IO.FileSystemWatcher>отчеты изменений в файлы с помощью короткого формата имени файлов формата 8.3.</xref:System.IO.FileSystemWatcher> Например, изменение «LongFileName.LongExtension» может отображаться как «LongFi ~. Lon»."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "<xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> Для отслеживания."
    return:
      type: System.IO.WaitForChangedResult
      description: "Объект <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> , содержащую сведения о произошедших изменениях."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO
  summary: "Синхронный метод, возвращающий структуру, содержащую сведения о произошедших изменениях, заданным типом изменений, которые вы хотите контролировать и временем (в миллисекундах) ожидания до истечения времени ожидания."
  remarks: "Этот метод ожидает, пока происходит изменение, или истечет время. Значение -1 для `timeout` параметр означает неограниченное время ожидания.      Настроек [!NOTE] настроек этот метод позволяет обработчик событий, вызываемый реагировать на файле даже в случае изменения <xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>свойству `false`.</xref:System.IO.FileSystemWatcher.EnableRaisingEvents%2A>       В некоторых системах <xref:System.IO.FileSystemWatcher>отчеты изменений в файлы с помощью короткого формата имени файлов формата 8.3.</xref:System.IO.FileSystemWatcher> Например, изменение «LongFileName.LongExtension» может отображаться как «LongFi ~. Lon»."
  syntax:
    content: public System.IO.WaitForChangedResult WaitForChanged (System.IO.WatcherChangeTypes changeType, int timeout);
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "<xref href=&quot;System.IO.WatcherChangeTypes&quot;> </xref> Для отслеживания."
    - id: timeout
      type: System.Int32
      description: "Время (в миллисекундах) ожидания до истечения времени ожидания."
    return:
      type: System.IO.WaitForChangedResult
      description: "Объект <xref href=&quot;System.IO.WaitForChangedResult&quot;> </xref> , содержащую сведения о произошедших изменениях."
  overload: System.IO.FileSystemWatcher.WaitForChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.IO.FileSystemWatcher.#ctor
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher()
  nameWithType: FileSystemWatcher.FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher(String,String)
  nameWithType: FileSystemWatcher.FileSystemWatcher(String,String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(String,String)
- uid: System.IO.FileSystemWatcher.BeginInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit()
  nameWithType: FileSystemWatcher.BeginInit()
  fullName: System.IO.FileSystemWatcher.BeginInit()
- uid: System.IO.FileSystemWatcher.Changed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Changed
  nameWithType: FileSystemWatcher.Changed
  fullName: System.IO.FileSystemWatcher.Changed
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  nameWithType: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
- uid: System.IO.FileSystemWatcher.Created
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Created
  nameWithType: FileSystemWatcher.Created
  fullName: System.IO.FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Deleted
  nameWithType: FileSystemWatcher.Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileSystemWatcher.Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit()
  nameWithType: FileSystemWatcher.EndInit()
  fullName: System.IO.FileSystemWatcher.EndInit()
- uid: System.IO.FileSystemWatcher.Error
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Error
  nameWithType: FileSystemWatcher.Error
  fullName: System.IO.FileSystemWatcher.Error
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  nameWithType: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
- uid: System.IO.FileSystemWatcher.Filter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
  fullName: System.IO.FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.FileSystemWatcher.NotifyFilter
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  nameWithType: NotifyFilters
  fullName: System.IO.NotifyFilters
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  nameWithType: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted(FileSystemEventArgs)
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError(ErrorEventArgs)
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed(RenamedEventArgs)
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  nameWithType: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
- uid: System.IO.FileSystemWatcher.Path
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
  fullName: System.IO.FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Renamed
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Renamed
  nameWithType: FileSystemWatcher.Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  nameWithType: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
- uid: System.IO.FileSystemWatcher.Site
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
  fullName: System.IO.FileSystemWatcher.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.IO.FileSystemWatcher.SynchronizingObject
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
  fullName: System.IO.FileSystemWatcher.SynchronizingObject
- uid: System.ComponentModel.ISynchronizeInvoke
  parent: System.ComponentModel
  isExternal: false
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  nameWithType: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  nameWithType: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged(WatcherChangeTypes,Int32)
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(WatcherChangeTypes,Int32)
- uid: System.IO.FileSystemWatcher.#ctor*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: FileSystemWatcher
  nameWithType: FileSystemWatcher.FileSystemWatcher
- uid: System.IO.FileSystemWatcher.BeginInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: BeginInit
  nameWithType: FileSystemWatcher.BeginInit
- uid: System.IO.FileSystemWatcher.Dispose*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Dispose
  nameWithType: FileSystemWatcher.Dispose
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EnableRaisingEvents
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.EndInit*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: EndInit
  nameWithType: FileSystemWatcher.EndInit
- uid: System.IO.FileSystemWatcher.Filter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Filter
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: IncludeSubdirectories
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: InternalBufferSize
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: NotifyFilter
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.OnChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnChanged
  nameWithType: FileSystemWatcher.OnChanged
- uid: System.IO.FileSystemWatcher.OnCreated*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnCreated
  nameWithType: FileSystemWatcher.OnCreated
- uid: System.IO.FileSystemWatcher.OnDeleted*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnDeleted
  nameWithType: FileSystemWatcher.OnDeleted
- uid: System.IO.FileSystemWatcher.OnError*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnError
  nameWithType: FileSystemWatcher.OnError
- uid: System.IO.FileSystemWatcher.OnRenamed*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: OnRenamed
  nameWithType: FileSystemWatcher.OnRenamed
- uid: System.IO.FileSystemWatcher.Path*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Path
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Site*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: Site
  nameWithType: FileSystemWatcher.Site
- uid: System.IO.FileSystemWatcher.SynchronizingObject*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: SynchronizingObject
  nameWithType: FileSystemWatcher.SynchronizingObject
- uid: System.IO.FileSystemWatcher.WaitForChanged*
  parent: System.IO.FileSystemWatcher
  isExternal: false
  name: WaitForChanged
  nameWithType: FileSystemWatcher.WaitForChanged
