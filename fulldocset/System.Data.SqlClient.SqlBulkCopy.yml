### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "Позволяет эффективно выполнять массовую загрузку таблицы SQL Server с данными из другого источника."
  remarks: "Microsoft SQL Server включает популярную программу командной строки **bcp** для перемещения данных из одной таблицы в другую, либо на одном сервере или между серверами. Класс SqlBulkCopy позволяет разрабатывать решения на управляемом коде, обеспечивающие аналогичную функциональность. Существуют другие способы загрузки данных в таблицу SQL Server (например, инструкция INSERT), но SqlBulkCopy обеспечивает значительное преимущество в производительности по ним.       Класс SqlBulkCopy используется для записи данных только в таблицах SQL Server. Источник данных не только SQL Server; можно использовать любой источник данных, при условии, что данные можно будет загрузить в <xref:System.Data.DataTable>экземпляра или считать <xref:System.Data.IDataReader>экземпляра.</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy завершится ошибкой, если осуществлять массовую загрузку <xref:System.Data.DataTable>столбец типа <xref:System.Data.SqlTypes.SqlDateTime>в SQL Server добавлен столбец, тип которого является одним из типов даты и времени в SQL Server 2008.</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> класса, используя указанный открытый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>."
  remarks: "Так как подключение уже открыто при <xref:System.Data.SqlClient.SqlBulkCopy>экземпляр инициализирован, подключение остается открытым после <xref:System.Data.SqlClient.SqlBulkCopy>экземпляр закрыт.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Если `connection` аргумент имеет значение null, <xref:System.ArgumentNullException>возникает исключение.</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Уже открытый <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> экземпляр, который будет использоваться для выполнения операции массового копирования. Если строка подключения не использует <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, можно использовать <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> для передачи идентификатора пользователя и пароля, более безопасно, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует и открывает новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> на основе предоставленного <code> connectionString </code>. Конструктор использует <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> для инициализации нового экземпляра <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> класса."
  remarks: "Соединение закрывается автоматически в конце операции массового копирования.       Если `connectionString` имеет значение null, <xref:System.ArgumentNullException>возникает исключение.</xref:System.ArgumentNullException> Если `connectionString` является пустой строкой, <xref:System.ArgumentException>возникает исключение.</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "Строка, определяющая подключение, которое будет открыто для использования <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> экземпляра. Если строка подключения не использует <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, можно использовать &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; или &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; и <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> для передачи идентификатора пользователя и пароля, более безопасно, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует и открывает новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> на основе предоставленного <code> connectionString </code>. Конструктор использует этот <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> для инициализации нового экземпляра <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> класса. <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> Экземпляр работает в соответствии со значениями, заданными в <code> copyOptions </code> параметра."
  remarks: "Можно получить подробные сведения обо всех параметрах массового копирования в <xref:System.Data.SqlClient.SqlBulkCopyOptions>раздела.</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "Строка, определяющая подключение, которое будет открыто для использования <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> экземпляра. Если строка подключения не использует <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, можно использовать &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; или &lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt; и <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> для передачи идентификатора пользователя и пароля, более безопасно, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Сочетание значений из <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> перечисления, определяющее, какие строки источника данных копируются в целевую таблицу."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> класса, используя указанный открытый экземпляр <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>. <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> Экземпляр работает в соответствии со значениями, заданными в <code> copyOptions </code> параметра. Если ненулевое значение <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> будет указан, операция копирования будет выполнена в контексте этой транзакции."
  remarks: "Если параметры включают в себя `UseInternalTransaction` и `externalTransaction` аргумент не равен null, **InvalidArgumentException** возникает исключение.       Примеры, демонстрирующие использование `SqlBulkCopy` в транзакции, в разделе [транзакции и операции массового копирования](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "Уже открытый <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> экземпляр, который будет использоваться для выполнения операции массового копирования. Если строка подключения не использует <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>, можно использовать <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref> для передачи идентификатора пользователя и пароля, более безопасно, чем при указании идентификатора пользователя и пароля в виде текста в строке подключения."
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "Сочетание значений из <xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;> </xref> перечисления, определяющее, какие строки источника данных копируются в целевую таблицу."
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "Существующий <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref> экземпляра, в котором будет выполняться массовое копирование."
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Количество строк в каждом пакете. В конце каждого пакета строк в пакете, отправляются на сервер."
  remarks: "Пакет завершается после завершения обработки строк BatchSize или отсутствуют дополнительные строки для отправки в целевой источник данных.       Ноль (по умолчанию) указывает, что каждый <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>операция представляет один пакет.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Если <xref:System.Data.SqlClient.SqlBulkCopy>экземпляр был объявлен без <xref:System.Data.SqlClient.SqlBulkCopyOptions>параметр в результате строки направляются в строк BatchSize server одновременно, но никакие действия, связанные с транзакциями не выполняются.</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> Если <xref:System.Data.SqlClient.SqlBulkCopyOptions>действует, каждый пакет строк вставляется как отдельная транзакция.</xref:System.Data.SqlClient.SqlBulkCopyOptions>       Свойство BatchSize можно задать в любое время. Если уже выполняется массовое копирование, текущий пакет изменяется в соответствии с размером предыдущего пакета. Последующие пакеты используют новый размер. Если BatchSize изначально равно нулю и измененные при <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>операция уже выполняется, что операция загружает данные в виде единого пакета.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Любые последующие <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>операций на том же <xref:System.Data.SqlClient.SqlBulkCopy>экземпляр использовать новый BatchSize.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "Целочисленное значение свойства BatchSize, или нуль, если значение не было задано."
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Число секунд для выполнения операции до истечения времени ожидания."
  remarks: "Если операция включает время ожидания, транзакция не фиксируется и все скопированные строки будут удалены из целевой таблицы."
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "Целочисленное значение свойства BulkCopyTimeout. Значение по умолчанию — 30 секунд. Значение 0 означает отсутствие ограничений; операции массового копирования будет ждать бесконечно."
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Закрывает <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> экземпляра."
  remarks: "После вызова метода Close на <xref:System.Data.SqlClient.SqlBulkCopy>объекта, никакая другая операция не завершится.</xref:System.Data.SqlClient.SqlBulkCopy> Вызывает <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>метод вызывает исключение <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Вызов метода Close из <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>событие вызывает <xref:System.InvalidOperationException>исключение.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       Обратите внимание, что открыть <xref:System.Data.SqlClient.SqlBulkCopy>экземпляры закрыты неявно в конце `using` блока.</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возвращает коллекцию <xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;> </xref> элементов. Сопоставления столбцов определяют связи между столбцами в источнике данных и столбцами в месте назначения."
  remarks: "Если источник данных и целевой таблицы имеют одинаковое количество столбцов, а также порядковый номер каждого исходного столбца в источнике данных соответствует порядковый номер соответствующего столбца назначения, коллекция ColumnMappings не нужно. Тем не менее если количества столбцов различаются, или не соответствуют порядковые, необходимо использовать ColumnMappings, чтобы убедиться в том, что данные копируются в нужные столбцы.       Во время выполнения операции массового копирования Чтобы получить доступ к этой коллекции, но не может быть изменено. Любая попытка изменить вызывает исключение <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "Коллекция сопоставлений столбцов. По умолчанию является пустой коллекцией."
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Имя целевой таблицы на сервере."
  remarks: "Если DestinationTableName не было задано при <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>вызове <xref:System.ArgumentNullException>возникает исключение.</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       Если DestinationTableName изменяется во время <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>операция выполняется, это изменение не влияет на текущую операцию.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> Новое значение DestinationTableName будет использоваться в следующий раз <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>вызывается метод.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName состоит трехкомпонентного имени (`<database>.<owningschema>.<name>`). При выборе можно уточнить имя таблицы базы данных и схемы-владельца. Тем не менее, если имя таблицы используется символ подчеркивания («_») или другие специальные символы, необходимо экранировать квадратные скобки, как в имени (`[<database>.<owningschema>.<name_01>]`). Дополнительные сведения см. в разделе «Идентификаторы» электронной документации по SQL Server.       Можно выполнить массовое копирование данных во временную таблицу с помощью значения, такие как `tempdb..#table` или `tempdb.<owner>.#table` для свойства DestinationTableName."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "Строковое значение свойству DestinationTableName или значение null, если не указано."
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Включает или отключает <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> для потоковой передачи данных из <xref href=&quot;System.Data.IDataReader&quot;> </xref> объекта"
  remarks: "При EnableStreaming `true`, <xref:System.Data.SqlClient.SqlBulkCopy>считывает из <xref:System.Data.IDataReader>с помощью <xref:System.Data.CommandBehavior>, оптимизация использования памяти с помощью <xref:System.Data.IDataReader>возможности потоковой передачи.</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> Если значение false, <xref:System.Data.SqlClient.SqlBulkCopy>класс загружает все данные, возвращенные <xref:System.Data.IDataReader>объект в памяти перед отправкой его [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] или SQL Azure.</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта осуществлять потоковую передачу данных из <xref href=&quot;System.Data.IDataReader&quot;> </xref> объекта; в противном случае — значение false. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Определяет количество строк, обрабатываемых перед созданием события уведомления."
  remarks: "Это свойство предназначено для компонентов пользовательского интерфейса, отображающих прогресс операции массового копирования. Он указывает количество строк, обрабатываемых перед созданием события уведомления. Свойство NotifyAfter можно задать в любое время, даже во время операции массового копирования. Изменения, внесенные во время операции массового копирования вступают в силу после следующего уведомления. Новый параметр применяется для всех последующих операций на том же экземпляре.       Если NotifyAfter задано значение меньше нуля, <xref:System.ArgumentOutOfRangeException>возникает исключение.</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "Целочисленное значение свойства NotifyAfter, или нуль, если свойство не задано."
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Возникает при каждом изменении, указанному числу строк <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>Свойства будут обработаны.</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "Обратите внимание, что параметры <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>и <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>независимы.</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> Прием событий SqlRowsCopied не означает, что все строки, отправляются на сервер или зафиксирована.       Не удается вызвать SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) или SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) из этого события.</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> Результате <xref:System.InvalidOperationException>возникшего исключения и <xref:System.Data.SqlClient.SqlBulkCopy>состояние объекта не изменится.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> Если пользователю необходимо отменить операцию в событии <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>свойство <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>может быть использован.</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (См. [транзакции и операции массового копирования](~/add/includes/ajax-current-ext-md.md) примеры использования <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>свойство.)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>       Никаких действий, например операций транзакций поддерживается в подключении во время выполнения операции массового копирования, и рекомендуется не использовать то же подключение во время события SqlRowsCopied. Тем не менее можно открыть другое подключение."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Освобождает все ресурсы, используемые текущим экземпляром <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> класса."
  remarks: "Вызовите `Dispose` после использования <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> `Dispose` Метода <xref:System.Data.SqlClient.SqlBulkCopy>окажется в неработоспособном состоянии.</xref:System.Data.SqlClient.SqlBulkCopy> После вызова метода `Dispose`, необходимо освободить все ссылки на <xref:System.Data.SqlClient.SqlBulkCopy>, сборщик мусора мог освободить память, <xref:System.Data.SqlClient.SqlBulkCopy>занимаемую.</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/add/includes/ajax-current-ext-md.md) и [метода](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек вызова всегда `Dispose` перед освобождением последней ссылки на <xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy> В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет метод <xref:System.Data.SqlClient.SqlBulkCopy>объекта `Finalize` метод.</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Копирует все строки из предоставленного <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> массив для целевой таблицы, заданной по <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Объект <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Копирует все строки из предоставленного <xref href=&quot;System.Data.DataRow&quot;> </xref> массив для целевой таблицы, заданной по <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection>является его занят обслуживанием, и никакие другие операции выполняются в соединении.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Коллекции сопоставления из <xref:System.Data.DataRow>столбцы базы данных в целевую таблицу.</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, которые будут скопированы в целевую таблицу."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Копирует все строки в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Все строки в <xref:System.Data.DataTable>копируются в целевую таблицу, за исключением тех, которые были удалены.</xref:System.Data.DataTable>       Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection>является его занят обслуживанием, и никакие другие операции выполняются в соединении.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Коллекции сопоставления из <xref:System.Data.DataTable>столбцы базы данных в целевую таблицу.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Копирует все строки в предоставленном <xref href=&quot;System.Data.IDataReader&quot;> </xref> для целевой таблицы, заданной по <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Операция копирования начинается следующую доступную строку в модуле чтения. В большинстве случаев, средство чтения просто возвращенный <xref:System.Data.IDbCommand.ExecuteReader%2A>или аналогичные вызов, поэтому следующую доступную строку является первой строкой.</xref:System.Data.IDbCommand.ExecuteReader%2A> Для обработки нескольких результатов, вызовите <xref:System.Data.IDataReader.NextResult%2A>на модуль чтения данных и снова вызовите WriteToServer.</xref:System.Data.IDataReader.NextResult%2A>       Обратите внимание, что с помощью WriteToServer изменяет состояние средства чтения. Вызывает метод <xref:System.Data.IDataReader.Read%2A>до возвращается значение false, операция прервана или возникает ошибка.</xref:System.Data.IDataReader.Read%2A> Это означает, что модуль чтения данных в другом состоянии, возможно, в конце результирующего набора, после завершения операции WriteToServer.       Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection>является его занят обслуживанием, и никакие другие операции выполняются в соединении.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Коллекции сопоставляет из данных столбцов чтения базы данных в целевую таблицу.</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Объект <xref href=&quot;System.Data.IDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Копирует только те строки, которые соответствуют состоянию предоставленных строк в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "Только строки в <xref:System.Data.DataTable>, находятся в состоянии, указанном в `rowState` аргумент и не были удалены, копируются в целевую таблицу.</xref:System.Data.DataTable>      Настроек [!NOTE] настроек Если <xref:System.Data.DataRowState>указан, все <xref:System.Data.DataRowState>, <xref:System.Data.DataRowState>, и <xref:System.Data.DataRowState>строки также будут скопированы на сервер.</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> Исключение не возникает.       Операция массового копирования во время выполнения, соответствующий целевой <xref:System.Data.SqlClient.SqlConnection>является его занят обслуживанием, и никакие другие операции выполняются в соединении.</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>Коллекции сопоставления из <xref:System.Data.DataTable>столбцы базы данных в целевую таблицу.</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: rowState
      type: System.Data.DataRowState
      description: "Значение из <xref href=&quot;System.Data.DataRowState&quot;> </xref> перечисления. В целевой копируются только строки, соответствующие состоянию строк."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки из предоставленного <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> массив для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Объект <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки из предоставленного <xref href=&quot;System.Data.DataRow&quot;> </xref> массив для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, которые будут скопированы в целевую таблицу."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов WriteToServerAsync несколько раз для того же экземпляра до завершения задачи.       Вызов WriteToServerAsync и <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Подключение разрывается или закрыто во время выполнения WriteToServerAsync.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов WriteToServerAsync несколько раз для того же экземпляра до завершения задачи.       Вызов WriteToServerAsync и <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Подключение разрывается или закрыто во время выполнения WriteToServerAsync.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки в предоставленном <xref href=&quot;System.Data.IDataReader&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Объект <xref href=&quot;System.Data.IDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов WriteToServerAsync несколько раз для того же экземпляра до завершения задачи.       Вызов WriteToServerAsync и <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Подключение разрывается или закрыто во время выполнения WriteToServerAsync.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref href=&quot;System.Data.IDataReader&quot;> </xref> Был закрыт до завершения <xref:System.Threading.Tasks.Task>вернул.</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;> </xref>Связанное подключение было закрыто до завершения <xref:System.Threading.Tasks.Task>вернул.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки из предоставленного <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> массив для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "Объект <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены. Объект <> </> *настроек значение этого параметра делает этот метод эквивалентен <> </> *настроек."
    return:
      type: System.Threading.Tasks.Task
      description: "Возвращает <xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки из предоставленного <xref href=&quot;System.Data.DataRow&quot;> </xref> массив для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "Массив <xref href=&quot;System.Data.DataRow&quot;> </xref> объектов, которые будут скопированы в целевую таблицу."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены. Объект <> </> *настроек значение этого параметра делает этот метод эквивалентен <> </> *настроек."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <> </> *настроек несколько раз для того же экземпляра до завершения задачи.       Вызов <> </> *настроек и <> </> *настроек для того же экземпляра до завершения задачи.       Подключение разрывается или закрыто во время <> </> *настроек выполнения.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует только те строки, которые соответствуют состоянию предоставленных строк в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: rowState
      type: System.Data.DataRowState
      description: "Значение из <xref href=&quot;System.Data.DataRowState&quot;> </xref> перечисления. В целевой копируются только строки, соответствующие состоянию строк."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов WriteToServerAsync несколько раз для того же экземпляра до завершения задачи.       Вызов WriteToServerAsync и <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>для того же экземпляра до завершения задачи.</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       Подключение разрывается или закрыто во время выполнения WriteToServerAsync.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены. Объект <> </> *настроек значение этого параметра делает этот метод эквивалентен <> </> *настроек."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <> </> *настроек несколько раз для того же экземпляра до завершения задачи.       Вызов <> </> *настроек и <> </> *настроек для того же экземпляра до завершения задачи.       Подключение разрывается или закрыто во время <> </> *настроек выполнения.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует все строки в предоставленном <xref href=&quot;System.Data.IDataReader&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "Объект <xref href=&quot;System.Data.IDataReader&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены. Объект <> </> *настроек значение этого параметра делает этот метод эквивалентен <> </> *настроек."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <> </> *настроек несколько раз для того же экземпляра до завершения задачи.       Вызов <> </> *настроек и <> </> *настроек для того же экземпляра до завершения задачи.       Подключение разрывается или закрыто во время <> </> *настроек выполнения.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref href=&quot;System.Data.IDataReader&quot;> </xref> Был закрыт до завершения <xref:System.Threading.Tasks.Task>вернул.</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;> </xref>Связанное подключение было закрыто до завершения <xref:System.Threading.Tasks.Task>вернул.</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Асинхронная версия объекта <> </> *настроек, который копирует только те строки, которые соответствуют состоянию предоставленных строк в предоставленном <xref href=&quot;System.Data.DataTable&quot;> </xref> для целевой таблицы, заданной по <> </> *настроек свойство <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объекта.       Токен отмены можно использовать для запроса отказа операции до истечения времени ожидания команды.  Исключения передаются в возвращенном объекте Task."
  remarks: "Дополнительные сведения об асинхронном программировании в [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] поставщик данных для [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], в разделе [асинхронное программирование](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "Объект <xref href=&quot;System.Data.DataTable&quot;> </xref> , строки которого будут скопированы в целевую таблицу."
    - id: rowState
      type: System.Data.DataRowState
      description: "Значение из <xref href=&quot;System.Data.DataRowState&quot;> </xref> перечисления. В целевой копируются только строки, соответствующие состоянию строк."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Инструкция отмены. Объект <> </> *настроек значение этого параметра делает этот метод эквивалентен <> </> *настроек."
    return:
      type: System.Threading.Tasks.Task
      description: "Задача, представляющая асинхронную операцию."
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Вызов <> </> *настроек несколько раз для того же экземпляра до завершения задачи.       Вызов <> </> *настроек и <> </> *настроек для того же экземпляра до завершения задачи.       Подключение разрывается или закрыто во время <> </> *настроек выполнения.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref> объект был закрыт во время выполнения метода.       Возвращается в объекте задачи, истекло время ожидания пула подключений.       Возвращается в объекте задачи <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> закрыт до выполнения метода.       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>задается в строке подключения."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "Возвращается в объекте задачи, любая ошибка, возвращенная [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] которая произошла при открытии соединения."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
