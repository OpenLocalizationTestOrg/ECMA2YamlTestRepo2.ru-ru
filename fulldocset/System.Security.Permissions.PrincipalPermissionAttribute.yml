### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.PrincipalPermissionAttribute
  id: PrincipalPermissionAttribute
  children:
  - System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  - System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  - System.Security.Permissions.PrincipalPermissionAttribute.Name
  - System.Security.Permissions.PrincipalPermissionAttribute.Role
  langs:
  - csharp
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute
  fullName: System.Security.Permissions.PrincipalPermissionAttribute
  type: Class
  summary: "Разрешает выполнять действия по безопасности для <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> для применения в коде с помощью декларативной безопасности. Этот класс не наследуется."
  remarks: "Можно использовать PrincipalPermissionAttribute декларативное требование принадлежность к определенной роли пользователей, работающих в коде или Прошедшие проверку подлинности. Использование <xref:System.Security.Permissions.PermissionState>создает <xref:System.Security.Permissions.PrincipalPermission>с <xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A>значение `true` и <xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A>и <xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A>значение `null`.</xref:System.Security.Permissions.PrincipalPermissionAttribute.Role%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Name%2A> </xref:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated%2A> </xref:System.Security.Permissions.PrincipalPermission> </xref:System.Security.Permissions.PermissionState>       Зависит от области объявление, которое может быть <xref:System.Security.Permissions.SecurityAction>используемая.</xref:System.Security.Permissions.SecurityAction> PrincipalPermissionAttribute не может применяться на уровне сборки.       Сведения безопасности, объявляемые атрибутом безопасности хранится в метаданных конечного объекта атрибута и доступен в системе во время выполнения. Атрибуты безопасности используются только для декларативной безопасности. Для принудительной безопасности используйте соответствующий класс разрешений.      Настроек [!IMPORTANT] настроек прежде чем использовать этот класс для разрешений участника запросу, необходимо присвоить политики субъекта в текущем домене приложения значение перечисления <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> По умолчанию имеет значение политики субъекта <xref:System.Security.Principal.PrincipalPolicy>.</xref:System.Security.Principal.PrincipalPolicy> Если вы не установите политики субъекта <xref:System.Security.Principal.PrincipalPolicy>, требование разрешения участника завершится ошибкой.</xref:System.Security.Principal.PrincipalPolicy> Следующий код должен быть выполнен прежде, чем разрешение участника:`AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal).`"
  example:
  - "The following example demonstrates how the PrincipalPermissionAttribute class is used declaratively to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/t-system.security.permis_17_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_17_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/t-system.security.permis_17_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PrincipalPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Security.Permissions.PrincipalPermissionAttribute&quot;> </xref> класса с заданным <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>."
  remarks: '`Demand`, `InheritanceDemand`, и `LinkDemand` являются единственными значениями <xref:System.Security.Permissions.SecurityAction>, имеющие смысл для этого атрибута.</xref:System.Security.Permissions.SecurityAction> Другие действия не применяются для разрешений, которые не являются разрешения доступа к коду.'
  example:
  - "The following example demonstrates how to use the PrincipalPermissionAttribute constructor to demand that the current user be an administrator.  \n  \n> [!NOTE]\n>  In Windows Vista, User Account Control (UAC) determines the privileges of a user. If you are a member of the Built-in Administrators group, you are assigned two run-time access tokens: a standard user access token and an administrator access token. By default, you are in the standard user role. To execute the code that requires you to be an administrator, you must first elevate your privileges from standard user to administrator. You can do this when you start an application by right-clicking the application icon and indicating that you want to run as an administrator.  \n  \n [!code-cpp[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/cpp/b59d1850-818f-411e-9c11-_1.cpp)]\n [!code-vb[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/visualbasic/b59d1850-818f-411e-9c11-_1.vb)]\n [!code-cs[Classic PrincipalPermissionAttribute Example#1](~/add/codesnippet/csharp/b59d1850-818f-411e-9c11-_1.cs)]"
  syntax:
    content: public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "Один из <xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref> значения."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  id: Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает или задает значение, указывающее, является ли текущий субъект прошел проверку подлинности основным поставщиком безопасности на основе ролей."
  syntax:
    content: public bool Authenticated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если текущий субъект прошел проверку подлинности; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Создает и возвращает новый <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref>."
  remarks: "Этот метод должен вызываться только системой безопасности, вызывать в коде приложения.       Во время компиляции атрибуты преобразуют объявления безопасности в сериализованную форму в метаданных. Данные декларативной безопасности в метаданных создаются из разрешения, которое возвращает этот метод, соответствующий этому атрибуту."
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Объект <xref href=&quot;System.Security.Permissions.PrincipalPermission&quot;> </xref> , соответствующий этому атрибуту."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  id: Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает или задает имя удостоверения, связанного с текущим субъектом."
  remarks: "Если поставщик проверки подлинности является Windows NT, имя будет то же, что имя входа пользователя Windows NT (в форме «Имя_домена\\имя_пользователя»). Обратитесь к документации узла, чтобы определить, какой поставщик проверки подлинности используется и как она определяет удостоверение текущего участника."
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "Имя для сопоставления, предоставляемым основным поставщиком безопасности на основе ролей."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  id: Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  langs:
  - csharp
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "Возвращает или задает членство в указанной роли безопасности."
  remarks: "Доступные роли будут различаться в зависимости от поставщика проверки подлинности используется узлом. Если поставщик проверки подлинности является Windows NT, роли, группы пользователей Windows NT (в форме «Имя_домена\\имя_группы»). Обратитесь к документации узла, чтобы определить, какой поставщик проверки подлинности используется и ролей пользователей могут принадлежать к."
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "Имя роли из основного поставщика безопасности на основе ролей."
  overload: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute(SecurityAction)
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.PrincipalPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: PrincipalPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
  fullName: System.Security.Permissions.PrincipalPermissionAttribute.Role
- uid: System.Security.Permissions.PrincipalPermissionAttribute.#ctor*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: PrincipalPermissionAttribute
  nameWithType: PrincipalPermissionAttribute.PrincipalPermissionAttribute
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Authenticated*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Authenticated
  nameWithType: PrincipalPermissionAttribute.Authenticated
- uid: System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: PrincipalPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Name*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Name
  nameWithType: PrincipalPermissionAttribute.Name
- uid: System.Security.Permissions.PrincipalPermissionAttribute.Role*
  parent: System.Security.Permissions.PrincipalPermissionAttribute
  isExternal: false
  name: Role
  nameWithType: PrincipalPermissionAttribute.Role
