### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Позволяет объекту управлять сериализации и десериализации."
  remarks: "Любой класс, который может быть сериализован, должен быть помечен <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Если класс должен управлять своим процессом сериализации, он может реализовывать интерфейс ISerializable. <xref:System.Runtime.Serialization.Formatter>Вызовы <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>во время сериализации и заполняет предоставленный <xref:System.Runtime.Serialization.SerializationInfo>со всеми данными, необходимыми для представления объекта.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> <xref:System.Runtime.Serialization.Formatter>Создает <xref:System.Runtime.Serialization.SerializationInfo>с типом объекта в графе.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Объекты, которые необходимо отправить прокси для самих может использовать <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>и <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>методы <xref:System.Runtime.Serialization.SerializationInfo>для изменения передаваемых данных.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       В случае наследования класса можно сериализовать класс, производный от базового класса, реализующего интерфейс ISerializable. В этом случае производного класса следует вызывать реализации базового класса <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>в собственной реализации <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> В противном случае данные из базового класса не будут сериализованы.       Интерфейс ISerializable заключает в себе конструктор с помощью конструктора подписи (<xref:System.Runtime.Serialization.SerializationInfo> сведения <xref:System.Runtime.Serialization.StreamingContext>контекста).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Во время десериализации текущий конструктор вызывается только после данных в <xref:System.Runtime.Serialization.SerializationInfo>десериализован модулем форматирования.</xref:System.Runtime.Serialization.SerializationInfo> Как правило этот конструктор должен быть защищен, если класс не запечатан.       Порядок десериализации объектов не гарантируется. Например если один тип ссылается на тип, который не был десериализован, возникнет исключение. При создании типов, которые имеют такие зависимости проблему путем реализации можно обойти `IDeserializationCallback` интерфейс и `OnDeserialization` метод.       Архитектура сериализации обрабатывает типы объектов, которые расширяют <xref:System.MarshalByRefObject>таким же, как типы, которые расширяют <xref:System.Object>.</xref:System.Object> </xref:System.MarshalByRefObject> Эти типы могут быть помечены с помощью <xref:System.SerializableAttribute>и интерфейс ISerializable, как любой другой тип объекта.</xref:System.SerializableAttribute> Их состояния объекта будет захвачен и сохранены в потоке.       Если эти типы используются через <xref:System.Runtime.Remoting>инфраструктуру удаленного взаимодействия предоставляет суррогат, выгружает типичные сериализации и вместо этого сериализует прокси <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> </xref:System.Runtime.Remoting> Суррогат — это вспомогательный класс, который знает, как выполнять сериализацию и десериализацию объектов определенного типа. Прокси-сервер, невидимой для пользователя в большинстве случаев будет иметь тип <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       В рамках общего конструктивного шаблона не принято помечать класс с помощью сериализуемого атрибута и расширять <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> Разработчикам следует учитывать возможные сценарии сериализации и удаленного взаимодействия при объединении этих двух характеристик. Является одним из примеров, она может быть применимо <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Хотя базового класса <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) расширяет из <xref:System.MarshalByRefObject>, можно записать состояние <xref:System.IO.MemoryStream>и восстановить ее на будут.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Таким образом, может быть может применяться для сериализации состояния этого потока в базу данных и восстановить в более поздний момент времени. Тем не менее при использовании с помощью удаленного взаимодействия, этот тип объекта будет осуществляться.       Дополнительные сведения о сериализации классов, расширяющих <xref:System.MarshalByRefObject>см. в разделе <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> Дополнительные сведения о реализации интерфейса ISerializable см. в разделе [сериализации пользовательский](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Заполняет <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> с данными, необходимыми для сериализации целевого объекта."
  remarks: "Все объекты, которые включены в <xref:System.Runtime.Serialization.SerializationInfo>, автоматически отслеживаются и сериализации модулем форматирования.</xref:System.Runtime.Serialization.SerializationInfo>       Требуется код, вызывающий метод GetObjectData <xref:System.Security.Permissions.SecurityPermission>для предоставления служб сериализации.</xref:System.Security.Permissions.SecurityPermission> Соответствующее перечисление: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      Настроек [!NOTE] настроек не гарантируется, что этот метод будет вызываться только один раз для экземпляра объекта во время сериализации. Таким образом метод должен быть реализован таким образом, что его поведение будет таким же, независимо от того, сколько раз он вызывается."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> Требуется заполнить данными."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Назначение (см. <xref:System.Runtime.Serialization.StreamingContext>) для этой сериализации.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Вызывающий объект не имеет необходимых разрешений."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
