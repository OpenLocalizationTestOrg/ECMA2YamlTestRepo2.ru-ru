### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.Binding
  id: Binding
  children:
  - System.Windows.Data.Binding.#ctor
  - System.Windows.Data.Binding.#ctor(System.String)
  - System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AsyncState
  - System.Windows.Data.Binding.BindsDirectlyToSource
  - System.Windows.Data.Binding.Converter
  - System.Windows.Data.Binding.ConverterCulture
  - System.Windows.Data.Binding.ConverterParameter
  - System.Windows.Data.Binding.DoNothing
  - System.Windows.Data.Binding.ElementName
  - System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  - System.Windows.Data.Binding.IndexerName
  - System.Windows.Data.Binding.IsAsync
  - System.Windows.Data.Binding.Mode
  - System.Windows.Data.Binding.NotifyOnSourceUpdated
  - System.Windows.Data.Binding.NotifyOnTargetUpdated
  - System.Windows.Data.Binding.NotifyOnValidationError
  - System.Windows.Data.Binding.Path
  - System.Windows.Data.Binding.RelativeSource
  - System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  - System.Windows.Data.Binding.ShouldSerializePath
  - System.Windows.Data.Binding.ShouldSerializeSource
  - System.Windows.Data.Binding.ShouldSerializeValidationRules
  - System.Windows.Data.Binding.Source
  - System.Windows.Data.Binding.SourceUpdatedEvent
  - System.Windows.Data.Binding.TargetUpdatedEvent
  - System.Windows.Data.Binding.UpdateSourceExceptionFilter
  - System.Windows.Data.Binding.UpdateSourceTrigger
  - System.Windows.Data.Binding.ValidatesOnDataErrors
  - System.Windows.Data.Binding.ValidatesOnExceptions
  - System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.Binding.ValidationRules
  - System.Windows.Data.Binding.XmlNamespaceManagerProperty
  - System.Windows.Data.Binding.XPath
  langs:
  - csharp
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Data.Binding
  type: Class
  summary: "Предоставляет высокоуровневый доступ к определению привязки, соединяющей свойства целевых объектов привязки (как правило, [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] элементов) и любой источник данных (например, база данных [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] файла или любой объект, который содержит данные)."
  remarks: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]Привязка данных обеспечивает простой и надежный способ представления и работать с данными о приложениях. Привязка данных позволяет синхронизировать значения свойств двух различных объектов.       Чтобы установить привязку, используйте класс Binding или один из других классов, наследующих <xref:System.Windows.Data.BindingBase>.</xref:System.Windows.Data.BindingBase> Независимо от того, какой объект привязке и особенностей источника данных, каждая привязка соответствует модели, показанной на следующем рисунке.       ![Основная схема привязки данных](~/add/media/databindingmostbasic.png &quot;основная схема привязки данных&quot;) на рисунке представлены следующие основные [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] концепции привязки данных.      -Каждая привязка обычно состоит из следующих четырех компонентов: целевой объект привязки, к целевому свойству источника привязки и <xref:System.Windows.Data.Binding.Path%2A>значению в источнике привязки для использования.</xref:System.Windows.Data.Binding.Path%2A> Например, если требуется связать содержимое <xref:System.Windows.Controls.TextBox>к свойству имени сотрудника объекта целевой объект является <xref:System.Windows.Controls.TextBox>, свойство target является <xref:System.Windows.Controls.TextBox.Text%2A>, значением является имя и исходный объект является объектом сотрудника.</xref:System.Windows.Controls.TextBox.Text%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>      -Свойство target должно быть свойством зависимостей. Это также означает, что нельзя привязать поле. Большинство свойств <xref:System.Windows.UIElement>объекты являются свойствами зависимости и большинства свойств зависимостей, за исключением того, доступных только для чтения, поддерживают привязку данных по умолчанию.</xref:System.Windows.UIElement> (Только <xref:System.Windows.DependencyObject>типы могут определять свойства зависимости и все объекты <xref:System.Windows.UIElement>являются производными от <xref:System.Windows.DependencyObject>).      -Несмотря на то, что не указан на рисунке, следует отметить, что объект источника привязки не обязательно должен быть пользовательского [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] объекта.</xref:System.Windows.DependencyObject> </xref:System.Windows.UIElement> </xref:System.Windows.DependencyObject> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]Привязка данных поддерживает данные в виде [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] объектов и [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]. Представлены некоторые, возможно, источник привязки <xref:System.Windows.UIElement>, любой объект списка [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] объекта, с которым связан [!INCLUDE[TLA#tla_adonet](~/add/includes/tlasharptla-adonet-md.md)] данных или веб-служб и XmlNode, содержащий ваш [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] данных.</xref:System.Windows.UIElement>       Используйте <xref:System.Windows.Data.Binding.Mode%2A>свойство, чтобы указать направление потока данных.</xref:System.Windows.Data.Binding.Mode%2A> Для обнаружения изменений в источнике односторонняя или двусторонняя привязка, источник должен применять механизм уведомлений об изменениях подходящего свойства, такие как <xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> Пример см. в разделе [как: реализуют уведомления об изменении свойства](~/add/includes/ajax-current-ext-md.md). <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>Свойство указывает расписание обновлений источника.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> Дополнительные сведения см. в разделе «Основные данные привязки основные понятия» в [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlAttributeUsage_PriorityBinding&quot;></a>## Использование атрибута XAML ```   <object property=&quot;{Binding  declaration}&quot;/>   ``` <a name=&quot;xamlValues_PriorityBinding&quot;> </a> ## значений XAML *объявление* ноль или несколько предложений назначения атрибутов, разделенных запятыми (,).       Дополнительные сведения см. в разделе [привязки расширения разметки](~/add/includes/ajax-current-ext-md.md) или [объявления Общие сведения о привязке](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: 'public class Binding : System.Windows.Data.BindingBase'
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements: []
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> класса."
  syntax:
    content: public Binding ();
    parameters: []
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Инициализирует новый экземпляр <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> класса с начальным путем."
  syntax:
    content: public Binding (string path);
    parameters:
    - id: path
      type: System.String
      description: "Начальный <xref:System.Windows.Data.Binding.Path*>для привязки.</xref:System.Windows.Data.Binding.Path*>"
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Добавляет обработчик для <xref:System.Windows.Data.Binding.SourceUpdated>вложенное событие.</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "Этот метод поддерживает использование вложенного события в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> Или <xref href=&quot;System.Windows.ContentElement&quot;> </xref> , прослушивающий событие."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "Добавляемый обработчик."
  overload: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Добавляет обработчик для <xref:System.Windows.Data.Binding.TargetUpdated>вложенное событие.</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "Этот метод поддерживает использование вложенного события в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> Или <xref href=&quot;System.Windows.ContentElement&quot;> </xref> , прослушивающий событие."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "Добавляемый обработчик."
  overload: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AsyncState
  id: AsyncState
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает непрозрачные данные, передаваемые в диспетчер асинхронных данных."
  syntax:
    content: public object AsyncState { get; set; }
    return:
      type: System.Object
      description: "Данные, передаваемые в диспетчер асинхронных данных."
  overload: System.Windows.Data.Binding.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  id: BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли вычислять <xref:System.Windows.Data.Binding.Path*>относительно элемента данных или <xref href=&quot;System.Windows.Data.DataSourceProvider&quot;> </xref> объекта.</xref:System.Windows.Data.Binding.Path*>"
  remarks: "Обычное поведение (если это свойство имеет `false`) включает специальной обработки для <xref:System.Windows.Data.DataSourceProvider>объектов.</xref:System.Windows.Data.DataSourceProvider> В этом случае результатом является механизм привязки <xref:System.Windows.Data.Binding.Path%2A>относительно объекта, полученные из <xref:System.Windows.Data.DataSourceProvider.Data%2A>свойство.</xref:System.Windows.Data.DataSourceProvider.Data%2A> </xref:System.Windows.Data.Binding.Path%2A> Кроме того, прослушивает привязки <xref:System.Windows.Data.DataSourceProvider.DataChanged>событий и соответствующим образом реагирует.</xref:System.Windows.Data.DataSourceProvider.DataChanged> Присвоение этому свойству `true` переопределяет это поведение и предоставляет доступ привязки к свойствам <xref:System.Windows.Data.DataSourceProvider>сам объект.</xref:System.Windows.Data.DataSourceProvider>"
  syntax:
    content: public bool BindsDirectlyToSource { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>для определения пути относительно самого элемента данных; в противном случае <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.BindsDirectlyToSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Converter
  id: Converter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает используемый преобразователь."
  remarks: "Привязка неявно использует преобразователь по умолчанию, который пытается выполнить преобразование типа из исходного и целевого значений. Если преобразование не может быть выполнено, преобразователь по умолчанию возвращает `null`.       Если вы хотите связать преобразователь пользовательское значение с помощью привязки, следует создать класс, реализующий <xref:System.Windows.Data.IValueConverter>интерфейсов и реализаций для предоставления <xref:System.Windows.Data.IValueConverter.Convert%2A>и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>методы.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter> Преобразователи значений могут преобразовывать данные из одного типа в другой, преобразование между региональные сведения, например наборы символов или изменять другие аспекты их представления. Примеры типичных сценариев см. в разделе «Конвертация данных» в [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlAttributeUsage_Converter&quot;></a>## Использование атрибута XAML ```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> ## значений XAML *myConverter* ссылку на класс, реализующий ресурс <xref:System.Windows.Data.IValueConverter>интерфейс, который включает реализации <xref:System.Windows.Data.IValueConverter.Convert%2A>и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>методы.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter>       Для ссылки на преобразователь значений, используйте [StaticResource Markup Extension](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Data.IValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IValueConverter
      description: "Значение типа <xref href=&quot;System.Windows.Data.IValueConverter&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает язык и региональные параметры, в которых необходимо оценить преобразователь."
  remarks: "Если это свойство не задано, используется механизм привязки `Language` свойства целевого объекта привязки. В [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] это по умолчанию используется значение «en US» или наследуется от корневого элемента (или любого элемента) страницы, значение, если оно было задано явно.       Сведения о преобразовании данных см. в разделе Преобразование данных в [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает параметр для передачи <xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*>"
  remarks: "Свойство ConverterParameter указать способ преобразования объекта.  Это свойство передает Дополнительные сведения преобразователь, который используется в привязке.  При указании ConverterParameter передается значение <xref:System.Windows.Data.IValueConverter.Convert%2A>и <xref:System.Windows.Data.IValueConverter.ConvertBack%2A>методов, как `parameter` параметр.</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A>       Пример см. в разделе [как: создать из значения на основе список привязан элементов](~/add/includes/ajax-current-ext-md.md). Этот пример показывает реализацию <xref:System.Windows.Data.IMultiValueConverter>, но использование до сих пор актуальны.</xref:System.Windows.Data.IMultiValueConverter>"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "Параметр для передачи <xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*> Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.DoNothing
  id: DoNothing
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Используется как возвращаемое значение, чтобы указать, что механизму привязки не требуется выполнять никаких действий."
  remarks: "Свойства источника привязки или преобразователь может вернуть DoNothing, чтобы указать, что механизму привязки не требуется выполнять никаких действий. Например, чтобы указать, что механизму привязки не могут передаваться значение целевого объекта привязки, не для перехода к следующему <xref:System.Windows.Data.Binding>в <xref:System.Windows.Data.PriorityBinding>, или не использовать `FallBackValue` или значение по умолчанию.</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public static readonly object DoNothing;
    return:
      type: System.Object
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ElementName
  id: ElementName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает имя элемента для использования в качестве объекта источника привязки."
  remarks: "Это свойство полезно, когда требуется выполнить привязку к свойству другого элемента в приложении. Например, если вы хотите использовать <xref:System.Windows.Controls.Slider>для управления высотой другого элемента управления в приложении, или если вы хотите привязать <xref:System.Windows.Controls.ContentControl.Content%2A>элемента управления, чтобы <xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A>свойство вашей <xref:System.Windows.Controls.ListBox>управления.</xref:System.Windows.Controls.ListBox> </xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> </xref:System.Windows.Controls.ContentControl.Content%2A> </xref:System.Windows.Controls.Slider>       По умолчанию привязки наследуют контекст данных, задаваемый по `DataContext` свойства, если оно было задано. Однако свойство ElementName является одним из способов, можно явно задать источник <xref:System.Windows.Data.Binding>и переопределить контекст наследуемые данные.</xref:System.Windows.Data.Binding> Дополнительные сведения см. в разделе [как: Укажите источник привязки](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.Data.Binding.Source%2A>И <xref:System.Windows.Data.Binding.RelativeSource%2A>Свойства <xref:System.Windows.Data.Binding>класса также можно использовать для настройки источника привязки явно.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> Однако только один из трех свойств ElementName, <xref:System.Windows.Data.Binding.Source%2A>, и <xref:System.Windows.Data.Binding.RelativeSource%2A>, следует набор для каждой привязки, или может возникнуть конфликт.</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> Это свойство вызывает исключение, если возникает конфликт источника привязки."
  syntax:
    content: public string ElementName { get; set; }
    return:
      type: System.String
      description: "Значение <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> свойство или [директива x: Name](~/add/includes/ajax-current-ext-md.md) элемента интерес. Ссылаться на элементы в коде можно только в том случае, если они зарегистрированы в соответствующую <xref:System.Windows.NameScope>через <xref uid=&quot;langword_csharp_RegisterName&quot; name=&quot;RegisterName&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.NameScope> Дополнительные сведения см. в разделе [области имен XAML WPF](~/add/includes/ajax-current-ext-md.md).       Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  id: GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] объект диспетчера пространства имен, используемый привязкой, подключенной к указанному объекту."
  remarks: "Этот метод поддерживает использование вложенного свойства для <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>вложенное свойство.</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]Диспетчеры пространства имен, применимо только в том случае, если в привязке поступают данные [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] источник привязки (<xref:System.Windows.Data.XmlDataProvider> объекта).</xref:System.Windows.Data.XmlDataProvider>       Если диспетчер пространств имен не была применена специально первоначального создания источника данных или путем вызова впоследствии <xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>в привязке, то этот метод будет возвращать `null`.</xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>       Этот метод всегда будет возвращать `null` Если данные за пределами привязки не [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]."
  syntax:
    content: public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "Объект, из которого необходимо получить сведения о пространстве имен."
    return:
      type: System.Xml.XmlNamespaceManager
      description: "Возвращенный объект, используемый для просмотра [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)] пространства имен, которые относятся к привязке в переданном элементе объекта. Этот объект должен быть приведен как &lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;."
  overload: System.Windows.Data.Binding.GetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> target </code> Параметр не может быть <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.IndexerName
  id: IndexerName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Используется в качестве <xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>из &lt;xref:System.ComponentModel.PropertyChangedEventArgs?displayProperty=fullName&gt; для указания, что изменилось свойство индексатора.</xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>"
  syntax:
    content: public const string IndexerName;
    return:
      type: System.String
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.IsAsync
  id: IsAsync
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, является ли <xref href=&quot;System.Windows.Data.Binding&quot;> </xref> следует получать и задавать значения асинхронно."
  remarks: "Используйте свойство IsAsync при `get` метод доступа к свойству источника привязки может занять много времени. Примером является свойство изображения с `get` доступа, который загружает из Интернета. Установите значение IsAsync `true` предотвращает блокировку [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] в процессе загрузки.       Время ожидания для значения поступления сообщает привязки <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, если он доступен, или значение по умолчанию привязки целевое свойство.</xref:System.Windows.Data.BindingBase.FallbackValue%2A>       Однако не должно быть множество сценариев, где необходимо использовать свойства IsAsync. [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)] Правила рекомендованы для определения свойств, которые являются порядков медленнее, чем мог бы быть набор полей. При создании класса рассмотрите возможность выполнения исключительно медленных операций вне `get` доступа и кэширования результата. Дополнительные сведения см. в разделе [NIB: Выбор между свойствами и методами](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)."
  syntax:
    content: public bool IsAsync { get; set; }
    return:
      type: System.Boolean
      description: "Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Mode
  id: Mode
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее направление потока данных в привязке."
  remarks: "Для поддержки <xref:System.Windows.Data.BindingMode>и <xref:System.Windows.Data.BindingMode>привязок, базовые данные должны быть реализованы <xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> Дополнительные сведения см. в разделе [как: реализуют уведомления об изменении свойства](~/add/includes/ajax-current-ext-md.md).       Для <xref:System.Windows.Data.BindingMode>или <xref:System.Windows.Data.BindingMode>привязок, можно задать целевой источник обновлений, установив <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>свойство.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> Дополнительные сведения см. в разделе <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>.</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>       Дополнительные сведения о различных режимах привязки см. в разделе [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "Один из <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref> значения. Значение по умолчанию — <xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>, который возвращает значение режима привязки по умолчанию для целевого свойства зависимостей. Тем не менее значение по умолчанию зависит от каждого из свойств зависимостей. В общем случае свойства доступного для редактирования пользователем элемента управления, например, текстовые поля и флажки, по умолчанию имеют двухсторонние привязки, в то время как большинство других свойств по умолчанию имеют односторонние привязки.       Программный способ определить, создает ли свойство зависимостей односторонние или двухсторонние привязки по умолчанию — получении метаданных свойства с помощью <> </> *настроек и затем проверить логическое значение <> </> *настроек свойств."
  overload: System.Windows.Data.Binding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли вызывать <xref:System.Windows.Data.Binding.SourceUpdated>событие, когда значение передается от целевого объекта привязки к источнику привязки.</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.Data.Binding.SourceUpdated>событие должно вызываться при значения источника привязки обновлении; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Data.Binding.SourceUpdated> Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли вызывать <xref:System.Windows.Data.Binding.TargetUpdated>событие, когда значение передается от источника привязки в целевой объект привязки.</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.Data.Binding.TargetUpdated>событие должно вызываться при значение целевого объекта привязки обновлении; в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Data.Binding.TargetUpdated> Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли вызывать <xref:System.Windows.Controls.Validation.Error>вложенное событие в привязанном объекте.</xref:System.Windows.Controls.Validation.Error>"
  remarks: "Если привязка имеет <xref:System.Windows.Data.Binding.ValidationRules%2A>связанные с ним обработчик привязки проверяет каждое правило, каждый раз, он передает значение целевого свойства к свойству источника.</xref:System.Windows.Data.Binding.ValidationRules%2A> Если правило делает недействительными значение, что механизму привязки создает <xref:System.Windows.Controls.ValidationError>объекта и добавляет его в <xref:System.Windows.Controls.Validation>.<xref:System.Windows.Controls.Validation.Errors%2A> коллекцию связанного объекта.</xref:System.Windows.Controls.Validation.Errors%2A> </xref:System.Windows.Controls.Validation> </xref:System.Windows.Controls.ValidationError> Когда <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>свойство не является пустым, <xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName>имеет значение вложенного свойства объекта `true`.</xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> </xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> Если свойство NotifyOnValidationError <xref:System.Windows.Data.Binding>равно `true`, а затем вызывает механизм привязки <xref:System.Windows.Controls.Validation.Error?displayProperty=fullName>вложенное событие в объекте.</xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> </xref:System.Windows.Data.Binding>       Подробное описание процесса проверки, см. в разделе Проверка данных в [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если <xref:System.Windows.Controls.Validation.Error>вложенное событие должно быть вызываться в привязанном объекте при ошибке проверки во время обновления источника, в противном случае — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Windows.Controls.Validation.Error> Значение по умолчанию — <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Path
  id: Path
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает путь к свойству источника привязки."
  remarks: "Каждая привязка обычно состоит из следующих четырех компонентов: целевой объект привязки, целевого свойства, источник привязки и путь к значению в источнике привязки для использования. Дополнительные сведения об этих понятиях привязки данных см. в разделе [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md).       Свойство пути для определения исходного значения, которые вы хотите привязать к: - в самом простом случае путь, значение свойства является именем свойства исходного объекта, используемого для привязки, такие как `Path=PropertyName`.      -Вложенные свойства могут быть заданы с помощью синтаксиса, подобного тому, который использовался в [!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]. Например, предложение `Path=ShoppingCart.Order` задает привязку к вложенному свойству `Order` объекта или свойства `ShoppingCart`.      — Чтобы привязать вложенное свойство, заключите вложенное свойство в круглые скобки. Например, для привязки к вложенное свойство <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>, синтаксис `Path=(DockPanel.Dock)`.</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>      -Индексаторы свойства могут задаваться в квадратных скобках после имени свойства, где они применяются. Например, предложение `Path=ShoppingCart[0]` задает привязку к индексу, который соответствует порядку внутренней индексации свойства обработки символьной строки «0». Также поддерживаются несколько индексаторов.      -Индексаторы и вложенным свойствам могут содержаться `Path` предложения, например `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].` - индексаторы могут иметь несколько внутренних параметров, разделенных запятыми (,). Тип каждого параметра можно задать со скобками. Например, можно иметь `Path=&quot;[(sys:Int32)42,(sys:Int32)24]&quot;`, где `sys` сопоставляется `System` пространства имен.      — Если источником является представлением коллекции, текущий элемент можно указать с косой черты (/). Например, предложение `Path=/` задает привязку для текущего элемента в представлении. Если источник является коллекцией, этот синтаксис задает текущий элемент представления коллекции по умолчанию.      -Имена свойств и косые черты можно объединять для обхода свойства, которые относятся к коллекциям. Например `Path=/Offices/ManagerName` указывает текущий элемент исходной коллекции, которая содержит `Offices` свойство, которое также является коллекцией. Ее текущий элемент представляет собой объект, содержащий `ManagerName` свойство.      (Необязательно) путь в виде точки (.) можно использовать для привязки к текущему источнику. Например `Text=&quot;{Binding}&quot;` эквивалентно `Text=&quot;{Binding Path=.}&quot;`.       Сведения о синтаксисе пути см. в разделе [объявления Общие сведения о привязке](~/add/includes/ajax-current-ext-md.md) или [XAML синтаксическая конструкция PropertyPath](~/add/includes/ajax-current-ext-md.md).       Для [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] привязки, в разделе <xref:System.Windows.Data.Binding.XPath%2A>свойство.</xref:System.Windows.Data.Binding.XPath%2A>       Чтобы привязать ко всему объекту, не необходимо указать свойство Path. Дополнительные сведения см. в разделе «Указание пути к значение» в [Общие сведения о привязке данных](../Topic/Data%20Binding%20Overview.md)."
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the <xref:System.Windows.Data.Binding.RelativeSource%2A> property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]"
  syntax:
    content: public System.Windows.PropertyPath Path { get; set; }
    return:
      type: System.Windows.PropertyPath
      description: "Путь к источнику привязки. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RelativeSource
  id: RelativeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает источник привязки, указывая его расположение относительно положения целевого объекта привязки."
  remarks: "Это свойство обычно используется для привязки свойства одного объекта к другому свойству того же объекта или определение привязки в стиле или шаблоне.       По умолчанию привязки наследуют контекст данных, задаваемый по `DataContext` свойства, если оно было задано. Однако свойство RelativeSource является одним из способов, можно явно задать источник <xref:System.Windows.Data.Binding>и переопределить контекст наследуемые данные.</xref:System.Windows.Data.Binding> Дополнительные сведения см. в разделе [как: Укажите источник привязки](~/add/includes/ajax-current-ext-md.md).       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>И <xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName>Свойства также можно использовать для настройки источника привязки явно.</xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> Однако только один из трех свойств <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>и RelativeSource, должны быть заданы для каждой привязки, или может возникнуть конфликт.</xref:System.Windows.Data.Binding.Source%2A> </xref:System.Windows.Data.Binding.ElementName%2A> Это свойство вызывает исключение, если возникает конфликт источника привязки.       Для [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] сведения см. в разделе [RelativeSource MarkupExtension](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_RelativeSource&quot;></a>## Использование текста XAML"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the RelativeSource property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]  \n  \n To see the full example, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.RelativeSource RelativeSource { get; set; }
    return:
      type: System.Windows.Data.RelativeSource
      description: "Объект <xref href=&quot;System.Windows.Data.RelativeSource&quot;> </xref> объект, указывающий относительное расположение источника привязки для использования. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.RelativeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Удаляет обработчик для <xref:System.Windows.Data.Binding.SourceUpdated>вложенное событие.</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "Этот метод поддерживает использование вложенного события в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> Или <xref href=&quot;System.Windows.ContentElement&quot;> </xref> , прослушивающий событие."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "Удаляемый обработчик."
  overload: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Удаляет обработчик для <xref:System.Windows.Data.Binding.TargetUpdated>вложенное событие.</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "Этот метод поддерживает использование вложенного события в [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]."
  syntax:
    content: public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref> Или <xref href=&quot;System.Windows.ContentElement&quot;> </xref> , прослушивающий событие."
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "Удаляемый обработчик."
  overload: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  id: SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Задает объект диспетчера пространства имен, используемый привязкой, которая подсоединена к предоставленному элементу."
  remarks: "Этот метод поддерживает использование вложенного свойства для <xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>вложенное свойство.</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>"
  syntax:
    content: public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "Объект, из которого необходимо получить сведения о пространстве имен."
    - id: value
      type: System.Xml.XmlNamespaceManager
      description: "&lt;Xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt; для оценки пространства имен в переданном элементе."
  overload: System.Windows.Data.Binding.SetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializePath
  id: ShouldSerializePath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Указывает, является ли <xref:System.Windows.Data.Binding.Path*>сохранения значения свойства.</xref:System.Windows.Data.Binding.Path*>"
  remarks: "Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.Data.Binding.Path%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.Data.Binding.Path%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при создании конструктора для <xref:System.Windows.Data.Binding>или разработке собственных управления Включение <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public bool ShouldSerializePath ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение свойства отличается от значения по умолчанию; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ShouldSerializePath*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  id: ShouldSerializeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Указывает, является ли <xref:System.Windows.Data.Binding.Source*>сохранения значения свойства.</xref:System.Windows.Data.Binding.Source*>"
  remarks: "Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.Data.Binding.Source%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.Data.Binding.Source%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при создании конструктора для <xref:System.Windows.Data.Binding>или разработке собственных управления Включение <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public bool ShouldSerializeSource ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение свойства отличается от значения по умолчанию; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ShouldSerializeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Указывает, является ли <xref:System.Windows.Data.Binding.ValidationRules*>сохранения значения свойства.</xref:System.Windows.Data.Binding.ValidationRules*>"
  remarks: "Это `ShouldSerialize` метод предоставляется, поскольку <xref:System.Windows.Data.Binding.ValidationRules%2A>свойство не имеет значения по умолчанию.</xref:System.Windows.Data.Binding.ValidationRules%2A> Этот метод указывает, изменилось ли свойство со значением по умолчанию. Этот метод обычно вызывается при создании конструктора для <xref:System.Windows.Data.Binding>или разработке собственных управления Включение <xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Если значение свойства отличается от значения по умолчанию; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Source
  id: Source
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает объект, используемый как источник привязки."
  remarks: "По умолчанию привязки наследуют контекст данных, задаваемый по `DataContext` свойства, если оно было задано. Тем не менее, исходное свойство является одним из способов, можно явно задать источник <xref:System.Windows.Data.Binding>и переопределить контекст наследуемые данные.</xref:System.Windows.Data.Binding> Если не требуется использовать функциональные возможности установки области видимости, в которой несколько свойств наследуют один и тот же контекст данных, можно использовать свойство Source вместо `DataContext` свойство.       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>И <xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName>Свойства также можно использовать для настройки источника привязки явно.</xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> Однако только один из трех свойств <xref:System.Windows.Data.Binding.ElementName%2A>, источник, и <xref:System.Windows.Data.Binding.RelativeSource%2A>, следует набор для каждой привязки, или может возникнуть конфликт.</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.ElementName%2A> Это свойство вызывает исключение, если возникает конфликт источника привязки.       Удалите это свойство, задайте для него значение <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>      <a name=&quot;xamlAttributeUsage_Source&quot;></a>## Использование атрибута XAML ```   <object Source=&quot;object&quot;/>   ``` <a name=&quot;xamlValues_Source&quot;> </a> ## значений XAML *объекта* существующего объекта.       Для ссылки на существующий объект, используйте [StaticResource Markup Extension](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "In this example, you have a `Person` object with a string property named `PersonName`. The `Person` object is defined in the namespace called `SDKSample`.  \n  \n The following example instantiates the `Person` object with a `PersonName` property value of `Joe`. This is done in the `Resources` section and assigned an `x:Key`.  \n  \n [!code-xml[SimpleBinding#Instantiation](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#instantiation)]  \n[!code-xml[SimpleBinding#2](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#2)]  \n[!code-xml[SimpleBinding#EndWindow](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#endwindow)]  \n  \n To bind to the `PersonName` property you would do the following:  \n  \n [!code-xml[SimpleBinding#BDO1](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#bdo1)]  \n  \n As a result, the <xref:System.Windows.Controls.TextBlock> appears with the value \"Joe\".  \n  \n In the following example, the Source values of the <xref:System.Windows.Data.Binding> objects are set to the `static` property <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  \n  \n [!code-xml[DataBindingLab#ComboBoxMultiBinding](~/add/codesnippet/xaml/DataBindingLab/AddProductWindow.xaml#comboboxmultibinding)]  \n  \n For the full example, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public object Source { get; set; }
    return:
      type: System.Object
      description: "Объект, используемый как источник привязки."
  overload: System.Windows.Data.Binding.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  id: SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Идентифицирует <xref:System.Windows.Data.Binding.SourceUpdated>вложенное событие.</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  id: TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Идентифицирует <xref:System.Windows.Data.Binding.TargetUpdated>вложенное событие.</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает обработчик, который можно использовать для предоставления пользовательской логики для обработки исключений, которые механизм привязки находит при обновлении значения источника привязки. Это применимо, если была связана только <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref> с привязкой."
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>Является встроенное правило проверки, проверяющий для исключений, возникающих во время обновления свойства источника привязки.</xref:System.Windows.Controls.ExceptionValidationRule> Если была связана <xref:System.Windows.Controls.ExceptionValidationRule>с вашей <xref:System.Windows.Data.Binding>объекта, это свойство можно использовать для задания обработчика для предоставления пользовательской логики для обработки этих исключений.</xref:System.Windows.Data.Binding> </xref:System.Windows.Controls.ExceptionValidationRule> Если не указан UpdateSourceExceptionFilter на <xref:System.Windows.Data.Binding>, обработчик привязки создает <xref:System.Windows.Controls.ValidationError>с исключением и добавляет его в <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>коллекции связанного элемента.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> </xref:System.Windows.Data.Binding>"
  example:
  - "The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \n  \n [!code-xml[BindValidation#tbExceptionFilter](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#tbexceptionfilter)]  \n  \n You can provide custom logic to handle those exceptions. The following example shows how to use the UpdateSourceExceptionFilter property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#filtercallback](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#filtercallback)]  \n  \n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#Handler](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#handler)]  \n  \n The <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> can also return `null`, the exception itself, or a <xref:System.Windows.Controls.ValidationError>. For more information, see <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "Метод, предоставляющий пользовательскую логику для обработки исключений, которые механизм привязки находит при обновлении значения источника привязки."
  overload: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, определяющее расписание обновлений источника привязки."
  remarks: "Привязки типов <xref:System.Windows.Data.BindingMode>или <xref:System.Windows.Data.BindingMode>отслеживать изменения в свойство цели и распространять их в источнике.</xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> Это называется обновлением источника. Как правило эти обновления происходят при каждом изменении целевого свойства. Это хорошо работает для флажков и других простых элементов управления, но это обычно не подходит для текстовых полей. Обновления после каждого нажатия клавиши могут снизить производительность и запрещает пользователям обычно существенно исправления ошибок ввода до фиксации новое значение. Таким образом, значение по умолчанию UpdateSourceTrigger <xref:System.Windows.Controls.TextBox.Text%2A>свойство <xref:System.Windows.Data.UpdateSourceTrigger>и не <xref:System.Windows.Data.UpdateSourceTrigger>.</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Controls.TextBox.Text%2A>       Если необходимо задать значение UpdateSourceTrigger <xref:System.Windows.Data.UpdateSourceTrigger>, необходимо вызвать метод <xref:System.Windows.Data.BindingExpression.UpdateSource%2A>метода или изменения не будут распространены в источнике.</xref:System.Windows.Data.BindingExpression.UpdateSource%2A> </xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "Один из <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> значения. Значение по умолчанию — <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, которое возвращает значение по умолчанию <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref> значение целевого свойства зависимостей. Тем не менее, значение по умолчанию для большинства свойств зависимостей — <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>, пока <> </> *настроек свойство имеет значение по умолчанию <xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>.       Представляет программный способ определения UpdateSourceTrigger значение по умолчанию свойства зависимостей в получении метаданных свойства с помощью <> </> *настроек и проверьте значение <xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>Свойства.</xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>"
  overload: System.Windows.Data.Binding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли включать <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>."
  remarks: "Задание этого свойства представляет собой альтернативу с помощью <xref:System.Windows.Controls.DataErrorValidationRule>элемент явно.</xref:System.Windows.Controls.DataErrorValidationRule> <xref:System.Windows.Controls.DataErrorValidationRule>Является встроенное правило проверки, проверяет наличие ошибок, которые вызываются <xref:System.ComponentModel.IDataErrorInfo>реализации объекта источника.</xref:System.ComponentModel.IDataErrorInfo> </xref:System.Windows.Controls.DataErrorValidationRule> Если возникает ошибка, что механизму привязки создает <xref:System.Windows.Controls.ValidationError>с ошибкой и добавляет его в <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>коллекции связанного элемента.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> Отсутствие ошибок очищает этой проверки, если другое правило вызывает проблему проверки.       ValidatesOnDataErrors впервые появился в платформе .NET Framework версии 3.5.  Дополнительные сведения см. в разделе [версии платформы .NET Framework и зависимости](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following examples uses <xref:System.ComponentModel.IDataErrorInfo> and ValidatesOnDataErrors to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that implements <xref:System.ComponentModel.IDataErrorInfo> to report validation errors.  \n  \n [!code-cs[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#idataerrorinfodata)]\n [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#idataerrorinfodata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnDataErrors to `true` on the <xref:System.Windows.Data.Binding>.  When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#idataerrorinfoxaml)]"
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы включить <xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли включать <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>."
  remarks: "Задание этого свойства представляет собой альтернативу с помощью <xref:System.Windows.Controls.ExceptionValidationRule>элемент явно.</xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Controls.ExceptionValidationRule>Является встроенное правило проверки, проверяет наличие исключений, возникших во время обновления свойства источника.</xref:System.Windows.Controls.ExceptionValidationRule> Если создается исключение, обработчик привязки создает <xref:System.Windows.Controls.ValidationError>с исключением и добавляет его в <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>коллекции связанного элемента.</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> Отсутствие ошибок очищает этой проверки, если другое правило вызывает проблему проверки.       ValidatesOnExceptions впервые появился в платформе .NET Framework версии 3.5.  Дополнительные сведения см. в разделе [версии платформы .NET Framework и зависимости](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following examples use ValidatesOnExceptions to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that throws an exception when the `Age` property is set to an invalid property.  \n  \n [!code-cs[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#throwexceptiondata)]\n [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#throwexceptiondata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnExceptions to `true` on the <xref:System.Windows.Data.Binding>. When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#throwexceptionxaml)]"
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы включить <xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает значение, указывающее, следует ли включать <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>."
  remarks: "При ValidatesOnNotifyDataErrors `true`, привязки проверяет наличие и сообщает об ошибках, возникающих в источнике данных, который реализует <xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo>"
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Чтобы включить <xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>; в противном случае <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Значение по умолчанию — <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Получает коллекцию правил, проверяющих правильность пользовательского ввода."
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] Модель привязки данных позволяет связать ValidationRules с вашей <xref:System.Windows.Data.Binding>или <xref:System.Windows.Data.MultiBinding>объекта.</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.Binding> Настраиваемые правила можно создать путем наследования от <xref:System.Windows.Controls.ValidationRule>класса и реализация <xref:System.Windows.Controls.ValidationRule.Validate%2A>метод, или же можно использовать встроенные <xref:System.Windows.Controls.ExceptionValidationRule>, делающая значение при наличии исключений во время обновления источника.</xref:System.Windows.Controls.ExceptionValidationRule> </xref:System.Windows.Controls.ValidationRule.Validate%2A> </xref:System.Windows.Controls.ValidationRule>       Механизм привязки проверяет все <xref:System.Windows.Controls.ValidationRule>связанной с привязкой, каждый раз входное значение (привязки значение целевого свойства) передается в свойство источника привязки.</xref:System.Windows.Controls.ValidationRule> Подробное описание процесса проверки, см. в разделе Проверка данных в [Общие сведения о привязке данных](~/add/includes/ajax-current-ext-md.md).      Настроек [!NOTE] настроек может быть установлено [!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)] только с помощью показанного синтаксиса коллекции или путем доступа к объекту коллекции и с помощью его методов, например `Add`. Свойство для доступа к объекту коллекции только для чтения, в то время как сама коллекция доступна для чтения и записи.      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a>## Использование элемента свойства XAML ```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>      ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> ## значений XAML *oneOrMoreValidationRules* один или несколько <xref:System.Windows.Controls.ValidationRule>объектов.</xref:System.Windows.Controls.ValidationRule>       Можно использовать <xref:System.Windows.Controls.ExceptionValidationRule>класс, или создать настраиваемые правила путем создания подклассов <xref:System.Windows.Controls.ValidationRule>класса.</xref:System.Windows.Controls.ValidationRule> </xref:System.Windows.Controls.ExceptionValidationRule>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "Коллекция <xref href=&quot;System.Windows.Controls.ValidationRule&quot;> </xref> объектов."
  overload: System.Windows.Data.Binding.ValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  id: XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Идентифицирует <xref:System.Windows.Data.Binding.XmlNamespaceManager*>вложенное свойство.</xref:System.Windows.Data.Binding.XmlNamespaceManager*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Для добавления."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XPath
  id: XPath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "Возвращает или задает <xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref> запрос, возвращающий значение [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] источник привязки для использования."
  remarks: "Если источник привязки имеет [!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)] данных вместо [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] объекта свойства XPath используется вместо <xref:System.Windows.Data.Binding.Path%2A>свойство, указывающее путь к значению в источнике привязки для использования.</xref:System.Windows.Data.Binding.Path%2A>       Задав свойства XPath, вы создаете `XPath` запрос, чтобы выбрать узел или коллекцию узлов (<xref:System.Xml.XmlElement?displayProperty=fullName> и <xref:System.Xml.XmlAttribute?displayProperty=fullName>оба являются производными от <xref:System.Xml.XmlNode?displayProperty=fullName>).</xref:System.Xml.XmlNode?displayProperty=fullName> </xref:System.Xml.XmlAttribute?displayProperty=fullName> </xref:System.Xml.XmlElement?displayProperty=fullName> <xref:System.Xml.XmlNode?displayProperty=fullName>— [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] объекта, то есть можно привязать к его свойства с помощью <xref:System.Windows.Data.Binding.Path%2A>свойство.</xref:System.Windows.Data.Binding.Path%2A></xref:System.Xml.XmlNode?displayProperty=fullName>       <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>Метод обрабатывает `XPath` выражения из свойства XPath.</xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> `XPath`функции не поддерживаются. Для `XPath` выражение сведения см. в разделе <xref:System.Xml.XmlNode.SelectNodes%2A>Документация и примеры, приведенные в разделе &quot;Пример&quot;.</xref:System.Xml.XmlNode.SelectNodes%2A>       LINQ для объектов XML <xref:System.Xml.Linq.XDocument>и <xref:System.Xml.Linq.XElement>используют `XPath`.</xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> Дополнительные сведения см. в разделе [как: Bind XDocument XElement и LINQ для результатов запроса XML](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public string XPath { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref> Запроса. Значение по умолчанию — <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Data.Binding.XPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Data.Binding.#ctor
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
- uid: System.Windows.Data.Binding.#ctor(System.String)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.AsyncState
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.Binding.Converter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
- uid: System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.Binding.ConverterCulture
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.Binding.ConverterParameter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
- uid: System.Windows.Data.Binding.DoNothing
  parent: System.Windows.Data.Binding
  isExternal: false
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
- uid: System.Windows.Data.Binding.ElementName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Windows.Data.Binding.IndexerName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
- uid: System.Windows.Data.Binding.IsAsync
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Data.Binding.RelativeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
- uid: System.Windows.Data.RelativeSource
  parent: System.Windows.Data
  isExternal: false
  name: RelativeSource
  nameWithType: RelativeSource
  fullName: System.Windows.Data.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
- uid: System.Windows.Data.Binding.ShouldSerializePath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.Binding.Source
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Data.Binding.XPath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
- uid: System.Windows.Data.Binding.#ctor*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding
  nameWithType: Binding.Binding
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler
  nameWithType: Binding.AddSourceUpdatedHandler
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler
  nameWithType: Binding.AddTargetUpdatedHandler
- uid: System.Windows.Data.Binding.AsyncState*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
- uid: System.Windows.Data.Binding.BindsDirectlyToSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
- uid: System.Windows.Data.Binding.Converter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
- uid: System.Windows.Data.Binding.ConverterCulture*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
- uid: System.Windows.Data.Binding.ConverterParameter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
- uid: System.Windows.Data.Binding.ElementName*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager
  nameWithType: Binding.GetXmlNamespaceManager
- uid: System.Windows.Data.Binding.IsAsync*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
- uid: System.Windows.Data.Binding.RelativeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler
  nameWithType: Binding.RemoveSourceUpdatedHandler
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler
  nameWithType: Binding.RemoveTargetUpdatedHandler
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager
  nameWithType: Binding.SetXmlNamespaceManager
- uid: System.Windows.Data.Binding.ShouldSerializePath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath
  nameWithType: Binding.ShouldSerializePath
- uid: System.Windows.Data.Binding.ShouldSerializeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource
  nameWithType: Binding.ShouldSerializeSource
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: Binding.ShouldSerializeValidationRules
- uid: System.Windows.Data.Binding.Source*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.Binding.UpdateSourceTrigger*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
- uid: System.Windows.Data.Binding.XPath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
