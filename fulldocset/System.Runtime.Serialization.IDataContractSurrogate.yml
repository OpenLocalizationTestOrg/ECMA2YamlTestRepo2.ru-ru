### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.IDataContractSurrogate
  id: IDataContractSurrogate
  children:
  - System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  - System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  - System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  - System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  langs:
  - csharp
  name: IDataContractSurrogate
  nameWithType: IDataContractSurrogate
  fullName: System.Runtime.Serialization.IDataContractSurrogate
  type: Interface
  summary: "Предоставляет методы, необходимые для замены одного типа другим с помощью <xref:System.Runtime.Serialization.DataContractSerializer>во время сериализации, десериализации и экспорта и импорта документов схемы XML (XSD).</xref:System.Runtime.Serialization.DataContractSerializer>"
  remarks: "Используйте IDataContractSurrogate при использовании <xref:System.Runtime.Serialization.DataContractSerializer>Если необходимо выполнить одно из следующих действий: заменить один тип или объект другим или динамически создать варианты схемы.</xref:System.Runtime.Serialization.DataContractSerializer> Пример приложения см. в разделе [суррогат DataContract](~/add/includes/ajax-current-ext-md.md). Дополнительные сведения о контрактах данных см. в разделе [использование контрактов данных](~/add/includes/ajax-current-ext-md.md).       Во время выполнения можно найти специальный <xref:System.Runtime.Serialization.DataContractSerializer>для любой операции в службе с помощью <xref:System.ServiceModel.Description.OperationDescription>Найти <xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior>экземпляра.</xref:System.ServiceModel.Description.DataContractSerializerOperationBehavior> </xref:System.ServiceModel.Description.OperationDescription> </xref:System.Runtime.Serialization.DataContractSerializer> Дополнительные сведения о реализации интерфейса для создания суррогата см. в разделе [суррогаты контрактов данных](~/add/includes/ajax-current-ext-md.md).       Можно также использовать IDataContractSurrogate влияет на импорт и экспорт схем XML при использовании <xref:System.Runtime.Serialization.XsdDataContractExporter>и <xref:System.Runtime.Serialization.XsdDataContractImporter>классы.</xref:System.Runtime.Serialization.XsdDataContractImporter> </xref:System.Runtime.Serialization.XsdDataContractExporter> Это можно сделать, назначив IDataContractSurrogate для <xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A>свойство <xref:System.Runtime.Serialization.ExportOptions>класса, или к <xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A>свойству <xref:System.Runtime.Serialization.ImportOptions>класса.</xref:System.Runtime.Serialization.ImportOptions> </xref:System.Runtime.Serialization.ImportOptions.DataContractSurrogate%2A> </xref:System.Runtime.Serialization.ExportOptions> </xref:System.Runtime.Serialization.ExportOptions.DataContractSurrogate%2A>  Дополнительные сведения см. в разделе [Импорт и Экспорт схемы](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows an implementation of the IDataContractSurrogate interface. The code substitutes the serialization of the `Person` type for a `PersonSurrogated` class.  \n  \n [!code-vb[IDataContractSurrogate#0](~/add/codesnippet/visualbasic/t-system.runtime.seriali_6_1.vb)]\n [!code-cs[IDataContractSurrogate#0](~/add/codesnippet/csharp/t-system.runtime.seriali_6_1.cs)]"
  syntax:
    content: public interface IDataContractSurrogate
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  id: GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetCustomDataToExport(MemberInfo,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Во время операций экспорта схемы вставляет заметок в схеме для возвращаемых значений, отличных от null."
  syntax:
    content: public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);
    parameters:
    - id: memberInfo
      type: System.Reflection.MemberInfo
      description: "Объект <xref:System.Reflection.MemberInfo>, описывающий элемент.</xref:System.Reflection.MemberInfo>"
    - id: dataContractType
      type: System.Type
      description: "A <xref:System.Type>.</xref:System.Type>"
    return:
      type: System.Object
      description: "Объект, представляющий заметку, которая вставляется в определение схемы XML."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  id: GetCustomDataToExport(System.Type,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetCustomDataToExport(Type,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Во время операций экспорта схемы вставляет заметок в схеме для возвращаемых значений, отличных от null."
  syntax:
    content: public object GetCustomDataToExport (Type clrType, Type dataContractType);
    parameters:
    - id: clrType
      type: System.Type
      description: "Заменяемый тип среды CLR."
    - id: dataContractType
      type: System.Type
      description: "Тип контракта данных, для которого создается заметка."
    return:
      type: System.Object
      description: "Объект, представляющий заметку, которая вставляется в определение схемы XML."
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  id: GetDataContractType(System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetDataContractType(Type)
  nameWithType: IDataContractSurrogate.GetDataContractType(Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Во время сериализации, десериализации и импорт и Экспорт схемы возвращает тип контракта данных, заменяющий указанный тип."
  remarks: ''
  example:
  - "The following example shows an implementation of the GetDataContractType method.  \n  \n [!code-vb[IDataContractSurrogate#1](~/add/codesnippet/visualbasic/90968a41-34e3-48fc-8e53-_1.vb)]\n [!code-cs[IDataContractSurrogate#1](~/add/codesnippet/csharp/90968a41-34e3-48fc-8e53-_1.cs)]"
  syntax:
    content: public Type GetDataContractType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Тип среды CLR <xref:System.Type>заменяемый.</xref:System.Type>"
    return:
      type: System.Type
      description: "<xref:System.Type>Для замены <code> type </code> значение.</xref:System.Type> Этот тип должен быть сериализуем методом <xref:System.Runtime.Serialization.DataContractSerializer>.</xref:System.Runtime.Serialization.DataContractSerializer> Например, он должен быть помечен <xref:System.Runtime.Serialization.DataContractAttribute>атрибута или другими распознаваемыми сериализатором механизмами.</xref:System.Runtime.Serialization.DataContractAttribute>"
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  id: GetDeserializedObject(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetDeserializedObject(Object,Type)
  nameWithType: IDataContractSurrogate.GetDeserializedObject(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(Object,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "При выполнении десериализации возвращает объект, являющийся заменой указанного объекта."
  remarks: "В простой реализации используйте if... then... Else для тестирования ли `obj` значение суррогатный тип. Если Да, преобразуйте его необходимым образом и верните замененный объект. Замененный объект может быть нового экземпляра, или же `obj` экземпляра."
  example:
  - "The following example shows an implementation of the GetDeserializedObject method.  \n  \n [!code-vb[IDataContractSurrogate#3](~/add/codesnippet/visualbasic/98dab246-6ee5-4fc3-8a64-_1.vb)]\n [!code-cs[IDataContractSurrogate#3](~/add/codesnippet/csharp/98dab246-6ee5-4fc3-8a64-_1.cs)]"
  syntax:
    content: public object GetDeserializedObject (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "Десериализованный объект, которые будут заменены."
    - id: targetType
      type: System.Type
      description: "<xref:System.Type>, Должны быть назначены замененный объект.</xref:System.Type>"
    return:
      type: System.Object
      description: "Замененный Десериализованный объект. Этот объект должен иметь тип, который может быть сериализован. <xref:System.Runtime.Serialization.DataContractSerializer></xref:System.Runtime.Serialization.DataContractSerializer> Например, он должен быть помечен <xref:System.Runtime.Serialization.DataContractAttribute>атрибута или другими распознаваемыми сериализатором механизмами.</xref:System.Runtime.Serialization.DataContractAttribute>"
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  id: GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetKnownCustomDataTypes(Collection<Type>)
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Задает коллекцию известных типов, используемую для сериализации и десериализации пользовательских объектов данных."
  remarks: "Этот метод является обязательным при экспорте или импорте схемы только в том случае, если заметки вставляются в схему с помощью <xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>метод.</xref:System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport%2A>"
  syntax:
    content: public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection<Type> customDataTypes);
    parameters:
    - id: customDataTypes
      type: System.Collections.ObjectModel.Collection{System.Type}
      description: "Объект &lt;xref:System.Collections.ObjectModel.Collection%601&gt; из <xref:System.Type>для добавления известных типов.</xref:System.Type>"
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  id: GetObjectToSerialize(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetObjectToSerialize(Object,Type)
  nameWithType: IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Во время сериализации возвращает объект, заменяющий указанный объект."
  remarks: "Этот метод не должен возвращать `null` так, как при десериализации данных будет приведен к типу <xref:System.Object>и <xref:System.InvalidCastException>возникает исключение.</xref:System.InvalidCastException> </xref:System.Object>"
  example:
  - "The following example shows an implementation of the GetObjectToSerialize method.  \n  \n [!code-vb[IDataContractSurrogate#2](~/add/codesnippet/visualbasic/5c78fc6a-caaf-4bc0-ab0d-_1.vb)]\n [!code-cs[IDataContractSurrogate#2](~/add/codesnippet/csharp/5c78fc6a-caaf-4bc0-ab0d-_1.cs)]"
  syntax:
    content: public object GetObjectToSerialize (object obj, Type targetType);
    parameters:
    - id: obj
      type: System.Object
      description: "Объект для замены."
    - id: targetType
      type: System.Type
      description: "<xref:System.Type>, Должны быть назначены замененный объект.</xref:System.Type>"
    return:
      type: System.Object
      description: "Замененный объект, который будет сериализован. Объект должен быть сериализуем методом <xref:System.Runtime.Serialization.DataContractSerializer>.</xref:System.Runtime.Serialization.DataContractSerializer> Например, он должен быть помечен <xref:System.Runtime.Serialization.DataContractAttribute>атрибута или другими распознаваемыми сериализатором механизмами.</xref:System.Runtime.Serialization.DataContractAttribute>"
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  id: GetReferencedTypeOnImport(System.String,System.String,System.Object)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: GetReferencedTypeOnImport(String,String,Object)
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "При выполнении импорта схемы возвращает тип, который ссылается схема."
  remarks: '`Null`должно быть возвращено, если тип CLR не существует для представления типа схемы. В результате новый тип для создаваемого во время импорта схемы.'
  example:
  - "The following example shows an implementation of the GetReferencedTypeOnImport method.  \n  \n [!code-vb[IDataContractSurrogate#4](~/add/codesnippet/visualbasic/9ffa3127-8c36-42f6-862b-_1.vb)]\n [!code-cs[IDataContractSurrogate#4](~/add/codesnippet/csharp/9ffa3127-8c36-42f6-862b-_1.cs)]"
  syntax:
    content: public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);
    parameters:
    - id: typeName
      type: System.String
      description: "Имя типа в схеме."
    - id: typeNamespace
      type: System.String
      description: "Пространство имен типа в схеме."
    - id: customData
      type: System.Object
      description: "Объект, представляющий заметку, вставляемых в определение схемы XML, то есть данных, можно использовать для поиска ссылочного типа."
    return:
      type: System.Type
      description: "<xref:System.Type>Для ссылочного типа.</xref:System.Type>"
  overload: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  id: ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  langs:
  - csharp
  name: ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  nameWithType: IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "Обрабатывает тип, созданный из импортированной схемы."
  remarks: "Входные данные <xref:System.CodeDom.CodeTypeDeclaration>или другие сведения в <xref:System.CodeDom.CodeCompileUnit>может изменяться пользователем в этот метод.</xref:System.CodeDom.CodeCompileUnit> </xref:System.CodeDom.CodeTypeDeclaration> Если `null` возвращается, это приведет к появлению тип не будет создан. Если новый <xref:System.CodeDom.CodeTypeDeclaration>возвращается, он заменит исходный тип.</xref:System.CodeDom.CodeTypeDeclaration>"
  syntax:
    content: public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);
    parameters:
    - id: typeDeclaration
      type: System.CodeDom.CodeTypeDeclaration
      description: "Объект <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> процессу, который представляет объявление типа, создаваемого при выполнении импорта схемы."
    - id: compileUnit
      type: System.CodeDom.CodeCompileUnit
      description: "<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref> , Содержащий другой код, созданный при выполнении импорта схемы."
    return:
      type: System.CodeDom.CodeTypeDeclaration
      description: "Объект <xref href=&quot;System.CodeDom.CodeTypeDeclaration&quot;> </xref> , содержащий обработанный тип."
  overload: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Reflection.MemberInfo,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport(MemberInfo,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(MemberInfo,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(System.Type,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport(Type,Type)
  nameWithType: IDataContractSurrogate.GetCustomDataToExport(Type,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport(Type,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDataContractType(Type)
  nameWithType: IDataContractSurrogate.GetDataContractType(Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType(Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDeserializedObject(Object,Type)
  nameWithType: IDataContractSurrogate.GetDeserializedObject(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject(Object,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(System.Collections.ObjectModel.Collection{System.Type})
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetKnownCustomDataTypes(Collection<Type>)
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes(Collection<Type>)
- uid: System.Collections.ObjectModel.Collection{System.Type}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Type>
  nameWithType: Collection<Type>
  fullName: System.Collections.ObjectModel.Collection<System.Type>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(System.Object,System.Type)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetObjectToSerialize(Object,Type)
  nameWithType: IDataContractSurrogate.GetObjectToSerialize(Object,Type)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize(Object,Type)
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(System.String,System.String,System.Object)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetReferencedTypeOnImport(String,String,Object)
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(System.CodeDom.CodeTypeDeclaration,System.CodeDom.CodeCompileUnit)
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  nameWithType: IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
  fullName: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType(CodeTypeDeclaration,CodeCompileUnit)
- uid: System.CodeDom.CodeTypeDeclaration
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeDeclaration
  nameWithType: CodeTypeDeclaration
  fullName: System.CodeDom.CodeTypeDeclaration
- uid: System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: false
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetCustomDataToExport
  nameWithType: IDataContractSurrogate.GetCustomDataToExport
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDataContractType
  nameWithType: IDataContractSurrogate.GetDataContractType
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetDeserializedObject
  nameWithType: IDataContractSurrogate.GetDeserializedObject
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetKnownCustomDataTypes
  nameWithType: IDataContractSurrogate.GetKnownCustomDataTypes
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetObjectToSerialize
  nameWithType: IDataContractSurrogate.GetObjectToSerialize
- uid: System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: GetReferencedTypeOnImport
  nameWithType: IDataContractSurrogate.GetReferencedTypeOnImport
- uid: System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType*
  parent: System.Runtime.Serialization.IDataContractSurrogate
  isExternal: false
  name: ProcessImportedType
  nameWithType: IDataContractSurrogate.ProcessImportedType
