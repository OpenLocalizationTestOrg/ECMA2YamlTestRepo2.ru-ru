### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyKey
  id: DependencyPropertyKey
  children:
  - System.Windows.DependencyPropertyKey.DependencyProperty
  - System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  langs:
  - csharp
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
  type: Class
  summary: "Предоставляет идентификатор свойства зависимостей для ограниченного доступа на запись к свойству зависимостей только для чтения."
  remarks: "Экземпляры DependencyPropertyKey получаются как возвращаемое значение вызова регистрации свойства зависимостей, с помощью методов <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>или <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A> </xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>       Типы, которые регистрации свойства зависимостей можно использовать DependencyPropertyKey в вызовах <xref:System.Windows.DependencyObject.SetValue%2A>и <xref:System.Windows.DependencyObject.ClearValue%2A>, измените значение свойства как часть логики класса.</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> Если разрешено уровнем доступа ключа, связанные классы можно также использовать ключ и свойства зависимостей. Например можно объявить ключ внутренним и других типов в этой сборке можно также задать это свойство зависимостей.       DependencyPropertyKey, возвращенных регистрации свойства зависимости только для чтения, не следует делать открытым, так как открытие ключа делает свойство настраиваемым, таким образом, игнорируя точке его регистрации в качестве свойства зависимости только для чтения. Кроме того, открытие ключа вызывает несоответствие между доступными зависимостей поведения свойства и его [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] реализации свойства программы-оболочки, которые имеет недопустимый класс конструирования.       Вместо предоставления самого ключа, вместо этого следует предоставлять <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>значение DependencyPropertyKey как `public static readonly` <xref:System.Windows.DependencyProperty>на вашего класса.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> Это позволяет возвращать допустимый идентификатор свойства зависимостей для определенных операций системы свойств, например перечисления локально заданных значений свойства. Однако идентификатор таким образом получить не все возможности <xref:System.Windows.DependencyProperty>для многих операций системы свойств.</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get \"wrapper\", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public sealed class DependencyPropertyKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  id: DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Возвращает идентификатор свойства зависимостей, связанных со следующим идентификатором свойства специализированные зависимости только для чтения."
  remarks: "Значение свойства DependencyProperty включает идентификатор только для чтения свойства участвовать в стандартных операций системы свойств, с помощью некоторых тех же интерфейсов, которые заданы для свойства зависимости для чтения и записи.       Чтобы реализовать метод доступа get свойства для свойства зависимостей только для чтения, следует создать и представить <xref:System.Windows.DependencyProperty>идентификатор для вашего класса.</xref:System.Windows.DependencyProperty> Это служит двум целям: - вашей владельцем потребностей класс <xref:System.Windows.DependencyProperty>идентификатор для реализации метода доступа get для свойства оболочки.</xref:System.Windows.DependencyProperty> Вы используете <xref:System.Windows.DependencyProperty>как параметр для <xref:System.Windows.DependencyObject.GetValue%2A>вызова, который реализует метод доступа get.</xref:System.Windows.DependencyObject.GetValue%2A> </xref:System.Windows.DependencyProperty>      - <xref:System.Windows.DependencyProperty>идентификаторы предоставляют свойство зависимостей в системе свойств таким образом, что другие методы, основанные на метаданных к нему возможен доступ к стандартной форме.</xref:System.Windows.DependencyProperty> Для экземпляра Если вызван <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>на некоторых <xref:System.Windows.DependencyObject>и получить идентификатор перечисление локально набора свойств (значения и идентификаторы) вернул для свойства зависимостей только для чтения будет вашей <xref:System.Windows.DependencyProperty>преимущества, а не ключ.</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> Предоставление доступа к не <xref:System.Windows.DependencyProperty>идентификатор повышает безопасность свойства зависимости только для чтения любым способом, он только выполняет операции, затрагивающие свойство более удобны для последующих производных классов и экземпляров классов.</xref:System.Windows.DependencyProperty>       Для предоставления <xref:System.Windows.DependencyProperty>идентификатор класса DependencyProperty вызывать непосредственно на ваш ключ.</xref:System.Windows.DependencyProperty> Это значение используется для создания `public static readonly` <xref:System.Windows.DependencyProperty>идентификатор класса, который соответствует <xref:System.Windows.DependencyPropertyKey>.</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty>"
  example:
  - "The following example calls DependencyProperty to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class. The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public System.Windows.DependencyProperty DependencyProperty { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "Соответствующий идентификатор свойства зависимостей."
  overload: System.Windows.DependencyPropertyKey.DependencyProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Переопределяет метаданные свойства зависимостей только для чтения, представленного данным идентификатором свойства зависимостей."
  remarks: "Переопределение метаданных в свойстве зависимости только для чтения выполняется по тем же причинам с переопределением метаданных для свойства зависимостей для чтения и записи и ограничен доступ на уровне ключа, поскольку поведения, заданные в метаданных можно изменить установленное поведение (значение по умолчанию, например).       Как со свойствами зависимости для чтения и записи, переопределение метаданных в свойстве зависимости только для чтения должно осуществляться только до этого свойства, используемые системой свойств (это соответствует времени создания конкретные экземпляры объектов, которые регистрируют свойство). Вызовы OverrideMetadata следует выполнять только в статическом конструкторе типа, предоставляющего себя в качестве `forType` параметра этого метода или эквивалентные инициализации для этого класса.       Этот метод фактически пересылает <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>метод, передавая <xref:System.Windows.DependencyPropertyKey>экземпляр в качестве параметра ключа.</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)  \n  \n [!code-cs[WPFAquariumSln#RODPOverride](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodpoverride)]\n [!code-vb[WPFAquariumSln#RODPOverride](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]"
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "Тип, на котором существует данное свойство зависимостей и метаданных должен быть переопределен."
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "Метаданные, переданные для этого типа."
  overload: System.Windows.DependencyPropertyKey.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Попытка переопределения метаданных свойства зависимости для чтения и записи (не может быть выполнена с помощью данной сигнатуры)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Метаданные уже были установлены для свойства, которое существовало в указанном типе."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyPropertyKey.DependencyProperty*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyPropertyKey.OverrideMetadata
