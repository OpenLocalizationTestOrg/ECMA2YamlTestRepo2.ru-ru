### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Messaging.CallContext
  id: CallContext
  children:
  - System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(System.String)
  - System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)
  - System.Runtime.Remoting.Messaging.CallContext.GetHeaders
  - System.Runtime.Remoting.Messaging.CallContext.HostContext
  - System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(System.String)
  - System.Runtime.Remoting.Messaging.CallContext.LogicalSetData(System.String,System.Object)
  - System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)
  - System.Runtime.Remoting.Messaging.CallContext.SetHeaders(System.Runtime.Remoting.Messaging.Header[])
  langs:
  - csharp
  name: CallContext
  nameWithType: CallContext
  fullName: System.Runtime.Remoting.Messaging.CallContext
  type: Class
  summary: "Предоставляет набор свойств, которые переносятся с путь выполнения кода. Этот класс не наследуется."
  remarks: "CallContext является специализированным объектом коллекции аналогично локальное хранилище потока для вызовов методов и предоставляет области данных, которые являются уникальными для каждого логического потока выполнения. Слоты не являются общими для контекстов вызовов в других логических потоках. Объекты могут быть добавлены к CallContext как перемещается вниз и резервное копирование путь выполнения кода и проверялся различными объектами по пути.       Если удаленный вызов метода на объект в другом <xref:System.AppDomain>, создает класс CallContext <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>экземпляр, который перемещается вместе с удаленным вызовом.</xref:System.Runtime.Remoting.Messaging.LogicalCallContext> </xref:System.AppDomain> Только объекты, которые открывают <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative>интерфейс и хранятся в CallContext распространяются за пределами <xref:System.AppDomain>в <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>.</xref:System.Runtime.Remoting.Messaging.LogicalCallContext> </xref:System.AppDomain> </xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> Объекты, которые не поддерживают этот интерфейс, не передаются в <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>экземпляры с удаленных вызовов методов.</xref:System.Runtime.Remoting.Messaging.LogicalCallContext>      Настроек [!NOTE] настроек CallContext все методы являются статическими и работают на контексте вызова в текущем <xref:System.Threading.Thread>.</xref:System.Threading.Thread>      Настроек [!NOTE] настроек этот класс выполняет запрос ссылки. Объект `SecurityException` создается, если непосредственный вызывающий объект не имеет разрешения инфраструктуры. В разделе [требования связывания](~/add/includes/ajax-current-ext-md.md) для получения дополнительной информации."
  example:
  - "The following code example demonstrates the use of the CallContext class to transmit [Principal and Identity Objects](~/add/includes/ajax-current-ext-md.md) to a remote location for identification. To view the code for the `LogicalCallContextData` class used in this sample, see the example for the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface. To view the code for the `HelloServiceClass` class used in this sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method. To view the code for the server class used in this sample, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.  \n  \n [!code-cpp[CallContext#1](~/add/codesnippet/cpp/t-system.runtime.remotin_16_1.cpp)]\n [!code-cs[CallContext#1](~/add/codesnippet/csharp/t-system.runtime.remotin_16_1.cs)]\n [!code-vb[CallContext#1](~/add/codesnippet/visualbasic/t-system.runtime.remotin_16_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Security.SecurityCritical]

      public sealed class CallContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(System.String)
  id: FreeNamedDataSlot(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: FreeNamedDataSlot(String)
  nameWithType: CallContext.FreeNamedDataSlot(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Очищает область данных с указанным именем."
  remarks: ''
  example:
  - "The following code example shows a client creating a named data slot, calling a method on the remote object that displays the value of the named data slot that was returned from the logical thread, and frees that named data slot.  \n  \n [!code-cpp[CallContext_GetHeaders#1](~/add/codesnippet/cpp/m-system.runtime.remotin_115_1.cpp)]\n [!code-cs[CallContext_GetHeaders#1](~/add/codesnippet/csharp/m-system.runtime.remotin_115_1.cs)]\n [!code-vb[CallContext_GetHeaders#1](~/add/codesnippet/visualbasic/m-system.runtime.remotin_115_1.vb)]"
  syntax:
    content: public static void FreeNamedDataSlot (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя освобождаемой области данных пустое."
  overload: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)
  id: GetData(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: GetData(String)
  nameWithType: CallContext.GetData(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.GetData(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Извлекает объект, связанный с указанным именем из <xref href=&quot;System.Runtime.Remoting.Messaging.CallContext&quot;> </xref>."
  remarks: ''
  example:
  - "The following code example demonstrates the use of the GetData method to transmit [Principal and Identity Objects](~/add/includes/ajax-current-ext-md.md) to a remote location for identification. To view the code for the `LogicalCallContextData` class used in this sample, see the example for the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface. To view the code for the client class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext> class. To view the code for the server class used in this sample, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.  \n  \n [!code-cpp[CallContext#3](~/add/codesnippet/cpp/m-system.runtime.remotin_58_1.cpp)]\n [!code-cs[CallContext#3](~/add/codesnippet/csharp/m-system.runtime.remotin_58_1.cs)]\n [!code-vb[CallContext#3](~/add/codesnippet/visualbasic/m-system.runtime.remotin_58_1.vb)]"
  syntax:
    content: public static object GetData (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя элемента в контексте вызова."
    return:
      type: System.Object
      description: "Объект в контексте вызова, связанный с указанным именем."
  overload: System.Runtime.Remoting.Messaging.CallContext.GetData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.GetHeaders
  id: GetHeaders
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: GetHeaders()
  nameWithType: CallContext.GetHeaders()
  fullName: System.Runtime.Remoting.Messaging.CallContext.GetHeaders()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Возвращает заголовки, которые отправляются вместе с вызовом метода."
  remarks: ''
  example:
  - "The following code example sends headers to a remote method and prints the content of those headers to the console when the remote method returns.  \n  \n [!code-cpp[CallContext_GetHeaders#2](~/add/codesnippet/cpp/m-system.runtime.remotin_44_1.cpp)]\n [!code-cs[CallContext_GetHeaders#2](~/add/codesnippet/csharp/m-system.runtime.remotin_44_1.cs)]\n [!code-vb[CallContext_GetHeaders#2](~/add/codesnippet/visualbasic/m-system.runtime.remotin_44_1.vb)]"
  syntax:
    content: public static System.Runtime.Remoting.Messaging.Header[] GetHeaders ();
    parameters: []
    return:
      type: System.Runtime.Remoting.Messaging.Header[]
      description: "Заголовки, которые отправляются вместе с вызовом метода."
  overload: System.Runtime.Remoting.Messaging.CallContext.GetHeaders*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.HostContext
  id: HostContext
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: HostContext
  nameWithType: CallContext.HostContext
  fullName: System.Runtime.Remoting.Messaging.CallContext.HostContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Возвращает или задает контекст узла, связанный с текущим потоком."
  syntax:
    content: public static object HostContext { get; set; }
    return:
      type: System.Object
      description: "Контекст узла, связанный с текущим потоком."
  overload: System.Runtime.Remoting.Messaging.CallContext.HostContext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(System.String)
  id: LogicalGetData(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: LogicalGetData(String)
  nameWithType: CallContext.LogicalGetData(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Получает объект с указанным именем из логического контекста вызова."
  syntax:
    content: public static object LogicalGetData (string name);
    parameters:
    - id: name
      type: System.String
      description: "Имя элемента в логическом контексте вызова."
    return:
      type: System.Object
      description: "Объект в логическом контексте вызова, связанную с указанным именем."
  overload: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData(System.String,System.Object)
  id: LogicalSetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: LogicalSetData(String,Object)
  nameWithType: CallContext.LogicalSetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Сохраняет заданный объект в логическом контексте вызова и связывает его с указанным именем."
  syntax:
    content: public static void LogicalSetData (string name, object data);
    parameters:
    - id: name
      type: System.String
      description: "Имя, с которым необходимо связать новый элемент в логическом контексте вызова."
    - id: data
      type: System.Object
      description: "Объект, сохраняемый в логическом контексте вызова, этот объект должен быть сериализуемым."
  overload: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: SetData(String,Object)
  nameWithType: CallContext.SetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.CallContext.SetData(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Сохраняет заданный объект и связывает его с указанным именем."
  remarks: ''
  example:
  - "The following code example demonstrates the use of the SetData method to transmit [Principal and Identity Objects](~/add/includes/ajax-current-ext-md.md) to a remote location for identification. To view the code for the `LogicalCallContextData` class used in this sample, see the example for the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface. To view the code for the `HelloServiceClass` class used in this sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method. To view the code for the server class used in this sample, see the example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.  \n  \n [!code-cpp[CallContext#1](~/add/codesnippet/cpp/79526df4-afd7-4495-8bab-_1.cpp)]\n [!code-cs[CallContext#1](~/add/codesnippet/csharp/79526df4-afd7-4495-8bab-_1.cs)]\n [!code-vb[CallContext#1](~/add/codesnippet/visualbasic/79526df4-afd7-4495-8bab-_1.vb)]"
  syntax:
    content: public static void SetData (string name, object data);
    parameters:
    - id: name
      type: System.String
      description: "Имя, с которым необходимо связать новый элемент в контексте вызова."
    - id: data
      type: System.Object
      description: "Объект, сохраняемый в контексте вызова."
  overload: System.Runtime.Remoting.Messaging.CallContext.SetData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
- uid: System.Runtime.Remoting.Messaging.CallContext.SetHeaders(System.Runtime.Remoting.Messaging.Header[])
  id: SetHeaders(System.Runtime.Remoting.Messaging.Header[])
  parent: System.Runtime.Remoting.Messaging.CallContext
  langs:
  - csharp
  name: SetHeaders(Header[])
  nameWithType: CallContext.SetHeaders(Header[])
  fullName: System.Runtime.Remoting.Messaging.CallContext.SetHeaders(Header[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Messaging
  summary: "Задает заголовки, которые отправляются вместе с вызовом метода."
  remarks: ''
  example:
  - "The following example code shows the ease with which a header is put on the logical thread.  \n  \n [!code-cpp[CallContext_GetHeaders#3](~/add/codesnippet/cpp/8c77ae3c-b36c-42f8-9ac6-_1.cpp)]\n [!code-cs[CallContext_GetHeaders#3](~/add/codesnippet/csharp/8c77ae3c-b36c-42f8-9ac6-_1.cs)]\n [!code-vb[CallContext_GetHeaders#3](~/add/codesnippet/visualbasic/8c77ae3c-b36c-42f8-9ac6-_1.vb)]"
  syntax:
    content: public static void SetHeaders (System.Runtime.Remoting.Messaging.Header[] headers);
    parameters:
    - id: headers
      type: System.Runtime.Remoting.Messaging.Header[]
      description: "Объект <xref href=&quot;System.Runtime.Remoting.Messaging.Header&quot;> </xref> массива заголовков, которые необходимо отправить вместе с вызова метода."
  overload: System.Runtime.Remoting.Messaging.CallContext.SetHeaders*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Непосредственный вызывающий объект не имеет разрешения инфраструктуры."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: FreeNamedDataSlot(String)
  nameWithType: CallContext.FreeNamedDataSlot(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Remoting.Messaging.CallContext.GetData(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: GetData(String)
  nameWithType: CallContext.GetData(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.GetData(String)
- uid: System.Runtime.Remoting.Messaging.CallContext.GetHeaders
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: GetHeaders()
  nameWithType: CallContext.GetHeaders()
  fullName: System.Runtime.Remoting.Messaging.CallContext.GetHeaders()
- uid: System.Runtime.Remoting.Messaging.Header[]
  parent: System.Runtime.Remoting.Messaging
  isExternal: false
  name: Header
  nameWithType: Header
  fullName: System.Runtime.Remoting.Messaging.Header[]
  spec.csharp:
  - uid: System.Runtime.Remoting.Messaging.Header
    name: Header
    nameWithType: Header
    fullName: Header[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Remoting.Messaging.CallContext.HostContext
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: HostContext
  nameWithType: CallContext.HostContext
  fullName: System.Runtime.Remoting.Messaging.CallContext.HostContext
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(System.String)
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: LogicalGetData(String)
  nameWithType: CallContext.LogicalGetData(String)
  fullName: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData(String)
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: LogicalSetData(String,Object)
  nameWithType: CallContext.LogicalSetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData(String,Object)
- uid: System.Runtime.Remoting.Messaging.CallContext.SetData(System.String,System.Object)
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: SetData(String,Object)
  nameWithType: CallContext.SetData(String,Object)
  fullName: System.Runtime.Remoting.Messaging.CallContext.SetData(String,Object)
- uid: System.Runtime.Remoting.Messaging.CallContext.SetHeaders(System.Runtime.Remoting.Messaging.Header[])
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: SetHeaders(Header[])
  nameWithType: CallContext.SetHeaders(Header[])
  fullName: System.Runtime.Remoting.Messaging.CallContext.SetHeaders(Header[])
- uid: System.Runtime.Remoting.Messaging.CallContext.FreeNamedDataSlot*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: FreeNamedDataSlot
  nameWithType: CallContext.FreeNamedDataSlot
- uid: System.Runtime.Remoting.Messaging.CallContext.GetData*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: GetData
  nameWithType: CallContext.GetData
- uid: System.Runtime.Remoting.Messaging.CallContext.GetHeaders*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: GetHeaders
  nameWithType: CallContext.GetHeaders
- uid: System.Runtime.Remoting.Messaging.CallContext.HostContext*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: HostContext
  nameWithType: CallContext.HostContext
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalGetData*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: LogicalGetData
  nameWithType: CallContext.LogicalGetData
- uid: System.Runtime.Remoting.Messaging.CallContext.LogicalSetData*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: LogicalSetData
  nameWithType: CallContext.LogicalSetData
- uid: System.Runtime.Remoting.Messaging.CallContext.SetData*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: SetData
  nameWithType: CallContext.SetData
- uid: System.Runtime.Remoting.Messaging.CallContext.SetHeaders*
  parent: System.Runtime.Remoting.Messaging.CallContext
  isExternal: false
  name: SetHeaders
  nameWithType: CallContext.SetHeaders
